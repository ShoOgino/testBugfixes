{"path":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), StringField.TYPE_STORED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", StringField.TYPE_STORED));\n      doc.add(newField(\"date\", cal.getTime().toString(), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), StringField.TYPE_STORED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", StringField.TYPE_STORED));\n      doc.add(newField(\"date\", cal.getTime().toString(), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), StringField.TYPE_STORED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", StringField.TYPE_STORED));\n      doc.add(newField(\"date\", cal.getTime().toString(), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec57145e34263e28da6b82568e35471f7d67df69","date":1341768476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.shutdown();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.shutdown();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f78e5763f288fef7c1cc1ebd2530195ce46b5b28","date":1412245226,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"key\", \"\" + (i + 1), Field.Store.YES));\n      doc.add(newStringField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES));\n      doc.add(newStringField(\"date\", cal.getTime().toString(), Field.Store.YES));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ec57145e34263e28da6b82568e35471f7d67df69":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["d0ef034a4f10871667ae75181537775ddcf8ade4","f78e5763f288fef7c1cc1ebd2530195ce46b5b28"],"f78e5763f288fef7c1cc1ebd2530195ce46b5b28":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["04f07771a2a7dd3a395700665ed839c3dae2def2","ec57145e34263e28da6b82568e35471f7d67df69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f78e5763f288fef7c1cc1ebd2530195ce46b5b28"],"46d8ada1fff8d18cb197c38c7983225162599948":["04f07771a2a7dd3a395700665ed839c3dae2def2","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ec57145e34263e28da6b82568e35471f7d67df69","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d9a47902d6207303f5ed3e7aaca62ca33433af66","f78e5763f288fef7c1cc1ebd2530195ce46b5b28"],"ec57145e34263e28da6b82568e35471f7d67df69":["2acf500f78aa12b92e371fd89c719291986b6b90"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f78e5763f288fef7c1cc1ebd2530195ce46b5b28":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}