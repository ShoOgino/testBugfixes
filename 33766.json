{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testMultiValuedField().mjava","commits":[{"id":"8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56","date":1416564641,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testMultiValuedField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiValuedField() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    List<Suggestion> suggestions = indexMultiValuedDocuments(atLeast(1000), writer);\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME, CONTEXT_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    Iterator<Suggestion> suggestionsIter = suggestions.iterator();\n    while((f = inputIterator.next())!=null) {\n      Suggestion nextSuggestion = suggestionsIter.next();\n      assertTrue(f.equals(nextSuggestion.term));\n      long weight = nextSuggestion.weight;\n      assertEquals(inputIterator.weight(), (weight != -1) ? weight : 0);\n      assertTrue(inputIterator.payload().equals(nextSuggestion.payload));\n      assertTrue(inputIterator.contexts().equals(nextSuggestion.contexts));\n    }\n    assertFalse(suggestionsIter.hasNext());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testMultiValuedField().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testMultiValuedField().mjava","sourceNew":"  @Test\n  public void testMultiValuedField() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    List<Suggestion> suggestions = indexMultiValuedDocuments(atLeast(1000), writer);\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME, CONTEXT_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    Iterator<Suggestion> suggestionsIter = suggestions.iterator();\n    while((f = inputIterator.next())!=null) {\n      Suggestion nextSuggestion = suggestionsIter.next();\n      assertTrue(f.equals(nextSuggestion.term));\n      long weight = nextSuggestion.weight;\n      assertEquals(inputIterator.weight(), (weight != -1) ? weight : 0);\n      assertTrue(inputIterator.payload().equals(nextSuggestion.payload));\n      assertTrue(inputIterator.contexts().equals(nextSuggestion.contexts));\n    }\n    assertFalse(suggestionsIter.hasNext());\n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValuedField() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    List<Suggestion> suggestions = indexMultiValuedDocuments(atLeast(1000), writer);\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME, CONTEXT_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    Iterator<Suggestion> suggestionsIter = suggestions.iterator();\n    while((f = inputIterator.next())!=null) {\n      Suggestion nextSuggestion = suggestionsIter.next();\n      assertTrue(f.equals(nextSuggestion.term));\n      long weight = nextSuggestion.weight;\n      assertEquals(inputIterator.weight(), (weight != -1) ? weight : 0);\n      assertTrue(inputIterator.payload().equals(nextSuggestion.payload));\n      assertTrue(inputIterator.contexts().equals(nextSuggestion.contexts));\n    }\n    assertFalse(suggestionsIter.hasNext());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testMultiValuedField().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testMultiValuedField().mjava","sourceNew":"  @Test\n  public void testMultiValuedField() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    List<Suggestion> suggestions = indexMultiValuedDocuments(atLeast(1000), writer);\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME, CONTEXT_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    Iterator<Suggestion> suggestionsIter = suggestions.iterator();\n    while((f = inputIterator.next())!=null) {\n      Suggestion nextSuggestion = suggestionsIter.next();\n      assertTrue(f.equals(nextSuggestion.term));\n      long weight = nextSuggestion.weight;\n      assertEquals(inputIterator.weight(), (weight != -1) ? weight : 0);\n      assertTrue(inputIterator.payload().equals(nextSuggestion.payload));\n      assertTrue(inputIterator.contexts().equals(nextSuggestion.contexts));\n    }\n    assertFalse(suggestionsIter.hasNext());\n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValuedField() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    List<Suggestion> suggestions = indexMultiValuedDocuments(atLeast(1000), writer);\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME, CONTEXT_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    Iterator<Suggestion> suggestionsIter = suggestions.iterator();\n    while((f = inputIterator.next())!=null) {\n      Suggestion nextSuggestion = suggestionsIter.next();\n      assertTrue(f.equals(nextSuggestion.term));\n      long weight = nextSuggestion.weight;\n      assertEquals(inputIterator.weight(), (weight != -1) ? weight : 0);\n      assertTrue(inputIterator.payload().equals(nextSuggestion.payload));\n      assertTrue(inputIterator.contexts().equals(nextSuggestion.contexts));\n    }\n    assertFalse(suggestionsIter.hasNext());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee590759ca28a3f2599ba7608ea0a50be4f540f6","date":1432142966,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testMultiValuedField().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testMultiValuedField().mjava","sourceNew":"  @Test\n  public void testMultiValuedField() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    List<Suggestion> suggestions = indexMultiValuedDocuments(atLeast(1000), writer);\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME, CONTEXT_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    Iterator<Suggestion> suggestionsIter = suggestions.iterator();\n    while((f = inputIterator.next())!=null) {\n      Suggestion nextSuggestion = suggestionsIter.next();\n      assertTrue(f.equals(nextSuggestion.term));\n      long weight = nextSuggestion.weight;\n      assertEquals(inputIterator.weight(), (weight != -1) ? weight : 0);\n      assertEquals(inputIterator.payload(), nextSuggestion.payload);\n      assertTrue(inputIterator.contexts().equals(nextSuggestion.contexts));\n    }\n    assertFalse(suggestionsIter.hasNext());\n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValuedField() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(random(), analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    List<Suggestion> suggestions = indexMultiValuedDocuments(atLeast(1000), writer);\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME, CONTEXT_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    Iterator<Suggestion> suggestionsIter = suggestions.iterator();\n    while((f = inputIterator.next())!=null) {\n      Suggestion nextSuggestion = suggestionsIter.next();\n      assertTrue(f.equals(nextSuggestion.term));\n      long weight = nextSuggestion.weight;\n      assertEquals(inputIterator.weight(), (weight != -1) ? weight : 0);\n      assertTrue(inputIterator.payload().equals(nextSuggestion.payload));\n      assertTrue(inputIterator.contexts().equals(nextSuggestion.contexts));\n    }\n    assertFalse(suggestionsIter.hasNext());\n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","bugFix":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56","a56958d7f71a28824f20031ffbb2e13502a0274e"],"8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee590759ca28a3f2599ba7608ea0a50be4f540f6":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56"],"ee590759ca28a3f2599ba7608ea0a50be4f540f6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}