{"path":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","commits":[{"id":"50f05d6b69cfaabd51b5d26cba4e3122f51fff83","date":1478603228,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Object m = Utils.fromJSON(baos.toByteArray());\n    checkValues((Map) m);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87bed47fd547f864e7fe055b2a3df19fa4b151dc","date":1478615788,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","sourceNew":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    writeData(new JavaBinCodec(baos= new ByteArrayOutputStream(), null));\n    m = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    checkValues(m);\n  }\n\n","sourceOld":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Object m = Utils.fromJSON(baos.toByteArray());\n    checkValues((Map) m);\n  }\n\n","bugFix":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    writeData(new JavaBinCodec(baos= new ByteArrayOutputStream(), null));\n    m = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    checkValues(m);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","sourceNew":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      try (JavaBinCodec jbcUn = new JavaBinCodec()) {\n        m = (Map) jbcUn.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n      }\n    }\n    checkValues(m);\n  }\n\n","sourceOld":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    writeData(new JavaBinCodec(baos= new ByteArrayOutputStream(), null));\n    m = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    checkValues(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","sourceNew":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      try (JavaBinCodec jbcUn = new JavaBinCodec()) {\n        m = (Map) jbcUn.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n      }\n    }\n    checkValues(m);\n  }\n\n","sourceOld":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    writeData(new JavaBinCodec(baos= new ByteArrayOutputStream(), null));\n    m = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    checkValues(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","sourceNew":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      try (JavaBinCodec jbcUn = new JavaBinCodec()) {\n        m = (Map) jbcUn.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n      }\n    }\n    checkValues(m);\n  }\n\n","sourceOld":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    writeData(new JavaBinCodec(baos= new ByteArrayOutputStream(), null));\n    m = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    checkValues(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","sourceNew":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, StandardCharsets.UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), StandardCharsets.UTF_8));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      try (JavaBinCodec jbcUn = new JavaBinCodec()) {\n        m = (Map) jbcUn.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n      }\n    }\n    checkValues(m);\n  }\n\n","sourceOld":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), \"UTF-8\"));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      try (JavaBinCodec jbcUn = new JavaBinCodec()) {\n        m = (Map) jbcUn.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n      }\n    }\n    checkValues(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","sourceNew":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, StandardCharsets.UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    if (log.isInfoEnabled()) {\n      log.info(\"{}\", new String(baos.toByteArray(), StandardCharsets.UTF_8));\n    }\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      try (JavaBinCodec jbcUn = new JavaBinCodec()) {\n        m = (Map) jbcUn.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n      }\n    }\n    checkValues(m);\n  }\n\n","sourceOld":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, StandardCharsets.UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    log.info(new String(baos.toByteArray(), StandardCharsets.UTF_8));\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      try (JavaBinCodec jbcUn = new JavaBinCodec()) {\n        m = (Map) jbcUn.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n      }\n    }\n    checkValues(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","sourceNew":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, StandardCharsets.UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    if (log.isInfoEnabled()) {\n      log.info(\"{}\", new String(baos.toByteArray(), StandardCharsets.UTF_8));\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      try (JavaBinCodec jbcUn = new JavaBinCodec()) {\n        m = (Map) jbcUn.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n      }\n    }\n    checkValues(m);\n  }\n\n","sourceOld":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, StandardCharsets.UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    if (log.isInfoEnabled()) {\n      log.info(\"{}\", new String(baos.toByteArray(), StandardCharsets.UTF_8));\n    }\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      try (JavaBinCodec jbcUn = new JavaBinCodec()) {\n        m = (Map) jbcUn.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n      }\n    }\n    checkValues(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25c90f5a77c5475be62daf4406cfaa745081b95e","date":1594603274,"type":3,"author":"S N Munendra","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPushWriter#testStandardResponse().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    Map<Object, Object> m;\n    try (OutputStreamWriter osw = new OutputStreamWriter(baos, StandardCharsets.UTF_8)) {\n      JSONWriter pw = new JSONWriter(osw,\n          new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n      writeData(null, pw);\n      osw.flush();\n      if (log.isInfoEnabled()) {\n        log.info(\"{}\", new String(baos.toByteArray(), StandardCharsets.UTF_8));\n      }\n      m = (Map<Object, Object>) Utils.fromJSON(baos.toByteArray());\n      checkValues(m);\n    }\n\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      m = (Map<Object, Object>) Utils.fromJavabin(baos.toByteArray());\n    }\n    checkValues(m);\n  }\n\n","sourceOld":"  public void testStandardResponse() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStreamWriter osw = new OutputStreamWriter(baos, StandardCharsets.UTF_8);\n    PushWriter pw = new JSONWriter(osw,\n        new LocalSolrQueryRequest(null, new ModifiableSolrParams()), new SolrQueryResponse());\n    writeData(pw);\n    osw.flush();\n    if (log.isInfoEnabled()) {\n      log.info(\"{}\", new String(baos.toByteArray(), StandardCharsets.UTF_8));\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) Utils.fromJSON(baos.toByteArray());\n    checkValues(m);\n    try (JavaBinCodec jbc = new JavaBinCodec(baos= new ByteArrayOutputStream(), null)) {\n      writeData(jbc);\n      try (JavaBinCodec jbcUn = new JavaBinCodec()) {\n        m = (Map) jbcUn.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n      }\n    }\n    checkValues(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25c90f5a77c5475be62daf4406cfaa745081b95e":["e98520789adb1d5ad05afb4956eca0944a929688"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"87bed47fd547f864e7fe055b2a3df19fa4b151dc":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"28288370235ed02234a64753cdbf0c6ec096304a":["87bed47fd547f864e7fe055b2a3df19fa4b151dc","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["87bed47fd547f864e7fe055b2a3df19fa4b151dc","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25c90f5a77c5475be62daf4406cfaa745081b95e"],"e98520789adb1d5ad05afb4956eca0944a929688":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"25c90f5a77c5475be62daf4406cfaa745081b95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e98520789adb1d5ad05afb4956eca0944a929688"],"87bed47fd547f864e7fe055b2a3df19fa4b151dc":["97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","199dfa410f1fdbfd3294106b04096cce5ed34b21","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"e98520789adb1d5ad05afb4956eca0944a929688":["25c90f5a77c5475be62daf4406cfaa745081b95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}