{"path":"lucene/core/src/test/org/apache/lucene/codecs/blockpacked/TestForUtil#testEncodeDecode().mjava","commits":[{"id":"cf88b0fdab72e7a3389fdd9a68ae252142c41511","date":1344435322,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/blockpacked/TestForUtil#testEncodeDecode().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final long[] values = new long[iterations * BLOCK_SIZE + ForUtil.MIN_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, iterations * BLOCK_SIZE, values.length),\n            new byte[MIN_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final long[] restored = new long[MIN_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MIN_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, iterations * BLOCK_SIZE, (iterations + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94","date":1344442349,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/blockpacked/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/blockpacked/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE + ForUtil.MIN_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, iterations * BLOCK_SIZE, values.length),\n            new byte[MIN_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MIN_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MIN_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, iterations * BLOCK_SIZE, (iterations + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final long[] values = new long[iterations * BLOCK_SIZE + ForUtil.MIN_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, iterations * BLOCK_SIZE, values.length),\n            new byte[MIN_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final long[] restored = new long[MIN_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MIN_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, iterations * BLOCK_SIZE, (iterations + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b72290b0c4804a359d624e59babba1a5c66b48b","date":1344446809,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/blockpacked/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/blockpacked/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MIN_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MIN_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MIN_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MIN_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE + ForUtil.MIN_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, iterations * BLOCK_SIZE, values.length),\n            new byte[MIN_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MIN_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MIN_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, iterations * BLOCK_SIZE, (iterations + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee0d2b90b9b7c96860f9c096edae6ed8fad95388","date":1344516744,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/blockpacked/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/blockpacked/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MIN_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MIN_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MIN_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MIN_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/block/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/blockpacked/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["5b72290b0c4804a359d624e59babba1a5c66b48b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b72290b0c4804a359d624e59babba1a5c66b48b":["cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94"],"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"]},"commit2Childs":{"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf88b0fdab72e7a3389fdd9a68ae252142c41511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b72290b0c4804a359d624e59babba1a5c66b48b":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"],"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94":["5b72290b0c4804a359d624e59babba1a5c66b48b"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}