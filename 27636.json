{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\n    \"Band\"), 10);\n    bandDepth.setDepth(2);\n    facetSearchParams.addFacetRequest(bandDepth);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Author\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\n    \"Band\"), 10);\n    bandDepth.setDepth(2);\n    facetSearchParams.addFacetRequest(bandDepth);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Author\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"551a8665af55f08d0001b0d58ed4bd81a8b8258f","date":1354706854,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetSearchParams.addFacetRequest(bandDepth);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\n    \"Band\"), 10);\n    bandDepth.setDepth(2);\n    facetSearchParams.addFacetRequest(bandDepth);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Author\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetSearchParams.addFacetRequest(bandDepth);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\n    \"Band\"), 10);\n    bandDepth.setDepth(2);\n    facetSearchParams.addFacetRequest(bandDepth);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Author\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(\n        new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n    \n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetSearchParams.addFacetRequest(bandDepth);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n    \n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10,\n        true);\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetSearchParams.addFacetRequest(bandDepth);\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetSearchParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n    \n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams,\n                                        TaxonomyReader tr, IndexReader ir,\n                                        IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n    \n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams, facetRequests);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new FacetLabel(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new FacetLabel(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new FacetLabel(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new FacetLabel(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams, facetRequests);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams, facetRequests);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":null,"sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new FacetLabel(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new FacetLabel(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new FacetLabel(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new FacetLabel(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams, facetRequests);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher).mjava","sourceNew":null,"sourceOld":"  private FacetsCollector performSearch(FacetIndexingParams iParams, TaxonomyReader tr, IndexReader ir, \n      IndexSearcher searcher) throws IOException {\n    // step 1: collect matching documents into a collector\n    Query q = new MatchAllDocsQuery();\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\"), 10));\n    CountFacetRequest bandDepth = new CountFacetRequest(new CategoryPath(\"Band\"), 10);\n    bandDepth.setDepth(2);\n    // makes it easier to check the results in the test.\n    bandDepth.setResultMode(ResultMode.GLOBAL_FLAT);\n    facetRequests.add(bandDepth);\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n    facetRequests.add(new CountFacetRequest(new CategoryPath(\"Band\", \"Rock & Pop\"), 10));\n\n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams, facetRequests);\n\n    // perform documents search and facets accumulation\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, ir, tr);\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n    return facetsCollector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"551a8665af55f08d0001b0d58ed4bd81a8b8258f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","551a8665af55f08d0001b0d58ed4bd81a8b8258f"],"07155cdd910937cdf6877e48884d5782845c8b8b":["c4015cd39dff8d4dec562d909f9766debac53aa6","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["551a8665af55f08d0001b0d58ed4bd81a8b8258f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["571abba77e55fea386a38c0024f72ffa5b37a9ad","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"551a8665af55f08d0001b0d58ed4bd81a8b8258f":["407687e67faf6e1f02a211ca078d8e3eed631027","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["07155cdd910937cdf6877e48884d5782845c8b8b"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["c190847801a50f4dd20fd639bdc29b54ea3b288b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["551a8665af55f08d0001b0d58ed4bd81a8b8258f","407687e67faf6e1f02a211ca078d8e3eed631027"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}