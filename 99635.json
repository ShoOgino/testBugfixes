{"path":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    final DocIdSet docIdSet = filt.getDocIdSet(reader.getContext(), reader.getLiveDocs());\n    int actual = 0;\n    if (docIdSet != null) {\n      DocIdSetIterator disi = docIdSet.iterator();\n      while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        actual++;\n      }\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"099c774ddd27f4ad437ca5df14d153bab0a3affe","date":1424527689,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":null,"sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    final DocIdSet docIdSet = filt.getDocIdSet(reader.getContext(), reader.getLiveDocs());\n    int actual = 0;\n    if (docIdSet != null) {\n      DocIdSetIterator disi = docIdSet.iterator();\n      while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        actual++;\n      }\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"099c774ddd27f4ad437ca5df14d153bab0a3affe":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["b89678825b68eccaf09e6ab71675fc0b0af1e099","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["099c774ddd27f4ad437ca5df14d153bab0a3affe"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["099c774ddd27f4ad437ca5df14d153bab0a3affe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"099c774ddd27f4ad437ca5df14d153bab0a3affe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["dc06632ede7e48a5ddc6917badec25c8336feedc","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}