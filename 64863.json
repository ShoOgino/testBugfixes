{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public TermRangeQuery build(QueryNode queryNode) throws QueryNodeException {\n    RangeQueryNode rangeNode = (RangeQueryNode) queryNode;\n    ParametricQueryNode upper = rangeNode.getUpperBound();\n    ParametricQueryNode lower = rangeNode.getLowerBound();\n\n    boolean lowerInclusive = false;\n    boolean upperInclusive = false;\n\n    if (upper.getOperator() == CompareOperator.LE) {\n      upperInclusive = true;\n    }\n\n    if (lower.getOperator() == CompareOperator.GE) {\n      lowerInclusive = true;\n    }\n\n    String field = rangeNode.getField().toString();\n\n    TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, lower.getTextAsString(), upper.getTextAsString(), lowerInclusive, upperInclusive);\n    \n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod)queryNode.getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      rangeQuery.setRewriteMethod(method);\n    }\n\n    return rangeQuery;\n\n  }\n\n","sourceOld":"  public TermRangeQuery build(QueryNode queryNode) throws QueryNodeException {\n    RangeQueryNode rangeNode = (RangeQueryNode) queryNode;\n    ParametricQueryNode upper = rangeNode.getUpperBound();\n    ParametricQueryNode lower = rangeNode.getLowerBound();\n\n    boolean lowerInclusive = false;\n    boolean upperInclusive = false;\n\n    if (upper.getOperator() == CompareOperator.LE) {\n      upperInclusive = true;\n    }\n\n    if (lower.getOperator() == CompareOperator.GE) {\n      lowerInclusive = true;\n    }\n\n    String field = rangeNode.getField().toString();\n\n    TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, lower.getTextAsString(), upper.getTextAsString(), lowerInclusive, upperInclusive);\n    \n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod)queryNode.getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      rangeQuery.setRewriteMethod(method);\n    }\n\n    return rangeQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25","date":1315500470,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":null,"sourceOld":"  public TermRangeQuery build(QueryNode queryNode) throws QueryNodeException {\n    RangeQueryNode rangeNode = (RangeQueryNode) queryNode;\n    ParametricQueryNode upper = rangeNode.getUpperBound();\n    ParametricQueryNode lower = rangeNode.getLowerBound();\n\n    boolean lowerInclusive = false;\n    boolean upperInclusive = false;\n\n    if (upper.getOperator() == CompareOperator.LE) {\n      upperInclusive = true;\n    }\n\n    if (lower.getOperator() == CompareOperator.GE) {\n      lowerInclusive = true;\n    }\n\n    String field = rangeNode.getField().toString();\n\n    TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, lower.getTextAsString(), upper.getTextAsString(), lowerInclusive, upperInclusive);\n    \n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod)queryNode.getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      rangeQuery.setRewriteMethod(method);\n    }\n\n    return rangeQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}