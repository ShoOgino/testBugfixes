{"path":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTripNIO().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTripNIO().mjava","pathOld":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTripNIO().mjava","sourceNew":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testRandomBinaryRoundTripNIO() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDumpNIO(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDumpNIO(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDumpNIO(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","sourceOld":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testRandomBinaryRoundTripNIO() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDumpNIO(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDumpNIO(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDumpNIO(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTripNIO().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTripNIO().mjava","sourceNew":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testRandomBinaryRoundTripNIO() {\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDumpNIO(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDumpNIO(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDumpNIO(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","sourceOld":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testRandomBinaryRoundTripNIO() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDumpNIO(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDumpNIO(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDumpNIO(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTripNIO().mjava","sourceNew":null,"sourceOld":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testRandomBinaryRoundTripNIO() {\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDumpNIO(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDumpNIO(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDumpNIO(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTripNIO().mjava","sourceNew":null,"sourceOld":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testRandomBinaryRoundTripNIO() {\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDumpNIO(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDumpNIO(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDumpNIO(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTripNIO().mjava","sourceNew":null,"sourceOld":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testRandomBinaryRoundTripNIO() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDumpNIO(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDumpNIO(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDumpNIO(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f653cfcf159baeaafe5d01682a911e95bba4012":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}