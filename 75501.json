{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToPoly(double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToPoly(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToPoly(double,double,double).mjava","sourceNew":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","sourceOld":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62cc423073d23f01208c6cf85844dedd80011121","date":1454731549,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToPoly(double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToPoly(double,double,double).mjava","sourceNew":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon          longitudinal center of circle (in degrees)\n   * @param lat          latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides - 1;\n    for (int i = 0; i < sidesLen; ++i) {\n      angle = (i * 360 / sides);\n      pt = pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","sourceOld":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToPoly(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToPoly(double,double,double).mjava","sourceNew":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon          longitudinal center of circle (in degrees)\n   * @param lat          latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides - 1;\n    for (int i = 0; i < sidesLen; ++i) {\n      angle = (i * 360 / sides);\n      pt = pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","sourceOld":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToPoly(double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToPoly(double,double,double).mjava","sourceNew":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon          longitudinal center of circle (in degrees)\n   * @param lat          latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides - 1;\n    for (int i = 0; i < sidesLen; ++i) {\n      angle = (i * 360 / sides);\n      pt = pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","sourceOld":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon longitudinal center of circle (in degrees)\n   * @param lat latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides-1;\n    for (int i=0; i<sidesLen; ++i) {\n      angle = (i*360/sides);\n      pt = pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToPoly(double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts a given circle (defined as a point/radius) to an approximated line-segment polygon\n   *\n   * @param lon          longitudinal center of circle (in degrees)\n   * @param lat          latitudinal center of circle (in degrees)\n   * @param radiusMeters distance radius of circle (in meters)\n   * @return a list of lon/lat points representing the circle\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static ArrayList<double[]> circleToPoly(final double lon, final double lat, final double radiusMeters) {\n    double angle;\n    // a little under-sampling (to limit the number of polygonal points): using archimedes estimation of pi\n    final int sides = 25;\n    ArrayList<double[]> geometry = new ArrayList();\n    double[] lons = new double[sides];\n    double[] lats = new double[sides];\n\n    double[] pt = new double[2];\n    final int sidesLen = sides - 1;\n    for (int i = 0; i < sidesLen; ++i) {\n      angle = (i * 360 / sides);\n      pt = pointFromLonLatBearingGreatCircle(lon, lat, angle, radiusMeters, pt);\n      lons[i] = pt[0];\n      lats[i] = pt[1];\n    }\n    // close the poly\n    lons[sidesLen] = lons[0];\n    lats[sidesLen] = lats[0];\n    geometry.add(lons);\n    geometry.add(lats);\n\n    return geometry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["5a207d19eac354d649c3f0e2cce070017c78125e"],"5a207d19eac354d649c3f0e2cce070017c78125e":["937923083e4d137932336fc80f3d78758ff698a6","62cc423073d23f01208c6cf85844dedd80011121"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","62cc423073d23f01208c6cf85844dedd80011121"],"62cc423073d23f01208c6cf85844dedd80011121":["937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec996bf2daff09d61a876319e8fae4aebbea58e3"]},"commit2Childs":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a207d19eac354d649c3f0e2cce070017c78125e":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"62cc423073d23f01208c6cf85844dedd80011121":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"937923083e4d137932336fc80f3d78758ff698a6":["5a207d19eac354d649c3f0e2cce070017c78125e","62cc423073d23f01208c6cf85844dedd80011121"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}