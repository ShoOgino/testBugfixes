{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(SegmentWriteState,int,PostingsWriterBase).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(SegmentWriteState,int,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(SegmentWriteState state, int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n    fields = new ArrayList<FieldMetaData>();\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n    this.segmentState = state;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(SegmentWriteState,int,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(SegmentWriteState state, int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n    fields = new ArrayList<FieldMetaData>();\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n    this.segmentState = state;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(SegmentWriteState,int,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(SegmentWriteState,int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(SegmentWriteState state, int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n    fields = new ArrayList<FieldMetaData>();\n    this.maxPositions = maxPositions;\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n    this.segmentState = state;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(SegmentWriteState state, int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n    fields = new ArrayList<FieldMetaData>();\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n    this.segmentState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(SegmentWriteState,int,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(SegmentWriteState,int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(SegmentWriteState state, int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n    fields = new ArrayList<>();\n    this.maxPositions = maxPositions;\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n    this.segmentState = state;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(SegmentWriteState state, int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n    fields = new ArrayList<FieldMetaData>();\n    this.maxPositions = maxPositions;\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n    this.segmentState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(SegmentWriteState,int,PostingsWriterBase).mjava","sourceNew":null,"sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(SegmentWriteState state, int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n    fields = new ArrayList<>();\n    this.maxPositions = maxPositions;\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n    this.segmentState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbaae1c00d39df2c872bbe043af26d02d3818313"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}