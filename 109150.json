{"path":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","commits":[{"id":"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0","date":1383246815,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init( NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR, \n                              \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR, \n                              \"'versionField' must be configured as a <str>\");\n    }\n    versionField = tmp.toString();\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamName = tmp.toString();\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = ((Boolean)tmp).booleanValue();\n    }\n    super.init(args);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8973f28b29873ff0d7a016e562c9036ae649a9","date":1428098193,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init( NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR, \n                              \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR, \n                              \"'versionField' must be configured as a <str>\");\n    }\n    versionField = tmp.toString();\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamName = tmp.toString();\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = ((Boolean)tmp).booleanValue();\n    }\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init( NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR, \n                              \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR, \n                              \"'versionField' must be configured as a <str>\");\n    }\n    versionField = tmp.toString();\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamName = tmp.toString();\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = ((Boolean)tmp).booleanValue();\n    }\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init( NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured as a <str>\");\n    }\n    versionFields = StrUtils.splitSmart((String)tmp, ',');\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR,\n            \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamNames = StrUtils.splitSmart((String)tmp, ',');\n    }\n\n    if (deleteVersionParamNames.size() > 0 && deleteVersionParamNames.size() != versionFields.size()) {\n      throw new SolrException(SERVER_ERROR, \"The number of 'deleteVersionParam' params \" +\n          \"must either be 0 or equal to the number of 'versionField' fields\");\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = (Boolean) tmp;\n    }\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init( NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR, \n                              \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR, \n                              \"'versionField' must be configured as a <str>\");\n    }\n    versionField = tmp.toString();\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamName = tmp.toString();\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = ((Boolean)tmp).booleanValue();\n    }\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0f4b03a7701ad6256c4b8946243ae1981931a28","date":1527108277,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init( NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured as a <str>\");\n    }\n    versionFields = StrUtils.splitSmart((String)tmp, ',');\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR,\n            \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamNames = StrUtils.splitSmart((String)tmp, ',');\n    }\n\n    if (deleteVersionParamNames.size() > 0 && deleteVersionParamNames.size() != versionFields.size()) {\n      throw new SolrException(SERVER_ERROR, \"The number of 'deleteVersionParam' params \" +\n          \"must either be 0 or equal to the number of 'versionField' fields\");\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = (Boolean) tmp;\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"supportMissingVersionOnOldDocs\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR,\n                \"'supportMissingVersionOnOldDocs' must be configured as a <bool>\");\n      }\n      supportMissingVersionOnOldDocs = ((Boolean)tmp).booleanValue();\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init( NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured as a <str>\");\n    }\n    versionFields = StrUtils.splitSmart((String)tmp, ',');\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR,\n            \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamNames = StrUtils.splitSmart((String)tmp, ',');\n    }\n\n    if (deleteVersionParamNames.size() > 0 && deleteVersionParamNames.size() != versionFields.size()) {\n      throw new SolrException(SERVER_ERROR, \"The number of 'deleteVersionParam' params \" +\n          \"must either be 0 or equal to the number of 'versionField' fields\");\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = (Boolean) tmp;\n    }\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667eea18b7ca87af38d05d81d479f943a717a6b1","date":1548452298,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init( NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured as a <str>\");\n    }\n    versionFields = StrUtils.splitSmart((String)tmp, ',');\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR,\n            \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamNames = StrUtils.splitSmart((String)tmp, ',');\n    }\n\n    if (deleteVersionParamNames.size() > 0 && deleteVersionParamNames.size() != versionFields.size()) {\n      throw new SolrException(SERVER_ERROR, \"The number of 'deleteVersionParam' params \" +\n          \"must either be 0 or equal to the number of 'versionField' fields\");\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = (Boolean) tmp;\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"supportMissingVersionOnOldDocs\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR,\n                \"'supportMissingVersionOnOldDocs' must be configured as a <bool>\");\n      }\n      supportMissingVersionOnOldDocs = ((Boolean)tmp).booleanValue();\n    }\n    \n    tmp = args.remove(\"tombstoneConfig\");\n    if (null != tmp) {\n      if (! (tmp instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR,\n                \"'tombstoneConfig' must be configured as a <lst>.\");\n      }\n      tombstoneConfig = (NamedList<Object>)tmp;\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init( NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured as a <str>\");\n    }\n    versionFields = StrUtils.splitSmart((String)tmp, ',');\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR,\n            \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamNames = StrUtils.splitSmart((String)tmp, ',');\n    }\n\n    if (deleteVersionParamNames.size() > 0 && deleteVersionParamNames.size() != versionFields.size()) {\n      throw new SolrException(SERVER_ERROR, \"The number of 'deleteVersionParam' params \" +\n          \"must either be 0 or equal to the number of 'versionField' fields\");\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = (Boolean) tmp;\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"supportMissingVersionOnOldDocs\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR,\n                \"'supportMissingVersionOnOldDocs' must be configured as a <bool>\");\n      }\n      supportMissingVersionOnOldDocs = ((Boolean)tmp).booleanValue();\n    }\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init( @SuppressWarnings({\"rawtypes\"})NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured as a <str>\");\n    }\n    versionFields = StrUtils.splitSmart((String)tmp, ',');\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR,\n            \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamNames = StrUtils.splitSmart((String)tmp, ',');\n    }\n\n    if (deleteVersionParamNames.size() > 0 && deleteVersionParamNames.size() != versionFields.size()) {\n      throw new SolrException(SERVER_ERROR, \"The number of 'deleteVersionParam' params \" +\n          \"must either be 0 or equal to the number of 'versionField' fields\");\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = (Boolean) tmp;\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"supportMissingVersionOnOldDocs\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR,\n                \"'supportMissingVersionOnOldDocs' must be configured as a <bool>\");\n      }\n      supportMissingVersionOnOldDocs = ((Boolean)tmp).booleanValue();\n    }\n    \n    tmp = args.remove(\"tombstoneConfig\");\n    if (null != tmp) {\n      if (! (tmp instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR,\n                \"'tombstoneConfig' must be configured as a <lst>.\");\n      }\n      tombstoneConfig = (NamedList<Object>)tmp;\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init( NamedList args )  {\n\n    Object tmp = args.remove(\"versionField\");\n    if (null == tmp) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured\");\n    }\n    if (! (tmp instanceof String) ) {\n      throw new SolrException(SERVER_ERROR,\n          \"'versionField' must be configured as a <str>\");\n    }\n    versionFields = StrUtils.splitSmart((String)tmp, ',');\n\n    // optional\n    tmp = args.remove(\"deleteVersionParam\");\n    if (null != tmp) {\n      if (! (tmp instanceof String) ) {\n        throw new SolrException(SERVER_ERROR,\n            \"'deleteVersionParam' must be configured as a <str>\");\n      }\n      deleteVersionParamNames = StrUtils.splitSmart((String)tmp, ',');\n    }\n\n    if (deleteVersionParamNames.size() > 0 && deleteVersionParamNames.size() != versionFields.size()) {\n      throw new SolrException(SERVER_ERROR, \"The number of 'deleteVersionParam' params \" +\n          \"must either be 0 or equal to the number of 'versionField' fields\");\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"ignoreOldUpdates\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR, \n                                \"'ignoreOldUpdates' must be configured as a <bool>\");\n      }\n      ignoreOldUpdates = (Boolean) tmp;\n    }\n\n    // optional - defaults to false\n    tmp = args.remove(\"supportMissingVersionOnOldDocs\");\n    if (null != tmp) {\n      if (! (tmp instanceof Boolean) ) {\n        throw new SolrException(SERVER_ERROR,\n                \"'supportMissingVersionOnOldDocs' must be configured as a <bool>\");\n      }\n      supportMissingVersionOnOldDocs = ((Boolean)tmp).booleanValue();\n    }\n    \n    tmp = args.remove(\"tombstoneConfig\");\n    if (null != tmp) {\n      if (! (tmp instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR,\n                \"'tombstoneConfig' must be configured as a <lst>.\");\n      }\n      tombstoneConfig = (NamedList<Object>)tmp;\n    }\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["667eea18b7ca87af38d05d81d479f943a717a6b1"],"d0f4b03a7701ad6256c4b8946243ae1981931a28":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"667eea18b7ca87af38d05d81d479f943a717a6b1":["d0f4b03a7701ad6256c4b8946243ae1981931a28"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0f4b03a7701ad6256c4b8946243ae1981931a28":["667eea18b7ca87af38d05d81d479f943a717a6b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"667eea18b7ca87af38d05d81d479f943a717a6b1":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["d0f4b03a7701ad6256c4b8946243ae1981931a28"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}