{"path":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(String).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\n  private void createCollection(String name) throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Create the target collection\n      Map<String, List<Integer>> collectionInfos = new HashMap<>();\n      int maxShardsPerNode = 1;\n\n      StringBuilder sb = new StringBuilder();\n      for (String nodeName : collectionToNodeNames.get(name)) {\n        sb.append(nodeName);\n        sb.append(',');\n      }\n      sb.deleteCharAt(sb.length() - 1);\n\n      createCollection(collectionInfos, name, shardCount, replicationFactor, maxShardsPerNode, client, sb.toString());\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(String).mjava","sourceNew":"  /**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\n  private void createCollection(String name) throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Create the target collection\n      Map<String, List<Integer>> collectionInfos = new HashMap<>();\n      int maxShardsPerNode = 1;\n\n      StringBuilder sb = new StringBuilder();\n      for (String nodeName : collectionToNodeNames.get(name)) {\n        sb.append(nodeName);\n        sb.append(',');\n      }\n      sb.deleteCharAt(sb.length() - 1);\n\n      createCollection(collectionInfos, name, shardCount, replicationFactor, maxShardsPerNode, client, sb.toString());\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\n  private void createCollection(String name) throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Create the target collection\n      Map<String, List<Integer>> collectionInfos = new HashMap<>();\n      int maxShardsPerNode = 1;\n\n      StringBuilder sb = new StringBuilder();\n      for (String nodeName : collectionToNodeNames.get(name)) {\n        sb.append(nodeName);\n        sb.append(',');\n      }\n      sb.deleteCharAt(sb.length() - 1);\n\n      createCollection(collectionInfos, name, shardCount, replicationFactor, maxShardsPerNode, client, sb.toString());\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(String).mjava","sourceNew":"  /**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\n  private void createCollection(String name) throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Create the target collection\n      Map<String, List<Integer>> collectionInfos = new HashMap<>();\n      int maxShardsPerNode = 1;\n\n      StringBuilder sb = new StringBuilder();\n      for (String nodeName : collectionToNodeNames.get(name)) {\n        sb.append(nodeName);\n        sb.append(',');\n      }\n      sb.deleteCharAt(sb.length() - 1);\n\n      createCollection(collectionInfos, name, shardCount, replicationFactor, maxShardsPerNode, client, sb.toString());\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\n  private void createCollection(String name) throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Create the target collection\n      Map<String, List<Integer>> collectionInfos = new HashMap<>();\n      int maxShardsPerNode = 1;\n\n      StringBuilder sb = new StringBuilder();\n      for (String nodeName : collectionToNodeNames.get(name)) {\n        sb.append(nodeName);\n        sb.append(',');\n      }\n      sb.deleteCharAt(sb.length() - 1);\n\n      createCollection(collectionInfos, name, shardCount, replicationFactor, maxShardsPerNode, client, sb.toString());\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(String).mjava","sourceNew":"  /**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\n  private void createCollection(String name) throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Create the target collection\n      Map<String, List<Integer>> collectionInfos = new HashMap<>();\n      int maxShardsPerNode = 1;\n\n      StringBuilder sb = new StringBuilder();\n      for (String nodeName : collectionToNodeNames.get(name)) {\n        sb.append(nodeName);\n        sb.append(',');\n      }\n      sb.deleteCharAt(sb.length() - 1);\n\n      createCollection(collectionInfos, name, shardCount, replicationFactor, maxShardsPerNode, client, sb.toString());\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\n  private void createCollection(String name) throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Create the target collection\n      Map<String, List<Integer>> collectionInfos = new HashMap<>();\n      int maxShardsPerNode = 1;\n\n      StringBuilder sb = new StringBuilder();\n      for (String nodeName : collectionToNodeNames.get(name)) {\n        sb.append(nodeName);\n        sb.append(',');\n      }\n      sb.deleteCharAt(sb.length() - 1);\n\n      createCollection(collectionInfos, name, shardCount, replicationFactor, maxShardsPerNode, client, sb.toString());\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(String).mjava","sourceNew":"  /**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\n  private void createCollection(String name) throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Create the target collection\n      Map<String, List<Integer>> collectionInfos = new HashMap<>();\n      int maxShardsPerNode = 1;\n\n      StringBuilder sb = new StringBuilder();\n      for (String nodeName : collectionToNodeNames.get(name)) {\n        sb.append(nodeName);\n        sb.append(',');\n      }\n      sb.deleteCharAt(sb.length() - 1);\n\n      createCollection(collectionInfos, name, shardCount, replicationFactor, maxShardsPerNode, client, sb.toString());\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\n  private void createCollection(String name) throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Create the target collection\n      Map<String, List<Integer>> collectionInfos = new HashMap<>();\n      int maxShardsPerNode = 1;\n\n      StringBuilder sb = new StringBuilder();\n      for (String nodeName : collectionToNodeNames.get(name)) {\n        sb.append(nodeName);\n        sb.append(',');\n      }\n      sb.deleteCharAt(sb.length() - 1);\n\n      createCollection(collectionInfos, name, shardCount, replicationFactor, maxShardsPerNode, client, sb.toString());\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["e7da9d8536c11576df10e348efa79d2739170936"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}