{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}