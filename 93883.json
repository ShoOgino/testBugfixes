{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.VaryingBPVReader#getLongValue(long).mjava","commits":[{"id":"02d47321ea7c7780a0e0cb7a3676d109d9d62542","date":1543843794,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.VaryingBPVReader#getLongValue(long).mjava","pathOld":"/dev/null","sourceNew":"    long getLongValue(long index) throws IOException {\n      final long block = index >>> shift;\n      if (this.block != block) {\n        int bitsPerValue;\n        do {\n          // If the needed block is the one directly following the current block, it is cheaper to avoid the cache\n          if (block != this.block+1) {\n            IndexedDISICacheFactory.VaryingBPVJumpTable cache;\n            if ((cache = disiCacheFactory.getVBPVJumpTable(entry.name, slice, entry.valuesLength)) != null) {\n              long candidateOffset;\n              if ((candidateOffset = cache.getBlockOffset(block)) != -1) {\n                blockEndOffset = candidateOffset;\n                this.block = block - 1;\n              }\n            }\n          }\n          offset = blockEndOffset;\n          bitsPerValue = slice.readByte(offset++);\n          delta = slice.readLong(offset);\n          offset += Long.BYTES;\n          if (bitsPerValue == 0) {\n            blockEndOffset = offset;\n          } else {\n            final int length = slice.readInt(offset);\n            offset += Integer.BYTES;\n            blockEndOffset = offset + length;\n          }\n          this.block++;\n        } while (this.block != block);\n        values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n      }\n      return mul * values.get(index & mask) + delta;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e86b9927b3acb1937be9daf7b71fe0733edc2206","date":1544534047,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.VaryingBPVReader#getLongValue(long).mjava","sourceNew":null,"sourceOld":"    long getLongValue(long index) throws IOException {\n      final long block = index >>> shift;\n      if (this.block != block) {\n        int bitsPerValue;\n        do {\n          // If the needed block is the one directly following the current block, it is cheaper to avoid the cache\n          if (block != this.block+1) {\n            IndexedDISICacheFactory.VaryingBPVJumpTable cache;\n            if ((cache = disiCacheFactory.getVBPVJumpTable(entry.name, slice, entry.valuesLength)) != null) {\n              long candidateOffset;\n              if ((candidateOffset = cache.getBlockOffset(block)) != -1) {\n                blockEndOffset = candidateOffset;\n                this.block = block - 1;\n              }\n            }\n          }\n          offset = blockEndOffset;\n          bitsPerValue = slice.readByte(offset++);\n          delta = slice.readLong(offset);\n          offset += Long.BYTES;\n          if (bitsPerValue == 0) {\n            blockEndOffset = offset;\n          } else {\n            final int length = slice.readInt(offset);\n            offset += Integer.BYTES;\n            blockEndOffset = offset + length;\n          }\n          this.block++;\n        } while (this.block != block);\n        values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n      }\n      return mul * values.get(index & mask) + delta;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.VaryingBPVReader#getLongValue(long).mjava","sourceNew":null,"sourceOld":"    long getLongValue(long index) throws IOException {\n      final long block = index >>> shift;\n      if (this.block != block) {\n        int bitsPerValue;\n        do {\n          // If the needed block is the one directly following the current block, it is cheaper to avoid the cache\n          if (block != this.block+1) {\n            IndexedDISICacheFactory.VaryingBPVJumpTable cache;\n            if ((cache = disiCacheFactory.getVBPVJumpTable(entry.name, slice, entry.valuesLength)) != null) {\n              long candidateOffset;\n              if ((candidateOffset = cache.getBlockOffset(block)) != -1) {\n                blockEndOffset = candidateOffset;\n                this.block = block - 1;\n              }\n            }\n          }\n          offset = blockEndOffset;\n          bitsPerValue = slice.readByte(offset++);\n          delta = slice.readLong(offset);\n          offset += Long.BYTES;\n          if (bitsPerValue == 0) {\n            blockEndOffset = offset;\n          } else {\n            final int length = slice.readInt(offset);\n            offset += Integer.BYTES;\n            blockEndOffset = offset + length;\n          }\n          this.block++;\n        } while (this.block != block);\n        values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n      }\n      return mul * values.get(index & mask) + delta;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["02d47321ea7c7780a0e0cb7a3676d109d9d62542","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"]},"commit2Childs":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["cfd70c9571310639a77f0123aea0db41077d9bb6","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}