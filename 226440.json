{"path":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","commits":[{"id":"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755","date":1329934000,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","pathOld":"/dev/null","sourceNew":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException\r\n    {\r\n      this.response = response;\r\n      this.out = out;\r\n      this.addr = addr;\r\n      \r\n      if (addr == null)\r\n      {\r\n        if (controller != null)\r\n        {\r\n          // this core is zk enabled\r\n          keeperAddr = controller.getZkServerAddress();\r\n          zkClient = controller.getZkClient();\r\n          if (zkClient != null && zkClient.isConnected())\r\n          {\r\n            return;\r\n          }\r\n          else\r\n          {\r\n            // try a different client with this address\r\n            addr = keeperAddr;\r\n          }\r\n        }\r\n      }\r\n  \r\n      keeperAddr = addr;\r\n      if (addr == null)\r\n      {\r\n        response.setStatus(404);\r\n        out.println\r\n        (\r\n          \"{\" +\r\n          \"\\\"status\\\": 404\" +\r\n          \", \\\"error\\\" : \\\"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\\\"\" +\r\n          \"}\"\r\n        );\r\n        return;\r\n      }\r\n  \r\n      try\r\n      {\r\n        zkClient = new SolrZkClient(addr, 10000);\r\n        doClose = true;\r\n      }\r\n      catch (TimeoutException e)\r\n      {\r\n        response.setStatus(503);\r\n        out.println\r\n        (\r\n          \"{\" +\r\n          \"\\\"status\\\": 503\" +\r\n          \", \\\"error\\\" : \\\"Could not connect to zookeeper at '\" + addr + \"'\\\"\" +\r\n          \"}\"\r\n        );\r\n        zkClient = null;\r\n        return;\r\n      }\r\n      catch (InterruptedException e)\r\n      {\r\n        // Restore the interrupted status\r\n        Thread.currentThread().interrupt();\r\n        response.setStatus(503);\r\n        out.println\r\n        (\r\n          \"{\" +\r\n          \"\\\"status\\\": 503\" +\r\n          \", \\\"error\\\" : \\\"Could not connect to zookeeper at '\" + addr + \"'\\\"\" +\r\n          \"}\"\r\n        );\r\n        zkClient = null;\r\n        return;\r\n      }\r\n  \r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6ddd3da533988676f6ec21e7e4651a2b2e8345","date":1330043299,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","sourceNew":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\r\n      this.response = response;\r\n      this.out = out;\r\n      this.addr = addr;\r\n\r\n      if (addr == null) {\r\n        if (controller != null) {\r\n          // this core is zk enabled\r\n          keeperAddr = controller.getZkServerAddress();\r\n          zkClient = controller.getZkClient();\r\n          if (zkClient != null && zkClient.isConnected()) {\r\n            return;\r\n          } else {\r\n            // try a different client with this address\r\n            addr = keeperAddr;\r\n          }\r\n        }\r\n      }\r\n\r\n      keeperAddr = addr;\r\n      if (addr == null) {\r\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        zkClient = new SolrZkClient(addr, 10000);\r\n        doClose = true;\r\n      } catch (TimeoutException e) {\r\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\r\n        zkClient = null;\r\n        return;\r\n      } catch (InterruptedException e) {\r\n        // Restore the interrupted status\r\n        Thread.currentThread().interrupt();\r\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\r\n        zkClient = null;\r\n        return;\r\n      }\r\n\r\n    }\r\n\n","sourceOld":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException\r\n    {\r\n      this.response = response;\r\n      this.out = out;\r\n      this.addr = addr;\r\n      \r\n      if (addr == null)\r\n      {\r\n        if (controller != null)\r\n        {\r\n          // this core is zk enabled\r\n          keeperAddr = controller.getZkServerAddress();\r\n          zkClient = controller.getZkClient();\r\n          if (zkClient != null && zkClient.isConnected())\r\n          {\r\n            return;\r\n          }\r\n          else\r\n          {\r\n            // try a different client with this address\r\n            addr = keeperAddr;\r\n          }\r\n        }\r\n      }\r\n  \r\n      keeperAddr = addr;\r\n      if (addr == null)\r\n      {\r\n        response.setStatus(404);\r\n        out.println\r\n        (\r\n          \"{\" +\r\n          \"\\\"status\\\": 404\" +\r\n          \", \\\"error\\\" : \\\"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\\\"\" +\r\n          \"}\"\r\n        );\r\n        return;\r\n      }\r\n  \r\n      try\r\n      {\r\n        zkClient = new SolrZkClient(addr, 10000);\r\n        doClose = true;\r\n      }\r\n      catch (TimeoutException e)\r\n      {\r\n        response.setStatus(503);\r\n        out.println\r\n        (\r\n          \"{\" +\r\n          \"\\\"status\\\": 503\" +\r\n          \", \\\"error\\\" : \\\"Could not connect to zookeeper at '\" + addr + \"'\\\"\" +\r\n          \"}\"\r\n        );\r\n        zkClient = null;\r\n        return;\r\n      }\r\n      catch (InterruptedException e)\r\n      {\r\n        // Restore the interrupted status\r\n        Thread.currentThread().interrupt();\r\n        response.setStatus(503);\r\n        out.println\r\n        (\r\n          \"{\" +\r\n          \"\\\"status\\\": 503\" +\r\n          \", \\\"error\\\" : \\\"Could not connect to zookeeper at '\" + addr + \"'\\\"\" +\r\n          \"}\"\r\n        );\r\n        zkClient = null;\r\n        return;\r\n      }\r\n  \r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","pathOld":"/dev/null","sourceNew":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\r\n      this.response = response;\r\n      this.out = out;\r\n      this.addr = addr;\r\n\r\n      if (addr == null) {\r\n        if (controller != null) {\r\n          // this core is zk enabled\r\n          keeperAddr = controller.getZkServerAddress();\r\n          zkClient = controller.getZkClient();\r\n          if (zkClient != null && zkClient.isConnected()) {\r\n            return;\r\n          } else {\r\n            // try a different client with this address\r\n            addr = keeperAddr;\r\n          }\r\n        }\r\n      }\r\n\r\n      keeperAddr = addr;\r\n      if (addr == null) {\r\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        zkClient = new SolrZkClient(addr, 10000);\r\n        doClose = true;\r\n      } catch (TimeoutException e) {\r\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\r\n        zkClient = null;\r\n        return;\r\n      } catch (InterruptedException e) {\r\n        // Restore the interrupted status\r\n        Thread.currentThread().interrupt();\r\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\r\n        zkClient = null;\r\n        return;\r\n      }\r\n\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","date":1332766738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","sourceNew":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (TimeoutException e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","sourceOld":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\r\n      this.response = response;\r\n      this.out = out;\r\n      this.addr = addr;\r\n\r\n      if (addr == null) {\r\n        if (controller != null) {\r\n          // this core is zk enabled\r\n          keeperAddr = controller.getZkServerAddress();\r\n          zkClient = controller.getZkClient();\r\n          if (zkClient != null && zkClient.isConnected()) {\r\n            return;\r\n          } else {\r\n            // try a different client with this address\r\n            addr = keeperAddr;\r\n          }\r\n        }\r\n      }\r\n\r\n      keeperAddr = addr;\r\n      if (addr == null) {\r\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        zkClient = new SolrZkClient(addr, 10000);\r\n        doClose = true;\r\n      } catch (TimeoutException e) {\r\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\r\n        zkClient = null;\r\n        return;\r\n      } catch (InterruptedException e) {\r\n        // Restore the interrupted status\r\n        Thread.currentThread().interrupt();\r\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\r\n        zkClient = null;\r\n        return;\r\n      }\r\n\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1764a3d38fa1de1ac5474f293b8d32da723a409e","date":1344907887,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","sourceNew":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","sourceOld":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (TimeoutException e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","sourceNew":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","sourceOld":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (TimeoutException e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","sourceNew":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","sourceOld":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (TimeoutException e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,Writer,ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","sourceNew":"    public ZKPrinter(HttpServletResponse response, Writer out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","sourceOld":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","sourceNew":null,"sourceOld":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1764a3d38fa1de1ac5474f293b8d32da723a409e","c7d0565444d6381434fbff66cecf07da249f2bb4"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["1764a3d38fa1de1ac5474f293b8d32da723a409e"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7d0565444d6381434fbff66cecf07da249f2bb4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","1764a3d38fa1de1ac5474f293b8d32da723a409e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}