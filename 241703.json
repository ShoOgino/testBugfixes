{"path":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random().nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random().nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random().nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random().nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random().nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random().nextInt(termsInIndex);\n        builder.add(new Term(\"f\", Character.toString((char)(tnum+'A'))));\n      }\n      // slop could be random too\n      builder.setSlop(termsInIndex);\n      PhraseQuery q = builder.build();\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random().nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9e1499c5d26c936238506df90a3c02c76707722":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["e9e1499c5d26c936238506df90a3c02c76707722"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}