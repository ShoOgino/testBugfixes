{"path":"backwards/src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}