{"path":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllocate() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> set = new HashSet<byte[]>();\n    byte[] block = allocator.getByteBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    for (int i = 0; i < 97 * RANDOM_MULTIPLIER; i++) {\n      block = allocator.getByteBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllocate() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> set = new HashSet<byte[]>();\n    byte[] block = allocator.getByteBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    for (int i = 0; i < 97 * RANDOM_MULTIPLIER; i++) {\n      block = allocator.getByteBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","sourceNew":"  @Test\n  public void testAllocate() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> set = new HashSet<byte[]>();\n    byte[] block = allocator.getByteBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int num = atLeast(97);\n    for (int i = 0; i < num; i++) {\n      block = allocator.getByteBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllocate() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> set = new HashSet<byte[]>();\n    byte[] block = allocator.getByteBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    for (int i = 0; i < 97 * RANDOM_MULTIPLIER; i++) {\n      block = allocator.getByteBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","sourceNew":"  @Test\n  public void testAllocate() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> set = new HashSet<byte[]>();\n    byte[] block = allocator.getByteBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int num = atLeast(97);\n    for (int i = 0; i < num; i++) {\n      block = allocator.getByteBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllocate() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> set = new HashSet<byte[]>();\n    byte[] block = allocator.getByteBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    for (int i = 0; i < 97 * RANDOM_MULTIPLIER; i++) {\n      block = allocator.getByteBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","sourceNew":"  @Test\n  public void testAllocate() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> set = new HashSet<byte[]>();\n    byte[] block = allocator.getByteBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int num = atLeast(97);\n    for (int i = 0; i < num; i++) {\n      block = allocator.getByteBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllocate() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> set = new HashSet<byte[]>();\n    byte[] block = allocator.getByteBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    for (int i = 0; i < 97 * RANDOM_MULTIPLIER; i++) {\n      block = allocator.getByteBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocate().mjava","sourceNew":"  @Test\n  public void testAllocate() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> set = new HashSet<byte[]>();\n    byte[] block = allocator.getByteBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int num = atLeast(97);\n    for (int i = 0; i < num; i++) {\n      block = allocator.getByteBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllocate() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> set = new HashSet<byte[]>();\n    byte[] block = allocator.getByteBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int num = atLeast(97);\n    for (int i = 0; i < num; i++) {\n      block = allocator.getByteBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","f83af14a2a8131b14d7aee6274c740334e0363d3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}