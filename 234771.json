{"path":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh);\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fac11578d87e86ac41841e07ba8db185cedf92c","date":1471085468,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node);\n  }\n\n","sourceOld":"  @Override\n  public Object call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh);\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node);\n  }\n\n","sourceOld":"  @Override\n  public Object call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh);\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858","date":1472733239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node);\n  }\n\n","bugFix":["9fac11578d87e86ac41841e07ba8db185cedf92c"],"bugIntro":["558f47e41524183823173884b3aaf0c03653dec0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"558f47e41524183823173884b3aaf0c03653dec0","date":1499192348,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n  }\n\n","bugFix":["ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["558f47e41524183823173884b3aaf0c03653dec0","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["558f47e41524183823173884b3aaf0c03653dec0"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["b1777912fb613f51063554d81f71c1b70d6bcd77","9fac11578d87e86ac41841e07ba8db185cedf92c"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fac11578d87e86ac41841e07ba8db185cedf92c":["b1777912fb613f51063554d81f71c1b70d6bcd77"],"bc8f206328a706450934717bec7ccc22ad166fc0":["403d05f7f8d69b65659157eff1bc1d2717f04c66","ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","558f47e41524183823173884b3aaf0c03653dec0"],"558f47e41524183823173884b3aaf0c03653dec0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858"],"ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","9fac11578d87e86ac41841e07ba8db185cedf92c"],"9fac11578d87e86ac41841e07ba8db185cedf92c":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"558f47e41524183823173884b3aaf0c03653dec0":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","b1777912fb613f51063554d81f71c1b70d6bcd77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","558f47e41524183823173884b3aaf0c03653dec0"],"ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}