{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method).mjava","commits":[{"id":"0db39d89549f02471cd1655286175cdb23de346b","date":1379183393,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptFunction#JavascriptFunction(String,Method).mjava","sourceNew":"  /* do some checks if the signature is \"compatible\" */\n  private static void checkFunction(Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","sourceOld":"  private JavascriptFunction(String call, Method method) {\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n    \n    this.call = call;\n    this.arity = method.getParameterTypes().length;\n    this.klass = Type.getInternalName(method.getDeclaringClass());\n    this.method = method.getName();\n    this.descriptor = Type.getMethodDescriptor(method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54f629ff4f718e546432fdf8588060658f1eebe9","date":1379187237,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method).mjava","sourceNew":"  /* do some checks if the signature is \"compatible\" */\n  private static void checkFunction(Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not public.\");\n    }\n    for (Class<?> clazz : method.getParameterTypes()) {\n      if (!clazz.equals(double.class)) {\n        throw new IllegalArgumentException(method + \" must take only double parameters\");\n      }\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","sourceOld":"  /* do some checks if the signature is \"compatible\" */\n  private static void checkFunction(Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f4a9db0aeeb961032424c2edf00ae71f9775b9","date":1379187620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method).mjava","sourceNew":"  /* do some checks if the signature is \"compatible\" */\n  private static void checkFunction(Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not public.\");\n    }\n    if (!Modifier.isPublic(method.getDeclaringClass().getModifiers())) {\n      throw new IllegalArgumentException(method.getDeclaringClass().getName() + \" is not public.\");\n    }\n    for (Class<?> clazz : method.getParameterTypes()) {\n      if (!clazz.equals(double.class)) {\n        throw new IllegalArgumentException(method + \" must take only double parameters\");\n      }\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","sourceOld":"  /* do some checks if the signature is \"compatible\" */\n  private static void checkFunction(Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not public.\");\n    }\n    for (Class<?> clazz : method.getParameterTypes()) {\n      if (!clazz.equals(double.class)) {\n        throw new IllegalArgumentException(method + \" must take only double parameters\");\n      }\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39912125a86f1322163a6c630f07eb6fc3ffe3f5","date":1379190712,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method,ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method).mjava","sourceNew":"  private static void checkFunction(Method method, ClassLoader parent) {\n    // We can only call the function if the given parent class loader of our compiled class has access to the method:\n    final ClassLoader functionClassloader = method.getDeclaringClass().getClassLoader();\n    if (functionClassloader != null) { // it is a system class iff null!\n      boolean found = false;\n      while (parent != null) {\n        if (parent == functionClassloader) {\n          found = true;\n          break;\n        }\n        parent = parent.getParent();\n      }\n      if (!found) {\n        throw new IllegalArgumentException(method + \" is not declared by a class which is accessible by the given parent ClassLoader.\");\n      }\n    }\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not public.\");\n    }\n    if (!Modifier.isPublic(method.getDeclaringClass().getModifiers())) {\n      throw new IllegalArgumentException(method.getDeclaringClass().getName() + \" is not public.\");\n    }\n    for (Class<?> clazz : method.getParameterTypes()) {\n      if (!clazz.equals(double.class)) {\n        throw new IllegalArgumentException(method + \" must take only double parameters\");\n      }\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","sourceOld":"  /* do some checks if the signature is \"compatible\" */\n  private static void checkFunction(Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not public.\");\n    }\n    if (!Modifier.isPublic(method.getDeclaringClass().getModifiers())) {\n      throw new IllegalArgumentException(method.getDeclaringClass().getName() + \" is not public.\");\n    }\n    for (Class<?> clazz : method.getParameterTypes()) {\n      if (!clazz.equals(double.class)) {\n        throw new IllegalArgumentException(method + \" must take only double parameters\");\n      }\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81b6a3d49aba985c5fd89deb83f9959ecf17a0ce","date":1449313441,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method).mjava","pathOld":"/dev/null","sourceNew":"  /** Check Method signature for compatibility. */\n  private static void checkFunction(Method method) {\n    // check that the Method is public in some public reachable class:\n    final MethodType type;\n    try {\n      type = MethodHandles.publicLookup().unreflect(method).type();\n    } catch (IllegalAccessException iae) {\n      throw new IllegalArgumentException(method + \" is not accessible (declaring class or method not public).\");\n    }\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    for (int arg = 0, arity = type.parameterCount(); arg < arity; arg++) {\n      if (type.parameterType(arg) != double.class) {\n        throw new IllegalArgumentException(method + \" must take only double parameters.\");\n      }\n    }\n    if (type.returnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98f4a9db0aeeb961032424c2edf00ae71f9775b9":["54f629ff4f718e546432fdf8588060658f1eebe9"],"81b6a3d49aba985c5fd89deb83f9959ecf17a0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"39912125a86f1322163a6c630f07eb6fc3ffe3f5":["98f4a9db0aeeb961032424c2edf00ae71f9775b9"],"54f629ff4f718e546432fdf8588060658f1eebe9":["0db39d89549f02471cd1655286175cdb23de346b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81b6a3d49aba985c5fd89deb83f9959ecf17a0ce"],"0db39d89549f02471cd1655286175cdb23de346b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"98f4a9db0aeeb961032424c2edf00ae71f9775b9":["39912125a86f1322163a6c630f07eb6fc3ffe3f5"],"81b6a3d49aba985c5fd89deb83f9959ecf17a0ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39912125a86f1322163a6c630f07eb6fc3ffe3f5":[],"54f629ff4f718e546432fdf8588060658f1eebe9":["98f4a9db0aeeb961032424c2edf00ae71f9775b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81b6a3d49aba985c5fd89deb83f9959ecf17a0ce","0db39d89549f02471cd1655286175cdb23de346b"],"0db39d89549f02471cd1655286175cdb23de346b":["54f629ff4f718e546432fdf8588060658f1eebe9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["39912125a86f1322163a6c630f07eb6fc3ffe3f5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}