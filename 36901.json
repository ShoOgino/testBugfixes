{"path":"src/java/org/apache/lucene/index/TermInfosReader#getThreadResources().mjava","commits":[{"id":"1b30678d88259b68d3d1e3faba3ea3bccdf0c751","date":1211563231,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getThreadResources().mjava","pathOld":"/dev/null","sourceNew":"  private ThreadResources getThreadResources() {\n    ThreadResources resources = (ThreadResources)threadResources.get();\n    if (resources == null) {\n      resources = new ThreadResources();\n      resources.termEnum = terms();\n      // Cache does not have to be thread-safe, it is only used by one thread at the same time\n      resources.termInfoCache = new SimpleLRUCache(DEFAULT_CACHE_SIZE);\n      threadResources.set(resources);\n    }\n    return resources;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getThreadResources().mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getThreadResources().mjava","sourceNew":"  private ThreadResources getThreadResources() {\n    ThreadResources resources = (ThreadResources)threadResources.get();\n    if (resources == null) {\n      resources = new ThreadResources();\n      resources.termEnum = terms();\n      // Cache does not have to be thread-safe, it is only used by one thread at the same time\n      resources.termInfoCache = new SimpleLRUCache<Term,TermInfo>(DEFAULT_CACHE_SIZE);\n      threadResources.set(resources);\n    }\n    return resources;\n  }\n\n","sourceOld":"  private ThreadResources getThreadResources() {\n    ThreadResources resources = (ThreadResources)threadResources.get();\n    if (resources == null) {\n      resources = new ThreadResources();\n      resources.termEnum = terms();\n      // Cache does not have to be thread-safe, it is only used by one thread at the same time\n      resources.termInfoCache = new SimpleLRUCache(DEFAULT_CACHE_SIZE);\n      threadResources.set(resources);\n    }\n    return resources;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bc4668fce3cd5e972720deadebcdc3577d31550","date":1255940063,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getThreadResources().mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getThreadResources().mjava","sourceNew":"  private ThreadResources getThreadResources() {\n    ThreadResources resources = threadResources.get();\n    if (resources == null) {\n      resources = new ThreadResources();\n      resources.termEnum = terms();\n      // Cache does not have to be thread-safe, it is only used by one thread at the same time\n      resources.termInfoCache = new SimpleLRUCache<Term,TermInfo>(DEFAULT_CACHE_SIZE);\n      threadResources.set(resources);\n    }\n    return resources;\n  }\n\n","sourceOld":"  private ThreadResources getThreadResources() {\n    ThreadResources resources = (ThreadResources)threadResources.get();\n    if (resources == null) {\n      resources = new ThreadResources();\n      resources.termEnum = terms();\n      // Cache does not have to be thread-safe, it is only used by one thread at the same time\n      resources.termInfoCache = new SimpleLRUCache<Term,TermInfo>(DEFAULT_CACHE_SIZE);\n      threadResources.set(resources);\n    }\n    return resources;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3788e811fcba5db4611c3281af4d165044ad9d6","date":1259335977,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getThreadResources().mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getThreadResources().mjava","sourceNew":"  private ThreadResources getThreadResources() {\n    ThreadResources resources = threadResources.get();\n    if (resources == null) {\n      resources = new ThreadResources();\n      resources.termEnum = terms();\n      threadResources.set(resources);\n    }\n    return resources;\n  }\n\n","sourceOld":"  private ThreadResources getThreadResources() {\n    ThreadResources resources = threadResources.get();\n    if (resources == null) {\n      resources = new ThreadResources();\n      resources.termEnum = terms();\n      // Cache does not have to be thread-safe, it is only used by one thread at the same time\n      resources.termInfoCache = new SimpleLRUCache<Term,TermInfo>(DEFAULT_CACHE_SIZE);\n      threadResources.set(resources);\n    }\n    return resources;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermInfosReader#getThreadResources().mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getThreadResources().mjava","sourceNew":"  private ThreadResources getThreadResources() {\n    ThreadResources resources = threadResources.get();\n    if (resources == null) {\n      resources = new ThreadResources();\n      resources.termEnum = terms();\n      threadResources.set(resources);\n    }\n    return resources;\n  }\n\n","sourceOld":"  private ThreadResources getThreadResources() {\n    ThreadResources resources = threadResources.get();\n    if (resources == null) {\n      resources = new ThreadResources();\n      resources.termEnum = terms();\n      threadResources.set(resources);\n    }\n    return resources;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3788e811fcba5db4611c3281af4d165044ad9d6":["3bc4668fce3cd5e972720deadebcdc3577d31550"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"3bc4668fce3cd5e972720deadebcdc3577d31550":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"b3788e811fcba5db4611c3281af4d165044ad9d6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["ef82ff03e4016c705811b2658e81471a645c0e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"ef82ff03e4016c705811b2658e81471a645c0e49":["3bc4668fce3cd5e972720deadebcdc3577d31550"],"3bc4668fce3cd5e972720deadebcdc3577d31550":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}