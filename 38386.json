{"path":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","commits":[{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"VGW: index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        final int lengthSave = text.length;\n        text.length = indexedTermPrefixLength(lastTerm, text);\n        try {\n          fstBuilder.add(text, fstOutputs.get(termsOut.getFilePointer()));\n        } finally {\n          text.length = lengthSave;\n        }\n        lastTerm.copy(text);\n        return true;\n      } else {\n        //System.out.println(\"VGW: not index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        lastTerm.copy(text);\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {\n      if (policy.isIndexTerm(text, docFreq) || first) {\n        first = false;\n        //System.out.println(\"VGW: index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        final int lengthSave = text.length;\n        text.length = indexedTermPrefixLength(lastTerm, text);\n        try {\n          fstBuilder.add(text, fstOutputs.get(termsOut.getFilePointer()));\n        } finally {\n          text.length = lengthSave;\n        }\n        lastTerm.copy(text);\n        return true;\n      } else {\n        //System.out.println(\"VGW: not index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        lastTerm.copy(text);\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"VGW: index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        final int lengthSave = text.length;\n        text.length = indexedTermPrefixLength(lastTerm, text);\n        try {\n          fstBuilder.add(text, fstOutputs.get(termsOut.getFilePointer()));\n        } finally {\n          text.length = lengthSave;\n        }\n        lastTerm.copy(text);\n        return true;\n      } else {\n        //System.out.println(\"VGW: not index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        lastTerm.copy(text);\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {\n      if (policy.isIndexTerm(text, docFreq) || first) {\n        first = false;\n        //System.out.println(\"VGW: index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        final int lengthSave = text.length;\n        text.length = indexedTermPrefixLength(lastTerm, text);\n        try {\n          fstBuilder.add(text, fstOutputs.get(termsOut.getFilePointer()));\n        } finally {\n          text.length = lengthSave;\n        }\n        lastTerm.copy(text);\n        return true;\n      } else {\n        //System.out.println(\"VGW: not index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        lastTerm.copy(text);\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      //System.out.println(\"VGW: index term=\" + text.utf8ToString());\n      // NOTE: we must force the first term per field to be\n      // indexed, in case policy doesn't:\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"  YES\");\n        return true;\n      } else {\n        lastTerm.copy(text);\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"VGW: index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        final int lengthSave = text.length;\n        text.length = indexedTermPrefixLength(lastTerm, text);\n        try {\n          fstBuilder.add(text, fstOutputs.get(termsOut.getFilePointer()));\n        } finally {\n          text.length = lengthSave;\n        }\n        lastTerm.copy(text);\n        return true;\n      } else {\n        //System.out.println(\"VGW: not index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        lastTerm.copy(text);\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      //System.out.println(\"VGW: index term=\" + text.utf8ToString());\n      // NOTE: we must force the first term per field to be\n      // indexed, in case policy doesn't:\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"  YES\");\n        return true;\n      } else {\n        lastTerm.copy(text);\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"VGW: index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        final int lengthSave = text.length;\n        text.length = indexedTermPrefixLength(lastTerm, text);\n        try {\n          fstBuilder.add(text, fstOutputs.get(termsOut.getFilePointer()));\n        } finally {\n          text.length = lengthSave;\n        }\n        lastTerm.copy(text);\n        return true;\n      } else {\n        //System.out.println(\"VGW: not index term=\" + text.utf8ToString() + \" fp=\" + termsOut.getFilePointer());\n        lastTerm.copy(text);\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      //System.out.println(\"VGW: index term=\" + text.utf8ToString());\n      // NOTE: we must force the first term per field to be\n      // indexed, in case policy doesn't:\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"  YES\");\n        return true;\n      } else {\n        lastTerm.copy(text);\n        return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      //System.out.println(\"VGW: index term=\" + text.utf8ToString());\n      // NOTE: we must force the first term per field to be\n      // indexed, in case policy doesn't:\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"  YES\");\n        return true;\n      } else {\n        lastTerm.copyBytes(text);\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      //System.out.println(\"VGW: index term=\" + text.utf8ToString());\n      // NOTE: we must force the first term per field to be\n      // indexed, in case policy doesn't:\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"  YES\");\n        return true;\n      } else {\n        lastTerm.copy(text);\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#checkIndexTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      //System.out.println(\"VGW: index term=\" + text.utf8ToString());\n      // NOTE: we must force the first term per field to be\n      // indexed, in case policy doesn't:\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"  YES\");\n        return true;\n      } else {\n        lastTerm.copyBytes(text);\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean checkIndexTerm(BytesRef text, TermStats stats) throws IOException {\n      //System.out.println(\"VGW: index term=\" + text.utf8ToString());\n      // NOTE: we must force the first term per field to be\n      // indexed, in case policy doesn't:\n      if (policy.isIndexTerm(text, stats) || first) {\n        first = false;\n        //System.out.println(\"  YES\");\n        return true;\n      } else {\n        lastTerm.copyBytes(text);\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"e6e919043fa85ee891123768dd655a98edbbf63c":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"16843358872ed92ba92888ab99df297550b9a36a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","e6e919043fa85ee891123768dd655a98edbbf63c"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"e6e919043fa85ee891123768dd655a98edbbf63c":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}