{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest]#next(Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest]#next(Token).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest]#next().mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (currentRealToken == null) {\n      Token nextRealToken = realStream.next(reusableToken);\n      if (nextRealToken == null) {\n        return null;\n      }\n      String expansions = (String) synonyms.get(nextRealToken.term());\n      if (expansions == null) {\n        return nextRealToken;\n      }\n      st = new StringTokenizer(expansions, \",\");\n      if (st.hasMoreTokens()) {\n        currentRealToken = (Token) nextRealToken.clone();\n      }\n      return currentRealToken;\n    } else {\n      reusableToken.reinit(st.nextToken(),\n                           currentRealToken.startOffset(),\n                           currentRealToken.endOffset());\n      reusableToken.setPositionIncrement(0);\n      if (!st.hasMoreTokens()) {\n        currentRealToken = null;\n        st = null;\n      }\n      return reusableToken;\n    }\n  }\n\n","sourceOld":"  public Token next() throws IOException {\n    if (currentRealToken == null) {\n      Token nextRealToken = realStream.next();\n      if (nextRealToken == null) {\n        return null;\n      }\n      String expansions = (String) synonyms.get(nextRealToken.termText());\n      if (expansions == null) {\n        return nextRealToken;\n      }\n      st = new StringTokenizer(expansions, \",\");\n      if (st.hasMoreTokens()) {\n        currentRealToken = nextRealToken;\n      }\n      return currentRealToken;\n    } else {\n      String nextExpandedValue = st.nextToken();\n      Token expandedToken = new Token(nextExpandedValue, currentRealToken.startOffset(),\n          currentRealToken.endOffset());\n      expandedToken.setPositionIncrement(0);\n      if (!st.hasMoreTokens()) {\n        currentRealToken = null;\n        st = null;\n      }\n      return expandedToken;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest]#next(Token).mjava","sourceNew":null,"sourceOld":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (currentRealToken == null) {\n      Token nextRealToken = realStream.next(reusableToken);\n      if (nextRealToken == null) {\n        return null;\n      }\n      String expansions = (String) synonyms.get(nextRealToken.term());\n      if (expansions == null) {\n        return nextRealToken;\n      }\n      st = new StringTokenizer(expansions, \",\");\n      if (st.hasMoreTokens()) {\n        currentRealToken = (Token) nextRealToken.clone();\n      }\n      return currentRealToken;\n    } else {\n      reusableToken.reinit(st.nextToken(),\n                           currentRealToken.startOffset(),\n                           currentRealToken.endOffset());\n      reusableToken.setPositionIncrement(0);\n      if (!st.hasMoreTokens()) {\n        currentRealToken = null;\n        st = null;\n      }\n      return reusableToken;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}