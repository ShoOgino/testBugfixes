{"path":"lucene/backwards/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static synchronized long round(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(time);\n    \n    if (resolution == Resolution.YEAR) {\n      calInstance.set(Calendar.MONTH, 0);\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static synchronized long round(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(time);\n    \n    if (resolution == Resolution.YEAR) {\n      calInstance.set(Calendar.MONTH, 0);\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":null,"sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static synchronized long round(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(time);\n    \n    if (resolution == Resolution.YEAR) {\n      calInstance.set(Calendar.MONTH, 0);\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}