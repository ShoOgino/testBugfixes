{"path":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testAnd(float).mjava","commits":[{"id":"f78d4e34b37df32ff7feb218a5ae197be13445bb","date":1419239875,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testAnd(float).mjava","pathOld":"/dev/null","sourceNew":"  private void testAnd(float load) throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    BitSet set1 = new JavaUtilBitSet(randomSet(numBits, numBits), numBits); // full\n    T set2 = copyOf(set1, numBits);\n    \n    final int iterations = atLeast(10);\n    for (int iter = 0; iter < iterations; ++iter) {\n      // BitSets have specializations to merge with certain impls, so we randomize the impl...\n      DocIdSet otherSet = randomCopy(new JavaUtilBitSet(randomSet(numBits, load), numBits), numBits);\n      DocIdSetIterator otherIterator = otherSet.iterator();\n      if (otherIterator != null) {\n        set1.and(otherIterator);\n        set2.and(otherSet.iterator());\n        assertEquals(set1, set2, numBits);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"099c774ddd27f4ad437ca5df14d153bab0a3affe","date":1424527689,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testAnd(float).mjava","sourceNew":null,"sourceOld":"  private void testAnd(float load) throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    BitSet set1 = new JavaUtilBitSet(randomSet(numBits, numBits), numBits); // full\n    T set2 = copyOf(set1, numBits);\n    \n    final int iterations = atLeast(10);\n    for (int iter = 0; iter < iterations; ++iter) {\n      // BitSets have specializations to merge with certain impls, so we randomize the impl...\n      DocIdSet otherSet = randomCopy(new JavaUtilBitSet(randomSet(numBits, load), numBits), numBits);\n      DocIdSetIterator otherIterator = otherSet.iterator();\n      if (otherIterator != null) {\n        set1.and(otherIterator);\n        set2.and(otherSet.iterator());\n        assertEquals(set1, set2, numBits);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"099c774ddd27f4ad437ca5df14d153bab0a3affe":["f78d4e34b37df32ff7feb218a5ae197be13445bb"],"f78d4e34b37df32ff7feb218a5ae197be13445bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["099c774ddd27f4ad437ca5df14d153bab0a3affe"]},"commit2Childs":{"099c774ddd27f4ad437ca5df14d153bab0a3affe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f78d4e34b37df32ff7feb218a5ae197be13445bb":["099c774ddd27f4ad437ca5df14d153bab0a3affe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f78d4e34b37df32ff7feb218a5ae197be13445bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}