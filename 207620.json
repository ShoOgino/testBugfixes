{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#vincentyDistance(double,double,double,double).mjava","commits":[{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#vincentyDistance(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute the distance between two geo-points using vincenty distance formula\n   * Vincenty uses the oblate spheroid whereas haversine uses unit sphere, this will give roughly\n   * 22m better accuracy (in worst case) than haversine\n   *\n   * @param lonA longitudinal coordinate of point A (in degrees)\n   * @param latA latitudinal coordinate of point A (in degrees)\n   * @param lonB longitudinal coordinate of point B (in degrees)\n   * @param latB latitudinal coordinate of point B (in degrees)\n   * @return distance (in meters) between point A and point B\n   */\n  public static final double vincentyDistance(final double lonA, final double latA, final double lonB, final double latB) {\n    final double L = StrictMath.toRadians(lonB - lonA);\n    final double oF = 1 - GeoProjectionUtils.FLATTENING;\n    final double U1 = StrictMath.atan(oF * StrictMath.tan(StrictMath.toRadians(latA)));\n    final double U2 = StrictMath.atan(oF * StrictMath.tan(StrictMath.toRadians(latB)));\n    final double sU1 = StrictMath.sin(U1);\n    final double cU1 = StrictMath.cos(U1);\n    final double sU2 = StrictMath.sin(U2);\n    final double cU2 = StrictMath.cos(U2);\n\n    double sigma, sinSigma, cosSigma;\n    double sinAlpha, cos2Alpha, cos2SigmaM;\n    double lambda = L;\n    double lambdaP;\n    double iters = 100;\n    double sinLambda, cosLambda, c;\n\n    do {\n      sinLambda = StrictMath.sin(lambda);\n      cosLambda = Math.cos(lambda);\n      sinSigma = Math.sqrt((cU2 * sinLambda) * (cU2 * sinLambda) + (cU1 * sU2 - sU1 * cU2 * cosLambda)\n          * (cU1 * sU2 - sU1 * cU2 * cosLambda));\n      if (sinSigma == 0) {\n        return 0;\n      }\n\n      cosSigma = sU1 * sU2 + cU1 * cU2 * cosLambda;\n      sigma = Math.atan2(sinSigma, cosSigma);\n      sinAlpha = cU1 * cU2 * sinLambda / sinSigma;\n      cos2Alpha = 1 - sinAlpha * sinAlpha;\n      cos2SigmaM = cosSigma - 2 * sU1 * sU2 / cos2Alpha;\n\n      c = GeoProjectionUtils.FLATTENING/16 * cos2Alpha * (4 + GeoProjectionUtils.FLATTENING * (4 - 3 * cos2Alpha));\n      lambdaP = lambda;\n      lambda = L + (1 - c) * GeoProjectionUtils.FLATTENING * sinAlpha * (sigma + c * sinSigma * (cos2SigmaM + c * cosSigma *\n          (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n    } while (StrictMath.abs(lambda - lambdaP) > 1E-12 && --iters > 0);\n\n    if (iters == 0) {\n      return 0;\n    }\n\n    final double uSq = cos2Alpha * (GeoProjectionUtils.SEMIMAJOR_AXIS2 - GeoProjectionUtils.SEMIMINOR_AXIS2) / (GeoProjectionUtils.SEMIMINOR_AXIS2);\n    final double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\n    final double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\n    final double deltaSigma = B * sinSigma * (cos2SigmaM + B/4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B/6 * cos2SigmaM\n        * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\n\n    return (GeoProjectionUtils.SEMIMINOR_AXIS * A * (sigma - deltaSigma));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#vincentyDistance(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#vincentyDistance(double,double,double,double).mjava","sourceNew":"  /**\n   * Compute the distance between two geo-points using vincenty distance formula\n   * Vincenty uses the oblate spheroid whereas haversine uses unit sphere, this will give roughly\n   * 22m better accuracy (in worst case) than haversine\n   *\n   * @param lonA longitudinal coordinate of point A (in degrees)\n   * @param latA latitudinal coordinate of point A (in degrees)\n   * @param lonB longitudinal coordinate of point B (in degrees)\n   * @param latB latitudinal coordinate of point B (in degrees)\n   * @return distance (in meters) between point A and point B\n   */\n  public static final double vincentyDistance(final double lonA, final double latA, final double lonB, final double latB) {\n    final double L = StrictMath.toRadians(lonB - lonA);\n    final double oF = 1 - GeoProjectionUtils.FLATTENING;\n    final double U1 = StrictMath.atan(oF * StrictMath.tan(StrictMath.toRadians(latA)));\n    final double U2 = StrictMath.atan(oF * StrictMath.tan(StrictMath.toRadians(latB)));\n    final double sU1 = StrictMath.sin(U1);\n    final double cU1 = StrictMath.cos(U1);\n    final double sU2 = StrictMath.sin(U2);\n    final double cU2 = StrictMath.cos(U2);\n\n    double sigma, sinSigma, cosSigma;\n    double sinAlpha, cos2Alpha, cos2SigmaM;\n    double lambda = L;\n    double lambdaP;\n    double iters = 100;\n    double sinLambda, cosLambda, c;\n\n    do {\n      sinLambda = StrictMath.sin(lambda);\n      cosLambda = Math.cos(lambda);\n      sinSigma = Math.sqrt((cU2 * sinLambda) * (cU2 * sinLambda) + (cU1 * sU2 - sU1 * cU2 * cosLambda)\n          * (cU1 * sU2 - sU1 * cU2 * cosLambda));\n      if (sinSigma == 0) {\n        return 0;\n      }\n\n      cosSigma = sU1 * sU2 + cU1 * cU2 * cosLambda;\n      sigma = Math.atan2(sinSigma, cosSigma);\n      sinAlpha = cU1 * cU2 * sinLambda / sinSigma;\n      cos2Alpha = 1 - sinAlpha * sinAlpha;\n      cos2SigmaM = cosSigma - 2 * sU1 * sU2 / cos2Alpha;\n\n      c = GeoProjectionUtils.FLATTENING/16 * cos2Alpha * (4 + GeoProjectionUtils.FLATTENING * (4 - 3 * cos2Alpha));\n      lambdaP = lambda;\n      lambda = L + (1 - c) * GeoProjectionUtils.FLATTENING * sinAlpha * (sigma + c * sinSigma * (cos2SigmaM + c * cosSigma *\n          (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n    } while (StrictMath.abs(lambda - lambdaP) > 1E-12 && --iters > 0);\n\n    if (iters == 0) {\n      return 0;\n    }\n\n    final double uSq = cos2Alpha * (GeoProjectionUtils.SEMIMAJOR_AXIS2 - GeoProjectionUtils.SEMIMINOR_AXIS2) / (GeoProjectionUtils.SEMIMINOR_AXIS2);\n    final double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\n    final double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\n    final double deltaSigma = B * sinSigma * (cos2SigmaM + B/4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B/6 * cos2SigmaM\n        * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\n\n    return (GeoProjectionUtils.SEMIMINOR_AXIS * A * (sigma - deltaSigma));\n  }\n\n","sourceOld":"  /**\n   * Compute the distance between two geo-points using vincenty distance formula\n   * Vincenty uses the oblate spheroid whereas haversine uses unit sphere, this will give roughly\n   * 22m better accuracy (in worst case) than haversine\n   *\n   * @param lonA longitudinal coordinate of point A (in degrees)\n   * @param latA latitudinal coordinate of point A (in degrees)\n   * @param lonB longitudinal coordinate of point B (in degrees)\n   * @param latB latitudinal coordinate of point B (in degrees)\n   * @return distance (in meters) between point A and point B\n   */\n  public static final double vincentyDistance(final double lonA, final double latA, final double lonB, final double latB) {\n    final double L = StrictMath.toRadians(lonB - lonA);\n    final double oF = 1 - GeoProjectionUtils.FLATTENING;\n    final double U1 = StrictMath.atan(oF * StrictMath.tan(StrictMath.toRadians(latA)));\n    final double U2 = StrictMath.atan(oF * StrictMath.tan(StrictMath.toRadians(latB)));\n    final double sU1 = StrictMath.sin(U1);\n    final double cU1 = StrictMath.cos(U1);\n    final double sU2 = StrictMath.sin(U2);\n    final double cU2 = StrictMath.cos(U2);\n\n    double sigma, sinSigma, cosSigma;\n    double sinAlpha, cos2Alpha, cos2SigmaM;\n    double lambda = L;\n    double lambdaP;\n    double iters = 100;\n    double sinLambda, cosLambda, c;\n\n    do {\n      sinLambda = StrictMath.sin(lambda);\n      cosLambda = Math.cos(lambda);\n      sinSigma = Math.sqrt((cU2 * sinLambda) * (cU2 * sinLambda) + (cU1 * sU2 - sU1 * cU2 * cosLambda)\n          * (cU1 * sU2 - sU1 * cU2 * cosLambda));\n      if (sinSigma == 0) {\n        return 0;\n      }\n\n      cosSigma = sU1 * sU2 + cU1 * cU2 * cosLambda;\n      sigma = Math.atan2(sinSigma, cosSigma);\n      sinAlpha = cU1 * cU2 * sinLambda / sinSigma;\n      cos2Alpha = 1 - sinAlpha * sinAlpha;\n      cos2SigmaM = cosSigma - 2 * sU1 * sU2 / cos2Alpha;\n\n      c = GeoProjectionUtils.FLATTENING/16 * cos2Alpha * (4 + GeoProjectionUtils.FLATTENING * (4 - 3 * cos2Alpha));\n      lambdaP = lambda;\n      lambda = L + (1 - c) * GeoProjectionUtils.FLATTENING * sinAlpha * (sigma + c * sinSigma * (cos2SigmaM + c * cosSigma *\n          (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n    } while (StrictMath.abs(lambda - lambdaP) > 1E-12 && --iters > 0);\n\n    if (iters == 0) {\n      return 0;\n    }\n\n    final double uSq = cos2Alpha * (GeoProjectionUtils.SEMIMAJOR_AXIS2 - GeoProjectionUtils.SEMIMINOR_AXIS2) / (GeoProjectionUtils.SEMIMINOR_AXIS2);\n    final double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\n    final double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\n    final double deltaSigma = B * sinSigma * (cos2SigmaM + B/4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B/6 * cos2SigmaM\n        * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\n\n    return (GeoProjectionUtils.SEMIMINOR_AXIS * A * (sigma - deltaSigma));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#vincentyDistance(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#vincentyDistance(double,double,double,double).mjava","sourceNew":"  /**\n   * Compute the distance between two geo-points using vincenty distance formula\n   * Vincenty uses the oblate spheroid whereas haversine uses unit sphere, this will give roughly\n   * 22m better accuracy (in worst case) than haversine\n   *\n   * @param lonA longitudinal coordinate of point A (in degrees)\n   * @param latA latitudinal coordinate of point A (in degrees)\n   * @param lonB longitudinal coordinate of point B (in degrees)\n   * @param latB latitudinal coordinate of point B (in degrees)\n   * @return distance (in meters) between point A and point B\n   */\n  public static final double vincentyDistance(final double lonA, final double latA, final double lonB, final double latB) {\n    final double L = StrictMath.toRadians(lonB - lonA);\n    final double oF = 1 - GeoProjectionUtils.FLATTENING;\n    final double U1 = StrictMath.atan(oF * StrictMath.tan(StrictMath.toRadians(latA)));\n    final double U2 = StrictMath.atan(oF * StrictMath.tan(StrictMath.toRadians(latB)));\n    final double sU1 = StrictMath.sin(U1);\n    final double cU1 = StrictMath.cos(U1);\n    final double sU2 = StrictMath.sin(U2);\n    final double cU2 = StrictMath.cos(U2);\n\n    double sigma, sinSigma, cosSigma;\n    double sinAlpha, cos2Alpha, cos2SigmaM;\n    double lambda = L;\n    double lambdaP;\n    double iters = 100;\n    double sinLambda, cosLambda, c;\n\n    do {\n      sinLambda = StrictMath.sin(lambda);\n      cosLambda = Math.cos(lambda);\n      sinSigma = Math.sqrt((cU2 * sinLambda) * (cU2 * sinLambda) + (cU1 * sU2 - sU1 * cU2 * cosLambda)\n          * (cU1 * sU2 - sU1 * cU2 * cosLambda));\n      if (sinSigma == 0) {\n        return 0;\n      }\n\n      cosSigma = sU1 * sU2 + cU1 * cU2 * cosLambda;\n      sigma = Math.atan2(sinSigma, cosSigma);\n      sinAlpha = cU1 * cU2 * sinLambda / sinSigma;\n      cos2Alpha = 1 - sinAlpha * sinAlpha;\n      cos2SigmaM = cosSigma - 2 * sU1 * sU2 / cos2Alpha;\n\n      c = GeoProjectionUtils.FLATTENING/16 * cos2Alpha * (4 + GeoProjectionUtils.FLATTENING * (4 - 3 * cos2Alpha));\n      lambdaP = lambda;\n      lambda = L + (1 - c) * GeoProjectionUtils.FLATTENING * sinAlpha * (sigma + c * sinSigma * (cos2SigmaM + c * cosSigma *\n          (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n    } while (StrictMath.abs(lambda - lambdaP) > 1E-12 && --iters > 0);\n\n    if (iters == 0) {\n      return 0;\n    }\n\n    final double uSq = cos2Alpha * (GeoProjectionUtils.SEMIMAJOR_AXIS2 - GeoProjectionUtils.SEMIMINOR_AXIS2) / (GeoProjectionUtils.SEMIMINOR_AXIS2);\n    final double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\n    final double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\n    final double deltaSigma = B * sinSigma * (cos2SigmaM + B/4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B/6 * cos2SigmaM\n        * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\n\n    return (GeoProjectionUtils.SEMIMINOR_AXIS * A * (sigma - deltaSigma));\n  }\n\n","sourceOld":"  /**\n   * Compute the distance between two geo-points using vincenty distance formula\n   * Vincenty uses the oblate spheroid whereas haversine uses unit sphere, this will give roughly\n   * 22m better accuracy (in worst case) than haversine\n   *\n   * @param lonA longitudinal coordinate of point A (in degrees)\n   * @param latA latitudinal coordinate of point A (in degrees)\n   * @param lonB longitudinal coordinate of point B (in degrees)\n   * @param latB latitudinal coordinate of point B (in degrees)\n   * @return distance (in meters) between point A and point B\n   */\n  public static final double vincentyDistance(final double lonA, final double latA, final double lonB, final double latB) {\n    final double L = StrictMath.toRadians(lonB - lonA);\n    final double oF = 1 - GeoProjectionUtils.FLATTENING;\n    final double U1 = StrictMath.atan(oF * StrictMath.tan(StrictMath.toRadians(latA)));\n    final double U2 = StrictMath.atan(oF * StrictMath.tan(StrictMath.toRadians(latB)));\n    final double sU1 = StrictMath.sin(U1);\n    final double cU1 = StrictMath.cos(U1);\n    final double sU2 = StrictMath.sin(U2);\n    final double cU2 = StrictMath.cos(U2);\n\n    double sigma, sinSigma, cosSigma;\n    double sinAlpha, cos2Alpha, cos2SigmaM;\n    double lambda = L;\n    double lambdaP;\n    double iters = 100;\n    double sinLambda, cosLambda, c;\n\n    do {\n      sinLambda = StrictMath.sin(lambda);\n      cosLambda = Math.cos(lambda);\n      sinSigma = Math.sqrt((cU2 * sinLambda) * (cU2 * sinLambda) + (cU1 * sU2 - sU1 * cU2 * cosLambda)\n          * (cU1 * sU2 - sU1 * cU2 * cosLambda));\n      if (sinSigma == 0) {\n        return 0;\n      }\n\n      cosSigma = sU1 * sU2 + cU1 * cU2 * cosLambda;\n      sigma = Math.atan2(sinSigma, cosSigma);\n      sinAlpha = cU1 * cU2 * sinLambda / sinSigma;\n      cos2Alpha = 1 - sinAlpha * sinAlpha;\n      cos2SigmaM = cosSigma - 2 * sU1 * sU2 / cos2Alpha;\n\n      c = GeoProjectionUtils.FLATTENING/16 * cos2Alpha * (4 + GeoProjectionUtils.FLATTENING * (4 - 3 * cos2Alpha));\n      lambdaP = lambda;\n      lambda = L + (1 - c) * GeoProjectionUtils.FLATTENING * sinAlpha * (sigma + c * sinSigma * (cos2SigmaM + c * cosSigma *\n          (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n    } while (StrictMath.abs(lambda - lambdaP) > 1E-12 && --iters > 0);\n\n    if (iters == 0) {\n      return 0;\n    }\n\n    final double uSq = cos2Alpha * (GeoProjectionUtils.SEMIMAJOR_AXIS2 - GeoProjectionUtils.SEMIMINOR_AXIS2) / (GeoProjectionUtils.SEMIMINOR_AXIS2);\n    final double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\n    final double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\n    final double deltaSigma = B * sinSigma * (cos2SigmaM + B/4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B/6 * cos2SigmaM\n        * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\n\n    return (GeoProjectionUtils.SEMIMINOR_AXIS * A * (sigma - deltaSigma));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}