{"path":"backwards/src/java/org/apache/lucene/store/NativeFSLockFactory#acquireTestLock().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/store/NativeFSLockFactory#acquireTestLock().mjava","pathOld":"/dev/null","sourceNew":"  // Simple test to verify locking system is \"working\".  On\n  // NFS, if it's misconfigured, you can hit long (35\n  // second) timeouts which cause Lock.obtain to take far\n  // too long (it assumes the obtain() call takes zero\n  // time). \n  private synchronized void acquireTestLock() {\n    if (tested) return;\n    tested = true;\n    \n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new RuntimeException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new RuntimeException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String randomLockName = \"lucene-\" + Long.toString(new Random().nextInt(), Character.MAX_RADIX) + \"-test.lock\";\n    \n    Lock l = makeLock(randomLockName);\n    try {\n      l.obtain();\n      l.release();\n    } catch (IOException e) {\n      RuntimeException e2 = new RuntimeException(\"Failed to acquire random test lock; please verify filesystem for lock directory '\" + lockDir + \"' supports locking\");\n      e2.initCause(e);\n      throw e2;\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/store/NativeFSLockFactory#acquireTestLock().mjava","pathOld":"backwards/src/java/org/apache/lucene/store/NativeFSLockFactory#acquireTestLock().mjava","sourceNew":"  // Simple test to verify locking system is \"working\".  On\n  // NFS, if it's misconfigured, you can hit long (35\n  // second) timeouts which cause Lock.obtain to take far\n  // too long (it assumes the obtain() call takes zero\n  // time). \n  private synchronized void acquireTestLock() {\n    if (tested) return;\n    tested = true;\n    \n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new RuntimeException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new RuntimeException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String randomLockName = \"lucene-\" + Long.toString(new Random().nextInt(), Character.MAX_RADIX) + \"-test.lock\";\n    \n    Lock l = makeLock(randomLockName);\n    try {\n      l.obtain();\n      l.release();\n    } catch (IOException e) {\n      RuntimeException e2 = new RuntimeException(\"Failed to acquire random test lock; please verify filesystem for lock directory '\" + lockDir + \"' supports locking\");\n      e2.initCause(e);\n      throw e2;\n    }    \n  }\n\n","sourceOld":"  // Simple test to verify locking system is \"working\".  On\n  // NFS, if it's misconfigured, you can hit long (35\n  // second) timeouts which cause Lock.obtain to take far\n  // too long (it assumes the obtain() call takes zero\n  // time). \n  private synchronized void acquireTestLock() {\n    if (tested) return;\n    tested = true;\n    \n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new RuntimeException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new RuntimeException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String randomLockName = \"lucene-\" + Long.toString(new Random().nextInt(), Character.MAX_RADIX) + \"-test.lock\";\n    \n    Lock l = makeLock(randomLockName);\n    try {\n      l.obtain();\n      l.release();\n    } catch (IOException e) {\n      RuntimeException e2 = new RuntimeException(\"Failed to acquire random test lock; please verify filesystem for lock directory '\" + lockDir + \"' supports locking\");\n      e2.initCause(e);\n      throw e2;\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}