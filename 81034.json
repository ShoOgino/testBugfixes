{"path":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"/dev/null","sourceNew":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}