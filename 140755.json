{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","sourceNew":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","sourceNew":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","sourceNew":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","sourceNew":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a71f07194b14c00192d28584f63e85f5b4a0e3","date":1478975337,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","sourceNew":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    searcher.setSimilarity(new BM25Similarity());\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8597ad31f3bd83484bae2724a909763e79605274","date":1479075220,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","sourceNew":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    searcher.setSimilarity(new BM25Similarity());\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14acec2bcfbfe2ae5ee0054eb77b1171642fc709","date":1515697694,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","sourceNew":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // this test expects the freq to make doc 1 scores greater than doc 0\n    searcher.setSimilarity(new BM25Similarity());\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","sourceNew":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // this test expects the freq to make doc 1 scores greater than doc 0\n    searcher.setSimilarity(new BM25Similarity());\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testFieldScoreReverse().mjava","sourceNew":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // this test expects the freq to make doc 1 scores greater than doc 0\n    searcher.setSimilarity(new BM25Similarity());\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits.value);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits.value, actual.totalHits.value);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) in reverse */\n  public void testFieldScoreReverse() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // this test expects the freq to make doc 1 scores greater than doc 0\n    searcher.setSimilarity(new BM25Similarity());\n    Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the reverse of each other\n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);\n    assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["0e121d43b5a10f2df530f406f935102656e9c4e8","14acec2bcfbfe2ae5ee0054eb77b1171642fc709"],"8597ad31f3bd83484bae2724a909763e79605274":["b5a71f07194b14c00192d28584f63e85f5b4a0e3"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"14acec2bcfbfe2ae5ee0054eb77b1171642fc709":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["b94236357aaa22b76c10629851fe4e376e0cea82"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"b5a71f07194b14c00192d28584f63e85f5b4a0e3":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"8597ad31f3bd83484bae2724a909763e79605274":[],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"14acec2bcfbfe2ae5ee0054eb77b1171642fc709":["b94236357aaa22b76c10629851fe4e376e0cea82"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["b94236357aaa22b76c10629851fe4e376e0cea82","14acec2bcfbfe2ae5ee0054eb77b1171642fc709","83870855d82aba6819217abeff5a40779dbb28b4","b5a71f07194b14c00192d28584f63e85f5b4a0e3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"b5a71f07194b14c00192d28584f63e85f5b4a0e3":["8597ad31f3bd83484bae2724a909763e79605274"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8597ad31f3bd83484bae2724a909763e79605274","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}