{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#assertNoMoreDoc(DocIdSetIterator,int).mjava","commits":[{"id":"181db58a040d7aebaeb7a74578bd9b9aa603af6c","date":1497965469,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#assertNoMoreDoc(DocIdSetIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  static void assertNoMoreDoc(DocIdSetIterator sdv, int maxDoc) throws IOException{\n    Random r = random();\n    if(r.nextBoolean()){\n      assertEquals(NO_MORE_DOCS, sdv.nextDoc());\n    } else {\n      if (r.nextBoolean()) {\n        assertEquals(NO_MORE_DOCS,  sdv.advance(sdv.docID()+random().nextInt(maxDoc-sdv.docID())));\n      } else {\n        final int noMatchDoc = sdv.docID()+random().nextInt(maxDoc-sdv.docID()-1)+1;\n        assertFalse(advanceExact(sdv,noMatchDoc));\n        assertEquals(noMatchDoc, sdv.docID());\n        if (r.nextBoolean()){\n          assertEquals(NO_MORE_DOCS, sdv.nextDoc());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#assertNoMoreDoc(DocIdSetIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  static void assertNoMoreDoc(DocIdSetIterator sdv, int maxDoc) throws IOException{\n    Random r = random();\n    if(r.nextBoolean()){\n      assertEquals(NO_MORE_DOCS, sdv.nextDoc());\n    } else {\n      if (r.nextBoolean()) {\n        assertEquals(NO_MORE_DOCS,  sdv.advance(sdv.docID()+random().nextInt(maxDoc-sdv.docID())));\n      } else {\n        final int noMatchDoc = sdv.docID()+random().nextInt(maxDoc-sdv.docID()-1)+1;\n        assertFalse(advanceExact(sdv,noMatchDoc));\n        assertEquals(noMatchDoc, sdv.docID());\n        if (r.nextBoolean()){\n          assertEquals(NO_MORE_DOCS, sdv.nextDoc());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["181db58a040d7aebaeb7a74578bd9b9aa603af6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"30c8e5574b55d57947e989443dfde611646530ee":[],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}