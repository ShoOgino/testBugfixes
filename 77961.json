{"path":"solr/solrj/src/test/org/noggit/TestJSONParser#testCorruption(String,int).mjava","commits":[{"id":"980f4ef5a16664be88d82c37e6af5c49a3d57c9c","date":1557969027,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/noggit/TestJSONParser#testCorruption(String,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void testCorruption(String input, int iter) {\n    char[] arr = new char[input.length()];\n\n    for (int i=0; i<iter; i++) {\n      input.getChars(0, arr.length, arr, 0);\n      int changes = random().nextInt(arr.length>>1) + 1;\n      for (int j=0; j<changes; j++) {\n        char ch;\n        switch (random().nextInt(31)) {\n          case 0: ch = 0; break;\n          case 1: ch = '['; break;\n          case 2: ch = ']'; break;\n          case 3: ch = '{'; break;\n          case 4: ch = '}'; break;\n          case 5: ch = '\"'; break;\n          case 6: ch = '\\''; break;\n          case 7: ch = ' '; break;\n          case 8: ch = '\\r'; break;\n          case 9: ch = '\\n'; break;\n          case 10:ch = '\\t'; break;\n          case 11:ch = ','; break;\n          case 12:ch = ':'; break;\n          case 13:ch = '.'; break;\n          case 14:ch = 'a'; break;\n          case 15:ch = 'e'; break;\n          case 16:ch = '0'; break;\n          case 17:ch = '1'; break;\n          case 18:ch = '+'; break;\n          case 19:ch = '-'; break;\n          case 20:ch = 't'; break;\n          case 21:ch = 'f'; break;\n          case 22:ch = 'n'; break;\n          case 23:ch = '/'; break;\n          case 24:ch = '\\\\'; break;\n          case 25:ch = 'u'; break;\n          case 26:ch = '\\u00a0'; break;\n          default:ch = (char) random().nextInt(256);\n        }\n\n        arr[random().nextInt(arr.length)] = ch;\n      }\n\n\n      JSONParser parser = getParser(new String(arr));\n      parser.setFlags( random().nextInt() );  // set random parser flags\n\n      int ret = 0;\n      try {\n        for (;;) {\n          int ev = parser.nextEvent();\n          if (random().nextBoolean()) {\n            // see if we can read the event\n            switch (ev) {\n              case JSONParser.STRING: ret += parser.getString().length(); break;\n              case JSONParser.BOOLEAN: ret += parser.getBoolean() ? 1 : 2; break;\n              case JSONParser.BIGNUMBER: ret += parser.getNumberChars().length(); break;\n              case JSONParser.NUMBER: ret += parser.getDouble(); break;\n              case JSONParser.LONG: ret += parser.getLong(); break;\n              default: ret += ev;\n            }\n          }\n\n          if (ev == JSONParser.EOF) break;\n        }\n      } catch (IOException ex) {\n        // shouldn't happen\n        System.out.println(ret);  // use ret\n      } catch (JSONParser.ParseException ex) {\n        // OK\n      } catch (Throwable ex) {\n        ex.printStackTrace();\n        System.out.println(lastParser());\n        throw new RuntimeException(ex);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"980f4ef5a16664be88d82c37e6af5c49a3d57c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["980f4ef5a16664be88d82c37e6af5c49a3d57c9c"]},"commit2Childs":{"980f4ef5a16664be88d82c37e6af5c49a3d57c9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["980f4ef5a16664be88d82c37e6af5c49a3d57c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}