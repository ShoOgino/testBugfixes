{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#step(int,int).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#step(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#step(int,int).mjava","sourceNew":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param c codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   * @see #step(int, Collection)\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // TODO: we could do bin search; transitions are sorted\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param c codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   * @see #step(int, Collection)\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // TODO: we could do bin search; transitions are sorted\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#step(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#step(int,int).mjava","sourceNew":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param state starting state\n   * @param label codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // TODO: we could do bin search; transitions are sorted\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param c codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   * @see #step(int, Collection)\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // TODO: we could do bin search; transitions are sorted\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#step(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param state starting state\n   * @param label codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // TODO: we could do bin search; transitions are sorted\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6e1f11b7318d917420b640db7b796381c39c7c8","date":1578907651,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#step(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#step(int,int).mjava","sourceNew":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param state starting state\n   * @param label codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   */\n  public int step(int state, int label) {\n    return next(state, 0, label, null);\n  }\n\n","sourceOld":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param state starting state\n   * @param label codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // TODO: we could do bin search; transitions are sorted\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2509bad1fbf30792438821cc94f7a5e1a13d5473","date":1578934553,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#step(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#step(int,int).mjava","sourceNew":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param state starting state\n   * @param label codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   */\n  public int step(int state, int label) {\n    return next(state, 0, label, null);\n  }\n\n","sourceOld":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param state starting state\n   * @param label codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // TODO: we could do bin search; transitions are sorted\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6e1f11b7318d917420b640db7b796381c39c7c8":["5c84485629d80d203608e8975a1139de9933cc38"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6e1f11b7318d917420b640db7b796381c39c7c8"],"2509bad1fbf30792438821cc94f7a5e1a13d5473":["5c84485629d80d203608e8975a1139de9933cc38","d6e1f11b7318d917420b640db7b796381c39c7c8"]},"commit2Childs":{"d6e1f11b7318d917420b640db7b796381c39c7c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["d6e1f11b7318d917420b640db7b796381c39c7c8","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2509bad1fbf30792438821cc94f7a5e1a13d5473":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}