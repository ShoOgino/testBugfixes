{"path":"src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      SolrServer client = new CommonsHttpSolrServer(\"http://333.333.333.333:8080/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      SolrServer client = new CommonsHttpSolrServer(\"http://333.333.333.333:8080/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b09c7c3fded758195e480681d8acaf75cac83fb","date":1253204893,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      SolrServer client = new CommonsHttpSolrServer(\"http://localhost:11235/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      SolrServer client = new CommonsHttpSolrServer(\"http://333.333.333.333:8080/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      SolrServer client = new CommonsHttpSolrServer(\"http://localhost:11235/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      SolrServer client = new CommonsHttpSolrServer(\"http://localhost:11235/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["4b09c7c3fded758195e480681d8acaf75cac83fb"],"4b09c7c3fded758195e480681d8acaf75cac83fb":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["4b09c7c3fded758195e480681d8acaf75cac83fb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"4b09c7c3fded758195e480681d8acaf75cac83fb":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}