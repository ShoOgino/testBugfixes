{"path":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#assertRegistered(String,Map[String,Counter],SolrCoreMetricManager).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#assertRegistered(String,Map[String,Counter],SolrCoreMetricManager).mjava","pathOld":"/dev/null","sourceNew":"  private void assertRegistered(String scope, Map<String, Counter> newMetrics, SolrCoreMetricManager coreMetricManager) {\n    if (scope == null) {\n      return;\n    }\n    String filter = \".\" + scope + \".\";\n    MetricRegistry registry = metricManager.registry(coreMetricManager.getRegistryName());\n    assertEquals(newMetrics.size(), registry.getMetrics().\n        keySet().stream().filter(s -> s.contains(filter)).count());\n\n    Map<String, Metric> registeredMetrics = registry.getMetrics().\n        entrySet().stream().filter(e -> e.getKey() != null && e.getKey().contains(filter)).\n        collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    for (Map.Entry<String, Metric> entry : registeredMetrics.entrySet()) {\n      String name = entry.getKey();\n      Metric expectedMetric = entry.getValue();\n\n      Metric actualMetric = registry.getMetrics().get(name);\n\n      assertNotNull(actualMetric);\n      assertEquals(expectedMetric, actualMetric);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#assertRegistered(String,Map[String,Counter],SolrCoreMetricManager).mjava","pathOld":"/dev/null","sourceNew":"  private void assertRegistered(String scope, Map<String, Counter> newMetrics, SolrCoreMetricManager coreMetricManager) {\n    if (scope == null) {\n      return;\n    }\n    String filter = \".\" + scope + \".\";\n    MetricRegistry registry = metricManager.registry(coreMetricManager.getRegistryName());\n    assertEquals(newMetrics.size(), registry.getMetrics().\n        keySet().stream().filter(s -> s.contains(filter)).count());\n\n    Map<String, Metric> registeredMetrics = registry.getMetrics().\n        entrySet().stream().filter(e -> e.getKey() != null && e.getKey().contains(filter)).\n        collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    for (Map.Entry<String, Metric> entry : registeredMetrics.entrySet()) {\n      String name = entry.getKey();\n      Metric expectedMetric = entry.getValue();\n\n      Metric actualMetric = registry.getMetrics().get(name);\n\n      assertNotNull(actualMetric);\n      assertEquals(expectedMetric, actualMetric);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d646b44d1d17a867bcd0e7a07b11c4837b169366","date":1483540291,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#assertRegistered(String,Map[String,Counter],SolrCoreMetricManager).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#assertRegistered(String,Map[String,Counter],SolrCoreMetricManager).mjava","sourceNew":"  private void assertRegistered(String scope, Map<String, Counter> newMetrics, SolrCoreMetricManager coreMetricManager) {\n    if (scope == null || newMetrics == null) {\n      return;\n    }\n    String filter = \".\" + scope + \".\";\n    MetricRegistry registry = metricManager.registry(coreMetricManager.getRegistryName());\n    assertEquals(newMetrics.size(), registry.getMetrics().\n        keySet().stream().filter(s -> s.contains(filter)).count());\n\n    Map<String, Metric> registeredMetrics = registry.getMetrics().\n        entrySet().stream().filter(e -> e.getKey() != null && e.getKey().contains(filter)).\n        collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    for (Map.Entry<String, Metric> entry : registeredMetrics.entrySet()) {\n      String name = entry.getKey();\n      Metric expectedMetric = entry.getValue();\n\n      Metric actualMetric = registry.getMetrics().get(name);\n\n      assertNotNull(actualMetric);\n      assertEquals(expectedMetric, actualMetric);\n    }\n  }\n\n","sourceOld":"  private void assertRegistered(String scope, Map<String, Counter> newMetrics, SolrCoreMetricManager coreMetricManager) {\n    if (scope == null) {\n      return;\n    }\n    String filter = \".\" + scope + \".\";\n    MetricRegistry registry = metricManager.registry(coreMetricManager.getRegistryName());\n    assertEquals(newMetrics.size(), registry.getMetrics().\n        keySet().stream().filter(s -> s.contains(filter)).count());\n\n    Map<String, Metric> registeredMetrics = registry.getMetrics().\n        entrySet().stream().filter(e -> e.getKey() != null && e.getKey().contains(filter)).\n        collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    for (Map.Entry<String, Metric> entry : registeredMetrics.entrySet()) {\n      String name = entry.getKey();\n      Metric expectedMetric = entry.getValue();\n\n      Metric actualMetric = registry.getMetrics().get(name);\n\n      assertNotNull(actualMetric);\n      assertEquals(expectedMetric, actualMetric);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#assertRegistered(String,Map[String,Counter],SolrCoreMetricManager).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#assertRegistered(String,Map[String,Counter],SolrCoreMetricManager).mjava","sourceNew":"  private void assertRegistered(String scope, Map<String, Counter> newMetrics, SolrCoreMetricManager coreMetricManager) {\n    if (scope == null || newMetrics == null) {\n      return;\n    }\n    String filter = \".\" + scope + \".\";\n    MetricRegistry registry = metricManager.registry(coreMetricManager.getRegistryName());\n    assertEquals(newMetrics.size(), registry.getMetrics().\n        keySet().stream().filter(s -> s.contains(filter)).count());\n\n    Map<String, Metric> registeredMetrics = registry.getMetrics().\n        entrySet().stream().filter(e -> e.getKey() != null && e.getKey().contains(filter)).\n        collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    for (Map.Entry<String, Metric> entry : registeredMetrics.entrySet()) {\n      String name = entry.getKey();\n      Metric expectedMetric = entry.getValue();\n\n      Metric actualMetric = registry.getMetrics().get(name);\n\n      assertNotNull(actualMetric);\n      assertEquals(expectedMetric, actualMetric);\n    }\n  }\n\n","sourceOld":"  private void assertRegistered(String scope, Map<String, Counter> newMetrics, SolrCoreMetricManager coreMetricManager) {\n    if (scope == null) {\n      return;\n    }\n    String filter = \".\" + scope + \".\";\n    MetricRegistry registry = metricManager.registry(coreMetricManager.getRegistryName());\n    assertEquals(newMetrics.size(), registry.getMetrics().\n        keySet().stream().filter(s -> s.contains(filter)).count());\n\n    Map<String, Metric> registeredMetrics = registry.getMetrics().\n        entrySet().stream().filter(e -> e.getKey() != null && e.getKey().contains(filter)).\n        collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    for (Map.Entry<String, Metric> entry : registeredMetrics.entrySet()) {\n      String name = entry.getKey();\n      Metric expectedMetric = entry.getValue();\n\n      Metric actualMetric = registry.getMetrics().get(name);\n\n      assertNotNull(actualMetric);\n      assertEquals(expectedMetric, actualMetric);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d646b44d1d17a867bcd0e7a07b11c4837b169366"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d646b44d1d17a867bcd0e7a07b11c4837b169366"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}