{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewriteNoScoring().mjava","commits":[{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewriteNoScoring().mjava","pathOld":"/dev/null","sourceNew":"  private BooleanQuery rewriteNoScoring() {\n    BooleanQuery.Builder newQuery = new BooleanQuery.Builder();\n    // ignore disableCoord, which only matters for scores\n    newQuery.setMinimumNumberShouldMatch(getMinimumNumberShouldMatch());\n    for (BooleanClause clause : clauses) {\n      if (clause.getOccur() == Occur.MUST) {\n        newQuery.add(clause.getQuery(), Occur.FILTER);\n      } else {\n        newQuery.add(clause);\n      }\n    }\n    return newQuery.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f881bd0a7d308ea6cde1bb971c7d0a9ccb721e42","date":1489232509,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewriteNoScoring().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewriteNoScoring().mjava","sourceNew":"  private BooleanQuery rewriteNoScoring() {\n    BooleanQuery.Builder newQuery = new BooleanQuery.Builder();\n    newQuery.setMinimumNumberShouldMatch(getMinimumNumberShouldMatch());\n    for (BooleanClause clause : clauses) {\n      if (clause.getOccur() == Occur.MUST) {\n        newQuery.add(clause.getQuery(), Occur.FILTER);\n      } else {\n        newQuery.add(clause);\n      }\n    }\n    return newQuery.build();\n  }\n\n","sourceOld":"  private BooleanQuery rewriteNoScoring() {\n    BooleanQuery.Builder newQuery = new BooleanQuery.Builder();\n    // ignore disableCoord, which only matters for scores\n    newQuery.setMinimumNumberShouldMatch(getMinimumNumberShouldMatch());\n    for (BooleanClause clause : clauses) {\n      if (clause.getOccur() == Occur.MUST) {\n        newQuery.add(clause.getQuery(), Occur.FILTER);\n      } else {\n        newQuery.add(clause);\n      }\n    }\n    return newQuery.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"477000e6979fcc793e5aab2ace92a62d30cdbed3","date":1518442826,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewriteNoScoring().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewriteNoScoring().mjava","sourceNew":"  private BooleanQuery rewriteNoScoring() {\n    if (clauseSets.get(Occur.MUST).size() == 0) {\n      return this;\n    }\n    BooleanQuery.Builder newQuery = new BooleanQuery.Builder();\n    newQuery.setMinimumNumberShouldMatch(getMinimumNumberShouldMatch());\n    for (BooleanClause clause : clauses) {\n      if (clause.getOccur() == Occur.MUST) {\n        newQuery.add(clause.getQuery(), Occur.FILTER);\n      } else {\n        newQuery.add(clause);\n      }\n    }\n    return newQuery.build();\n  }\n\n","sourceOld":"  private BooleanQuery rewriteNoScoring() {\n    BooleanQuery.Builder newQuery = new BooleanQuery.Builder();\n    newQuery.setMinimumNumberShouldMatch(getMinimumNumberShouldMatch());\n    for (BooleanClause clause : clauses) {\n      if (clause.getOccur() == Occur.MUST) {\n        newQuery.add(clause.getQuery(), Occur.FILTER);\n      } else {\n        newQuery.add(clause);\n      }\n    }\n    return newQuery.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewriteNoScoring().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewriteNoScoring().mjava","sourceNew":"  private BooleanQuery rewriteNoScoring() {\n    if (clauseSets.get(Occur.MUST).size() == 0) {\n      return this;\n    }\n    BooleanQuery.Builder newQuery = new BooleanQuery.Builder();\n    newQuery.setMinimumNumberShouldMatch(getMinimumNumberShouldMatch());\n    for (BooleanClause clause : clauses) {\n      if (clause.getOccur() == Occur.MUST) {\n        newQuery.add(clause.getQuery(), Occur.FILTER);\n      } else {\n        newQuery.add(clause);\n      }\n    }\n    return newQuery.build();\n  }\n\n","sourceOld":"  private BooleanQuery rewriteNoScoring() {\n    BooleanQuery.Builder newQuery = new BooleanQuery.Builder();\n    newQuery.setMinimumNumberShouldMatch(getMinimumNumberShouldMatch());\n    for (BooleanClause clause : clauses) {\n      if (clause.getOccur() == Occur.MUST) {\n        newQuery.add(clause.getQuery(), Occur.FILTER);\n      } else {\n        newQuery.add(clause);\n      }\n    }\n    return newQuery.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb","date":1557385218,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewriteNoScoring().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewriteNoScoring().mjava","sourceNew":"  private BooleanQuery rewriteNoScoring() {\n    boolean keepShould = getMinimumNumberShouldMatch() > 0\n        || (clauseSets.get(Occur.MUST).size() + clauseSets.get(Occur.FILTER).size() == 0);\n\n    if (clauseSets.get(Occur.MUST).size() == 0 && keepShould) {\n      return this;\n    }\n    BooleanQuery.Builder newQuery = new BooleanQuery.Builder();\n\n    newQuery.setMinimumNumberShouldMatch(getMinimumNumberShouldMatch());\n    for (BooleanClause clause : clauses) {\n      switch (clause.getOccur()) {\n        case MUST: {\n          newQuery.add(clause.getQuery(), Occur.FILTER);\n          break;\n        }\n        case SHOULD: {\n          if (keepShould) {\n            newQuery.add(clause);\n          }\n          break;\n        }\n        default: {\n          newQuery.add(clause);\n        }\n      }\n    }\n\n    return newQuery.build();\n  }\n\n","sourceOld":"  private BooleanQuery rewriteNoScoring() {\n    if (clauseSets.get(Occur.MUST).size() == 0) {\n      return this;\n    }\n    BooleanQuery.Builder newQuery = new BooleanQuery.Builder();\n    newQuery.setMinimumNumberShouldMatch(getMinimumNumberShouldMatch());\n    for (BooleanClause clause : clauses) {\n      if (clause.getOccur() == Occur.MUST) {\n        newQuery.add(clause.getQuery(), Occur.FILTER);\n      } else {\n        newQuery.add(clause);\n      }\n    }\n    return newQuery.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"477000e6979fcc793e5aab2ace92a62d30cdbed3":["f881bd0a7d308ea6cde1bb971c7d0a9ccb721e42"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f881bd0a7d308ea6cde1bb971c7d0a9ccb721e42":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["f881bd0a7d308ea6cde1bb971c7d0a9ccb721e42","477000e6979fcc793e5aab2ace92a62d30cdbed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3b18b7e0f913460bf896d65b6de19fad9cdf6fb"]},"commit2Childs":{"477000e6979fcc793e5aab2ace92a62d30cdbed3":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f881bd0a7d308ea6cde1bb971c7d0a9ccb721e42"],"f881bd0a7d308ea6cde1bb971c7d0a9ccb721e42":["477000e6979fcc793e5aab2ace92a62d30cdbed3","bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["f3b18b7e0f913460bf896d65b6de19fad9cdf6fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}