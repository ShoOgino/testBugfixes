{"path":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_split(List[T],int,int).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_split(List[T],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T extends Comparable<T>> T split(List<T> list, int begin, int end) {\n    T temp;\n    int num = (end - begin + 1);\n    int recursiveSize = (int) Math.sqrt((double) num);\n    int step = num / recursiveSize;\n    for (int i = 1; i < recursiveSize; i++) {\n      int swapFrom = i * step + begin;\n      int swapTo = i + begin;\n      temp = list.get(swapFrom);\n      list.set(swapFrom, list.get(swapTo));\n      list.set(swapTo, temp);\n    }\n    recursiveSize--;\n    select(list, recursiveSize / 2 + begin, begin, recursiveSize + begin);\n    return list.get(recursiveSize / 2 + begin);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_split(List[T],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T extends Comparable<T>> T split(List<T> list, int begin, int end) {\n    T temp;\n    int num = (end - begin + 1);\n    int recursiveSize = (int) Math.sqrt((double) num);\n    int step = num / recursiveSize;\n    for (int i = 1; i < recursiveSize; i++) {\n      int swapFrom = i * step + begin;\n      int swapTo = i + begin;\n      temp = list.get(swapFrom);\n      list.set(swapFrom, list.get(swapTo));\n      list.set(swapTo, temp);\n    }\n    recursiveSize--;\n    select(list, recursiveSize / 2 + begin, begin, recursiveSize + begin);\n    return list.get(recursiveSize / 2 + begin);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_split(List[T],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_split(List[T],int,int).mjava","sourceNew":"  private static <T extends Comparable<T>> T split(List<T> list, int begin, int end) {\n    T temp;\n    int num = (end - begin + 1);\n    int recursiveSize = (int) Math.sqrt((double) num);\n    int step = num / recursiveSize;\n    for (int i = 1; i < recursiveSize; i++) {\n      int swapFrom = i * step + begin;\n      int swapTo = i + begin;\n      temp = list.get(swapFrom);\n      list.set(swapFrom, list.get(swapTo));\n      list.set(swapTo, temp);\n    }\n    recursiveSize--;\n    select(list, recursiveSize / 2 + begin, begin, recursiveSize + begin);\n    return list.get(recursiveSize / 2 + begin);\n  }\n\n","sourceOld":"  private static <T extends Comparable<T>> T split(List<T> list, int begin, int end) {\n    T temp;\n    int num = (end - begin + 1);\n    int recursiveSize = (int) Math.sqrt((double) num);\n    int step = num / recursiveSize;\n    for (int i = 1; i < recursiveSize; i++) {\n      int swapFrom = i * step + begin;\n      int swapTo = i + begin;\n      temp = list.get(swapFrom);\n      list.set(swapFrom, list.get(swapTo));\n      list.set(swapTo, temp);\n    }\n    recursiveSize--;\n    select(list, recursiveSize / 2 + begin, begin, recursiveSize + begin);\n    return list.get(recursiveSize / 2 + begin);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["ff403346522eaa9de75403763e297e83a3ea585c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}