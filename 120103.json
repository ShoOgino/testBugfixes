{"path":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#testSameShapeManyTimes().mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#testSameShapeManyTimes().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#testSameShapeManyTimes().mjava","sourceNew":"  // A particularly tricky adversary for BKD tree:\n  public void testSameShapeManyTimes() throws Exception {\n    int numShapes = atLeast(500);\n\n    // Every doc has 2 points:\n    Object theShape = nextShape();\n\n    Object[] shapes = new Object[numShapes];\n    Arrays.fill(shapes, theShape);\n\n    verify(shapes);\n  }\n\n","sourceOld":"  // A particularly tricky adversary for BKD tree:\n  public void testSameShapeManyTimes() throws Exception {\n    int numShapes = atLeast(500);\n\n    // Every doc has 2 points:\n    Object theShape = nextShape();\n\n    Object[] shapes = new Object[numShapes];\n    Arrays.fill(shapes, theShape);\n\n    verify(shapes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#testSameShapeManyTimes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#testSameShapeManyTimes().mjava","sourceNew":"  // A particularly tricky adversary for BKD tree:\n  public void testSameShapeManyTimes() throws Exception {\n    int numShapes = atLeast(50);\n\n    // Every doc has 2 points:\n    Object theShape = nextShape();\n\n    Object[] shapes = new Object[numShapes];\n    Arrays.fill(shapes, theShape);\n\n    verify(shapes);\n  }\n\n","sourceOld":"  // A particularly tricky adversary for BKD tree:\n  public void testSameShapeManyTimes() throws Exception {\n    int numShapes = atLeast(500);\n\n    // Every doc has 2 points:\n    Object theShape = nextShape();\n\n    Object[] shapes = new Object[numShapes];\n    Arrays.fill(shapes, theShape);\n\n    verify(shapes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#testSameShapeManyTimes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#testSameShapeManyTimes().mjava","sourceNew":"  // A particularly tricky adversary for BKD tree:\n  public void testSameShapeManyTimes() throws Exception {\n    int numShapes = TEST_NIGHTLY ? atLeast(50) : atLeast(10);\n\n    // Every doc has 2 points:\n    Object theShape = nextShape();\n\n    Object[] shapes = new Object[numShapes];\n    Arrays.fill(shapes, theShape);\n\n    verify(shapes);\n  }\n\n","sourceOld":"  // A particularly tricky adversary for BKD tree:\n  public void testSameShapeManyTimes() throws Exception {\n    int numShapes = atLeast(50);\n\n    // Every doc has 2 points:\n    Object theShape = nextShape();\n\n    Object[] shapes = new Object[numShapes];\n    Arrays.fill(shapes, theShape);\n\n    verify(shapes);\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#testSameShapeManyTimes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#testSameShapeManyTimes().mjava","sourceNew":"  // A particularly tricky adversary for BKD tree:\n  public void testSameShapeManyTimes() throws Exception {\n    int numShapes = TEST_NIGHTLY ? atLeast(50) : atLeast(3);\n\n    // Every doc has 2 points:\n    Object theShape = nextShape();\n\n    Object[] shapes = new Object[numShapes];\n    Arrays.fill(shapes, theShape);\n\n    verify(shapes);\n  }\n\n","sourceOld":"  // A particularly tricky adversary for BKD tree:\n  public void testSameShapeManyTimes() throws Exception {\n    int numShapes = TEST_NIGHTLY ? atLeast(50) : atLeast(10);\n\n    // Every doc has 2 points:\n    Object theShape = nextShape();\n\n    Object[] shapes = new Object[numShapes];\n    Arrays.fill(shapes, theShape);\n\n    verify(shapes);\n  }\n\n","bugFix":["57c6c784f777a2cc8fa014507ea129526822714d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["71da933d30aea361ccc224d6544c451cbf49916d"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["57c6c784f777a2cc8fa014507ea129526822714d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}