{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insert(String,char).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insert(String,char).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insert(String,char).mjava","sourceNew":"  /**\n   * Branches are initially compressed, needing one node per key plus the size\n   * of the string key. They are decompressed as needed when another key with\n   * same prefix is inserted. This saves a lot of space, specially for long\n   * keys.\n   */\n  public void insert(String key, char val) {\n    // make sure we have enough room in the arrays\n    int len = key.length() + 1; // maximum number of nodes that may be generated\n    if (freenode + len > eq.length) {\n      redimNodeArrays(eq.length + BLOCK_SIZE);\n    }\n    char strkey[] = new char[len--];\n    key.getChars(0, len, strkey, 0);\n    strkey[len] = 0;\n    root = insert(root, strkey, 0, val);\n  }\n\n","sourceOld":"  /**\n   * Branches are initially compressed, needing one node per key plus the size\n   * of the string key. They are decompressed as needed when another key with\n   * same prefix is inserted. This saves a lot of space, specially for long\n   * keys.\n   */\n  public void insert(String key, char val) {\n    // make sure we have enough room in the arrays\n    int len = key.length() + 1; // maximum number of nodes that may be generated\n    if (freenode + len > eq.length) {\n      redimNodeArrays(eq.length + BLOCK_SIZE);\n    }\n    char strkey[] = new char[len--];\n    key.getChars(0, len, strkey, 0);\n    strkey[len] = 0;\n    root = insert(root, strkey, 0, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insert(String,char).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insert(String,char).mjava","sourceNew":"  /**\n   * Branches are initially compressed, needing one node per key plus the size\n   * of the string key. They are decompressed as needed when another key with\n   * same prefix is inserted. This saves a lot of space, specially for long\n   * keys.\n   */\n  public void insert(String key, char val) {\n    // make sure we have enough room in the arrays\n    int len = key.length() + 1; // maximum number of nodes that may be generated\n    if (freenode + len > eq.length) {\n      redimNodeArrays(eq.length + BLOCK_SIZE);\n    }\n    char strkey[] = new char[len--];\n    key.getChars(0, len, strkey, 0);\n    strkey[len] = 0;\n    root = insert(root, strkey, 0, val);\n  }\n\n","sourceOld":"  /**\n   * Branches are initially compressed, needing one node per key plus the size\n   * of the string key. They are decompressed as needed when another key with\n   * same prefix is inserted. This saves a lot of space, specially for long\n   * keys.\n   */\n  public void insert(String key, char val) {\n    // make sure we have enough room in the arrays\n    int len = key.length() + 1; // maximum number of nodes that may be generated\n    if (freenode + len > eq.length) {\n      redimNodeArrays(eq.length + BLOCK_SIZE);\n    }\n    char strkey[] = new char[len--];\n    key.getChars(0, len, strkey, 0);\n    strkey[len] = 0;\n    root = insert(root, strkey, 0, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}