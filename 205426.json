{"path":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","commits":[{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    TermsEnum subEnum = getAutomatonEnum(maxEdits, null);\n    setEnum(subEnum != null ? subEnum : \n      new LinearFuzzyTermsEnum());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee442305cb676e72c58d48df25e052c4602fc7c1","date":1287577314,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(Priv.LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(Priv.LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    TermsEnum subEnum = getAutomatonEnum(maxEdits, null);\n    setEnum(subEnum != null ? subEnum : \n      new LinearFuzzyTermsEnum());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"499d8a861e9e06a5edb2a39e4ba663e8cade4ed0","date":1289320474,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(Priv.LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(Priv.LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(TermsEnum,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param tenum Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(TermsEnum tenum, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.tenum = tenum;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"499d8a861e9e06a5edb2a39e4ba663e8cade4ed0":["ee442305cb676e72c58d48df25e052c4602fc7c1"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["85a883878c0af761245ab048babc63d099f835f3","744486748bc5bee772100e49230e5bca39bac99a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","499d8a861e9e06a5edb2a39e4ba663e8cade4ed0"],"ee442305cb676e72c58d48df25e052c4602fc7c1":["33a8b1f99104f4144f210f5d068411c297cd7163"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee442305cb676e72c58d48df25e052c4602fc7c1"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["744486748bc5bee772100e49230e5bca39bac99a"],"744486748bc5bee772100e49230e5bca39bac99a":["499d8a861e9e06a5edb2a39e4ba663e8cade4ed0"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["ee442305cb676e72c58d48df25e052c4602fc7c1"],"499d8a861e9e06a5edb2a39e4ba663e8cade4ed0":["85a883878c0af761245ab048babc63d099f835f3","744486748bc5bee772100e49230e5bca39bac99a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"85a883878c0af761245ab048babc63d099f835f3":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"ee442305cb676e72c58d48df25e052c4602fc7c1":["499d8a861e9e06a5edb2a39e4ba663e8cade4ed0","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["85a883878c0af761245ab048babc63d099f835f3"],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}