{"path":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testRandomTopDocs().mjava","commits":[{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testRandomTopDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      Query query = new SynonymQuery(\n          new Term[] {\n              new Term(\"foo\", Integer.toString(term1)),\n              new Term(\"foo\", Integer.toString(term2))});\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testRandomTopDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testRandomTopDocs().mjava","sourceNew":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      Query query = new SynonymQuery(\n          new Term[] {\n              new Term(\"foo\", Integer.toString(term1)),\n              new Term(\"foo\", Integer.toString(term2))});\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      Query query = new SynonymQuery(\n          new Term[] {\n              new Term(\"foo\", Integer.toString(term1)),\n              new Term(\"foo\", Integer.toString(term2))});\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testRandomTopDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testRandomTopDocs().mjava","sourceNew":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      float boost1 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      float boost2 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      Query query = new SynonymQuery.Builder(\"foo\")\n          .addTerm(new Term(\"foo\", Integer.toString(term1)), boost1)\n          .addTerm(new Term(\"foo\", Integer.toString(term2)), boost2)\n          .build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      Query query = new SynonymQuery(\n          new Term[] {\n              new Term(\"foo\", Integer.toString(term1)),\n              new Term(\"foo\", Integer.toString(term2))});\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testRandomTopDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testRandomTopDocs().mjava","sourceNew":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = TEST_NIGHTLY ? atLeast(128 * 8 * 8 * 3) : atLeast(100); // at night, make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      float boost1 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      float boost2 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      Query query = new SynonymQuery.Builder(\"foo\")\n          .addTerm(new Term(\"foo\", Integer.toString(term1)), boost1)\n          .addTerm(new Term(\"foo\", Integer.toString(term2)), boost2)\n          .build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      float boost1 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      float boost2 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      Query query = new SynonymQuery.Builder(\"foo\")\n          .addTerm(new Term(\"foo\", Integer.toString(term1)), boost1)\n          .addTerm(new Term(\"foo\", Integer.toString(term2)), boost2)\n          .build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"2f2c13220a828a78007cedb364e22dd8986ed650":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["2f2c13220a828a78007cedb364e22dd8986ed650"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f2c13220a828a78007cedb364e22dd8986ed650"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["57c6c784f777a2cc8fa014507ea129526822714d"],"2f2c13220a828a78007cedb364e22dd8986ed650":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}