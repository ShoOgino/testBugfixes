{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private void computeCommonPrefixLength(HeapPointWriter heapPointWriter, byte[] commonPrefix) {\n    Arrays.fill(commonPrefixLengths, bytesPerDim);\n    scratchBytesRef1.length = packedBytesLength;\n    heapPointWriter.getPackedValueSlice(0, scratchBytesRef1);\n    for (int dim = 0; dim < numDataDims; dim++) {\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + dim * bytesPerDim, commonPrefix, dim * bytesPerDim, bytesPerDim);\n    }\n    for (int i = 1; i < heapPointWriter.count(); i++) {\n      heapPointWriter.getPackedValueSlice(i, scratchBytesRef1);\n      for (int dim = 0; dim < numDataDims; dim++) {\n        if (commonPrefixLengths[dim] != 0) {\n          int j = FutureArrays.mismatch(commonPrefix, dim * bytesPerDim, dim * bytesPerDim + commonPrefixLengths[dim], scratchBytesRef1.bytes, scratchBytesRef1.offset + dim * bytesPerDim, scratchBytesRef1.offset + dim * bytesPerDim + commonPrefixLengths[dim]);\n          if (j != -1) {\n            commonPrefixLengths[dim] = j;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","sourceNew":"  private void computeCommonPrefixLength(HeapPointWriter heapPointWriter, byte[] commonPrefix) {\n    Arrays.fill(commonPrefixLengths, bytesPerDim);\n    PointValue value = heapPointWriter.getPackedValueSlice(0);\n    BytesRef packedValue = value.packedValue();\n    for (int dim = 0; dim < numDataDims; dim++) {\n      System.arraycopy(packedValue.bytes, packedValue.offset + dim * bytesPerDim, commonPrefix, dim * bytesPerDim, bytesPerDim);\n    }\n    for (int i = 1; i < heapPointWriter.count(); i++) {\n      value = heapPointWriter.getPackedValueSlice(i);\n      packedValue = value.packedValue();\n      for (int dim = 0; dim < numDataDims; dim++) {\n        if (commonPrefixLengths[dim] != 0) {\n          int j = FutureArrays.mismatch(commonPrefix, dim * bytesPerDim, dim * bytesPerDim + commonPrefixLengths[dim], packedValue.bytes, packedValue.offset + dim * bytesPerDim, packedValue.offset + dim * bytesPerDim + commonPrefixLengths[dim]);\n          if (j != -1) {\n            commonPrefixLengths[dim] = j;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void computeCommonPrefixLength(HeapPointWriter heapPointWriter, byte[] commonPrefix) {\n    Arrays.fill(commonPrefixLengths, bytesPerDim);\n    scratchBytesRef1.length = packedBytesLength;\n    heapPointWriter.getPackedValueSlice(0, scratchBytesRef1);\n    for (int dim = 0; dim < numDataDims; dim++) {\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + dim * bytesPerDim, commonPrefix, dim * bytesPerDim, bytesPerDim);\n    }\n    for (int i = 1; i < heapPointWriter.count(); i++) {\n      heapPointWriter.getPackedValueSlice(i, scratchBytesRef1);\n      for (int dim = 0; dim < numDataDims; dim++) {\n        if (commonPrefixLengths[dim] != 0) {\n          int j = FutureArrays.mismatch(commonPrefix, dim * bytesPerDim, dim * bytesPerDim + commonPrefixLengths[dim], scratchBytesRef1.bytes, scratchBytesRef1.offset + dim * bytesPerDim, scratchBytesRef1.offset + dim * bytesPerDim + commonPrefixLengths[dim]);\n          if (j != -1) {\n            commonPrefixLengths[dim] = j;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","sourceNew":"  private void computeCommonPrefixLength(HeapPointWriter heapPointWriter, byte[] commonPrefix) {\n    Arrays.fill(commonPrefixLengths, bytesPerDim);\n    PointValue value = heapPointWriter.getPackedValueSlice(0);\n    BytesRef packedValue = value.packedValue();\n    for (int dim = 0; dim < numDataDims; dim++) {\n      System.arraycopy(packedValue.bytes, packedValue.offset + dim * bytesPerDim, commonPrefix, dim * bytesPerDim, bytesPerDim);\n    }\n    for (int i = 1; i < heapPointWriter.count(); i++) {\n      value = heapPointWriter.getPackedValueSlice(i);\n      packedValue = value.packedValue();\n      for (int dim = 0; dim < numDataDims; dim++) {\n        if (commonPrefixLengths[dim] != 0) {\n          int j = Arrays.mismatch(commonPrefix, dim * bytesPerDim, dim * bytesPerDim + commonPrefixLengths[dim], packedValue.bytes, packedValue.offset + dim * bytesPerDim, packedValue.offset + dim * bytesPerDim + commonPrefixLengths[dim]);\n          if (j != -1) {\n            commonPrefixLengths[dim] = j;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void computeCommonPrefixLength(HeapPointWriter heapPointWriter, byte[] commonPrefix) {\n    Arrays.fill(commonPrefixLengths, bytesPerDim);\n    PointValue value = heapPointWriter.getPackedValueSlice(0);\n    BytesRef packedValue = value.packedValue();\n    for (int dim = 0; dim < numDataDims; dim++) {\n      System.arraycopy(packedValue.bytes, packedValue.offset + dim * bytesPerDim, commonPrefix, dim * bytesPerDim, bytesPerDim);\n    }\n    for (int i = 1; i < heapPointWriter.count(); i++) {\n      value = heapPointWriter.getPackedValueSlice(i);\n      packedValue = value.packedValue();\n      for (int dim = 0; dim < numDataDims; dim++) {\n        if (commonPrefixLengths[dim] != 0) {\n          int j = FutureArrays.mismatch(commonPrefix, dim * bytesPerDim, dim * bytesPerDim + commonPrefixLengths[dim], packedValue.bytes, packedValue.offset + dim * bytesPerDim, packedValue.offset + dim * bytesPerDim + commonPrefixLengths[dim]);\n          if (j != -1) {\n            commonPrefixLengths[dim] = j;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","sourceNew":"  private void computeCommonPrefixLength(HeapPointWriter heapPointWriter, byte[] commonPrefix) {\n    Arrays.fill(commonPrefixLengths, config.bytesPerDim);\n    PointValue value = heapPointWriter.getPackedValueSlice(0);\n    BytesRef packedValue = value.packedValue();\n    for (int dim = 0; dim < config.numDims; dim++) {\n      System.arraycopy(packedValue.bytes, packedValue.offset + dim * config.bytesPerDim, commonPrefix, dim * config.bytesPerDim, config.bytesPerDim);\n    }\n    for (int i = 1; i < heapPointWriter.count(); i++) {\n      value = heapPointWriter.getPackedValueSlice(i);\n      packedValue = value.packedValue();\n      for (int dim = 0; dim < config.numDims; dim++) {\n        if (commonPrefixLengths[dim] != 0) {\n          int j = Arrays.mismatch(commonPrefix, dim * config.bytesPerDim, dim * config.bytesPerDim + commonPrefixLengths[dim], packedValue.bytes, packedValue.offset + dim * config.bytesPerDim, packedValue.offset + dim * config.bytesPerDim + commonPrefixLengths[dim]);\n          if (j != -1) {\n            commonPrefixLengths[dim] = j;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void computeCommonPrefixLength(HeapPointWriter heapPointWriter, byte[] commonPrefix) {\n    Arrays.fill(commonPrefixLengths, bytesPerDim);\n    PointValue value = heapPointWriter.getPackedValueSlice(0);\n    BytesRef packedValue = value.packedValue();\n    for (int dim = 0; dim < numDataDims; dim++) {\n      System.arraycopy(packedValue.bytes, packedValue.offset + dim * bytesPerDim, commonPrefix, dim * bytesPerDim, bytesPerDim);\n    }\n    for (int i = 1; i < heapPointWriter.count(); i++) {\n      value = heapPointWriter.getPackedValueSlice(i);\n      packedValue = value.packedValue();\n      for (int dim = 0; dim < numDataDims; dim++) {\n        if (commonPrefixLengths[dim] != 0) {\n          int j = Arrays.mismatch(commonPrefix, dim * bytesPerDim, dim * bytesPerDim + commonPrefixLengths[dim], packedValue.bytes, packedValue.offset + dim * bytesPerDim, packedValue.offset + dim * bytesPerDim + commonPrefixLengths[dim]);\n          if (j != -1) {\n            commonPrefixLengths[dim] = j;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}