{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/policy/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    ClientDataProvider provider = new ClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).longValue() , ((Number) val.get(\"freedisk\")).longValue() > 0);\n    System.out.println(Utils.toJSONString(val));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    ClientDataProvider provider = new ClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).longValue() , ((Number) val.get(\"freedisk\")).longValue() > 0);\n    System.out.println(Utils.toJSONString(val));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).longValue() , ((Number) val.get(\"freedisk\")).longValue() > 0);\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    ClientDataProvider provider = new ClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).longValue() , ((Number) val.get(\"freedisk\")).longValue() > 0);\n    System.out.println(Utils.toJSONString(val));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352c3f4b7f836c21acb863f24852bd69fc8ba72e","date":1496029759,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).longValue() , ((Number) val.get(\"freedisk\")).longValue() > 0);\n    assertTrue(\"heapUsage value is \"+((Number) val.get(\"heapUsage\")).longValue() , ((Number) val.get(\"heapUsage\")).longValue() > 0);\n    assertTrue(\"sysLoadAvg value is \"+((Number) val.get(\"sysLoadAvg\")).longValue() , ((Number) val.get(\"sysLoadAvg\")).longValue() > 0);\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\"freedisk\", \"cores\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).longValue() , ((Number) val.get(\"freedisk\")).longValue() > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961a14d298363c1efe0c3135a9f8b762dafd0d99","date":1496035169,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).longValue(), ((Number) val.get(\"freedisk\")).longValue() > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).longValue(), ((Number) val.get(\"heapUsage\")).longValue() > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).longValue(), ((Number) val.get(\"sysLoadAvg\")).longValue() > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = cluster.getSolrClient().getZkStateReader().getZkClient().getJson(ZkStateReader.ROLES, true);\n      if (i >= 9 && data == null) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\"nodeRole\"));\n    assertEquals(\"overseer\",val.get(\"nodeRole\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \"+((Number) val.get(\"freedisk\")).longValue() , ((Number) val.get(\"freedisk\")).longValue() > 0);\n    assertTrue(\"heapUsage value is \"+((Number) val.get(\"heapUsage\")).longValue() , ((Number) val.get(\"heapUsage\")).longValue() > 0);\n    assertTrue(\"sysLoadAvg value is \"+((Number) val.get(\"sysLoadAvg\")).longValue() , ((Number) val.get(\"sysLoadAvg\")).longValue() > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d078a95b5ec218702d5c7f6a083b8a431aa264","date":1496036206,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).longValue(), ((Number) val.get(\"freedisk\")).longValue() > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).longValue(), ((Number) val.get(\"heapUsage\")).longValue() > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).longValue(), ((Number) val.get(\"sysLoadAvg\")).longValue() > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = cluster.getSolrClient().getZkStateReader().getZkClient().getJson(ZkStateReader.ROLES, true);\n      if (i >= 9 && data == null) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\"nodeRole\", \"ip_1\",\"ip_2\",\"ip_3\", \"ip_4\", \"sysprop.java.version\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull( val.get(\"ip_1\"));\n    assertNotNull( val.get(\"ip_2\"));\n    assertNotNull( val.get(\"ip_3\"));\n    assertNotNull( val.get(\"ip_4\"));\n//    assertNotNull( val.get(\"sysprop.java.version\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).longValue(), ((Number) val.get(\"freedisk\")).longValue() > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).longValue(), ((Number) val.get(\"heapUsage\")).longValue() > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).longValue(), ((Number) val.get(\"sysLoadAvg\")).longValue() > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = cluster.getSolrClient().getZkStateReader().getZkClient().getJson(ZkStateReader.ROLES, true);\n      if (i >= 9 && data == null) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\"nodeRole\"));\n    assertEquals(\"overseer\",val.get(\"nodeRole\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2369aca9d59355841bea58e4e175d90816d26148","date":1496039862,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).longValue(), ((Number) val.get(\"freedisk\")).longValue() > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).longValue(), ((Number) val.get(\"heapUsage\")).longValue() > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).longValue(), ((Number) val.get(\"sysLoadAvg\")).longValue() > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = cluster.getSolrClient().getZkStateReader().getZkClient().getJson(ZkStateReader.ROLES, true);\n      if (i >= 9 && data == null) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\",\"ip_2\",\"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull( val.get(\"ip_1\"));\n    assertNotNull( val.get(\"ip_2\"));\n    assertNotNull( val.get(\"ip_3\"));\n    assertNotNull( val.get(\"ip_4\"));\n    assertNotNull( val.get(\"sysprop.java.version\"));\n    assertNotNull( val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).longValue(), ((Number) val.get(\"freedisk\")).longValue() > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).longValue(), ((Number) val.get(\"heapUsage\")).longValue() > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).longValue(), ((Number) val.get(\"sysLoadAvg\")).longValue() > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = cluster.getSolrClient().getZkStateReader().getZkClient().getJson(ZkStateReader.ROLES, true);\n      if (i >= 9 && data == null) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\"nodeRole\", \"ip_1\",\"ip_2\",\"ip_3\", \"ip_4\", \"sysprop.java.version\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull( val.get(\"ip_1\"));\n    assertNotNull( val.get(\"ip_2\"));\n    assertNotNull( val.get(\"ip_3\"));\n    assertNotNull( val.get(\"ip_4\"));\n//    assertNotNull( val.get(\"sysprop.java.version\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"/dev/null","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).longValue(), ((Number) val.get(\"freedisk\")).longValue() > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).longValue(), ((Number) val.get(\"heapUsage\")).longValue() > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).longValue(), ((Number) val.get(\"sysLoadAvg\")).longValue() > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = cluster.getSolrClient().getZkStateReader().getZkClient().getJson(ZkStateReader.ROLES, true);\n      if (i >= 9 && data == null) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).longValue(), ((Number) val.get(\"freedisk\")).longValue() > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).longValue(), ((Number) val.get(\"heapUsage\")).longValue() > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).longValue(), ((Number) val.get(\"sysLoadAvg\")).longValue() > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = cluster.getSolrClient().getZkStateReader().getZkClient().getJson(ZkStateReader.ROLES, true);\n      if (i >= 9 && data == null) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"/dev/null","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a465a3c3bb847b465680ab7f4d6e448d13845e3","date":1496746903,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).longValue(), ((Number) val.get(\"freedisk\")).longValue() > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).longValue(), ((Number) val.get(\"heapUsage\")).longValue() > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).longValue(), ((Number) val.get(\"sysLoadAvg\")).longValue() > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = cluster.getSolrClient().getZkStateReader().getZkClient().getJson(ZkStateReader.ROLES, true);\n      if (i >= 9 && data == null) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\",\"ip_2\",\"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull( val.get(\"ip_1\"));\n    assertNotNull( val.get(\"ip_2\"));\n    assertNotNull( val.get(\"ip_3\"));\n    assertNotNull( val.get(\"ip_4\"));\n    assertNotNull( val.get(\"sysprop.java.version\"));\n    assertNotNull( val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"/dev/null","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient());\n    Map<String, Object> val = cloudManager.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = cloudManager.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(cluster.getSolrClient());\n    Map<String, Object> val = provider.getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = provider.getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient())) {\n      Map<String, Object> val = cloudManager.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n          \"freedisk\",\n          \"cores\",\n          \"heapUsage\",\n          \"sysLoadAvg\"));\n      assertNotNull(val.get(\"freedisk\"));\n      assertNotNull(val.get(\"heapUsage\"));\n      assertNotNull(val.get(\"sysLoadAvg\"));\n      assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n      assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(), Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n      assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n      if (!Constants.WINDOWS) {\n        // the system load average metrics is not available on windows platform\n        assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n      }\n      String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n      cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n      for (int i = 0; i < 10; i++) {\n        Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n        if (i >= 9 && data.isEmpty()) {\n          throw new RuntimeException(\"NO overseer node created\");\n        }\n        Thread.sleep(100);\n      }\n      val = cloudManager.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n          \"nodeRole\",\n          \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n          \"sysprop.java.version\",\n          \"sysprop.java.vendor\"));\n      assertEquals(\"overseer\", val.get(\"nodeRole\"));\n      assertNotNull(val.get(\"ip_1\"));\n      assertNotNull(val.get(\"ip_2\"));\n      assertNotNull(val.get(\"ip_3\"));\n      assertNotNull(val.get(\"ip_4\"));\n      assertNotNull(val.get(\"sysprop.java.version\"));\n      assertNotNull(val.get(\"sysprop.java.vendor\"));\n    }\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient());\n    Map<String, Object> val = cloudManager.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n    cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      Thread.sleep(100);\n    }\n    val = cloudManager.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00473ada9520f7423d1a7b4cfdb16f49856ddcac","date":1540213439,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient())) {\n      Map<String, Object> val = cloudManager.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n          \"freedisk\",\n          \"cores\",\n          \"host\",\n          \"heapUsage\",\n          \"sysLoadAvg\"));\n      assertNotNull(val.get(\"freedisk\"));\n      assertNotNull(val.get(\"host\"));\n      assertNotNull(val.get(\"heapUsage\"));\n      assertNotNull(val.get(\"sysLoadAvg\"));\n      assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n      assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(), Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n      assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n      if (!Constants.WINDOWS) {\n        // the system load average metrics is not available on windows platform\n        assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n      }\n      String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n      cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n      for (int i = 0; i < 10; i++) {\n        Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n        if (i >= 9 && data.isEmpty()) {\n          throw new RuntimeException(\"NO overseer node created\");\n        }\n        Thread.sleep(100);\n      }\n      val = cloudManager.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n          \"nodeRole\",\n          \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n          \"sysprop.java.version\",\n          \"sysprop.java.vendor\"));\n      assertEquals(\"overseer\", val.get(\"nodeRole\"));\n      assertNotNull(val.get(\"ip_1\"));\n      assertNotNull(val.get(\"ip_2\"));\n      assertNotNull(val.get(\"ip_3\"));\n      assertNotNull(val.get(\"ip_4\"));\n      assertNotNull(val.get(\"sysprop.java.version\"));\n      assertNotNull(val.get(\"sysprop.java.vendor\"));\n    }\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient())) {\n      Map<String, Object> val = cloudManager.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n          \"freedisk\",\n          \"cores\",\n          \"heapUsage\",\n          \"sysLoadAvg\"));\n      assertNotNull(val.get(\"freedisk\"));\n      assertNotNull(val.get(\"heapUsage\"));\n      assertNotNull(val.get(\"sysLoadAvg\"));\n      assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n      assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(), Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n      assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n      if (!Constants.WINDOWS) {\n        // the system load average metrics is not available on windows platform\n        assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n      }\n      String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n      cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n      for (int i = 0; i < 10; i++) {\n        Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n        if (i >= 9 && data.isEmpty()) {\n          throw new RuntimeException(\"NO overseer node created\");\n        }\n        Thread.sleep(100);\n      }\n      val = cloudManager.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n          \"nodeRole\",\n          \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n          \"sysprop.java.version\",\n          \"sysprop.java.vendor\"));\n      assertEquals(\"overseer\", val.get(\"nodeRole\"));\n      assertNotNull(val.get(\"ip_1\"));\n      assertNotNull(val.get(\"ip_2\"));\n      assertNotNull(val.get(\"ip_3\"));\n      assertNotNull(val.get(\"ip_4\"));\n      assertNotNull(val.get(\"sysprop.java.version\"));\n      assertNotNull(val.get(\"sysprop.java.vendor\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"policiesTest\", 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient())) {\n      Map<String, Object> val = cloudManager.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n          \"freedisk\",\n          \"cores\",\n          \"host\",\n          \"heapUsage\",\n          \"sysLoadAvg\"));\n      assertNotNull(val.get(\"freedisk\"));\n      assertNotNull(val.get(\"host\"));\n      assertNotNull(val.get(\"heapUsage\"));\n      assertNotNull(val.get(\"sysLoadAvg\"));\n      assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n      assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(), Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n      assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n      if (!Constants.WINDOWS) {\n        // the system load average metrics is not available on windows platform\n        assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n      }\n      String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n      cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n      for (int i = 0; i < 10; i++) {\n        Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n        if (i >= 9 && data.isEmpty()) {\n          throw new RuntimeException(\"NO overseer node created\");\n        }\n        Thread.sleep(100);\n      }\n      val = cloudManager.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n          \"nodeRole\",\n          \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n          \"sysprop.java.version\",\n          \"sysprop.java.vendor\"));\n      assertEquals(\"overseer\", val.get(\"nodeRole\"));\n      assertNotNull(val.get(\"ip_1\"));\n      assertNotNull(val.get(\"ip_2\"));\n      assertNotNull(val.get(\"ip_3\"));\n      assertNotNull(val.get(\"ip_4\"));\n      assertNotNull(val.get(\"sysprop.java.version\"));\n      assertNotNull(val.get(\"sysprop.java.vendor\"));\n    }\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient())) {\n      Map<String, Object> val = cloudManager.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n          \"freedisk\",\n          \"cores\",\n          \"host\",\n          \"heapUsage\",\n          \"sysLoadAvg\"));\n      assertNotNull(val.get(\"freedisk\"));\n      assertNotNull(val.get(\"host\"));\n      assertNotNull(val.get(\"heapUsage\"));\n      assertNotNull(val.get(\"sysLoadAvg\"));\n      assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n      assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(), Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n      assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n      if (!Constants.WINDOWS) {\n        // the system load average metrics is not available on windows platform\n        assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n      }\n      String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n      cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n      for (int i = 0; i < 10; i++) {\n        Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n        if (i >= 9 && data.isEmpty()) {\n          throw new RuntimeException(\"NO overseer node created\");\n        }\n        Thread.sleep(100);\n      }\n      val = cloudManager.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n          \"nodeRole\",\n          \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n          \"sysprop.java.version\",\n          \"sysprop.java.vendor\"));\n      assertEquals(\"overseer\", val.get(\"nodeRole\"));\n      assertNotNull(val.get(\"ip_1\"));\n      assertNotNull(val.get(\"ip_2\"));\n      assertNotNull(val.get(\"ip_3\"));\n      assertNotNull(val.get(\"ip_4\"));\n      assertNotNull(val.get(\"sysprop.java.version\"));\n      assertNotNull(val.get(\"sysprop.java.vendor\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6ae69e36b15b227a219d4e334ccf5f58fb8affd","date":1562804219,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws Exception {\n    final String collectionName = \"data_provider\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(collectionName);\n\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient())) {\n      Map<String, Object> val = cloudManager.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n          \"freedisk\",\n          \"cores\",\n          \"host\",\n          \"heapUsage\",\n          \"sysLoadAvg\"));\n      assertNotNull(val.get(\"freedisk\"));\n      assertNotNull(val.get(\"host\"));\n      assertNotNull(val.get(\"heapUsage\"));\n      assertNotNull(val.get(\"sysLoadAvg\"));\n      assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n      assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(), Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n      assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n      if (!Constants.WINDOWS) {\n        // the system load average metrics is not available on windows platform\n        assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n      }\n      String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n      cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n      for (int i = 0; i < 10; i++) {\n        Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n        if (i >= 9 && data.isEmpty()) {\n          throw new RuntimeException(\"NO overseer node created\");\n        }\n        Thread.sleep(100);\n      }\n      val = cloudManager.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n          \"nodeRole\",\n          \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n          \"sysprop.java.version\",\n          \"sysprop.java.vendor\"));\n      assertEquals(\"overseer\", val.get(\"nodeRole\"));\n      assertNotNull(val.get(\"ip_1\"));\n      assertNotNull(val.get(\"ip_2\"));\n      assertNotNull(val.get(\"ip_3\"));\n      assertNotNull(val.get(\"ip_4\"));\n      assertNotNull(val.get(\"sysprop.java.version\"));\n      assertNotNull(val.get(\"sysprop.java.vendor\"));\n    }\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"policiesTest\", 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient())) {\n      Map<String, Object> val = cloudManager.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n          \"freedisk\",\n          \"cores\",\n          \"host\",\n          \"heapUsage\",\n          \"sysLoadAvg\"));\n      assertNotNull(val.get(\"freedisk\"));\n      assertNotNull(val.get(\"host\"));\n      assertNotNull(val.get(\"heapUsage\"));\n      assertNotNull(val.get(\"sysLoadAvg\"));\n      assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n      assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(), Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n      assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n      if (!Constants.WINDOWS) {\n        // the system load average metrics is not available on windows platform\n        assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n      }\n      String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n      cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n      for (int i = 0; i < 10; i++) {\n        Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n        if (i >= 9 && data.isEmpty()) {\n          throw new RuntimeException(\"NO overseer node created\");\n        }\n        Thread.sleep(100);\n      }\n      val = cloudManager.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n          \"nodeRole\",\n          \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n          \"sysprop.java.version\",\n          \"sysprop.java.vendor\"));\n      assertEquals(\"overseer\", val.get(\"nodeRole\"));\n      assertNotNull(val.get(\"ip_1\"));\n      assertNotNull(val.get(\"ip_2\"));\n      assertNotNull(val.get(\"ip_3\"));\n      assertNotNull(val.get(\"ip_4\"));\n      assertNotNull(val.get(\"sysprop.java.version\"));\n      assertNotNull(val.get(\"sysprop.java.vendor\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testDataProvider().mjava","sourceNew":null,"sourceOld":"  public void testDataProvider() throws Exception {\n    final String collectionName = \"data_provider\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shard1\", 2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(collectionName);\n\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()), cluster.getSolrClient())) {\n      Map<String, Object> val = cloudManager.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n          \"freedisk\",\n          \"cores\",\n          \"host\",\n          \"heapUsage\",\n          \"sysLoadAvg\"));\n      assertNotNull(val.get(\"freedisk\"));\n      assertNotNull(val.get(\"host\"));\n      assertNotNull(val.get(\"heapUsage\"));\n      assertNotNull(val.get(\"sysLoadAvg\"));\n      assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n      assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(), Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n      assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n      if (!Constants.WINDOWS) {\n        // the system load average metrics is not available on windows platform\n        assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n      }\n      String overseerNode = OverseerTaskProcessor.getLeaderNode(cluster.getZkClient());\n      cluster.getSolrClient().request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n      for (int i = 0; i < 10; i++) {\n        Map<String, Object> data = Utils.getJson(cluster.getZkClient(), ZkStateReader.ROLES, true);\n        if (i >= 9 && data.isEmpty()) {\n          throw new RuntimeException(\"NO overseer node created\");\n        }\n        Thread.sleep(100);\n      }\n      val = cloudManager.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n          \"nodeRole\",\n          \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n          \"sysprop.java.version\",\n          \"sysprop.java.vendor\"));\n      assertEquals(\"overseer\", val.get(\"nodeRole\"));\n      assertNotNull(val.get(\"ip_1\"));\n      assertNotNull(val.get(\"ip_2\"));\n      assertNotNull(val.get(\"ip_3\"));\n      assertNotNull(val.get(\"ip_4\"));\n      assertNotNull(val.get(\"sysprop.java.version\"));\n      assertNotNull(val.get(\"sysprop.java.vendor\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2369aca9d59355841bea58e4e175d90816d26148":["a8d078a95b5ec218702d5c7f6a083b8a431aa264"],"961a14d298363c1efe0c3135a9f8b762dafd0d99":["352c3f4b7f836c21acb863f24852bd69fc8ba72e"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"3f504512a03d978990cbff30db0522b354e846db":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["00473ada9520f7423d1a7b4cfdb16f49856ddcac"],"352c3f4b7f836c21acb863f24852bd69fc8ba72e":["86fff6c123a5a1d38adb665dd045347219798da9"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["28288370235ed02234a64753cdbf0c6ec096304a"],"86fff6c123a5a1d38adb665dd045347219798da9":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["74aea047dff7f7c38a2d766827bd20d356f98c6a","3a465a3c3bb847b465680ab7f4d6e448d13845e3"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"00473ada9520f7423d1a7b4cfdb16f49856ddcac":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"3a465a3c3bb847b465680ab7f4d6e448d13845e3":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a8d078a95b5ec218702d5c7f6a083b8a431aa264":["961a14d298363c1efe0c3135a9f8b762dafd0d99"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2369aca9d59355841bea58e4e175d90816d26148","3a465a3c3bb847b465680ab7f4d6e448d13845e3"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"2369aca9d59355841bea58e4e175d90816d26148":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"961a14d298363c1efe0c3135a9f8b762dafd0d99":["a8d078a95b5ec218702d5c7f6a083b8a431aa264"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"352c3f4b7f836c21acb863f24852bd69fc8ba72e":["961a14d298363c1efe0c3135a9f8b762dafd0d99"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"86fff6c123a5a1d38adb665dd045347219798da9":["352c3f4b7f836c21acb863f24852bd69fc8ba72e"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"00473ada9520f7423d1a7b4cfdb16f49856ddcac":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3a465a3c3bb847b465680ab7f4d6e448d13845e3":["f344bb33ca91f48e99c061980115b46fa84fc8f5","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a8d078a95b5ec218702d5c7f6a083b8a431aa264":["2369aca9d59355841bea58e4e175d90816d26148"],"28288370235ed02234a64753cdbf0c6ec096304a":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["3f504512a03d978990cbff30db0522b354e846db"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["f344bb33ca91f48e99c061980115b46fa84fc8f5","3a465a3c3bb847b465680ab7f4d6e448d13845e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["86fff6c123a5a1d38adb665dd045347219798da9"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["00473ada9520f7423d1a7b4cfdb16f49856ddcac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b869898f50ca80263bac2e3ae0949f7700e5c977","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}