{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(int,String...).mjava","commits":[{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(int,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","sourceNew":"  private CompiledAutomaton build(int maxDeterminizedStates, String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false, maxDeterminizedStates);\n  }\n\n","sourceOld":"  private CompiledAutomaton build(String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(int,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(int,String...).mjava","sourceNew":"  private CompiledAutomaton build(int maxDeterminizedStates, String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false, maxDeterminizedStates, false);\n  }\n\n","sourceOld":"  private CompiledAutomaton build(int maxDeterminizedStates, String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false, maxDeterminizedStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(int,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(int,String...).mjava","sourceNew":"  private CompiledAutomaton build(int maxDeterminizedStates, String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false, maxDeterminizedStates, false);\n  }\n\n","sourceOld":"  private CompiledAutomaton build(int maxDeterminizedStates, String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false, maxDeterminizedStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8b316f82baae88f5e279893a9cb7eee51fd8902f","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}