{"path":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":["7358158aa96de7ba4e78d7fbee9f9fa41320173d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.shutdown();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299837c703f6804b4e45299353fd0709de6103c1","date":1399580939,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.shutdown();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.shutdown();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.shutdown();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.shutdown();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.shutdown();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56fb5e4e4b239474721e13b4cd9542ea2d215451","date":1529091182,"type":3,"author":"Erick","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final IndexWriter w = new IndexWriter(dir, conf);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n      doc.add(newTextField(\"content\", \"aaa \" + i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d0ef034a4f10871667ae75181537775ddcf8ade4","56fb5e4e4b239474721e13b4cd9542ea2d215451"],"56fb5e4e4b239474721e13b4cd9542ea2d215451":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["299837c703f6804b4e45299353fd0709de6103c1"],"299837c703f6804b4e45299353fd0709de6103c1":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56fb5e4e4b239474721e13b4cd9542ea2d215451"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d0ef034a4f10871667ae75181537775ddcf8ade4","56fb5e4e4b239474721e13b4cd9542ea2d215451"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"56fb5e4e4b239474721e13b4cd9542ea2d215451":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"299837c703f6804b4e45299353fd0709de6103c1":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","56fb5e4e4b239474721e13b4cd9542ea2d215451","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["299837c703f6804b4e45299353fd0709de6103c1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}