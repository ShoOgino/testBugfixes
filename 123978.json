{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","commits":[{"id":"4a4e2c829188fb99886a64558664d79c9ac0fdf1","date":1431021538,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the effective {@link NumericType} for the field for the purposes of hash values.  \n   * ie: If the field has an explict NumericType that is returned; If the field has no explicit \n   * NumericType then {@link NumericType#LONG} is returned;  If field is null, then \n   * {@link NumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static NumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return NumericType.FLOAT;\n    }\n    final NumericType result = field.getType().getNumericType();\n    return null == result ? NumericType.LONG : result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","sourceNew":"  /**\n   * Returns the effective {@link org.apache.lucene.document.FieldType.LegacyNumericType} for the field for the purposes of hash values.\n   * ie: If the field has an explict LegacyNumericType that is returned; If the field has no explicit\n   * LegacyNumericType then {@link org.apache.lucene.document.FieldType.LegacyNumericType#LONG} is returned;  If field is null, then\n   * {@link org.apache.lucene.document.FieldType.LegacyNumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static LegacyNumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return LegacyNumericType.FLOAT;\n    }\n    final LegacyNumericType result = field.getType().getNumericType();\n    return null == result ? FieldType.LegacyNumericType.LONG : result;\n  }\n\n","sourceOld":"  /**\n   * Returns the effective {@link NumericType} for the field for the purposes of hash values.  \n   * ie: If the field has an explict NumericType that is returned; If the field has no explicit \n   * NumericType then {@link NumericType#LONG} is returned;  If field is null, then \n   * {@link NumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static NumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return NumericType.FLOAT;\n    }\n    final NumericType result = field.getType().getNumericType();\n    return null == result ? NumericType.LONG : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","sourceNew":"  /**\n   * Returns the effective {@link LegacyNumericType} for the field for the purposes of hash values.\n   * ie: If the field has an explict LegacyNumericType that is returned; If the field has no explicit\n   * LegacyNumericType then {@link LegacyNumericType#LONG} is returned;  If field is null, then\n   * {@link LegacyNumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static LegacyNumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return LegacyNumericType.FLOAT;\n    }\n    final LegacyNumericType result = field.getType().getNumericType();\n    return null == result ? LegacyNumericType.LONG : result;\n  }\n\n","sourceOld":"  /**\n   * Returns the effective {@link org.apache.lucene.document.FieldType.LegacyNumericType} for the field for the purposes of hash values.\n   * ie: If the field has an explict LegacyNumericType that is returned; If the field has no explicit\n   * LegacyNumericType then {@link org.apache.lucene.document.FieldType.LegacyNumericType#LONG} is returned;  If field is null, then\n   * {@link org.apache.lucene.document.FieldType.LegacyNumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static LegacyNumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return LegacyNumericType.FLOAT;\n    }\n    final LegacyNumericType result = field.getType().getNumericType();\n    return null == result ? FieldType.LegacyNumericType.LONG : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","sourceNew":"  /**\n   * Returns the effective {@link LegacyNumericType} for the field for the purposes of hash values.\n   * ie: If the field has an explict LegacyNumericType that is returned; If the field has no explicit\n   * LegacyNumericType then {@link LegacyNumericType#LONG} is returned;  If field is null, then\n   * {@link LegacyNumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static LegacyNumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return LegacyNumericType.FLOAT;\n    }\n    final LegacyNumericType result = field.getType().getNumericType();\n    return null == result ? LegacyNumericType.LONG : result;\n  }\n\n","sourceOld":"  /**\n   * Returns the effective {@link org.apache.lucene.document.FieldType.LegacyNumericType} for the field for the purposes of hash values.\n   * ie: If the field has an explict LegacyNumericType that is returned; If the field has no explicit\n   * LegacyNumericType then {@link org.apache.lucene.document.FieldType.LegacyNumericType#LONG} is returned;  If field is null, then\n   * {@link org.apache.lucene.document.FieldType.LegacyNumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static LegacyNumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return LegacyNumericType.FLOAT;\n    }\n    final LegacyNumericType result = field.getType().getNumericType();\n    return null == result ? FieldType.LegacyNumericType.LONG : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","sourceNew":"  /**\n   * Returns the effective {@link LegacyNumericType} for the field for the purposes of hash values.\n   * ie: If the field has an explict LegacyNumericType that is returned; If the field has no explicit\n   * LegacyNumericType then {@link LegacyNumericType#LONG} is returned;  If field is null, then\n   * {@link LegacyNumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static LegacyNumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return LegacyNumericType.FLOAT;\n    }\n    final LegacyNumericType result = field.getType().getNumericType();\n    return null == result ? LegacyNumericType.LONG : result;\n  }\n\n","sourceOld":"  /**\n   * Returns the effective {@link org.apache.lucene.document.FieldType.LegacyNumericType} for the field for the purposes of hash values.\n   * ie: If the field has an explict LegacyNumericType that is returned; If the field has no explicit\n   * LegacyNumericType then {@link org.apache.lucene.document.FieldType.LegacyNumericType#LONG} is returned;  If field is null, then\n   * {@link org.apache.lucene.document.FieldType.LegacyNumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static LegacyNumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return LegacyNumericType.FLOAT;\n    }\n    final LegacyNumericType result = field.getType().getNumericType();\n    return null == result ? FieldType.LegacyNumericType.LONG : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","sourceNew":"  /**\n   * Returns the effective {@link LegacyNumericType} for the field for the purposes of hash values.\n   * ie: If the field has an explict LegacyNumericType that is returned; If the field has no explicit\n   * LegacyNumericType then {@link LegacyNumericType#LONG} is returned;  If field is null, then\n   * {@link LegacyNumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static LegacyNumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return LegacyNumericType.FLOAT;\n    }\n    final LegacyNumericType result = field.getType().getNumericType();\n    return null == result ? LegacyNumericType.LONG : result;\n  }\n\n","sourceOld":"  /**\n   * Returns the effective {@link org.apache.lucene.document.FieldType.LegacyNumericType} for the field for the purposes of hash values.\n   * ie: If the field has an explict LegacyNumericType that is returned; If the field has no explicit\n   * LegacyNumericType then {@link org.apache.lucene.document.FieldType.LegacyNumericType#LONG} is returned;  If field is null, then\n   * {@link org.apache.lucene.document.FieldType.LegacyNumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static LegacyNumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return LegacyNumericType.FLOAT;\n    }\n    final LegacyNumericType result = field.getType().getNumericType();\n    return null == result ? FieldType.LegacyNumericType.LONG : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d81baa64023bbb9b43f6d929ee168b105940d30","date":1486492702,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#getHashableNumericType(SchemaField).mjava","sourceNew":"  /**\n   * Returns the effective {@link NumberType} for the field for the purposes of hash values.\n   * ie: If the field has an explict NumberType that is returned; If the field has no explicit\n   * NumberType then {@link NumberType#LONG} is returned;  If field is null, then\n   * {@link NumberType#FLOAT} is assumed for ValueSource.\n   */\n  private static NumberType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return NumberType.FLOAT;\n    }\n    final NumberType result = field.getType().getNumberType();\n    return null == result ? NumberType.LONG : result;\n  }\n\n","sourceOld":"  /**\n   * Returns the effective {@link LegacyNumericType} for the field for the purposes of hash values.\n   * ie: If the field has an explict LegacyNumericType that is returned; If the field has no explicit\n   * LegacyNumericType then {@link LegacyNumericType#LONG} is returned;  If field is null, then\n   * {@link LegacyNumericType#FLOAT} is assumed for ValueSource.\n   */\n  private static LegacyNumericType getHashableNumericType(SchemaField field) {\n    if (null == field) {\n      return LegacyNumericType.FLOAT;\n    }\n    final LegacyNumericType result = field.getType().getNumericType();\n    return null == result ? LegacyNumericType.LONG : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d81baa64023bbb9b43f6d929ee168b105940d30"]},"commit2Childs":{"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["770342641f7b505eaa8dccdc666158bff2419109"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["3d81baa64023bbb9b43f6d929ee168b105940d30","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}