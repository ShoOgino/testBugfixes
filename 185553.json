{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n    customType5.setStoreTermVectors(true);\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n    FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorPositions(true);\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorOffsets(true);\n    customType8.setStoreTermVectorPositions(true);\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\", \"one two two three three three\", TextField.TYPE_STORED));\n        doc.add(new Field(\"termvector\", \"one two two three three three\", customType5));\n        doc.add(new Field(\"tvoffset\", \"one two two three three three\", customType6));\n        doc.add(new Field(\"tvposition\", \"one two two three three three\", customType7));\n        doc.add(new Field(\"tvpositionoffset\", \"one two two three three three\", customType8));\n        \n        writer.addDocument(doc);\n    }\n    writer.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n    customType5.setStoreTermVectors(true);\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n    FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorPositions(true);\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorOffsets(true);\n    customType8.setStoreTermVectorPositions(true);\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\", \"one two two three three three\", TextField.TYPE_STORED));\n        doc.add(new Field(\"termvector\", \"one two two three three three\", customType5));\n        doc.add(new Field(\"tvoffset\", \"one two two three three three\", customType6));\n        doc.add(new Field(\"tvposition\", \"one two two three three three\", customType7));\n        doc.add(new Field(\"tvpositionoffset\", \"one two two three three three\", customType8));\n        \n        writer.addDocument(doc);\n    }\n    writer.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":null,"sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n    customType5.setStoreTermVectors(true);\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n    FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorPositions(true);\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorOffsets(true);\n    customType8.setStoreTermVectorPositions(true);\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\", \"one two two three three three\", TextField.TYPE_STORED));\n        doc.add(new Field(\"termvector\", \"one two two three three three\", customType5));\n        doc.add(new Field(\"tvoffset\", \"one two two three three three\", customType6));\n        doc.add(new Field(\"tvposition\", \"one two two three three three\", customType7));\n        doc.add(new Field(\"tvpositionoffset\", \"one two two three three three\", customType8));\n        \n        writer.addDocument(doc);\n    }\n    writer.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}