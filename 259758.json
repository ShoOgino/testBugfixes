{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.SimpleTextPostingsWriter#startDoc(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.SimpleTextPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.SimpleTextPostingsWriter#startDoc(int,int).mjava","sourceNew":"    @Override\n    public void startDoc(int docID, int termDocFreq) throws IOException {\n      if (!wroteTerm) {\n        // we lazily do this, in case the term had zero docs\n        write(TERM);\n        write(term);\n        newline();\n        wroteTerm = true;\n      }\n\n      write(DOC);\n      write(Integer.toString(docID));\n      newline();\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        write(FREQ);\n        write(Integer.toString(termDocFreq));\n        newline();\n      }\n\n      lastEndOffset = -1;\n    }\n\n","sourceOld":"    @Override\n    public void startDoc(int docID, int termDocFreq) throws IOException {\n      if (!wroteTerm) {\n        // we lazily do this, in case the term had zero docs\n        write(TERM);\n        write(term);\n        newline();\n        wroteTerm = true;\n      }\n\n      write(DOC);\n      write(Integer.toString(docID));\n      newline();\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        write(FREQ);\n        write(Integer.toString(termDocFreq));\n        newline();\n      }\n\n      lastEndOffset = -1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e433f3c3bbee0384ee38a294e45f6bd9f0120d0","date":1339556675,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.SimpleTextPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.SimpleTextPostingsWriter#startDoc(int,int).mjava","sourceNew":"    @Override\n    public void startDoc(int docID, int termDocFreq) throws IOException {\n      if (!wroteTerm) {\n        // we lazily do this, in case the term had zero docs\n        write(TERM);\n        write(term);\n        newline();\n        wroteTerm = true;\n      }\n\n      write(DOC);\n      write(Integer.toString(docID));\n      newline();\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        write(FREQ);\n        write(Integer.toString(termDocFreq));\n        newline();\n      }\n\n      lastStartOffset = 0;\n    }\n\n","sourceOld":"    @Override\n    public void startDoc(int docID, int termDocFreq) throws IOException {\n      if (!wroteTerm) {\n        // we lazily do this, in case the term had zero docs\n        write(TERM);\n        write(term);\n        newline();\n        wroteTerm = true;\n      }\n\n      write(DOC);\n      write(Integer.toString(docID));\n      newline();\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        write(FREQ);\n        write(Integer.toString(termDocFreq));\n        newline();\n      }\n\n      lastEndOffset = -1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.SimpleTextPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.SimpleTextPostingsWriter#startDoc(int,int).mjava","sourceNew":"    @Override\n    public void startDoc(int docID, int termDocFreq) throws IOException {\n      if (!wroteTerm) {\n        // we lazily do this, in case the term had zero docs\n        write(TERM);\n        write(term);\n        newline();\n        wroteTerm = true;\n      }\n\n      write(DOC);\n      write(Integer.toString(docID));\n      newline();\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        write(FREQ);\n        write(Integer.toString(termDocFreq));\n        newline();\n      }\n\n      lastStartOffset = 0;\n    }\n\n","sourceOld":"    @Override\n    public void startDoc(int docID, int termDocFreq) throws IOException {\n      if (!wroteTerm) {\n        // we lazily do this, in case the term had zero docs\n        write(TERM);\n        write(term);\n        newline();\n        wroteTerm = true;\n      }\n\n      write(DOC);\n      write(Integer.toString(docID));\n      newline();\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        write(FREQ);\n        write(Integer.toString(termDocFreq));\n        newline();\n      }\n\n      lastStartOffset = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["6e433f3c3bbee0384ee38a294e45f6bd9f0120d0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e433f3c3bbee0384ee38a294e45f6bd9f0120d0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e433f3c3bbee0384ee38a294e45f6bd9f0120d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6e433f3c3bbee0384ee38a294e45f6bd9f0120d0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}