{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","commits":[{"id":"d5cb41f0427fb7a75b0bfefe992561738c11fd80","date":1486576891,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String).mjava","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    System.out.println(\"####### Limit:\"+limit);\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs, fields);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs, fields);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b85ff6473de4267e05f6e4cb2f43b2b546d02114","date":1491527985,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs, fields);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(StreamHandler.getClientCache());\n    tupleStream.setStreamContext(streamContext);\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs, fields);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs, fields);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(StreamHandler.getClientCache());\n    tupleStream.setStreamContext(streamContext);\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs, fields);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs, fields);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(schema.getSolrClientCache());\n    tupleStream.setStreamContext(streamContext);\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs, fields);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(StreamHandler.getClientCache());\n    tupleStream.setStreamContext(streamContext);\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   @SuppressWarnings(\"rawtypes\") final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs, fields);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(schema.getSolrClientCache());\n    tupleStream.setStreamContext(streamContext);\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs, fields);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(schema.getSolrClientCache());\n    tupleStream.setStreamContext(streamContext);\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a9b741b54c163686a5fd077895a797daa9b0b95f"],"a9b741b54c163686a5fd077895a797daa9b0b95f":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["b85ff6473de4267e05f6e4cb2f43b2b546d02114"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"b85ff6473de4267e05f6e4cb2f43b2b546d02114":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a9b741b54c163686a5fd077895a797daa9b0b95f":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["b85ff6473de4267e05f6e4cb2f43b2b546d02114"],"b85ff6473de4267e05f6e4cb2f43b2b546d02114":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}