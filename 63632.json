{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } catch (Exception e) { // TODO: getHyphenationTree really shouldn't throw \"Exception\"\n      throw new InitializationException(\"Exception thrown while loading dictionary and hyphenation file\", e);\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } catch (Exception e) { // TODO: getHyphenationTree really shouldn't throw \"Exception\"\n      throw new InitializationException(\"Exception thrown while loading dictionary and hyphenation file\", e);\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80231a39fa20f6c8567eb4e3a3a0511630a97ac7","date":1343105908,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } catch (Exception e) { // TODO: getHyphenationTree really shouldn't throw \"Exception\"\n      throw new InitializationException(\"Exception thrown while loading dictionary and hyphenation file\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } catch (Exception e) { // TODO: getHyphenationTree really shouldn't throw \"Exception\"\n      throw new InitializationException(\"Exception thrown while loading dictionary and hyphenation file\", e);\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } catch (Exception e) { // TODO: getHyphenationTree really shouldn't throw \"Exception\"\n      throw new InitializationException(\"Exception thrown while loading dictionary and hyphenation file\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } catch (Exception e) { // TODO: getHyphenationTree really shouldn't throw \"Exception\"\n      throw new InitializationException(\"Exception thrown while loading dictionary and hyphenation file\", e);\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } catch (Exception e) { // TODO: getHyphenationTree really shouldn't throw \"Exception\"\n      throw new InitializationException(\"Exception thrown while loading dictionary and hyphenation file\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      if (luceneMatchVersion.onOrAfter(Version.LUCENE_4_4)) {\n        hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n      } else {\n        hyphenator = Lucene43HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      if (luceneMatchVersion.onOrAfter(Version.LUCENE_4_4_0)) {\n        hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n      } else {\n        hyphenator = Lucene43HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      if (luceneMatchVersion.onOrAfter(Version.LUCENE_4_4)) {\n        hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n      } else {\n        hyphenator = Lucene43HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    InputStream stream = null;\n    try {\n      if (dictFile != null) // the dictionary can be empty.\n        dictionary = getWordSet(loader, dictFile, false);\n      // TODO: Broken, because we cannot resolve real system id\n      // ResourceLoader should also supply method like ClassLoader to get resource URL\n      stream = loader.openResource(hypFile);\n      final InputSource is = new InputSource(stream);\n      is.setEncoding(encoding); // if it's null let xml parser decide\n      is.setSystemId(hypFile);\n      if (luceneMatchVersion.onOrAfter(Version.LUCENE_4_4_0)) {\n        hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n      } else {\n        hyphenator = Lucene43HyphenationCompoundWordTokenFilter.getHyphenationTree(is);\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(stream);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["f6f80818731469e00f54165ec94aae2db868ea05","7530de27b87b961b51f01bd1299b7004d46e8823"],"057a1793765d068ea9302f1a29e21734ee58d41e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["057a1793765d068ea9302f1a29e21734ee58d41e"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","80231a39fa20f6c8567eb4e3a3a0511630a97ac7"],"80231a39fa20f6c8567eb4e3a3a0511630a97ac7":["3241e06e642196396b80bb293acd9c0814d079e0"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["f6f80818731469e00f54165ec94aae2db868ea05"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"057a1793765d068ea9302f1a29e21734ee58d41e":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"80231a39fa20f6c8567eb4e3a3a0511630a97ac7":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["057a1793765d068ea9302f1a29e21734ee58d41e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","379db3ad24c4f0214f30a122265a6d6be003a99d"],"3241e06e642196396b80bb293acd9c0814d079e0":["80231a39fa20f6c8567eb4e3a3a0511630a97ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}