{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //hour:\n      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //minute:\n      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //second:\n      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //ms:\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted date: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted date: \"+str, offset);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","sourceNew":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //hour:\n      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //minute:\n      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //second:\n      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //ms:\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted date: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted date: \"+str, offset);\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //hour:\n      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //minute:\n      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //second:\n      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //ms:\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted date: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted date: \"+str, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","sourceNew":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //hour:\n      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //minute:\n      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //second:\n      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //ms:\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted date: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted date: \"+str, offset);\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //hour:\n      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //minute:\n      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //second:\n      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //ms:\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted date: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted date: \"+str, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}