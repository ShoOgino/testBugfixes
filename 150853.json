{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionSupportsApproximations().mjava","commits":[{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionSupportsApproximations().mjava","pathOld":"/dev/null","sourceNew":"  public void testConjunctionSupportsApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionSupportsApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionSupportsApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDisjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionSupportsApproximations().mjava","sourceNew":"  public void testDisjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.SHOULD);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionSupportsApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"]},"commit2Childs":{"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}