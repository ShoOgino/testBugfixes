{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","commits":[{"id":"1735d662b62f98976dc6cccfe9d327c5e7b22dff","date":1498984143,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(5)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(5)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"policiesTest\", 1, 3);\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"policiesTest\", 2, 6);\n    \n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"policiesTest\", 1, 3);\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"policiesTest\", 2, 6);\n    \n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"policiesTest\", 1, 3);\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"policiesTest\", 2, 6);\n    \n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6ae69e36b15b227a219d4e334ccf5f58fb8affd","date":1562804219,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    final String collectionName = \"addshard_with_reptype_using_policy\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 3);\n\n    DocCollection coll = getCollectionState(collectionName);\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(collectionName, \"s3\").\n        process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 6);\n    \n    coll = getCollectionState(collectionName);\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"policiesTest\", 1, 3);\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"policiesTest\", 2, 6);\n    \n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    final String collectionName = \"addshard_with_reptype_using_policy\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"s1\", 1, 1, 1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 3);\n\n    DocCollection coll = getCollectionState(collectionName);\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(collectionName, \"s3\").\n        process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 6);\n    \n    coll = getCollectionState(collectionName);\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    final String collectionName = \"addshard_with_reptype_using_policy\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 3);\n\n    DocCollection coll = getCollectionState(collectionName);\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(collectionName, \"s3\").\n        process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 6);\n    \n    coll = getCollectionState(collectionName);\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":null,"sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n    String nrtNodeName = jetty.getNodeName();\n    int nrtPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(1);\n    String pullNodeName = jetty.getNodeName();\n    int pullPort = jetty.getLocalPort();\n\n    jetty = cluster.getJettySolrRunners().get(2);\n    String tlogNodeName = jetty.getNodeName();\n    int tlogPort = jetty.getLocalPort();\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    final String collectionName = \"addshard_with_reptype_using_policy\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"s1\", 1, 1, 1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 3);\n\n    DocCollection coll = getCollectionState(collectionName);\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(collectionName, \"s3\").\n        process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 6);\n    \n    coll = getCollectionState(collectionName);\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["89948af0461fead48f44ba8fb7866f107ce83f22"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["1735d662b62f98976dc6cccfe9d327c5e7b22dff"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1735d662b62f98976dc6cccfe9d327c5e7b22dff","c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}