{"path":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      ArrayBlockingQueue queue = new ArrayBlockingQueue(leaves.size());\n\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          semaphore.acquire();\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher, queue,semaphore);\n          threadPool.execute(segmentPartitioner);\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n      for(int i=0; i<leaves.size(); i++) {\n        try {\n          SegmentPartitioner segmentPartitioner = (SegmentPartitioner)queue.take();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        }catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return constantScoreQuery.createWeight(searcher, false);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b1c85a6a67cac616c83fd883a7b7202b10b294fd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1c85a6a67cac616c83fd883a7b7202b10b294fd","date":1425992717,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return constantScoreQuery.createWeight(searcher, false);\n    }\n\n","sourceOld":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      ArrayBlockingQueue queue = new ArrayBlockingQueue(leaves.size());\n\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          semaphore.acquire();\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher, queue,semaphore);\n          threadPool.execute(segmentPartitioner);\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n      for(int i=0; i<leaves.size(); i++) {\n        try {\n          SegmentPartitioner segmentPartitioner = (SegmentPartitioner)queue.take();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        }catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return constantScoreQuery.createWeight(searcher, false);\n    }\n\n","bugFix":["91814ce09be68efd0626969632e79ae47d8876d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return constantScoreQuery.createWeight(searcher, false);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47adf211077e63a117fd485aedf875d4e766b90","date":1435246883,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, false);\n    }\n\n","sourceOld":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return constantScoreQuery.createWeight(searcher, false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, false, boost);\n    }\n\n","sourceOld":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, false);\n    }\n\n","bugFix":null,"bugIntro":["b727c2b644ee54d2e38238ce0d24d069e9dec877","b727c2b644ee54d2e38238ce0d24d069e9dec877"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1c85a6a67cac616c83fd883a7b7202b10b294fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["e47adf211077e63a117fd485aedf875d4e766b90"],"b1c85a6a67cac616c83fd883a7b7202b10b294fd":["91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e47adf211077e63a117fd485aedf875d4e766b90":["b1c85a6a67cac616c83fd883a7b7202b10b294fd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e47adf211077e63a117fd485aedf875d4e766b90","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"b1c85a6a67cac616c83fd883a7b7202b10b294fd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e47adf211077e63a117fd485aedf875d4e766b90"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91814ce09be68efd0626969632e79ae47d8876d4":["b1c85a6a67cac616c83fd883a7b7202b10b294fd"],"e47adf211077e63a117fd485aedf875d4e766b90":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}