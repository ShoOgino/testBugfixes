{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","commits":[{"id":"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3","date":1373907993,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = FSDirectory.open(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      searcher = new IndexSearcher(DirectoryReader.open(dir));\n      // This will just be null if app didn't pass payloads to build():\n      // TODO: maybe just stored fields?  they compress...\n      payloadsDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), \"payloads\");\n      weightsDV = MultiDocValues.getNumericValues(searcher.getIndexReader(), \"weight\");\n      textDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), TEXT_FIELD_NAME);\n      assert textDV != null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3aad8246db872dc16fbe6109f893457496b0240","date":1373920172,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      searcher = new IndexSearcher(DirectoryReader.open(dir));\n      // This will just be null if app didn't pass payloads to build():\n      // TODO: maybe just stored fields?  they compress...\n      payloadsDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), \"payloads\");\n      weightsDV = MultiDocValues.getNumericValues(searcher.getIndexReader(), \"weight\");\n      textDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), TEXT_FIELD_NAME);\n      assert textDV != null;\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = FSDirectory.open(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      searcher = new IndexSearcher(DirectoryReader.open(dir));\n      // This will just be null if app didn't pass payloads to build():\n      // TODO: maybe just stored fields?  they compress...\n      payloadsDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), \"payloads\");\n      weightsDV = MultiDocValues.getNumericValues(searcher.getIndexReader(), \"weight\");\n      textDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), TEXT_FIELD_NAME);\n      assert textDV != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      searcher = new IndexSearcher(DirectoryReader.open(dir));\n      // This will just be null if app didn't pass payloads to build():\n      // TODO: maybe just stored fields?  they compress...\n      payloadsDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), \"payloads\");\n      weightsDV = MultiDocValues.getNumericValues(searcher.getIndexReader(), \"weight\");\n      textDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), TEXT_FIELD_NAME);\n      assert textDV != null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      IndexReader reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      // This will just be null if app didn't pass payloads to build():\n      // TODO: maybe just stored fields?  they compress...\n      payloadsDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), \"payloads\");\n      weightsDV = MultiDocValues.getNumericValues(searcher.getIndexReader(), \"weight\");\n      textDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), TEXT_FIELD_NAME);\n      count = reader.numDocs();\n      assert textDV != null;\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      searcher = new IndexSearcher(DirectoryReader.open(dir));\n      // This will just be null if app didn't pass payloads to build():\n      // TODO: maybe just stored fields?  they compress...\n      payloadsDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), \"payloads\");\n      weightsDV = MultiDocValues.getNumericValues(searcher.getIndexReader(), \"weight\");\n      textDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), TEXT_FIELD_NAME);\n      assert textDV != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a371aa649cc243e82cb8677ca960a1e0232ecedf","date":1393605574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      initSorter();\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), sorter, IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      IndexReader reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      // This will just be null if app didn't pass payloads to build():\n      // TODO: maybe just stored fields?  they compress...\n      payloadsDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), \"payloads\");\n      weightsDV = MultiDocValues.getNumericValues(searcher.getIndexReader(), \"weight\");\n      textDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), TEXT_FIELD_NAME);\n      count = reader.numDocs();\n      assert textDV != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b638f37b6d00b06fa8d6875cea1df4b274d6e87a","date":1394120449,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), SORT, IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      initSorter();\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), sorter, IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1e7da8a91a92330e8f04b171b83e655a4a25c31","date":1394125906,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists. Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), SORT, IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists. Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      initSorter();\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), sorter, IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists. Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      initSorter();\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), sorter, IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a371aa649cc243e82cb8677ca960a1e0232ecedf","4637747f71df783fc2014ef1f1e0418466e3bed6"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3aad8246db872dc16fbe6109f893457496b0240"],"b3aad8246db872dc16fbe6109f893457496b0240":["33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b638f37b6d00b06fa8d6875cea1df4b274d6e87a":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["b3aad8246db872dc16fbe6109f893457496b0240"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["a371aa649cc243e82cb8677ca960a1e0232ecedf","f1e7da8a91a92330e8f04b171b83e655a4a25c31"],"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1e7da8a91a92330e8f04b171b83e655a4a25c31":["b638f37b6d00b06fa8d6875cea1df4b274d6e87a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4637747f71df783fc2014ef1f1e0418466e3bed6"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"b3aad8246db872dc16fbe6109f893457496b0240":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a645276cbaf5dc96a42fd473b9019bde352996c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"b638f37b6d00b06fa8d6875cea1df4b274d6e87a":["f1e7da8a91a92330e8f04b171b83e655a4a25c31"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b638f37b6d00b06fa8d6875cea1df4b274d6e87a","4637747f71df783fc2014ef1f1e0418466e3bed6"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3":["b3aad8246db872dc16fbe6109f893457496b0240"],"f1e7da8a91a92330e8f04b171b83e655a4a25c31":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}