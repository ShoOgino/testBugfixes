{"path":"backwards/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerImpl.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.termLength()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizerImpl.ACRONYM_DEP) {\n          if (replaceInvalidAcronym) {\n            typeAtt.setType(StandardTokenizerImpl.TOKEN_TYPES[StandardTokenizerImpl.HOST]);\n            termAtt.setTermLength(termAtt.termLength() - 1); // remove extra '.'\n          } else {\n            typeAtt.setType(StandardTokenizerImpl.TOKEN_TYPES[StandardTokenizerImpl.ACRONYM]);\n          }\n        } else {\n          typeAtt.setType(StandardTokenizerImpl.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerImpl.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.termLength()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizerImpl.ACRONYM_DEP) {\n          if (replaceInvalidAcronym) {\n            typeAtt.setType(StandardTokenizerImpl.TOKEN_TYPES[StandardTokenizerImpl.HOST]);\n            termAtt.setTermLength(termAtt.termLength() - 1); // remove extra '.'\n          } else {\n            typeAtt.setType(StandardTokenizerImpl.TOKEN_TYPES[StandardTokenizerImpl.ACRONYM]);\n          }\n        } else {\n          typeAtt.setType(StandardTokenizerImpl.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerImpl.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.termLength()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizerImpl.ACRONYM_DEP) {\n          if (replaceInvalidAcronym) {\n            typeAtt.setType(StandardTokenizerImpl.TOKEN_TYPES[StandardTokenizerImpl.HOST]);\n            termAtt.setTermLength(termAtt.termLength() - 1); // remove extra '.'\n          } else {\n            typeAtt.setType(StandardTokenizerImpl.TOKEN_TYPES[StandardTokenizerImpl.ACRONYM]);\n          }\n        } else {\n          typeAtt.setType(StandardTokenizerImpl.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}