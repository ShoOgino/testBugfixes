{"path":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x7fffec7f),\n      new Integer(0x80002510),new Integer(0x8000251c),\n      new Integer(0x7fffec8), new Integer(0x7fffecf),\n      new Integer(0x8000250), new Integer(0x8000250),\n      new Integer(0x7fffed),  new Integer(0x7fffef),\n      new Integer(0x800020),  new Integer(0x800024),\n      new Integer(0x7ffff),   new Integer(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x8000040), new Integer(0x8000043),\n      new Integer(0x800000),  new Integer(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      new Integer(0x00),new Integer(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      new Integer(0x8000251c),new Integer(0x8000251c)\n    }).iterator());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x7fffec7f),\n      new Integer(0x80002510),new Integer(0x8000251c),\n      new Integer(0x7fffec8), new Integer(0x7fffecf),\n      new Integer(0x8000250), new Integer(0x8000250),\n      new Integer(0x7fffed),  new Integer(0x7fffef),\n      new Integer(0x800020),  new Integer(0x800024),\n      new Integer(0x7ffff),   new Integer(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x8000040), new Integer(0x8000043),\n      new Integer(0x800000),  new Integer(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      new Integer(0x00),new Integer(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      new Integer(0x8000251c),new Integer(0x8000251c)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections. <Integer> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections. <Integer> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections. <Integer> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["53b6c192847de8643a5da505cc433cbf8476a175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["6bcde5e3f23911110baa101ed062b544162825b5"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}