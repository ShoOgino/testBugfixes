{"path":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"9c706ea4648df3cdef242f9dd43da00db226b1a6","date":1184375011,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    String k = args.get( KEEP );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        k = st.nextToken().trim();\n        keep.put( k.toUpperCase(), k );\n      }\n    }\n    \n    k = args.get( OK_PREFIX );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        okPrefix.add( st.nextToken().trim() );\n      }\n    }\n    \n    k = args.get( MIN_WORD_LENGTH );\n    if( k != null ) {\n      minWordLength = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_WORD_COUNT );\n    if( k != null ) {\n      maxWordCount = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_TOKEN_LENGTH );\n    if( k != null ) {\n      maxTokenLength = Integer.valueOf( k );\n    }\n\n    k = args.get( ONLY_FIRST_WORD );\n    if( k != null ) {\n      onlyFirstWord = Boolean.valueOf( k );\n    }\n\n    k = args.get( FORCE_FIRST_LETTER );\n    if( k != null ) {\n      forceFirstLetter = Boolean.valueOf( k );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["16a3bd060e23c83333ee54d14fc1034f973eb8b5","16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(SolrConfig,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(SolrConfig solrConfig, Map<String,String> args) {\n    super.init( solrConfig, args );\n    \n    String k = args.get( KEEP );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        k = st.nextToken().trim();\n        keep.put( k.toUpperCase(), k );\n      }\n    }\n    \n    k = args.get( OK_PREFIX );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        okPrefix.add( st.nextToken().trim() );\n      }\n    }\n    \n    k = args.get( MIN_WORD_LENGTH );\n    if( k != null ) {\n      minWordLength = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_WORD_COUNT );\n    if( k != null ) {\n      maxWordCount = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_TOKEN_LENGTH );\n    if( k != null ) {\n      maxTokenLength = Integer.valueOf( k );\n    }\n\n    k = args.get( ONLY_FIRST_WORD );\n    if( k != null ) {\n      onlyFirstWord = Boolean.valueOf( k );\n    }\n\n    k = args.get( FORCE_FIRST_LETTER );\n    if( k != null ) {\n      forceFirstLetter = Boolean.valueOf( k );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    String k = args.get( KEEP );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        k = st.nextToken().trim();\n        keep.put( k.toUpperCase(), k );\n      }\n    }\n    \n    k = args.get( OK_PREFIX );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        okPrefix.add( st.nextToken().trim() );\n      }\n    }\n    \n    k = args.get( MIN_WORD_LENGTH );\n    if( k != null ) {\n      minWordLength = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_WORD_COUNT );\n    if( k != null ) {\n      maxWordCount = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_TOKEN_LENGTH );\n    if( k != null ) {\n      maxTokenLength = Integer.valueOf( k );\n    }\n\n    k = args.get( ONLY_FIRST_WORD );\n    if( k != null ) {\n      onlyFirstWord = Boolean.valueOf( k );\n    }\n\n    k = args.get( FORCE_FIRST_LETTER );\n    if( k != null ) {\n      forceFirstLetter = Boolean.valueOf( k );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(SolrConfig,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    String k = args.get( KEEP );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        k = st.nextToken().trim();\n        keep.put( k.toUpperCase(), k );\n      }\n    }\n    \n    k = args.get( OK_PREFIX );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        okPrefix.add( st.nextToken().trim() );\n      }\n    }\n    \n    k = args.get( MIN_WORD_LENGTH );\n    if( k != null ) {\n      minWordLength = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_WORD_COUNT );\n    if( k != null ) {\n      maxWordCount = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_TOKEN_LENGTH );\n    if( k != null ) {\n      maxTokenLength = Integer.valueOf( k );\n    }\n\n    k = args.get( ONLY_FIRST_WORD );\n    if( k != null ) {\n      onlyFirstWord = Boolean.valueOf( k );\n    }\n\n    k = args.get( FORCE_FIRST_LETTER );\n    if( k != null ) {\n      forceFirstLetter = Boolean.valueOf( k );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(SolrConfig solrConfig, Map<String,String> args) {\n    super.init( solrConfig, args );\n    \n    String k = args.get( KEEP );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        k = st.nextToken().trim();\n        keep.put( k.toUpperCase(), k );\n      }\n    }\n    \n    k = args.get( OK_PREFIX );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        okPrefix.add( st.nextToken().trim() );\n      }\n    }\n    \n    k = args.get( MIN_WORD_LENGTH );\n    if( k != null ) {\n      minWordLength = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_WORD_COUNT );\n    if( k != null ) {\n      maxWordCount = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_TOKEN_LENGTH );\n    if( k != null ) {\n      maxTokenLength = Integer.valueOf( k );\n    }\n\n    k = args.get( ONLY_FIRST_WORD );\n    if( k != null ) {\n      onlyFirstWord = Boolean.valueOf( k );\n    }\n\n    k = args.get( FORCE_FIRST_LETTER );\n    if( k != null ) {\n      forceFirstLetter = Boolean.valueOf( k );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a3bd060e23c83333ee54d14fc1034f973eb8b5","date":1203820455,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    String k = args.get( KEEP );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        k = st.nextToken().trim();\n        keep.put( k.toUpperCase(), k );\n      }\n    }\n    \n    k = args.get( OK_PREFIX );\n    if( k != null ) {\n      StringTokenizer st = new StringTokenizer( k );\n      while( st.hasMoreTokens() ) {\n        okPrefix.add( st.nextToken().trim() );\n      }\n    }\n    \n    k = args.get( MIN_WORD_LENGTH );\n    if( k != null ) {\n      minWordLength = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_WORD_COUNT );\n    if( k != null ) {\n      maxWordCount = Integer.valueOf( k );\n    }\n\n    k = args.get( MAX_TOKEN_LENGTH );\n    if( k != null ) {\n      maxTokenLength = Integer.valueOf( k );\n    }\n\n    k = args.get( ONLY_FIRST_WORD );\n    if( k != null ) {\n      onlyFirstWord = Boolean.valueOf( k );\n    }\n\n    k = args.get( FORCE_FIRST_LETTER );\n    if( k != null ) {\n      forceFirstLetter = Boolean.valueOf( k );\n    }\n  }\n\n","bugFix":["9c706ea4648df3cdef242f9dd43da00db226b1a6","fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["9c706ea4648df3cdef242f9dd43da00db226b1a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c706ea4648df3cdef242f9dd43da00db226b1a6":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9c706ea4648df3cdef242f9dd43da00db226b1a6"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["ad94625fb8d088209f46650c8097196fec67f00c"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"9c706ea4648df3cdef242f9dd43da00db226b1a6":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}