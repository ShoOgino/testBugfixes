{"path":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testOneRetry(NodeType).mjava","commits":[{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testOneRetry(NodeType).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testOneRetry().mjava","sourceNew":"  private void testOneRetry(NodeType nodeType) throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      Node retryNode;\n      if (nodeType == NodeType.FORWARD) {\n        retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            streamingClients.setExp(null);\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      } else {\n        retryNode = new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            streamingClients.setExp(null);\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      }\n\n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      assertEquals(1, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      // we will get java.net.ConnectException which we retry on\n      assertEquals(numFoundBefore + 1, numFoundAfter);\n      assertEquals(0, cmdDistrib.getErrors().size());\n    }\n  }\n\n","sourceOld":"  private void testOneRetry() throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 5, 0)) {\n      streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n        @Override\n        public boolean checkRetry() {\n          streamingClients.setExp(null);\n          retries.incrementAndGet();\n          return true;\n        }\n      };\n\n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      assertEquals(1, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      // we will get java.net.ConnectException which we retry on\n      assertEquals(numFoundBefore + 1, numFoundAfter);\n      assertEquals(0, cmdDistrib.getErrors().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}