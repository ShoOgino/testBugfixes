{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(ValueType,double).mjava","commits":[{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(ValueType,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(ValueType type, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == ValueType.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes, newIOContext(random));\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random));\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(Type,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(ValueType,double).mjava","sourceNew":"  private void runTestFloats(Type type, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(ValueType type, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == ValueType.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(Type,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(ValueType,double).mjava","sourceNew":"  private void runTestFloats(Type type, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(ValueType type, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == ValueType.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e128967bca58657bc0039d4bfe631e63e81f1977"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}