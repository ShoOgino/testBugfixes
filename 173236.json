{"path":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#hashCode().mjava","commits":[{"id":"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","date":1444426023,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = super.hashCode();\n    result = prime * result + ((fromField == null) ? 0 : fromField.hashCode());\n    result = prime * result + maxDepth;\n    result = prime * result + (onlyLeafNodes ? 1231 : 1237);\n    result = prime * result + ((q == null) ? 0 : q.hashCode());\n    result = prime * result + (returnRoot ? 1231 : 1237);\n    result = prime * result + ((toField == null) ? 0 : toField.hashCode());\n    result = prime * result + ((traversalFilter == null) ? 0 : traversalFilter.hashCode());\n    result = prime * result + (useAutn ? 1231 : 1237);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#hashCode().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = classHash();\n    result = prime * result + Objects.hashCode(fromField);\n    result = prime * result + maxDepth;\n    result = prime * result + (onlyLeafNodes ? 1231 : 1237);\n    result = prime * result + Objects.hashCode(q);\n    result = prime * result + (returnRoot ? 1231 : 1237);\n    result = prime * result + Objects.hashCode(toField);\n    result = prime * result + Objects.hashCode(traversalFilter);\n    result = prime * result + (useAutn ? 1231 : 1237);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = super.hashCode();\n    result = prime * result + ((fromField == null) ? 0 : fromField.hashCode());\n    result = prime * result + maxDepth;\n    result = prime * result + (onlyLeafNodes ? 1231 : 1237);\n    result = prime * result + ((q == null) ? 0 : q.hashCode());\n    result = prime * result + (returnRoot ? 1231 : 1237);\n    result = prime * result + ((toField == null) ? 0 : toField.hashCode());\n    result = prime * result + ((traversalFilter == null) ? 0 : traversalFilter.hashCode());\n    result = prime * result + (useAutn ? 1231 : 1237);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#hashCode().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = classHash();\n    result = prime * result + Objects.hashCode(fromField);\n    result = prime * result + maxDepth;\n    result = prime * result + (onlyLeafNodes ? 1231 : 1237);\n    result = prime * result + Objects.hashCode(q);\n    result = prime * result + (returnRoot ? 1231 : 1237);\n    result = prime * result + Objects.hashCode(toField);\n    result = prime * result + Objects.hashCode(traversalFilter);\n    result = prime * result + (useAutn ? 1231 : 1237);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = super.hashCode();\n    result = prime * result + ((fromField == null) ? 0 : fromField.hashCode());\n    result = prime * result + maxDepth;\n    result = prime * result + (onlyLeafNodes ? 1231 : 1237);\n    result = prime * result + ((q == null) ? 0 : q.hashCode());\n    result = prime * result + (returnRoot ? 1231 : 1237);\n    result = prime * result + ((toField == null) ? 0 : toField.hashCode());\n    result = prime * result + ((traversalFilter == null) ? 0 : traversalFilter.hashCode());\n    result = prime * result + (useAutn ? 1231 : 1237);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}