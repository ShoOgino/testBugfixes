{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"d7a738ebbf9537051521dcc7e49f69208f91e2fc","date":1358194026,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n    meta.writeLong(minValue);\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n    }\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);\n    \n    // nocommit: refactor this crap in PackedInts.java\n    // e.g. Header.load()/save() or something rather than how it works now.\n    CodecUtil.writeHeader(meta, PackedInts.CODEC_NAME, PackedInts.VERSION_CURRENT);\n    meta.writeVInt(bitsPerValue);\n    meta.writeVInt(count);\n    meta.writeVInt(formatAndBits.format.getId());\n    \n    meta.writeLong(data.getFilePointer());\n    \n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n    meta.writeLong(minValue);\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n    }\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);\n    \n    // nocommit: refactor this crap in PackedInts.java\n    // e.g. Header.load()/save() or something rather than how it works now.\n    CodecUtil.writeHeader(meta, PackedInts.CODEC_NAME, PackedInts.VERSION_CURRENT);\n    meta.writeVInt(bitsPerValue);\n    meta.writeVInt(count);\n    meta.writeVInt(formatAndBits.format.getId());\n    \n    meta.writeLong(data.getFilePointer());\n    \n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d16ef868cf51c616257bedf2a4a51a67ac5bb888","date":1358814697,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    int count = 0;\n    for (@SuppressWarnings(\"unused\") Number nv : values) {\n      ++count;\n    }\n\n    meta.writeVInt(field.number);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVInt(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n    for (Number nv : values) {\n      writer.add(nv.longValue());\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n    meta.writeLong(minValue);\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n    }\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);\n    \n    // nocommit: refactor this crap in PackedInts.java\n    // e.g. Header.load()/save() or something rather than how it works now.\n    CodecUtil.writeHeader(meta, PackedInts.CODEC_NAME, PackedInts.VERSION_CURRENT);\n    meta.writeVInt(bitsPerValue);\n    meta.writeVInt(count);\n    meta.writeVInt(formatAndBits.format.getId());\n    \n    meta.writeLong(data.getFilePointer());\n    \n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    int count = 0;\n    for (@SuppressWarnings(\"unused\") Number nv : values) {\n      ++count;\n    }\n\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVInt(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n    for (Number nv : values) {\n      writer.add(nv.longValue());\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    int count = 0;\n    for (@SuppressWarnings(\"unused\") Number nv : values) {\n      ++count;\n    }\n\n    meta.writeVInt(field.number);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVInt(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n    for (Number nv : values) {\n      writer.add(nv.longValue());\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    int count = 0;\n    for (@SuppressWarnings(\"unused\") Number nv : values) {\n      ++count;\n    }\n\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVInt(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n    for (Number nv : values) {\n      writer.add(nv.longValue());\n    }\n    writer.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15adb143a3097f2342f07eb0929f6ce1877ad7e","date":1361027406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    long count = 0;\n    for (@SuppressWarnings(\"unused\") Number nv : values) {\n      ++count;\n    }\n\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n    for (Number nv : values) {\n      writer.add(nv.longValue());\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    int count = 0;\n    for (@SuppressWarnings(\"unused\") Number nv : values) {\n      ++count;\n    }\n\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVInt(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n    for (Number nv : values) {\n      writer.add(nv.longValue());\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    long count = 0;\n    for (@SuppressWarnings(\"unused\") Number nv : values) {\n      ++count;\n    }\n\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n    for (Number nv : values) {\n      writer.add(nv.longValue());\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    int count = 0;\n    for (@SuppressWarnings(\"unused\") Number nv : values) {\n      ++count;\n    }\n\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVInt(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n    for (Number nv : values) {\n      writer.add(nv.longValue());\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    long count = 0;\n    for (@SuppressWarnings(\"unused\") Number nv : values) {\n      ++count;\n    }\n\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n    for (Number nv : values) {\n      writer.add(nv.longValue());\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d16ef868cf51c616257bedf2a4a51a67ac5bb888"],"d16ef868cf51c616257bedf2a4a51a67ac5bb888":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","11a746437bc5c0a0b3df0337ed249c387c812871"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d16ef868cf51c616257bedf2a4a51a67ac5bb888":["9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["d16ef868cf51c616257bedf2a4a51a67ac5bb888"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}