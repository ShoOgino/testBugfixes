{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(nextTerm, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(nextTerm, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(nextTerm, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9d06e9fd29dcc9ea8b1a27fc8eb8e8a85cacab6","date":1295094246,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","sourceNew":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","sourceOld":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(nextTerm, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","sourceNew":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","sourceOld":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(nextTerm, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","sourceNew":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","sourceOld":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(nextTerm, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#next().mjava","sourceNew":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","sourceOld":"    @Override\n    public long next() {\n      final int idx = 1 + (int) (ord / totalIndexInterval);\n      if (idx >= fieldIndex.numIndexTerms) {\n        return -1;\n      }\n      ord += totalIndexInterval;\n\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","c9d06e9fd29dcc9ea8b1a27fc8eb8e8a85cacab6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["868da859b43505d9d2a023bfeae6dd0c795f5295","c9d06e9fd29dcc9ea8b1a27fc8eb8e8a85cacab6"],"c9d06e9fd29dcc9ea8b1a27fc8eb8e8a85cacab6":["56da903869515527852ee21ea7ef7bfe414cd40d"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["c9d06e9fd29dcc9ea8b1a27fc8eb8e8a85cacab6"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","c9d06e9fd29dcc9ea8b1a27fc8eb8e8a85cacab6","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"16843358872ed92ba92888ab99df297550b9a36a":[],"c9d06e9fd29dcc9ea8b1a27fc8eb8e8a85cacab6":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["16843358872ed92ba92888ab99df297550b9a36a"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}