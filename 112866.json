{"path":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = getSimilarity(searcher);\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher)\n      throws IOException {\n      assert setWeightContext(searcher);\n      this.similarity = getSimilarity(searcher);\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","pathOld":"/dev/null","sourceNew":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = getSimilarity(searcher);\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","date":1295478199,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = getSimilarity(searcher);\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = getSimilarity(searcher);\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarityProvider().get(term.field());\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarityProvider().get(term.field());\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","pathOld":"/dev/null","sourceNew":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarityProvider().get(term.field());\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","sourceNew":null,"sourceOld":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarityProvider().get(term.field());\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","sourceNew":null,"sourceOld":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarityProvider().get(term.field());\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,PerReaderTermState,int).mjava","sourceNew":null,"sourceOld":"    public TermWeight(IndexSearcher searcher, PerReaderTermState termStates, int docFreq)\n      throws IOException {\n      assert termStates != null : \"PerReaderTermState must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarityProvider().get(term.field());\n      if (docFreq != -1) {\n        idfExp = similarity.idfExplain(term, searcher, docFreq);\n      } else {\n        idfExp = similarity.idfExplain(term, searcher);\n      }\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"1291e4568eb7d9463d751627596ef14baf4c1603":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["e79a6d080bdd5b2a8f56342cf571b5476de04180","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"]},"commit2Childs":{"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}