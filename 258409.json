{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefixBytesRef(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefixBytesRef(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  public static BytesRef getCommonPrefixBytesRef(LightAutomaton a) {\n    BytesRef ref = new BytesRef(10);\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          ref.grow(++ref.length);\n          ref.bytes[ref.length - 1] = (byte) t.min;\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return ref;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefixBytesRef(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefixBytesRef(LightAutomaton).mjava","sourceNew":"  public static BytesRef getCommonPrefixBytesRef(LightAutomaton a) {\n    BytesRef ref = new BytesRef(10);\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          ref.grow(++ref.length);\n          ref.bytes[ref.length - 1] = (byte) t.min;\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return ref;\n  }\n\n","sourceOld":"  public static BytesRef getCommonPrefixBytesRef(LightAutomaton a) {\n    BytesRef ref = new BytesRef(10);\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          ref.grow(++ref.length);\n          ref.bytes[ref.length - 1] = (byte) t.min;\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return ref;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonPrefixBytesRef(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefixBytesRef(LightAutomaton).mjava","sourceNew":"  public static BytesRef getCommonPrefixBytesRef(Automaton a) {\n    BytesRef ref = new BytesRef(10);\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          ref.grow(++ref.length);\n          ref.bytes[ref.length - 1] = (byte) t.min;\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return ref;\n  }\n\n","sourceOld":"  public static BytesRef getCommonPrefixBytesRef(LightAutomaton a) {\n    BytesRef ref = new BytesRef(10);\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          ref.grow(++ref.length);\n          ref.bytes[ref.length - 1] = (byte) t.min;\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return ref;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}