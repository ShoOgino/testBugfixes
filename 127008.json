{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#checkIndexTerm(BytesRef,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#checkIndexTerm(BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {\n      // First term is first indexed term:\n      if (0 == (numTerms++ % termIndexInterval)) {\n\n        // write full bytes\n        out.writeBytes(text.bytes, text.offset, text.length);\n\n        if (termLengths.length == numIndexTerms) {\n          termLengths = ArrayUtil.grow(termLengths);\n        }\n        if (termsPointerDeltas.length == numIndexTerms) {\n          termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n        }\n\n        // save delta terms pointer\n        final long fp = termsOut.getFilePointer();\n        termsPointerDeltas[numIndexTerms] = (int) (fp - lastTermsPointer);\n        lastTermsPointer = fp;\n\n        // save term length (in bytes)\n        assert text.length <= Short.MAX_VALUE;\n        termLengths[numIndexTerms] = (short) text.length;\n\n        totTermLength += text.length;\n\n        numIndexTerms++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8898034f309751988d2b0adc9afea967d32731fd","date":1281118397,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#checkIndexTerm(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#checkIndexTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {\n      // First term is first indexed term:\n      if (0 == (numTerms++ % termIndexInterval)) {\n\n        // we can safely strip off the non-distinguishing\n        // suffix to save RAM in the loaded terms index.\n        final int limit = Math.min(lastTerm.length, text.length);\n        int minPrefixDiff = 1+lastTerm.length;\n        for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n          if (lastTerm.bytes[lastTerm.offset+byteIdx] != text.bytes[text.offset+byteIdx]) {\n            minPrefixDiff = byteIdx+1;\n            break;\n          }\n        }\n\n        // write only the min prefix that shows the diff\n        // against prior term\n        out.writeBytes(text.bytes, text.offset, minPrefixDiff);\n\n        if (termLengths.length == numIndexTerms) {\n          termLengths = ArrayUtil.grow(termLengths);\n        }\n        if (termsPointerDeltas.length == numIndexTerms) {\n          termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n        }\n\n        // save delta terms pointer\n        final long fp = termsOut.getFilePointer();\n        termsPointerDeltas[numIndexTerms] = (int) (fp - lastTermsPointer);\n        lastTermsPointer = fp;\n\n        // save term length (in bytes)\n        assert minPrefixDiff <= Short.MAX_VALUE;\n        termLengths[numIndexTerms] = (short) minPrefixDiff;\n        totTermLength += minPrefixDiff;\n\n        lastTerm.copy(text);\n        numIndexTerms++;\n        return true;\n      } else {\n        if (0 == numTerms % termIndexInterval) {\n          // save last term just before next index term so we\n          // can compute wasted suffix\n          lastTerm.copy(text);\n        }\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {\n      // First term is first indexed term:\n      if (0 == (numTerms++ % termIndexInterval)) {\n\n        // write full bytes\n        out.writeBytes(text.bytes, text.offset, text.length);\n\n        if (termLengths.length == numIndexTerms) {\n          termLengths = ArrayUtil.grow(termLengths);\n        }\n        if (termsPointerDeltas.length == numIndexTerms) {\n          termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n        }\n\n        // save delta terms pointer\n        final long fp = termsOut.getFilePointer();\n        termsPointerDeltas[numIndexTerms] = (int) (fp - lastTermsPointer);\n        lastTermsPointer = fp;\n\n        // save term length (in bytes)\n        assert text.length <= Short.MAX_VALUE;\n        termLengths[numIndexTerms] = (short) text.length;\n\n        totTermLength += text.length;\n\n        numIndexTerms++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1d9389e8e97a7b4fb5799390f50528de51fee7","date":1281141341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#checkIndexTerm(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#checkIndexTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {\n      // First term is first indexed term:\n      if (0 == (numTerms++ % termIndexInterval)) {\n\n        // we can safely strip off the non-distinguishing\n        // suffix to save RAM in the loaded terms index.\n        final int limit = Math.min(lastTerm.length, text.length);\n        int minPrefixDiff = Math.min(1+lastTerm.length, text.length);\n        for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n          if (lastTerm.bytes[lastTerm.offset+byteIdx] != text.bytes[text.offset+byteIdx]) {\n            minPrefixDiff = byteIdx+1;\n            break;\n          }\n        }\n\n        // write only the min prefix that shows the diff\n        // against prior term\n        out.writeBytes(text.bytes, text.offset, minPrefixDiff);\n\n        if (termLengths.length == numIndexTerms) {\n          termLengths = ArrayUtil.grow(termLengths);\n        }\n        if (termsPointerDeltas.length == numIndexTerms) {\n          termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n        }\n\n        // save delta terms pointer\n        final long fp = termsOut.getFilePointer();\n        termsPointerDeltas[numIndexTerms] = (int) (fp - lastTermsPointer);\n        lastTermsPointer = fp;\n\n        // save term length (in bytes)\n        assert minPrefixDiff <= Short.MAX_VALUE;\n        termLengths[numIndexTerms] = (short) minPrefixDiff;\n        totTermLength += minPrefixDiff;\n\n        lastTerm.copy(text);\n        numIndexTerms++;\n        return true;\n      } else {\n        if (0 == numTerms % termIndexInterval) {\n          // save last term just before next index term so we\n          // can compute wasted suffix\n          lastTerm.copy(text);\n        }\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {\n      // First term is first indexed term:\n      if (0 == (numTerms++ % termIndexInterval)) {\n\n        // we can safely strip off the non-distinguishing\n        // suffix to save RAM in the loaded terms index.\n        final int limit = Math.min(lastTerm.length, text.length);\n        int minPrefixDiff = 1+lastTerm.length;\n        for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n          if (lastTerm.bytes[lastTerm.offset+byteIdx] != text.bytes[text.offset+byteIdx]) {\n            minPrefixDiff = byteIdx+1;\n            break;\n          }\n        }\n\n        // write only the min prefix that shows the diff\n        // against prior term\n        out.writeBytes(text.bytes, text.offset, minPrefixDiff);\n\n        if (termLengths.length == numIndexTerms) {\n          termLengths = ArrayUtil.grow(termLengths);\n        }\n        if (termsPointerDeltas.length == numIndexTerms) {\n          termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n        }\n\n        // save delta terms pointer\n        final long fp = termsOut.getFilePointer();\n        termsPointerDeltas[numIndexTerms] = (int) (fp - lastTermsPointer);\n        lastTermsPointer = fp;\n\n        // save term length (in bytes)\n        assert minPrefixDiff <= Short.MAX_VALUE;\n        termLengths[numIndexTerms] = (short) minPrefixDiff;\n        totTermLength += minPrefixDiff;\n\n        lastTerm.copy(text);\n        numIndexTerms++;\n        return true;\n      } else {\n        if (0 == numTerms % termIndexInterval) {\n          // save last term just before next index term so we\n          // can compute wasted suffix\n          lastTerm.copy(text);\n        }\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#checkIndexTerm(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#checkIndexTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {\n      // First term is first indexed term:\n      if (0 == (numTerms++ % termIndexInterval)) {\n\n        // we can safely strip off the non-distinguishing\n        // suffix to save RAM in the loaded terms index.\n        final int limit = Math.min(lastTerm.length, text.length);\n        int minPrefixDiff = Math.min(1+lastTerm.length, text.length);\n        for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n          if (lastTerm.bytes[lastTerm.offset+byteIdx] != text.bytes[text.offset+byteIdx]) {\n            minPrefixDiff = byteIdx+1;\n            break;\n          }\n        }\n\n        // write only the min prefix that shows the diff\n        // against prior term\n        out.writeBytes(text.bytes, text.offset, minPrefixDiff);\n\n        if (termLengths.length == numIndexTerms) {\n          termLengths = ArrayUtil.grow(termLengths);\n        }\n        if (termsPointerDeltas.length == numIndexTerms) {\n          termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n        }\n\n        // save delta terms pointer\n        final long fp = termsOut.getFilePointer();\n        termsPointerDeltas[numIndexTerms] = (int) (fp - lastTermsPointer);\n        lastTermsPointer = fp;\n\n        // save term length (in bytes)\n        assert minPrefixDiff <= Short.MAX_VALUE;\n        termLengths[numIndexTerms] = (short) minPrefixDiff;\n        totTermLength += minPrefixDiff;\n\n        lastTerm.copy(text);\n        numIndexTerms++;\n        return true;\n      } else {\n        if (0 == numTerms % termIndexInterval) {\n          // save last term just before next index term so we\n          // can compute wasted suffix\n          lastTerm.copy(text);\n        }\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {\n      // First term is first indexed term:\n      if (0 == (numTerms++ % termIndexInterval)) {\n\n        // we can safely strip off the non-distinguishing\n        // suffix to save RAM in the loaded terms index.\n        final int limit = Math.min(lastTerm.length, text.length);\n        int minPrefixDiff = Math.min(1+lastTerm.length, text.length);\n        for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n          if (lastTerm.bytes[lastTerm.offset+byteIdx] != text.bytes[text.offset+byteIdx]) {\n            minPrefixDiff = byteIdx+1;\n            break;\n          }\n        }\n\n        // write only the min prefix that shows the diff\n        // against prior term\n        out.writeBytes(text.bytes, text.offset, minPrefixDiff);\n\n        if (termLengths.length == numIndexTerms) {\n          termLengths = ArrayUtil.grow(termLengths);\n        }\n        if (termsPointerDeltas.length == numIndexTerms) {\n          termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n        }\n\n        // save delta terms pointer\n        final long fp = termsOut.getFilePointer();\n        termsPointerDeltas[numIndexTerms] = (int) (fp - lastTermsPointer);\n        lastTermsPointer = fp;\n\n        // save term length (in bytes)\n        assert minPrefixDiff <= Short.MAX_VALUE;\n        termLengths[numIndexTerms] = (short) minPrefixDiff;\n        totTermLength += minPrefixDiff;\n\n        lastTerm.copy(text);\n        numIndexTerms++;\n        return true;\n      } else {\n        if (0 == numTerms % termIndexInterval) {\n          // save last term just before next index term so we\n          // can compute wasted suffix\n          lastTerm.copy(text);\n        }\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#checkIndexTerm(BytesRef,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {\n      // First term is first indexed term:\n      if (0 == (numTerms++ % termIndexInterval)) {\n\n        // write full bytes\n        out.writeBytes(text.bytes, text.offset, text.length);\n\n        if (termLengths.length == numIndexTerms) {\n          termLengths = ArrayUtil.grow(termLengths);\n        }\n        if (termsPointerDeltas.length == numIndexTerms) {\n          termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n        }\n\n        // save delta terms pointer\n        final long fp = termsOut.getFilePointer();\n        termsPointerDeltas[numIndexTerms] = (int) (fp - lastTermsPointer);\n        lastTermsPointer = fp;\n\n        // save term length (in bytes)\n        assert text.length <= Short.MAX_VALUE;\n        termLengths[numIndexTerms] = (short) text.length;\n\n        totTermLength += text.length;\n\n        numIndexTerms++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8898034f309751988d2b0adc9afea967d32731fd":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"6b1d9389e8e97a7b4fb5799390f50528de51fee7":["8898034f309751988d2b0adc9afea967d32731fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["6b1d9389e8e97a7b4fb5799390f50528de51fee7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"8898034f309751988d2b0adc9afea967d32731fd":["6b1d9389e8e97a7b4fb5799390f50528de51fee7"],"6b1d9389e8e97a7b4fb5799390f50528de51fee7":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["8898034f309751988d2b0adc9afea967d32731fd","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}