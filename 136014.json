{"path":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","commits":[{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","pathOld":"/dev/null","sourceNew":"  public Explanation explain(int doc) throws IOException {\n    Explanation result = new Explanation();\n    TermQuery query = (TermQuery)weight.getQuery();\n\n    result.setDescription(\"termScore(\" + query + \"), product of:\");\n    \n    Explanation weightExplanation = weight.explain();\n    result.addDetail(weightExplanation);\n\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n      while (termDocs.next()) {\n        if (termDocs.doc() == doc) {\n          tf = termDocs.freq();\n        }\n      }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    result.addDetail(tfExplanation);\n    \n    Explanation normExplanation = new Explanation();\n    normExplanation.setValue(Similarity.decodeNorm(norms[doc]));\n    String field = query.getTerm().field();\n    normExplanation.setDescription(\"norm(field=\"+field + \", doc=\"+doc + \")\");\n    result.addDetail(normExplanation);\n\n    result.setValue(weightExplanation.getValue() *\n                    tfExplanation.getValue() *\n                    normExplanation.getValue());\n    \n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d26db6980435280d32792a7ddd3e26866ac98ea9","date":1042658704,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","sourceNew":"  public Explanation explain(int doc) throws IOException {\n    TermQuery query = (TermQuery)weight.getQuery();\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n      while (termDocs.next()) {\n        if (termDocs.doc() == doc) {\n          tf = termDocs.freq();\n        }\n      }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    \n    return tfExplanation;\n  }\n\n","sourceOld":"  public Explanation explain(int doc) throws IOException {\n    Explanation result = new Explanation();\n    TermQuery query = (TermQuery)weight.getQuery();\n\n    result.setDescription(\"termScore(\" + query + \"), product of:\");\n    \n    Explanation weightExplanation = weight.explain();\n    result.addDetail(weightExplanation);\n\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n      while (termDocs.next()) {\n        if (termDocs.doc() == doc) {\n          tf = termDocs.freq();\n        }\n      }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    result.addDetail(tfExplanation);\n    \n    Explanation normExplanation = new Explanation();\n    normExplanation.setValue(Similarity.decodeNorm(norms[doc]));\n    String field = query.getTerm().field();\n    normExplanation.setDescription(\"norm(field=\"+field + \", doc=\"+doc + \")\");\n    result.addDetail(normExplanation);\n\n    result.setValue(weightExplanation.getValue() *\n                    tfExplanation.getValue() *\n                    normExplanation.getValue());\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"591e76e4f4581ee94453dd46609d65b9c2e825ee","date":1092775126,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","sourceNew":"  /** Returns an explanation of the score for a document.\n   * <br>When this method is used, the {@link #next()} method\n   * and the {@link #score(HitCollector)} method should not be used.\n   * @param doc The document number for the explanation.\n   * @todo Modify to make use of {@link TermDocs#skipTo(int)}.\n   */\n  public Explanation explain(int doc) throws IOException {\n    TermQuery query = (TermQuery)weight.getQuery();\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n      while (termDocs.next()) {\n        if (termDocs.doc() == doc) {\n          tf = termDocs.freq();\n        }\n      }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    \n    return tfExplanation;\n  }\n\n","sourceOld":"  public Explanation explain(int doc) throws IOException {\n    TermQuery query = (TermQuery)weight.getQuery();\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n      while (termDocs.next()) {\n        if (termDocs.doc() == doc) {\n          tf = termDocs.freq();\n        }\n      }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    \n    return tfExplanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c47df0b3b3fd06ae2206f5bff87c56d18022d66","date":1156115460,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","sourceNew":"  /** Returns an explanation of the score for a document.\n   * <br>When this method is used, the {@link #next()} method\n   * and the {@link #score(HitCollector)} method should not be used.\n   * @param doc The document number for the explanation.\n   */\n  public Explanation explain(int doc) throws IOException {\n    TermQuery query = (TermQuery)weight.getQuery();\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n        if (termDocs.skipTo(doc))\n        {\n            if (termDocs.doc() == doc)\n            {\n                tf = termDocs.freq();\n            }\n        }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    \n    return tfExplanation;\n  }\n\n","sourceOld":"  /** Returns an explanation of the score for a document.\n   * <br>When this method is used, the {@link #next()} method\n   * and the {@link #score(HitCollector)} method should not be used.\n   * @param doc The document number for the explanation.\n   * @todo Modify to make use of {@link TermDocs#skipTo(int)}.\n   */\n  public Explanation explain(int doc) throws IOException {\n    TermQuery query = (TermQuery)weight.getQuery();\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n      while (termDocs.next()) {\n        if (termDocs.doc() == doc) {\n          tf = termDocs.freq();\n        }\n      }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    \n    return tfExplanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","sourceNew":"  /** Returns an explanation of the score for a document.\n   * <br>When this method is used, the {@link #next()} method\n   * and the {@link #score(HitCollector)} method should not be used.\n   * @param doc The document number for the explanation.\n   */\n  public Explanation explain(int doc) throws IOException {\n    TermQuery query = (TermQuery) weight.getQuery();\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n        if (termDocs.skipTo(doc))\n        {\n            if (termDocs.doc() == doc)\n            {\n                tf = termDocs.freq();\n            }\n        }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    \n    return tfExplanation;\n  }\n\n","sourceOld":"  /** Returns an explanation of the score for a document.\n   * <br>When this method is used, the {@link #next()} method\n   * and the {@link #score(HitCollector)} method should not be used.\n   * @param doc The document number for the explanation.\n   */\n  public Explanation explain(int doc) throws IOException {\n    TermQuery query = (TermQuery)weight.getQuery();\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n        if (termDocs.skipTo(doc))\n        {\n            if (termDocs.doc() == doc)\n            {\n                tf = termDocs.freq();\n            }\n        }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    \n    return tfExplanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61cbcf396559d597a914594d7e2830c142ecfd91","date":1255444081,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","sourceNew":"  /** Returns an explanation of the score for a document.\n   * @param doc The document number for the explanation.\n   */\n  public Explanation explain(int doc) throws IOException {\n    TermQuery query = (TermQuery) weight.getQuery();\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n        if (termDocs.skipTo(doc))\n        {\n            if (termDocs.doc() == doc)\n            {\n                tf = termDocs.freq();\n            }\n        }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    \n    return tfExplanation;\n  }\n\n","sourceOld":"  /** Returns an explanation of the score for a document.\n   * <br>When this method is used, the {@link #next()} method\n   * and the {@link #score(HitCollector)} method should not be used.\n   * @param doc The document number for the explanation.\n   */\n  public Explanation explain(int doc) throws IOException {\n    TermQuery query = (TermQuery) weight.getQuery();\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n        if (termDocs.skipTo(doc))\n        {\n            if (termDocs.doc() == doc)\n            {\n                tf = termDocs.freq();\n            }\n        }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    \n    return tfExplanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/TermScorer#explain(int).mjava","sourceNew":null,"sourceOld":"  /** Returns an explanation of the score for a document.\n   * @param doc The document number for the explanation.\n   */\n  public Explanation explain(int doc) throws IOException {\n    TermQuery query = (TermQuery) weight.getQuery();\n    Explanation tfExplanation = new Explanation();\n    int tf = 0;\n    while (pointer < pointerMax) {\n      if (docs[pointer] == doc)\n        tf = freqs[pointer];\n      pointer++;\n    }\n    if (tf == 0) {\n        if (termDocs.skipTo(doc))\n        {\n            if (termDocs.doc() == doc)\n            {\n                tf = termDocs.freq();\n            }\n        }\n    }\n    termDocs.close();\n    tfExplanation.setValue(getSimilarity().tf(tf));\n    tfExplanation.setDescription(\"tf(termFreq(\"+query.getTerm()+\")=\"+tf+\")\");\n    \n    return tfExplanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["61cbcf396559d597a914594d7e2830c142ecfd91"],"4c47df0b3b3fd06ae2206f5bff87c56d18022d66":["591e76e4f4581ee94453dd46609d65b9c2e825ee"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d26db6980435280d32792a7ddd3e26866ac98ea9":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61cbcf396559d597a914594d7e2830c142ecfd91":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["4c47df0b3b3fd06ae2206f5bff87c56d18022d66"],"591e76e4f4581ee94453dd46609d65b9c2e825ee":["d26db6980435280d32792a7ddd3e26866ac98ea9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c47df0b3b3fd06ae2206f5bff87c56d18022d66":["052fac7830290bd38a04cddee1a121ee07656b56"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["d26db6980435280d32792a7ddd3e26866ac98ea9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"d26db6980435280d32792a7ddd3e26866ac98ea9":["591e76e4f4581ee94453dd46609d65b9c2e825ee"],"61cbcf396559d597a914594d7e2830c142ecfd91":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"591e76e4f4581ee94453dd46609d65b9c2e825ee":["4c47df0b3b3fd06ae2206f5bff87c56d18022d66"],"052fac7830290bd38a04cddee1a121ee07656b56":["61cbcf396559d597a914594d7e2830c142ecfd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}