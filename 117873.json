{"path":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"31f025ae60076ae95274433f3fe8e6ace2857a87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}