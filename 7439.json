{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00c8a312269787ad677745cd5fc2631d61dff78d","date":1326209731,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public static void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","date":1343692569,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public static void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public static void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   * @param url\n   */\n  public static void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage());\n      }\n    } catch (IOException e) {\n      fatal(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6999abaa0f29c223a6ee32e04f5811e3a6955b9","date":1358175425,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occured posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c","date":1396698402,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c96362be7a015af2bd16ce584c1e9ac999b1e701","date":1402509045,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n        warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" \" + urlc.getResponseMessage() + \" for url \"+url);\n      }\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce03a89b727b4096985ab8685a60360d9af9a824","date":1463414492,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = Base64.getEncoder().encodeToString(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = Base64.getEncoder().encodeToString(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = Base64.getEncoder().encodeToString(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a0894b72a443a16598f92e83172b2a8ae1db03","date":1477094527,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      basicAuth(urlc);\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred getting data from \"+url+\". Please check that Solr is running.\");\n    } catch (Exception e) {\n      warn(\"An error occurred getting data from \"+url+\". Message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = Base64.getEncoder().encodeToString(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      basicAuth(urlc);\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred getting data from \"+url+\". Please check that Solr is running.\");\n    } catch (Exception e) {\n      warn(\"An error occurred getting data from \"+url+\". Message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      if (url.getUserInfo() != null) {\n        String encoding = Base64.getEncoder().encodeToString(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n        urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n      }\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred posting data to \"+url+\". Please check that Solr is running.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06c53fdb787c249799e6655451c48ef29c717557","date":1494098950,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      basicAuth(urlc);\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred getting data from \"+url+\". Please check that Solr is running.\");\n    } catch (Exception e) {\n      warn(\"An error occurred getting data from \"+url+\". Message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      basicAuth(urlc);\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred getting data from \"+url+\". Please check that Solr is running.\");\n    } catch (Exception e) {\n      warn(\"An error occurred getting data from \"+url+\". Message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#doGet(URL).mjava","sourceNew":"  /**\n   * Performs a simple get on the given URL\n   */\n  public void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      basicAuth(urlc);\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred getting data from \"+url+\". Please check that Solr is running.\");\n    } catch (Exception e) {\n      warn(\"An error occurred getting data from \"+url+\". Message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * Performs a simple get on the given URL\n   */\n  public static void doGet(URL url) {\n    try {\n      if(mockMode) return;\n      HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n      basicAuth(urlc);\n      urlc.connect();\n      checkResponseCode(urlc);\n    } catch (IOException e) {\n      warn(\"An error occurred getting data from \"+url+\". Please check that Solr is running.\");\n    } catch (Exception e) {\n      warn(\"An error occurred getting data from \"+url+\". Message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00c8a312269787ad677745cd5fc2631d61dff78d":["c26f00b574427b55127e869b935845554afde1fa"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["d6f074e73200c07d54f242d3880a8da5a35ff97b","c2c3a504730329ae644b009dee43024116605d47"],"30a0894b72a443a16598f92e83172b2a8ae1db03":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c2c3a504730329ae644b009dee43024116605d47","d6999abaa0f29c223a6ee32e04f5811e3a6955b9"],"c2c3a504730329ae644b009dee43024116605d47":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c","c96362be7a015af2bd16ce584c1e9ac999b1e701"],"d6999abaa0f29c223a6ee32e04f5811e3a6955b9":["c2c3a504730329ae644b009dee43024116605d47"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c96362be7a015af2bd16ce584c1e9ac999b1e701","d470c8182e92b264680e34081b75e70a9f2b3c89"],"01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c":["d6999abaa0f29c223a6ee32e04f5811e3a6955b9"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c96362be7a015af2bd16ce584c1e9ac999b1e701","ce03a89b727b4096985ab8685a60360d9af9a824"],"ce03a89b727b4096985ab8685a60360d9af9a824":["c96362be7a015af2bd16ce584c1e9ac999b1e701"],"c96362be7a015af2bd16ce584c1e9ac999b1e701":["01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["30a0894b72a443a16598f92e83172b2a8ae1db03","06c53fdb787c249799e6655451c48ef29c717557"],"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa":["00c8a312269787ad677745cd5fc2631d61dff78d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","c2c3a504730329ae644b009dee43024116605d47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","30a0894b72a443a16598f92e83172b2a8ae1db03"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["00c8a312269787ad677745cd5fc2631d61dff78d","2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["00c8a312269787ad677745cd5fc2631d61dff78d","2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"06c53fdb787c249799e6655451c48ef29c717557":["30a0894b72a443a16598f92e83172b2a8ae1db03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06c53fdb787c249799e6655451c48ef29c717557"]},"commit2Childs":{"00c8a312269787ad677745cd5fc2631d61dff78d":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"c26f00b574427b55127e869b935845554afde1fa":["00c8a312269787ad677745cd5fc2631d61dff78d"],"30a0894b72a443a16598f92e83172b2a8ae1db03":["e9017cf144952056066919f1ebc7897ff9bd71b1","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","06c53fdb787c249799e6655451c48ef29c717557"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"c2c3a504730329ae644b009dee43024116605d47":["616c1830142ff5c1ddedec1ed898733b73c8e23b","8917bfede3b4ca30f4305c1e391e9218959cd723","d6999abaa0f29c223a6ee32e04f5811e3a6955b9","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"d6999abaa0f29c223a6ee32e04f5811e3a6955b9":["8917bfede3b4ca30f4305c1e391e9218959cd723","01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["30a0894b72a443a16598f92e83172b2a8ae1db03","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c96362be7a015af2bd16ce584c1e9ac999b1e701"],"ce03a89b727b4096985ab8685a60360d9af9a824":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c96362be7a015af2bd16ce584c1e9ac999b1e701":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ce03a89b727b4096985ab8685a60360d9af9a824"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa":["c2c3a504730329ae644b009dee43024116605d47","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["616c1830142ff5c1ddedec1ed898733b73c8e23b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"06c53fdb787c249799e6655451c48ef29c717557":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","8917bfede3b4ca30f4305c1e391e9218959cd723","c6f080a2ab37c464dd98db173f6cbf10dc74f211","e9017cf144952056066919f1ebc7897ff9bd71b1","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}