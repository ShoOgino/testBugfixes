{"path":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","commits":[{"id":"d04b321158481d3895702b3cbf6821a3083e6c15","date":1120530543,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"/dev/null","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost((String) fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      ArrayList queries = new ArrayList();\n      Iterator fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, (String) fni.next(), fieldOp));\n      }\n      boolean infix = true;\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost((String) fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List queries = new ArrayList();\n      Iterator fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, (String) fni.next(), fieldOp));\n      }\n      boolean infix = true;\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost((String) fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      ArrayList queries = new ArrayList();\n      Iterator fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, (String) fni.next(), fieldOp));\n      }\n      boolean infix = true;\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      boolean infix = true;\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost((String) fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List queries = new ArrayList();\n      Iterator fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, (String) fni.next(), fieldOp));\n      }\n      boolean infix = true;\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      boolean infix = true;\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"d04b321158481d3895702b3cbf6821a3083e6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["d04b321158481d3895702b3cbf6821a3083e6c15"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["60cdc0e643184821eb066795a8791cd82559f46e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"d04b321158481d3895702b3cbf6821a3083e6c15":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d04b321158481d3895702b3cbf6821a3083e6c15"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["60cdc0e643184821eb066795a8791cd82559f46e"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}