{"path":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","commits":[{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      if (childDoc+1 == parentDoc) {\n        // OK, we are done iterating through all children\n        // matching this one parent doc, so we now nextDoc()\n        // the parent.  Use a while loop because we may have\n        // to skip over some number of parents w/ no\n        // children:\n        while (true) {\n          parentDoc = parentScorer.nextDoc();\n          if (parentDoc == 0) {\n            // Degenerate but allowed: parent has no children\n            // TODO: would be nice to pull initial parent\n            // into ctor so we can skip this if... but it's\n            // tricky because scorer must return -1 for\n            // .doc() on init...\n            parentDoc = parentScorer.nextDoc();\n          }\n\n          if (parentDoc == NO_MORE_DOCS) {\n            childDoc = NO_MORE_DOCS;\n            //System.out.println(\"  END\");\n            return childDoc;\n          }\n\n          childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n          if (childDoc < parentDoc) {\n            if (doScores) {\n              parentScore = parentScorer.score();\n            }\n            //System.out.println(\"  \" + childDoc);\n            return childDoc;\n          } else {\n            // Degenerate but allowed: parent has no children\n          }\n        }\n      } else {\n        assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n        childDoc++;\n        //System.out.println(\"  \" + childDoc);\n        return childDoc;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3548d95924aea5ee6d88499a7d166498a8e49","date":1328909332,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      if (childDoc+1 == parentDoc) {\n        // OK, we are done iterating through all children\n        // matching this one parent doc, so we now nextDoc()\n        // the parent.  Use a while loop because we may have\n        // to skip over some number of parents w/ no\n        // children:\n        while (true) {\n          parentDoc = parentScorer.nextDoc();\n          if (parentDoc == 0) {\n            // Degenerate but allowed: parent has no children\n            // TODO: would be nice to pull initial parent\n            // into ctor so we can skip this if... but it's\n            // tricky because scorer must return -1 for\n            // .doc() on init...\n            parentDoc = parentScorer.nextDoc();\n          }\n\n          if (parentDoc == NO_MORE_DOCS) {\n            childDoc = NO_MORE_DOCS;\n            //System.out.println(\"  END\");\n            return childDoc;\n          }\n\n          childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n          if (childDoc < parentDoc) {\n            if (doScores) {\n              parentScore = parentScorer.score();\n            }\n            //System.out.println(\"  \" + childDoc);\n            return childDoc;\n          } else {\n            // Degenerate but allowed: parent has no children\n          }\n        }\n      } else {\n        assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n        childDoc++;\n        //System.out.println(\"  \" + childDoc);\n        return childDoc;\n      }\n    }\n\n","bugFix":null,"bugIntro":["7f1955b33190fda0d16dcbbd3d794e9d15cb692f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f918f6e4bff7afea488f1928f7a7ec05338d479f","date":1331745861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["da6895c8fcaff91a5fcb72c54627339e3df1bb86"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() parentDoc=\" + parentDoc + \" childDoc=\" + childDoc);\n\n      // Loop until we hit a childDoc that's accepted\n      nextChildDoc:\n      while (true) {\n        if (childDoc+1 == parentDoc) {\n          // OK, we are done iterating through all children\n          // matching this one parent doc, so we now nextDoc()\n          // the parent.  Use a while loop because we may have\n          // to skip over some number of parents w/ no\n          // children:\n          while (true) {\n            parentDoc = parentScorer.nextDoc();\n\n            if (parentDoc == 0) {\n              // Degenerate but allowed: parent has no children\n              // TODO: would be nice to pull initial parent\n              // into ctor so we can skip this if... but it's\n              // tricky because scorer must return -1 for\n              // .doc() on init...\n              parentDoc = parentScorer.nextDoc();\n            }\n\n            if (parentDoc == NO_MORE_DOCS) {\n              childDoc = NO_MORE_DOCS;\n              //System.out.println(\"  END\");\n              return childDoc;\n            }\n\n            childDoc = 1 + parentBits.prevSetBit(parentDoc-1);\n\n            if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n              continue nextChildDoc;\n            }\n\n            if (childDoc < parentDoc) {\n              if (doScores) {\n                parentScore = parentScorer.score();\n              }\n              //System.out.println(\"  \" + childDoc);\n              return childDoc;\n            } else {\n              // Degenerate but allowed: parent has no children\n            }\n          }\n        } else {\n          assert childDoc < parentDoc: \"childDoc=\" + childDoc + \" parentDoc=\" + parentDoc;\n          childDoc++;\n          if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n            continue;\n          }\n          //System.out.println(\"  \" + childDoc);\n          return childDoc;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f918f6e4bff7afea488f1928f7a7ec05338d479f"],"b5a3548d95924aea5ee6d88499a7d166498a8e49":["6bd4a7478aca8c3880512b730b28bf3239340635"],"f918f6e4bff7afea488f1928f7a7ec05338d479f":["b5a3548d95924aea5ee6d88499a7d166498a8e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["b5a3548d95924aea5ee6d88499a7d166498a8e49"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5a3548d95924aea5ee6d88499a7d166498a8e49":["f918f6e4bff7afea488f1928f7a7ec05338d479f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bd4a7478aca8c3880512b730b28bf3239340635"],"f918f6e4bff7afea488f1928f7a7ec05338d479f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}