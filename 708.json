{"path":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == null);\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":["72f6992444559f4dbd5d3f5abe08f4a63af8a0a8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"72f6992444559f4dbd5d3f5abe08f4a63af8a0a8","date":1410170375,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be an WAH8DocIdSet if the original one was not cacheable\", cachedSet instanceof WAH8DocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == null);\n      }\n    }\n  }\n\n","bugFix":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be an WAH8DocIdSet if the original one was not cacheable\", cachedSet instanceof WAH8DocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be an WAH8DocIdSet if the original one was not cacheable\", cachedSet instanceof WAH8DocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cd756794a4a9e33f786119818f9d56162965cf8","date":1412591300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be a RoaringDocIdSet if the original one was not cacheable\", cachedSet instanceof RoaringDocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be an WAH8DocIdSet if the original one was not cacheable\", cachedSet instanceof WAH8DocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be a RoaringDocIdSet if the original one was not cacheable\", cachedSet instanceof RoaringDocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be an WAH8DocIdSet if the original one was not cacheable\", cachedSet instanceof WAH8DocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be a RoaringDocIdSet if the original one was not cacheable\", cachedSet instanceof RoaringDocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be a RoaringDocIdSet if the original one was not cacheable\", cachedSet instanceof RoaringDocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":null,"sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be a RoaringDocIdSet if the original one was not cacheable\", cachedSet instanceof RoaringDocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":null,"sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    if (originalSet == null) {\n      assertNull(cachedSet);\n    }\n    if (cachedSet == null) {\n      assertTrue(originalSet == null || originalSet.iterator() == null);\n    } else {\n      assertTrue(cachedSet.isCacheable());\n      assertEquals(shouldCacheable, originalSet.isCacheable());\n      //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n      if (originalSet.isCacheable()) {\n        assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n      } else {\n        assertTrue(\"Cached DocIdSet must be a RoaringDocIdSet if the original one was not cacheable\", cachedSet instanceof RoaringDocIdSet || cachedSet == null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"72f6992444559f4dbd5d3f5abe08f4a63af8a0a8":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"9cd756794a4a9e33f786119818f9d56162965cf8":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"55980207f1977bd1463465de1659b821347e2fa8":["c9fb5f46e264daf5ba3860defe623a89d202dd87","9cd756794a4a9e33f786119818f9d56162965cf8"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["9cd756794a4a9e33f786119818f9d56162965cf8"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["72f6992444559f4dbd5d3f5abe08f4a63af8a0a8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["72f6992444559f4dbd5d3f5abe08f4a63af8a0a8"],"72f6992444559f4dbd5d3f5abe08f4a63af8a0a8":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"9cd756794a4a9e33f786119818f9d56162965cf8":["55980207f1977bd1463465de1659b821347e2fa8","e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"55980207f1977bd1463465de1659b821347e2fa8":[],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3c188105a9aae04f56c24996f98f8333fc825d2e","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["dc06632ede7e48a5ddc6917badec25c8336feedc","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["9cd756794a4a9e33f786119818f9d56162965cf8","55980207f1977bd1463465de1659b821347e2fa8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}