{"path":"solr/core/src/java/org/apache/solr/cloud/RoutedAliasCreateCollectionCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RoutedAliasCreateCollectionCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesHolder = ocmh.zkStateReader.aliasesHolder;\n    final Aliases aliases = aliasesHolder.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(aliasName); // if it did exist, we'd have a non-null map\n    }\n\n    String routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n    if (routeField == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"This command only works on time routed aliases.  Expected alias metadata not found.\");\n    }\n    String intervalDateMath = aliasMetadata.getOrDefault(ROUTER_INTERVAL_METADATA, \"+1DAY\");\n    TimeZone intervalTimeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    //TODO this is ugly; how can we organize the code related to this feature better?\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        TimeRoutedAliasUpdateProcessor.parseCollections(aliasName, aliases, () -> newAliasMustExistException(aliasName));\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = TimeRoutedAliasUpdateProcessor.computeNextCollTimestamp(mostRecentCollTimestamp, intervalDateMath, intervalTimeZone);\n    assert nextCollTimestamp.isAfter(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAliasUpdateProcessor.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- CREATE THE COLLECTION\n    // Map alias metadata starting with a prefix to a create-collection API request\n    final ModifiableSolrParams createReqParams = new ModifiableSolrParams();\n    for (Map.Entry<String, String> e : aliasMetadata.entrySet()) {\n      if (e.getKey().startsWith(COLL_METAPREFIX)) {\n        createReqParams.set(e.getKey().substring(COLL_METAPREFIX.length()), e.getValue());\n      }\n    }\n    if (createReqParams.get(COLL_CONF) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"We require an explicit \" + COLL_CONF );\n    }\n    createReqParams.set(NAME, createCollName);\n    createReqParams.set(\"property.\" + TimeRoutedAliasUpdateProcessor.TIME_PARTITION_ALIAS_NAME_CORE_PROP, aliasName);\n    // a CollectionOperation reads params and produces a message (Map) that is supposed to be sent to the Overseer.\n    //   Although we could create the Map without it, there are a fair amount of rules we don't want to reproduce.\n    final Map<String, Object> createMsgMap = CollectionsHandler.CollectionOperation.CREATE_OP.execute(\n        new LocalSolrQueryRequest(null, createReqParams),\n        null,\n        ocmh.overseer.getCoreContainer().getCollectionsHandler());\n    createMsgMap.put(Overseer.QUEUE_OPERATION, \"create\");\n    // Since we are running in the Overseer here, send the message directly to the Overseer CreateCollectionCmd\n    ocmh.commandMap.get(CollectionParams.CollectionAction.CREATE).call(clusterState, new ZkNodeProps(createMsgMap), results);\n\n    CollectionsHandler.waitForActiveCollection(createCollName, null, ocmh.overseer.getCoreContainer(), new OverseerSolrResponse(results));\n\n    //TODO delete some of the oldest collection(s) ?\n\n    //---- UPDATE THE ALIAS\n    aliasesHolder.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        return curAliases;\n      } else {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size() + 1);\n        // prepend it on purpose (thus reverse sorted). Solr alias resolution defaults to the first collection in a list\n        newTargetCollections.add(createCollName);\n        newTargetCollections.addAll(curTargetCollections);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      }\n    });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/RoutedAliasCreateCollectionCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RoutedAliasCreateCollectionCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesHolder = ocmh.zkStateReader.aliasesHolder;\n    final Aliases aliases = aliasesHolder.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(aliasName); // if it did exist, we'd have a non-null map\n    }\n\n    String routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n    if (routeField == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"This command only works on time routed aliases.  Expected alias metadata not found.\");\n    }\n    String intervalDateMath = aliasMetadata.getOrDefault(ROUTER_INTERVAL_METADATA, \"+1DAY\");\n    TimeZone intervalTimeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    //TODO this is ugly; how can we organize the code related to this feature better?\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        TimeRoutedAliasUpdateProcessor.parseCollections(aliasName, aliases, () -> newAliasMustExistException(aliasName));\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = TimeRoutedAliasUpdateProcessor.computeNextCollTimestamp(mostRecentCollTimestamp, intervalDateMath, intervalTimeZone);\n    assert nextCollTimestamp.isAfter(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAliasUpdateProcessor.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- CREATE THE COLLECTION\n    // Map alias metadata starting with a prefix to a create-collection API request\n    final ModifiableSolrParams createReqParams = new ModifiableSolrParams();\n    for (Map.Entry<String, String> e : aliasMetadata.entrySet()) {\n      if (e.getKey().startsWith(COLL_METAPREFIX)) {\n        createReqParams.set(e.getKey().substring(COLL_METAPREFIX.length()), e.getValue());\n      }\n    }\n    if (createReqParams.get(COLL_CONF) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"We require an explicit \" + COLL_CONF );\n    }\n    createReqParams.set(NAME, createCollName);\n    createReqParams.set(\"property.\" + TimeRoutedAliasUpdateProcessor.TIME_PARTITION_ALIAS_NAME_CORE_PROP, aliasName);\n    // a CollectionOperation reads params and produces a message (Map) that is supposed to be sent to the Overseer.\n    //   Although we could create the Map without it, there are a fair amount of rules we don't want to reproduce.\n    final Map<String, Object> createMsgMap = CollectionsHandler.CollectionOperation.CREATE_OP.execute(\n        new LocalSolrQueryRequest(null, createReqParams),\n        null,\n        ocmh.overseer.getCoreContainer().getCollectionsHandler());\n    createMsgMap.put(Overseer.QUEUE_OPERATION, \"create\");\n    // Since we are running in the Overseer here, send the message directly to the Overseer CreateCollectionCmd\n    ocmh.commandMap.get(CollectionParams.CollectionAction.CREATE).call(clusterState, new ZkNodeProps(createMsgMap), results);\n\n    CollectionsHandler.waitForActiveCollection(createCollName, null, ocmh.overseer.getCoreContainer(), new OverseerSolrResponse(results));\n\n    //TODO delete some of the oldest collection(s) ?\n\n    //---- UPDATE THE ALIAS\n    aliasesHolder.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        return curAliases;\n      } else {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size() + 1);\n        // prepend it on purpose (thus reverse sorted). Solr alias resolution defaults to the first collection in a list\n        newTargetCollections.add(createCollName);\n        newTargetCollections.addAll(curTargetCollections);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      }\n    });\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesHolder = ocmh.zkStateReader.aliasesHolder;\n    final Aliases aliases = aliasesHolder.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(aliasName); // if it did exist, we'd have a non-null map\n    }\n\n    String routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n    if (routeField == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"This command only works on time routed aliases.  Expected alias metadata not found.\");\n    }\n    String intervalDateMath = aliasMetadata.getOrDefault(ROUTER_INTERVAL_METADATA, \"+1DAY\");\n    TimeZone intervalTimeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    //TODO this is ugly; how can we organize the code related to this feature better?\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        TimeRoutedAliasUpdateProcessor.parseCollections(aliasName, aliases, () -> newAliasMustExistException(aliasName));\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = TimeRoutedAliasUpdateProcessor.computeNextCollTimestamp(mostRecentCollTimestamp, intervalDateMath, intervalTimeZone);\n    assert nextCollTimestamp.isAfter(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAliasUpdateProcessor.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- CREATE THE COLLECTION\n    // Map alias metadata starting with a prefix to a create-collection API request\n    final ModifiableSolrParams createReqParams = new ModifiableSolrParams();\n    for (Map.Entry<String, String> e : aliasMetadata.entrySet()) {\n      if (e.getKey().startsWith(COLL_METAPREFIX)) {\n        createReqParams.set(e.getKey().substring(COLL_METAPREFIX.length()), e.getValue());\n      }\n    }\n    if (createReqParams.get(COLL_CONF) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"We require an explicit \" + COLL_CONF );\n    }\n    createReqParams.set(NAME, createCollName);\n    createReqParams.set(\"property.\" + TimeRoutedAliasUpdateProcessor.TIME_PARTITION_ALIAS_NAME_CORE_PROP, aliasName);\n    // a CollectionOperation reads params and produces a message (Map) that is supposed to be sent to the Overseer.\n    //   Although we could create the Map without it, there are a fair amount of rules we don't want to reproduce.\n    final Map<String, Object> createMsgMap = CollectionsHandler.CollectionOperation.CREATE_OP.execute(\n        new LocalSolrQueryRequest(null, createReqParams),\n        null,\n        ocmh.overseer.getCoreContainer().getCollectionsHandler());\n    createMsgMap.put(Overseer.QUEUE_OPERATION, \"create\");\n    // Since we are running in the Overseer here, send the message directly to the Overseer CreateCollectionCmd\n    ocmh.commandMap.get(CollectionParams.CollectionAction.CREATE).call(clusterState, new ZkNodeProps(createMsgMap), results);\n\n    CollectionsHandler.waitForActiveCollection(createCollName, null, ocmh.overseer.getCoreContainer(), new OverseerSolrResponse(results));\n\n    //TODO delete some of the oldest collection(s) ?\n\n    //---- UPDATE THE ALIAS\n    aliasesHolder.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        return curAliases;\n      } else {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size() + 1);\n        // prepend it on purpose (thus reverse sorted). Solr alias resolution defaults to the first collection in a list\n        newTargetCollections.add(createCollName);\n        newTargetCollections.addAll(curTargetCollections);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af3e10d8a1fbcc5c79b22f7477e79de467dd326c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6146c07c0dee1ae1e42926167acd127fed5ef59d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}