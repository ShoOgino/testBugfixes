{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexNormsConsumer.Lucene3xNormsDocValuesConsumer#add(int,BytesRef).mjava","commits":[{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexNormsConsumer.Lucene3xNormsDocValuesConsumer#add(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    protected void add(int docID, BytesRef value) throws IOException {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1 + upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1 + upto);\n      }\n      assert value.length == 1;\n      norms[upto] = value.bytes[value.offset];\n      \n      docIDs[upto] = docID;\n      upto++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsConsumer.SimpleTextNormsDocValuesConsumer#add(int,long).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexNormsConsumer.Lucene3xNormsDocValuesConsumer#add(int,BytesRef).mjava","sourceNew":"    public void add(int docID, long value) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1 + upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1 + upto);\n      }\n      norms[upto] = (byte) value;\n      \n      docIDs[upto] = docID;\n      upto++;\n    }\n\n","sourceOld":"    protected void add(int docID, BytesRef value) throws IOException {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1 + upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1 + upto);\n      }\n      assert value.length == 1;\n      norms[upto] = value.bytes[value.offset];\n      \n      docIDs[upto] = docID;\n      upto++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":6,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWNormsConsumer.Lucene3xNormsDocValuesConsumer#add(int,long).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexNormsConsumer.Lucene3xNormsDocValuesConsumer#add(int,BytesRef).mjava","sourceNew":"    protected void add(int docID, long value) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1 + upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1 + upto);\n      }\n      norms[upto] = (byte) value;\n      \n      docIDs[upto] = docID;\n      upto++;\n    }\n\n","sourceOld":"    protected void add(int docID, BytesRef value) throws IOException {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1 + upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1 + upto);\n      }\n      assert value.length == 1;\n      norms[upto] = value.bytes[value.offset];\n      \n      docIDs[upto] = docID;\n      upto++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}