{"path":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","commits":[{"id":"d345a86357a4042faeebfad2693a070019c95918","date":1305385272,"type":1,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d345a86357a4042faeebfad2693a070019c95918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d345a86357a4042faeebfad2693a070019c95918"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","d345a86357a4042faeebfad2693a070019c95918"],"c26f00b574427b55127e869b935845554afde1fa":["d345a86357a4042faeebfad2693a070019c95918","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d345a86357a4042faeebfad2693a070019c95918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"d345a86357a4042faeebfad2693a070019c95918":["c3a8a449466c1ff7ce2274fe73dab487256964b4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d345a86357a4042faeebfad2693a070019c95918","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}