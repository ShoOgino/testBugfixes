{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","commits":[{"id":"3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3","date":1343041136,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    CategoryDocumentBuilder cdb = new CategoryDocumentBuilder(taxonomyWriter);\n    Iterable<CategoryPath> cats = Arrays.asList(new CategoryPath(\"a\"));\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      cdb.setCategoryPaths(cats);\n      iw.addDocument(cdb.build(doc));\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams();\n    sParams.addFacetRequest(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["548ff344959e717dd71ef5eb652cf5904835c4b3","2b30ca536d784e3fb95a77c8a89705f7b9d3c76b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    CategoryDocumentBuilder cdb = new CategoryDocumentBuilder(taxonomyWriter);\n    Iterable<CategoryPath> cats = Arrays.asList(new CategoryPath(\"a\"));\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      cdb.setCategoryPaths(cats);\n      iw.addDocument(cdb.build(doc));\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams();\n    sParams.addFacetRequest(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    CategoryDocumentBuilder cdb = new CategoryDocumentBuilder(taxonomyWriter);\n    Iterable<CategoryPath> cats = Arrays.asList(new CategoryPath(\"a\"));\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      cdb.setCategoryPaths(cats);\n      iw.addDocument(cdb.build(doc));\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams();\n    sParams.addFacetRequest(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","sourceNew":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    CategoryDocumentBuilder cdb = new CategoryDocumentBuilder(taxonomyWriter);\n    Iterable<CategoryPath> cats = Arrays.asList(new CategoryPath(\"a\"));\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      cdb.setCategoryPaths(cats);\n      iw.addDocument(cdb.build(doc));\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    CategoryDocumentBuilder cdb = new CategoryDocumentBuilder(taxonomyWriter);\n    Iterable<CategoryPath> cats = Arrays.asList(new CategoryPath(\"a\"));\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      cdb.setCategoryPaths(cats);\n      iw.addDocument(cdb.build(doc));\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams();\n    sParams.addFacetRequest(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","sourceNew":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    CategoryDocumentBuilder cdb = new CategoryDocumentBuilder(taxonomyWriter);\n    Iterable<CategoryPath> cats = Arrays.asList(new CategoryPath(\"a\"));\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      cdb.setCategoryPaths(cats);\n      iw.addDocument(cdb.build(doc));\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","sourceNew":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    CategoryDocumentBuilder cdb = new CategoryDocumentBuilder(taxonomyWriter);\n    Iterable<CategoryPath> cats = Arrays.asList(new CategoryPath(\"a\"));\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      cdb.setCategoryPaths(cats);\n      iw.addDocument(cdb.build(doc));\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams();\n    sParams.addFacetRequest(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","sourceNew":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":["2b30ca536d784e3fb95a77c8a89705f7b9d3c76b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"548ff344959e717dd71ef5eb652cf5904835c4b3","date":1358776200,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","sourceNew":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":["3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","sourceNew":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","sourceNew":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().getValue();\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","sourceNew":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["548ff344959e717dd71ef5eb652cf5904835c4b3"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3"],"548ff344959e717dd71ef5eb652cf5904835c4b3":["811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"811cdb4a80352766eb0c762e48972707a924e5cd":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","d4c6c7f3cda7a0595cabd16e5e9107ca29852708","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"548ff344959e717dd71ef5eb652cf5904835c4b3":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"811cdb4a80352766eb0c762e48972707a924e5cd":["548ff344959e717dd71ef5eb652cf5904835c4b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}