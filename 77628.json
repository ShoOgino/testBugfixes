{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getCollections().mjava","sourceNew":"\t/**\n\t * Get collection names.\n\t */\n\tpublic Set<String> getCollections() {\n\t\treturn Collections.unmodifiableSet(collectionStates.keySet());\n\t}\n\n","sourceOld":"\t/**\n\t * Get collection names.\n\t */\n\tpublic Set<String> getCollections() {\n\t\treturn Collections.unmodifiableSet(collectionStates.keySet());\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da94fd5fcff99442877e118f00fb42094b59f497","date":1344115365,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return Collections.unmodifiableSet(collectionStates.keySet());\n  }\n\n","sourceOld":"\t/**\n\t * Get collection names.\n\t */\n\tpublic Set<String> getCollections() {\n\t\treturn Collections.unmodifiableSet(collectionStates.keySet());\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getCollections().mjava","sourceNew":"\t/**\n\t * Get collection names.\n\t */\n\tpublic Set<String> getCollections() {\n\t\treturn Collections.unmodifiableSet(collectionStates.keySet());\n\t}\n\n","sourceOld":"\t/**\n\t * Get collection names.\n\t */\n\tpublic Set<String> getCollections() {\n\t\treturn Collections.unmodifiableSet(collectionStates.keySet());\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return Collections.unmodifiableSet(collectionStates.keySet());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return Collections.unmodifiableSet(collectionStates.keySet());\n  }\n\n","sourceOld":"\t/**\n\t * Get collection names.\n\t */\n\tpublic Set<String> getCollections() {\n\t\treturn Collections.unmodifiableSet(collectionStates.keySet());\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return stateReader.getAllCollections();\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return Collections.unmodifiableSet(collectionStates.keySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return collectionStates.keySet();\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return stateReader.getAllCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return stateReader.getAllCollections();\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return collectionStates.keySet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return collectionStates.keySet();\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return stateReader.getAllCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   */\n  public Set<String> getCollections() {\n    return collectionStates.keySet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @deprecated use {@link #getCollectionsMap()} to avoid a second lookup for lazy collections\n   */\n  @Deprecated\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @deprecated use {@link #getCollectionsMap()} to avoid a second lookup for lazy collections\n   */\n  @Deprecated\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @deprecated use {@link #getCollectionsMap()} to avoid a second lookup for lazy collections\n   */\n  @Deprecated\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @deprecated use {@link #getCollectionsMap()} to avoid a second lookup for lazy collections\n   */\n  @Deprecated\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":null,"sourceOld":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @deprecated use {@link #getCollectionsMap()} to avoid a second lookup for lazy collections\n   */\n  @Deprecated\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollections().mjava","sourceNew":null,"sourceOld":"  /**\n   * Get collection names.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @deprecated use {@link #getCollectionsMap()} to avoid a second lookup for lazy collections\n   */\n  @Deprecated\n  public Set<String> getCollections() {\n    Set<String> result = new HashSet<>();\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      if (entry.getValue().get() != null) {\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73450c0955930295d34703e7ddbfc6973b7a121a":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","73450c0955930295d34703e7ddbfc6973b7a121a"],"344b0840364d990b29b97467bfcc766ff8325d11":["73450c0955930295d34703e7ddbfc6973b7a121a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["73450c0955930295d34703e7ddbfc6973b7a121a","344b0840364d990b29b97467bfcc766ff8325d11"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"da94fd5fcff99442877e118f00fb42094b59f497":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["da94fd5fcff99442877e118f00fb42094b59f497"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["344b0840364d990b29b97467bfcc766ff8325d11"]},"commit2Childs":{"73450c0955930295d34703e7ddbfc6973b7a121a":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","344b0840364d990b29b97467bfcc766ff8325d11","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"da94fd5fcff99442877e118f00fb42094b59f497":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","c7869f64c874ebf7f317d22c00baf2b6857797a6","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}