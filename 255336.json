{"path":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","commits":[{"id":"a4df60738409662c962b4ed3201d830cd3c14530","date":1114991851,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"contrib/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","sourceNew":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames().iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(true).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames().iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(true).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5645d84fb3482c48f69db9e24c59fa02b469cbd0","date":1141246052,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","sourceNew":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.ALL).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.INDEXED).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames().iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(true).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","sourceNew":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new ArrayList();\n    indexedFields = new ArrayList();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.ALL).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.INDEXED).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.ALL).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.INDEXED).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","sourceNew":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName, true);\n    fields = new ArrayList();\n    indexedFields = new ArrayList();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.ALL).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.INDEXED).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new ArrayList();\n    indexedFields = new ArrayList();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.ALL).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.INDEXED).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94","date":1257897915,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","sourceNew":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName, true);\n    fields = new ArrayList<String>();\n    indexedFields = new ArrayList<String>();\n\n    //get the list of all field names\n    for(String field : indexReader.getFieldNames(FieldOption.ALL)) {\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    for(String field : indexReader.getFieldNames(FieldOption.INDEXED)) {\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName, true);\n    fields = new ArrayList();\n    indexedFields = new ArrayList();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.ALL).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(FieldOption.INDEXED).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","sourceNew":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName, true);\n    fields = new ArrayList<String>();\n    indexedFields = new ArrayList<String>();\n\n    //get the list of all field names\n    for(String field : indexReader.getFieldNames(FieldOption.ALL)) {\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    for(String field : indexReader.getFieldNames(FieldOption.INDEXED)) {\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName, true);\n    fields = new ArrayList<String>();\n    indexedFields = new ArrayList<String>();\n\n    //get the list of all field names\n    for(String field : indexReader.getFieldNames(FieldOption.ALL)) {\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    for(String field : indexReader.getFieldNames(FieldOption.INDEXED)) {\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94":["4256bc1b3c94786287ccdfc751230374521843cf"],"5645d84fb3482c48f69db9e24c59fa02b469cbd0":["a4df60738409662c962b4ed3201d830cd3c14530"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["5645d84fb3482c48f69db9e24c59fa02b469cbd0"],"4256bc1b3c94786287ccdfc751230374521843cf":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94"],"a4df60738409662c962b4ed3201d830cd3c14530":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4df60738409662c962b4ed3201d830cd3c14530"],"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5645d84fb3482c48f69db9e24c59fa02b469cbd0":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94"],"a4df60738409662c962b4ed3201d830cd3c14530":["5645d84fb3482c48f69db9e24c59fa02b469cbd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}