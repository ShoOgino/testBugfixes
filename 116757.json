{"path":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","commits":[{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = new IndexSearcher(multiReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = new IndexSearcher(multiReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"101117eb159dcdbcaa90405b08170aab248e5b2c","date":1289816139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = new IndexSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = new IndexSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = new IndexSearcher(multiReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = new IndexSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = new IndexSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = new IndexSearcher(multiReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = new IndexSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = new IndexSearcher(multiReaderDupls);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = new IndexSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = new IndexSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = new IndexSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = new IndexSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = new IndexSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = new IndexSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer());\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer());\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer());\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.optimize(); swriter1.optimize(); swriter2.optimize();\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(sdir2, true) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1, true), IndexReader.open(dir, true) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"101117eb159dcdbcaa90405b08170aab248e5b2c":["33a8b1f99104f4144f210f5d068411c297cd7163"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","101117eb159dcdbcaa90405b08170aab248e5b2c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","101117eb159dcdbcaa90405b08170aab248e5b2c"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["101117eb159dcdbcaa90405b08170aab248e5b2c"],"33a8b1f99104f4144f210f5d068411c297cd7163":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33a8b1f99104f4144f210f5d068411c297cd7163"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"101117eb159dcdbcaa90405b08170aab248e5b2c":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"33a8b1f99104f4144f210f5d068411c297cd7163":["101117eb159dcdbcaa90405b08170aab248e5b2c","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}