{"path":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","commits":[{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","pathOld":"/dev/null","sourceNew":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : srcField.getValues()) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutatable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<String>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<String>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7abf71ca716d3031a1240abd3fc4c1f28fbd371"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","pathOld":"/dev/null","sourceNew":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : srcField.getValues()) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutatable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<String>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<String>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","sourceNew":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : srcField.getValues()) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutatable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","sourceOld":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : srcField.getValues()) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutatable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<String>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<String>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7abf71ca716d3031a1240abd3fc4c1f28fbd371","date":1418884475,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","sourceNew":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutatable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","sourceOld":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : srcField.getValues()) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutatable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","bugFix":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","sourceNew":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","sourceOld":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutatable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","sourceNew":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","sourceOld":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutatable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","sourceNew":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","sourceOld":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutatable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","sourceNew":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal);\n      }\n    }\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","sourceOld":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal, 1.0F);\n      }\n    }\n    result.setBoost(srcField.getBoost());\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AllValuesOrNoneFieldMutatingUpdateProcessor#mutate(SolrInputField).mjava","sourceNew":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"field '{}' {} value '{}' is not mutable, so no values will be mutated\",\n              new Object[]{srcField.getName(), srcVal.getClass().getSimpleName(), srcVal});\n        }\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal);\n      }\n    }\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","sourceOld":"  protected final SolrInputField mutate(final SolrInputField srcField) {\n    Collection<Object> vals = srcField.getValues();\n    if(vals== null || vals.isEmpty()) return srcField;\n    List<String> messages = null;\n    SolrInputField result = new SolrInputField(srcField.getName());\n    for (final Object srcVal : vals) {\n      final Object destVal = mutateValue(srcVal);\n      if (SKIP_FIELD_VALUE_LIST_SINGLETON == destVal) {\n        log.debug(\"field '{}' {} value '{}' is not mutable, so no values will be mutated\",\n                  new Object[] { srcField.getName(), srcVal.getClass().getSimpleName(), srcVal });\n        return srcField;\n      }\n      if (DELETE_VALUE_SINGLETON == destVal) {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"removing value from field '%s': %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal));\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          if (null == messages) {\n            messages = new ArrayList<>();\n          }\n          messages.add(String.format(Locale.ROOT, \"replace value from field '%s': %s '%s' with %s '%s'\", \n                                     srcField.getName(), srcVal.getClass().getSimpleName(), srcVal, \n                                     destVal.getClass().getSimpleName(), destVal));\n        }\n        result.addValue(destVal);\n      }\n    }\n    \n    if (null != messages && log.isDebugEnabled()) {\n      for (String message : messages) {\n        log.debug(message);\n      }\n    }\n    return 0 == result.getValueCount() ? null : result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"740d649f013f07efbeb73ca854f106c60166e7c0":["acd9883560fd89e6448b2b447302fe543040cd4f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7abf71ca716d3031a1240abd3fc4c1f28fbd371":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"acd9883560fd89e6448b2b447302fe543040cd4f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c7abf71ca716d3031a1240abd3fc4c1f28fbd371","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c7abf71ca716d3031a1240abd3fc4c1f28fbd371","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["c7abf71ca716d3031a1240abd3fc4c1f28fbd371"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7abf71ca716d3031a1240abd3fc4c1f28fbd371"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"c7abf71ca716d3031a1240abd3fc4c1f28fbd371":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"acd9883560fd89e6448b2b447302fe543040cd4f":["740d649f013f07efbeb73ca854f106c60166e7c0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["acd9883560fd89e6448b2b447302fe543040cd4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}