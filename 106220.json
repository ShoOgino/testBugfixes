{"path":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery.SegmentPartitioner#SegmentPartitioner(LeafReaderContext,int,int,String[],SolrIndexSearcher).mjava","commits":[{"id":"b1c85a6a67cac616c83fd883a7b7202b10b294fd","date":1425992717,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery.SegmentPartitioner#SegmentPartitioner(LeafReaderContext,int,int,String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery.SegmentPartitioner#SegmentPartitioner(LeafReaderContext,int,int,String[],SolrIndexSearcher,ArrayBlockingQueue,Semaphore).mjava","sourceNew":"      public SegmentPartitioner(LeafReaderContext context,\n                                int worker,\n                                int workers,\n                                String[] keys,\n                                SolrIndexSearcher solrIndexSearcher) {\n        this.context = context;\n        this.worker = worker;\n        this.workers = workers;\n\n        HashKey[] hashKeys = new HashKey[keys.length];\n        IndexSchema schema = solrIndexSearcher.getSchema();\n        for(int i=0; i<keys.length; i++) {\n          String key = keys[i];\n          FieldType ft = schema.getField(key).getType();\n          HashKey h = null;\n          if(ft instanceof StrField) {\n            h = new BytesHash(key, ft);\n          } else {\n            h = new NumericHash(key);\n          }\n          hashKeys[i] = h;\n        }\n\n        k = (hashKeys.length > 1) ? new CompositeHash(hashKeys) : hashKeys[0];\n      }\n\n","sourceOld":"      public SegmentPartitioner(LeafReaderContext context,\n                                int worker,\n                                int workers,\n                                String[] keys,\n                                SolrIndexSearcher solrIndexSearcher,\n                                ArrayBlockingQueue queue, Semaphore sem) {\n        this.context = context;\n        this.worker = worker;\n        this.workers = workers;\n        this.queue = queue;\n        this.sem = sem;\n\n        HashKey[] hashKeys = new HashKey[keys.length];\n        IndexSchema schema = solrIndexSearcher.getSchema();\n        for(int i=0; i<keys.length; i++) {\n          String key = keys[i];\n          FieldType ft = schema.getField(key).getType();\n          HashKey h = null;\n          if(ft instanceof StrField) {\n            h = new BytesHash(key, ft);\n          } else {\n            h = new NumericHash(key);\n          }\n          hashKeys[i] = h;\n        }\n\n        k = (hashKeys.length > 1) ? new CompositeHash(hashKeys) : hashKeys[0];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery.SegmentPartitioner#SegmentPartitioner(LeafReaderContext,int,int,String[],SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"      public SegmentPartitioner(LeafReaderContext context,\n                                int worker,\n                                int workers,\n                                String[] keys,\n                                SolrIndexSearcher solrIndexSearcher) {\n        this.context = context;\n        this.worker = worker;\n        this.workers = workers;\n\n        HashKey[] hashKeys = new HashKey[keys.length];\n        IndexSchema schema = solrIndexSearcher.getSchema();\n        for(int i=0; i<keys.length; i++) {\n          String key = keys[i];\n          FieldType ft = schema.getField(key).getType();\n          HashKey h = null;\n          if(ft instanceof StrField) {\n            h = new BytesHash(key, ft);\n          } else {\n            h = new NumericHash(key);\n          }\n          hashKeys[i] = h;\n        }\n\n        k = (hashKeys.length > 1) ? new CompositeHash(hashKeys) : hashKeys[0];\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1c85a6a67cac616c83fd883a7b7202b10b294fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1c85a6a67cac616c83fd883a7b7202b10b294fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1c85a6a67cac616c83fd883a7b7202b10b294fd"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b1c85a6a67cac616c83fd883a7b7202b10b294fd"],"b1c85a6a67cac616c83fd883a7b7202b10b294fd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}