{"path":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortabilityNIO().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortabilityNIO().mjava","pathOld":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortabilityNIO().mjava","sourceNew":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testEncodedSortabilityNIO() {\n    Random random = newRandom();\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf1 = ByteBuffer.wrap(originalArray1);\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf1 = CharBuffer.wrap(originalString1);\n    char[] encoded1 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf1)];\n    CharBuffer encodedBuf1 = CharBuffer.wrap(encoded1);\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf2 = ByteBuffer.wrap(original2);\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf2 = CharBuffer.wrap(originalString2);\n    char[] encoded2 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf2)];\n    CharBuffer encodedBuf2 = CharBuffer.wrap(encoded2);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes1 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf1.limit(numBytes1);\n      originalStringBuf1.limit(numBytes1);\n      \n      for (int byteNum = 0 ; byteNum < numBytes1 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char)randomInt;\n      }\n      \n      int numBytes2 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf2.limit(numBytes2);\n      originalStringBuf2.limit(numBytes2);\n      for (int byteNum = 0 ; byteNum < numBytes2 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        original2[byteNum] = (byte)randomInt;\n        originalString2[byteNum] = (char)randomInt;\n      }\n      int originalComparison = originalStringBuf1.compareTo(originalStringBuf2);\n      originalComparison = originalComparison < 0 ? -1 : originalComparison > 0 ? 1 : 0;\n      \n      IndexableBinaryStringTools.encode(originalBuf1, encodedBuf1);\n      IndexableBinaryStringTools.encode(originalBuf2, encodedBuf2);\n      \n      int encodedComparison = encodedBuf1.compareTo(encodedBuf2);\n      encodedComparison = encodedComparison < 0 ? -1 : encodedComparison > 0 ? 1 : 0;\n      \n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Original bytes and encoded chars compare differently:\"\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 1: \" + binaryDumpNIO(originalBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 2: \" + binaryDumpNIO(originalBuf2)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 1: \" + charArrayDumpNIO(encodedBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 2: \" + charArrayDumpNIO(encodedBuf2)\n                   + System.getProperty(\"line.separator\"),\n                   originalComparison, encodedComparison);\n    }\n  }\n\n","sourceOld":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testEncodedSortabilityNIO() {\n    Random random = newRandom();\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf1 = ByteBuffer.wrap(originalArray1);\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf1 = CharBuffer.wrap(originalString1);\n    char[] encoded1 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf1)];\n    CharBuffer encodedBuf1 = CharBuffer.wrap(encoded1);\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf2 = ByteBuffer.wrap(original2);\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf2 = CharBuffer.wrap(originalString2);\n    char[] encoded2 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf2)];\n    CharBuffer encodedBuf2 = CharBuffer.wrap(encoded2);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes1 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf1.limit(numBytes1);\n      originalStringBuf1.limit(numBytes1);\n      \n      for (int byteNum = 0 ; byteNum < numBytes1 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char)randomInt;\n      }\n      \n      int numBytes2 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf2.limit(numBytes2);\n      originalStringBuf2.limit(numBytes2);\n      for (int byteNum = 0 ; byteNum < numBytes2 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        original2[byteNum] = (byte)randomInt;\n        originalString2[byteNum] = (char)randomInt;\n      }\n      int originalComparison = originalStringBuf1.compareTo(originalStringBuf2);\n      originalComparison = originalComparison < 0 ? -1 : originalComparison > 0 ? 1 : 0;\n      \n      IndexableBinaryStringTools.encode(originalBuf1, encodedBuf1);\n      IndexableBinaryStringTools.encode(originalBuf2, encodedBuf2);\n      \n      int encodedComparison = encodedBuf1.compareTo(encodedBuf2);\n      encodedComparison = encodedComparison < 0 ? -1 : encodedComparison > 0 ? 1 : 0;\n      \n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Original bytes and encoded chars compare differently:\"\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 1: \" + binaryDumpNIO(originalBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 2: \" + binaryDumpNIO(originalBuf2)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 1: \" + charArrayDumpNIO(encodedBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 2: \" + charArrayDumpNIO(encodedBuf2)\n                   + System.getProperty(\"line.separator\"),\n                   originalComparison, encodedComparison);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortabilityNIO().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortabilityNIO().mjava","sourceNew":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testEncodedSortabilityNIO() {\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf1 = ByteBuffer.wrap(originalArray1);\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf1 = CharBuffer.wrap(originalString1);\n    char[] encoded1 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf1)];\n    CharBuffer encodedBuf1 = CharBuffer.wrap(encoded1);\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf2 = ByteBuffer.wrap(original2);\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf2 = CharBuffer.wrap(originalString2);\n    char[] encoded2 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf2)];\n    CharBuffer encodedBuf2 = CharBuffer.wrap(encoded2);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes1 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf1.limit(numBytes1);\n      originalStringBuf1.limit(numBytes1);\n      \n      for (int byteNum = 0 ; byteNum < numBytes1 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char)randomInt;\n      }\n      \n      int numBytes2 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf2.limit(numBytes2);\n      originalStringBuf2.limit(numBytes2);\n      for (int byteNum = 0 ; byteNum < numBytes2 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        original2[byteNum] = (byte)randomInt;\n        originalString2[byteNum] = (char)randomInt;\n      }\n      int originalComparison = originalStringBuf1.compareTo(originalStringBuf2);\n      originalComparison = originalComparison < 0 ? -1 : originalComparison > 0 ? 1 : 0;\n      \n      IndexableBinaryStringTools.encode(originalBuf1, encodedBuf1);\n      IndexableBinaryStringTools.encode(originalBuf2, encodedBuf2);\n      \n      int encodedComparison = encodedBuf1.compareTo(encodedBuf2);\n      encodedComparison = encodedComparison < 0 ? -1 : encodedComparison > 0 ? 1 : 0;\n      \n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Original bytes and encoded chars compare differently:\"\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 1: \" + binaryDumpNIO(originalBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 2: \" + binaryDumpNIO(originalBuf2)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 1: \" + charArrayDumpNIO(encodedBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 2: \" + charArrayDumpNIO(encodedBuf2)\n                   + System.getProperty(\"line.separator\"),\n                   originalComparison, encodedComparison);\n    }\n  }\n\n","sourceOld":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testEncodedSortabilityNIO() {\n    Random random = newRandom();\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf1 = ByteBuffer.wrap(originalArray1);\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf1 = CharBuffer.wrap(originalString1);\n    char[] encoded1 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf1)];\n    CharBuffer encodedBuf1 = CharBuffer.wrap(encoded1);\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf2 = ByteBuffer.wrap(original2);\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf2 = CharBuffer.wrap(originalString2);\n    char[] encoded2 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf2)];\n    CharBuffer encodedBuf2 = CharBuffer.wrap(encoded2);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes1 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf1.limit(numBytes1);\n      originalStringBuf1.limit(numBytes1);\n      \n      for (int byteNum = 0 ; byteNum < numBytes1 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char)randomInt;\n      }\n      \n      int numBytes2 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf2.limit(numBytes2);\n      originalStringBuf2.limit(numBytes2);\n      for (int byteNum = 0 ; byteNum < numBytes2 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        original2[byteNum] = (byte)randomInt;\n        originalString2[byteNum] = (char)randomInt;\n      }\n      int originalComparison = originalStringBuf1.compareTo(originalStringBuf2);\n      originalComparison = originalComparison < 0 ? -1 : originalComparison > 0 ? 1 : 0;\n      \n      IndexableBinaryStringTools.encode(originalBuf1, encodedBuf1);\n      IndexableBinaryStringTools.encode(originalBuf2, encodedBuf2);\n      \n      int encodedComparison = encodedBuf1.compareTo(encodedBuf2);\n      encodedComparison = encodedComparison < 0 ? -1 : encodedComparison > 0 ? 1 : 0;\n      \n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Original bytes and encoded chars compare differently:\"\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 1: \" + binaryDumpNIO(originalBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 2: \" + binaryDumpNIO(originalBuf2)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 1: \" + charArrayDumpNIO(encodedBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 2: \" + charArrayDumpNIO(encodedBuf2)\n                   + System.getProperty(\"line.separator\"),\n                   originalComparison, encodedComparison);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortabilityNIO().mjava","sourceNew":null,"sourceOld":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testEncodedSortabilityNIO() {\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf1 = ByteBuffer.wrap(originalArray1);\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf1 = CharBuffer.wrap(originalString1);\n    char[] encoded1 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf1)];\n    CharBuffer encodedBuf1 = CharBuffer.wrap(encoded1);\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf2 = ByteBuffer.wrap(original2);\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf2 = CharBuffer.wrap(originalString2);\n    char[] encoded2 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf2)];\n    CharBuffer encodedBuf2 = CharBuffer.wrap(encoded2);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes1 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf1.limit(numBytes1);\n      originalStringBuf1.limit(numBytes1);\n      \n      for (int byteNum = 0 ; byteNum < numBytes1 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char)randomInt;\n      }\n      \n      int numBytes2 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf2.limit(numBytes2);\n      originalStringBuf2.limit(numBytes2);\n      for (int byteNum = 0 ; byteNum < numBytes2 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        original2[byteNum] = (byte)randomInt;\n        originalString2[byteNum] = (char)randomInt;\n      }\n      int originalComparison = originalStringBuf1.compareTo(originalStringBuf2);\n      originalComparison = originalComparison < 0 ? -1 : originalComparison > 0 ? 1 : 0;\n      \n      IndexableBinaryStringTools.encode(originalBuf1, encodedBuf1);\n      IndexableBinaryStringTools.encode(originalBuf2, encodedBuf2);\n      \n      int encodedComparison = encodedBuf1.compareTo(encodedBuf2);\n      encodedComparison = encodedComparison < 0 ? -1 : encodedComparison > 0 ? 1 : 0;\n      \n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Original bytes and encoded chars compare differently:\"\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 1: \" + binaryDumpNIO(originalBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 2: \" + binaryDumpNIO(originalBuf2)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 1: \" + charArrayDumpNIO(encodedBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 2: \" + charArrayDumpNIO(encodedBuf2)\n                   + System.getProperty(\"line.separator\"),\n                   originalComparison, encodedComparison);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortabilityNIO().mjava","sourceNew":null,"sourceOld":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testEncodedSortabilityNIO() {\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf1 = ByteBuffer.wrap(originalArray1);\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf1 = CharBuffer.wrap(originalString1);\n    char[] encoded1 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf1)];\n    CharBuffer encodedBuf1 = CharBuffer.wrap(encoded1);\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf2 = ByteBuffer.wrap(original2);\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf2 = CharBuffer.wrap(originalString2);\n    char[] encoded2 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf2)];\n    CharBuffer encodedBuf2 = CharBuffer.wrap(encoded2);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes1 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf1.limit(numBytes1);\n      originalStringBuf1.limit(numBytes1);\n      \n      for (int byteNum = 0 ; byteNum < numBytes1 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char)randomInt;\n      }\n      \n      int numBytes2 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf2.limit(numBytes2);\n      originalStringBuf2.limit(numBytes2);\n      for (int byteNum = 0 ; byteNum < numBytes2 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        original2[byteNum] = (byte)randomInt;\n        originalString2[byteNum] = (char)randomInt;\n      }\n      int originalComparison = originalStringBuf1.compareTo(originalStringBuf2);\n      originalComparison = originalComparison < 0 ? -1 : originalComparison > 0 ? 1 : 0;\n      \n      IndexableBinaryStringTools.encode(originalBuf1, encodedBuf1);\n      IndexableBinaryStringTools.encode(originalBuf2, encodedBuf2);\n      \n      int encodedComparison = encodedBuf1.compareTo(encodedBuf2);\n      encodedComparison = encodedComparison < 0 ? -1 : encodedComparison > 0 ? 1 : 0;\n      \n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Original bytes and encoded chars compare differently:\"\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 1: \" + binaryDumpNIO(originalBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 2: \" + binaryDumpNIO(originalBuf2)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 1: \" + charArrayDumpNIO(encodedBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 2: \" + charArrayDumpNIO(encodedBuf2)\n                   + System.getProperty(\"line.separator\"),\n                   originalComparison, encodedComparison);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortabilityNIO().mjava","sourceNew":null,"sourceOld":"  /** @deprecated remove this test for Lucene 4.0 */\n  @Deprecated\n  public void testEncodedSortabilityNIO() {\n    Random random = newRandom();\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf1 = ByteBuffer.wrap(originalArray1);\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf1 = CharBuffer.wrap(originalString1);\n    char[] encoded1 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf1)];\n    CharBuffer encodedBuf1 = CharBuffer.wrap(encoded1);\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer originalBuf2 = ByteBuffer.wrap(original2);\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    CharBuffer originalStringBuf2 = CharBuffer.wrap(originalString2);\n    char[] encoded2 = new char[IndexableBinaryStringTools.getEncodedLength(originalBuf2)];\n    CharBuffer encodedBuf2 = CharBuffer.wrap(encoded2);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes1 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf1.limit(numBytes1);\n      originalStringBuf1.limit(numBytes1);\n      \n      for (int byteNum = 0 ; byteNum < numBytes1 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char)randomInt;\n      }\n      \n      int numBytes2 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n      originalBuf2.limit(numBytes2);\n      originalStringBuf2.limit(numBytes2);\n      for (int byteNum = 0 ; byteNum < numBytes2 ; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        original2[byteNum] = (byte)randomInt;\n        originalString2[byteNum] = (char)randomInt;\n      }\n      int originalComparison = originalStringBuf1.compareTo(originalStringBuf2);\n      originalComparison = originalComparison < 0 ? -1 : originalComparison > 0 ? 1 : 0;\n      \n      IndexableBinaryStringTools.encode(originalBuf1, encodedBuf1);\n      IndexableBinaryStringTools.encode(originalBuf2, encodedBuf2);\n      \n      int encodedComparison = encodedBuf1.compareTo(encodedBuf2);\n      encodedComparison = encodedComparison < 0 ? -1 : encodedComparison > 0 ? 1 : 0;\n      \n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Original bytes and encoded chars compare differently:\"\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 1: \" + binaryDumpNIO(originalBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \" binary 2: \" + binaryDumpNIO(originalBuf2)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 1: \" + charArrayDumpNIO(encodedBuf1)\n                   + System.getProperty(\"line.separator\")\n                   + \"encoded 2: \" + charArrayDumpNIO(encodedBuf2)\n                   + System.getProperty(\"line.separator\"),\n                   originalComparison, encodedComparison);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f653cfcf159baeaafe5d01682a911e95bba4012":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}