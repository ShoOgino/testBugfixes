{"path":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","pathOld":"/dev/null","sourceNew":"  // Tries to add new documents to hitDocs.\n  // Ensures that the hit numbered <code>min</code> has been retrieved.\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min)\n      min = hitDocs.size();\n\n    int n = min * 2;\t\t\t\t  // double # retrieved\n    TopDocs topDocs = searcher.search(query, filter, n);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f)\n      scoreNorm = 1.0f / scoreDocs[0].score;\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++)\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score*scoreNorm,\n\t\t\t\t    scoreDocs[i].doc));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","sourceNew":"  // Tries to add new documents to hitDocs.\n  // Ensures that the hit numbered <code>min</code> has been retrieved.\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min)\n      min = hitDocs.size();\n\n    int n = min * 2;\t\t\t\t  // double # retrieved\n    TopDocs topDocs = searcher.search(query, filter, n);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n//     if (length > 0 && scoreDocs[0].score > 1.0f)\n//       scoreNorm = 1.0f / scoreDocs[0].score;\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++)\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score*scoreNorm,\n\t\t\t\t    scoreDocs[i].doc));\n  }\n\n","sourceOld":"  // Tries to add new documents to hitDocs.\n  // Ensures that the hit numbered <code>min</code> has been retrieved.\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min)\n      min = hitDocs.size();\n\n    int n = min * 2;\t\t\t\t  // double # retrieved\n    TopDocs topDocs = searcher.search(query, filter, n);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f)\n      scoreNorm = 1.0f / scoreDocs[0].score;\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++)\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score*scoreNorm,\n\t\t\t\t    scoreDocs[i].doc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ab84dbd6e6b39c90c55cea2ebe0bb6032a3214","date":1042502677,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","sourceNew":"  // Tries to add new documents to hitDocs.\n  // Ensures that the hit numbered <code>min</code> has been retrieved.\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min)\n      min = hitDocs.size();\n\n    int n = min * 2;\t\t\t\t  // double # retrieved\n    TopDocs topDocs = searcher.search(query, filter, n);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f)\n      scoreNorm = 1.0f / scoreDocs[0].score;\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++)\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score*scoreNorm,\n\t\t\t\t    scoreDocs[i].doc));\n  }\n\n","sourceOld":"  // Tries to add new documents to hitDocs.\n  // Ensures that the hit numbered <code>min</code> has been retrieved.\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min)\n      min = hitDocs.size();\n\n    int n = min * 2;\t\t\t\t  // double # retrieved\n    TopDocs topDocs = searcher.search(query, filter, n);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n//     if (length > 0 && scoreDocs[0].score > 1.0f)\n//       scoreNorm = 1.0f / scoreDocs[0].score;\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++)\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score*scoreNorm,\n\t\t\t\t    scoreDocs[i].doc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39332adc80701d999b904c433479b676c101d2a6","date":1063449985,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","sourceNew":"    // Tries to add new documents to hitDocs.\n    // Ensures that the hit numbered <code>min</code> has been retrieved.\n    private final void getMoreDocs(int min) throws IOException {\n        if (hitDocs.size() > min) {\n            min = hitDocs.size();\n        }\n\n        int n = min * 2;\t\t\t\t  // double # retrieved\n        TopDocs topDocs = searcher.search(query, filter, n);\n        length = topDocs.totalHits;\n        ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n        float scoreNorm = 1.0f;\n        if (length > 0 && scoreDocs[0].score > 1.0f) {\n            scoreNorm = 1.0f / scoreDocs[0].score;\n        }\n\n        int end = scoreDocs.length < length ? scoreDocs.length : length;\n        for (int i = hitDocs.size(); i < end; i++) {\n            hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                          scoreDocs[i].doc));\n        }\n    }\n\n","sourceOld":"  // Tries to add new documents to hitDocs.\n  // Ensures that the hit numbered <code>min</code> has been retrieved.\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min)\n      min = hitDocs.size();\n\n    int n = min * 2;\t\t\t\t  // double # retrieved\n    TopDocs topDocs = searcher.search(query, filter, n);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f)\n      scoreNorm = 1.0f / scoreDocs[0].score;\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++)\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score*scoreNorm,\n\t\t\t\t    scoreDocs[i].doc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09801d5e36f040f424c56c388007a47a95d36d46","date":1063496429,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","sourceNew":"  /**\n   * Tries to add new documents to hitDocs.\n   * Ensures that the hit numbered <code>min</code> has been retrieved.\n   */\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min) {\n      min = hitDocs.size();\n    }\n\n    int n = min * 2;\t\t\t\t  // double # retrieved\n    TopDocs topDocs = searcher.search(query, filter, n);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f) {\n      scoreNorm = 1.0f / scoreDocs[0].score;\n    }\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++) {\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                    scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":"    // Tries to add new documents to hitDocs.\n    // Ensures that the hit numbered <code>min</code> has been retrieved.\n    private final void getMoreDocs(int min) throws IOException {\n        if (hitDocs.size() > min) {\n            min = hitDocs.size();\n        }\n\n        int n = min * 2;\t\t\t\t  // double # retrieved\n        TopDocs topDocs = searcher.search(query, filter, n);\n        length = topDocs.totalHits;\n        ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n        float scoreNorm = 1.0f;\n        if (length > 0 && scoreDocs[0].score > 1.0f) {\n            scoreNorm = 1.0f / scoreDocs[0].score;\n        }\n\n        int end = scoreDocs.length < length ? scoreDocs.length : length;\n        for (int i = hitDocs.size(); i < end; i++) {\n            hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                          scoreDocs[i].doc));\n        }\n    }\n\n","bugFix":null,"bugIntro":["c2c83c79d9533a60d006b2de372c8726d203ff53","1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","sourceNew":"  /**\n   * Tries to add new documents to hitDocs.\n   * Ensures that the hit numbered <code>min</code> has been retrieved.\n   */\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min) {\n      min = hitDocs.size();\n    }\n\n    int n = min * 2;\t// double # retrieved\n    TopDocs topDocs = (sort == null) ? searcher.search(query, filter, n) : searcher.search(query, filter, n, sort);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f) {\n      scoreNorm = 1.0f / scoreDocs[0].score;\n    }\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++) {\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                    scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to add new documents to hitDocs.\n   * Ensures that the hit numbered <code>min</code> has been retrieved.\n   */\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min) {\n      min = hitDocs.size();\n    }\n\n    int n = min * 2;\t\t\t\t  // double # retrieved\n    TopDocs topDocs = searcher.search(query, filter, n);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f) {\n      scoreNorm = 1.0f / scoreDocs[0].score;\n    }\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++) {\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                    scoreDocs[i].doc));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","sourceNew":"  /**\n   * Tries to add new documents to hitDocs.\n   * Ensures that the hit numbered <code>min</code> has been retrieved.\n   */\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min) {\n      min = hitDocs.size();\n    }\n\n    int n = min * 2;\t// double # retrieved\n    TopDocs topDocs = (sort == null) ? searcher.search(weight, filter, n) : searcher.search(weight, filter, n, sort);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f) {\n      scoreNorm = 1.0f / scoreDocs[0].score;\n    }\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++) {\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                    scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to add new documents to hitDocs.\n   * Ensures that the hit numbered <code>min</code> has been retrieved.\n   */\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min) {\n      min = hitDocs.size();\n    }\n\n    int n = min * 2;\t// double # retrieved\n    TopDocs topDocs = (sort == null) ? searcher.search(query, filter, n) : searcher.search(query, filter, n, sort);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f) {\n      scoreNorm = 1.0f / scoreDocs[0].score;\n    }\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++) {\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                    scoreDocs[i].doc));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c88b3d0bf235942b9ead3322cac5fcee1e732d8","date":1133977717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","sourceNew":"  /**\n   * Tries to add new documents to hitDocs.\n   * Ensures that the hit numbered <code>min</code> has been retrieved.\n   */\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min) {\n      min = hitDocs.size();\n    }\n\n    int n = min * 2;\t// double # retrieved\n    TopDocs topDocs = (sort == null) ? searcher.search(weight, filter, n) : searcher.search(weight, filter, n, sort);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    \n    if (length > 0 && topDocs.getMaxScore() > 1.0f) {\n      scoreNorm = 1.0f / topDocs.getMaxScore();\n    }\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++) {\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                    scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to add new documents to hitDocs.\n   * Ensures that the hit numbered <code>min</code> has been retrieved.\n   */\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min) {\n      min = hitDocs.size();\n    }\n\n    int n = min * 2;\t// double # retrieved\n    TopDocs topDocs = (sort == null) ? searcher.search(weight, filter, n) : searcher.search(weight, filter, n, sort);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f) {\n      scoreNorm = 1.0f / scoreDocs[0].score;\n    }\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++) {\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                    scoreDocs[i].doc));\n    }\n  }\n\n","bugFix":["09801d5e36f040f424c56c388007a47a95d36d46"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2c83c79d9533a60d006b2de372c8726d203ff53","date":1198443029,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","sourceNew":"  /**\n   * Tries to add new documents to hitDocs.\n   * Ensures that the hit numbered <code>min</code> has been retrieved.\n   */\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min) {\n      min = hitDocs.size();\n    }\n\n    int n = min * 2;\t// double # retrieved\n    TopDocs topDocs = (sort == null) ? searcher.search(weight, filter, n) : searcher.search(weight, filter, n, sort);\n    \n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    \n    if (length > 0 && topDocs.getMaxScore() > 1.0f) {\n      scoreNorm = 1.0f / topDocs.getMaxScore();\n    }\n\n    int start = hitDocs.size() - nDeletedHits;\n\n    // any new deletions?\n    int nDels2 = countDeletions(searcher);\n    debugCheckedForDeletions = false;\n    if (nDeletions < 0 || nDels2 > nDeletions) { \n      // either we cannot count deletions, or some \"previously valid hits\" might have been deleted, so find exact start point\n      nDeletedHits = 0;\n      debugCheckedForDeletions = true;\n      int i2 = 0;\n      for (int i1=0; i1<hitDocs.size() && i2<scoreDocs.length; i1++) {\n        int id1 = ((HitDoc)hitDocs.get(i1)).id;\n        int id2 = scoreDocs[i2].doc;\n        if (id1 == id2) {\n          i2++;\n        } else {\n          nDeletedHits ++;\n        }\n      }\n      start = i2;\n    }\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    length += nDeletedHits;\n    for (int i = start; i < end; i++) {\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                    scoreDocs[i].doc));\n    }\n    \n    nDeletions = nDels2;\n  }\n\n","sourceOld":"  /**\n   * Tries to add new documents to hitDocs.\n   * Ensures that the hit numbered <code>min</code> has been retrieved.\n   */\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min) {\n      min = hitDocs.size();\n    }\n\n    int n = min * 2;\t// double # retrieved\n    TopDocs topDocs = (sort == null) ? searcher.search(weight, filter, n) : searcher.search(weight, filter, n, sort);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    \n    if (length > 0 && topDocs.getMaxScore() > 1.0f) {\n      scoreNorm = 1.0f / topDocs.getMaxScore();\n    }\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++) {\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                    scoreDocs[i].doc));\n    }\n  }\n\n","bugFix":["09801d5e36f040f424c56c388007a47a95d36d46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfd046e26ed9bce27d8cb6fab8986d6dab29f264","date":1254940367,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/Hits#getMoreDocs(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tries to add new documents to hitDocs.\n   * Ensures that the hit numbered <code>min</code> has been retrieved.\n   */\n  private final void getMoreDocs(int min) throws IOException {\n    if (hitDocs.size() > min) {\n      min = hitDocs.size();\n    }\n\n    int n = min * 2;\t// double # retrieved\n    TopDocs topDocs = (sort == null) ? searcher.search(weight, filter, n) : searcher.search(weight, filter, n, sort);\n    \n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    \n    if (length > 0 && topDocs.getMaxScore() > 1.0f) {\n      scoreNorm = 1.0f / topDocs.getMaxScore();\n    }\n\n    int start = hitDocs.size() - nDeletedHits;\n\n    // any new deletions?\n    int nDels2 = countDeletions(searcher);\n    debugCheckedForDeletions = false;\n    if (nDeletions < 0 || nDels2 > nDeletions) { \n      // either we cannot count deletions, or some \"previously valid hits\" might have been deleted, so find exact start point\n      nDeletedHits = 0;\n      debugCheckedForDeletions = true;\n      int i2 = 0;\n      for (int i1=0; i1<hitDocs.size() && i2<scoreDocs.length; i1++) {\n        int id1 = ((HitDoc)hitDocs.get(i1)).id;\n        int id2 = scoreDocs[i2].doc;\n        if (id1 == id2) {\n          i2++;\n        } else {\n          nDeletedHits ++;\n        }\n      }\n      start = i2;\n    }\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    length += nDeletedHits;\n    for (int i = start; i < end; i++) {\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,\n                                    scoreDocs[i].doc));\n    }\n    \n    nDeletions = nDels2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6691cb6747f9e850337c706c06b92e9ddf816e1":["09801d5e36f040f424c56c388007a47a95d36d46"],"bfd046e26ed9bce27d8cb6fab8986d6dab29f264":["c2c83c79d9533a60d006b2de372c8726d203ff53"],"39332adc80701d999b904c433479b676c101d2a6":["94ab84dbd6e6b39c90c55cea2ebe0bb6032a3214"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09801d5e36f040f424c56c388007a47a95d36d46":["39332adc80701d999b904c433479b676c101d2a6"],"c2c83c79d9533a60d006b2de372c8726d203ff53":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"94ab84dbd6e6b39c90c55cea2ebe0bb6032a3214":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfd046e26ed9bce27d8cb6fab8986d6dab29f264"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"c6691cb6747f9e850337c706c06b92e9ddf816e1":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"bfd046e26ed9bce27d8cb6fab8986d6dab29f264":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39332adc80701d999b904c433479b676c101d2a6":["09801d5e36f040f424c56c388007a47a95d36d46"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["94ab84dbd6e6b39c90c55cea2ebe0bb6032a3214"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"09801d5e36f040f424c56c388007a47a95d36d46":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"c2c83c79d9533a60d006b2de372c8726d203ff53":["bfd046e26ed9bce27d8cb6fab8986d6dab29f264"],"94ab84dbd6e6b39c90c55cea2ebe0bb6032a3214":["39332adc80701d999b904c433479b676c101d2a6"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["c2c83c79d9533a60d006b2de372c8726d203ff53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}