{"path":"solr/core/src/java/org/apache/solr/util/hll/SchemaVersionOne#writeMetadata(byte[],IHLLMetadata).mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/SchemaVersionOne#writeMetadata(byte[],IHLLMetadata).mjava","pathOld":"/dev/null","sourceNew":"    /* (non-Javadoc)\n     * @see net.agkn.hll.serialization.ISchemaVersion#writeMetadata(byte[], IHLLMetadata)\n     */\n    @Override\n    public void writeMetadata(final byte[] bytes, final IHLLMetadata metadata) {\n        final HLLType type = metadata.HLLType();\n        final int typeOrdinal = getOrdinal(type);\n\n        final int explicitCutoffValue;\n        if(metadata.explicitOff()) {\n            explicitCutoffValue = EXPLICIT_OFF;\n        } else if(metadata.explicitAuto()) {\n            explicitCutoffValue = EXPLICIT_AUTO;\n        } else {\n            explicitCutoffValue = metadata.log2ExplicitCutoff() + 1/*per spec*/;\n        }\n\n        bytes[0] = SerializationUtil.packVersionByte(SCHEMA_VERSION, typeOrdinal);\n        bytes[1] = SerializationUtil.packParametersByte(metadata.registerWidth(), metadata.registerCountLog2());\n        bytes[2] = SerializationUtil.packCutoffByte(explicitCutoffValue, metadata.sparseEnabled());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/SchemaVersionOne#writeMetadata(byte[],IHLLMetadata).mjava","pathOld":"/dev/null","sourceNew":"    /* (non-Javadoc)\n     * @see net.agkn.hll.serialization.ISchemaVersion#writeMetadata(byte[], IHLLMetadata)\n     */\n    @Override\n    public void writeMetadata(final byte[] bytes, final IHLLMetadata metadata) {\n        final HLLType type = metadata.HLLType();\n        final int typeOrdinal = getOrdinal(type);\n\n        final int explicitCutoffValue;\n        if(metadata.explicitOff()) {\n            explicitCutoffValue = EXPLICIT_OFF;\n        } else if(metadata.explicitAuto()) {\n            explicitCutoffValue = EXPLICIT_AUTO;\n        } else {\n            explicitCutoffValue = metadata.log2ExplicitCutoff() + 1/*per spec*/;\n        }\n\n        bytes[0] = SerializationUtil.packVersionByte(SCHEMA_VERSION, typeOrdinal);\n        bytes[1] = SerializationUtil.packParametersByte(metadata.registerWidth(), metadata.registerCountLog2());\n        bytes[2] = SerializationUtil.packCutoffByte(explicitCutoffValue, metadata.sparseEnabled());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}