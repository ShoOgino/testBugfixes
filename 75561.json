{"path":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","commits":[{"id":"1c2689487624ee0efdf9d3ed6b3a224200be7dac","date":1310402300,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"Must run with large (14 GB) java heap, and not Memory nor SimpleText codec!\")\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    Field field = new Field(\"field\", new MyTokenStream());\n    field.setOmitTermFreqAndPositions(true);\n    field.setOmitNorms(true);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    ci.setInfoStream(System.out);\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","4f9ef0d2dc62408768986e9157e0d12582bfeb25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7fb1a15df445507caf60211604ba8b12400948d5","date":1310407550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n\n    assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    assumeFalse(\"This test is super-slow and very disk-space-consuming with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    Field field = new Field(\"field\", new MyTokenStream());\n    field.setOmitTermFreqAndPositions(true);\n    field.setOmitNorms(true);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    ci.setInfoStream(System.out);\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore(\"Must run with large (14 GB) java heap, and not Memory nor SimpleText codec!\")\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    Field field = new Field(\"field\", new MyTokenStream());\n    field.setOmitTermFreqAndPositions(true);\n    field.setOmitNorms(true);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    ci.setInfoStream(System.out);\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n\n    assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    assumeFalse(\"This test is super-slow and very disk-space-consuming with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    Field field = new Field(\"field\", new MyTokenStream());\n    field.setIndexOptions(IndexOptions.DOCS_ONLY);\n    field.setOmitNorms(true);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    ci.setInfoStream(System.out);\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n\n    assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    assumeFalse(\"This test is super-slow and very disk-space-consuming with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    Field field = new Field(\"field\", new MyTokenStream());\n    field.setOmitTermFreqAndPositions(true);\n    field.setOmitNorms(true);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    ci.setInfoStream(System.out);\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5c52ce02dcffaf732180b33fef1231978edae9a","date":1311183857,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n\n    assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    assumeFalse(\"This test is super-slow and very disk-space-consuming with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    Field field = new Field(\"field\", new MyTokenStream());\n    field.setIndexOptions(IndexOptions.DOCS_ONLY);\n    field.setOmitNorms(true);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n\n    assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    assumeFalse(\"This test is super-slow and very disk-space-consuming with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    Field field = new Field(\"field\", new MyTokenStream());\n    field.setIndexOptions(IndexOptions.DOCS_ONLY);\n    field.setOmitNorms(true);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    ci.setInfoStream(System.out);\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["4f9ef0d2dc62408768986e9157e0d12582bfeb25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n\n    assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    assumeFalse(\"This test is super-slow and very disk-space-consuming with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", ft, new MyTokenStream());\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n\n    assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    assumeFalse(\"This test is super-slow and very disk-space-consuming with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    Field field = new Field(\"field\", new MyTokenStream());\n    field.setIndexOptions(IndexOptions.DOCS_ONLY);\n    field.setOmitNorms(true);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n\n    assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    assumeFalse(\"This test is super-slow and very disk-space-consuming with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n\n    assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    assumeFalse(\"This test is super-slow and very disk-space-consuming with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", ft, new MyTokenStream());\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n\n    assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    assumeFalse(\"This test is super-slow and very disk-space-consuming with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.optimize();\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BPostings#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPostings\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["7fb1a15df445507caf60211604ba8b12400948d5"],"7b91922b55d15444d554721b352861d028eb8278":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"1c2689487624ee0efdf9d3ed6b3a224200be7dac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5c52ce02dcffaf732180b33fef1231978edae9a":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["7b91922b55d15444d554721b352861d028eb8278"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b5c52ce02dcffaf732180b33fef1231978edae9a"],"7fb1a15df445507caf60211604ba8b12400948d5":["1c2689487624ee0efdf9d3ed6b3a224200be7dac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["b5c52ce02dcffaf732180b33fef1231978edae9a"],"7b91922b55d15444d554721b352861d028eb8278":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"1c2689487624ee0efdf9d3ed6b3a224200be7dac":["7fb1a15df445507caf60211604ba8b12400948d5"],"b5c52ce02dcffaf732180b33fef1231978edae9a":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c2689487624ee0efdf9d3ed6b3a224200be7dac"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7fb1a15df445507caf60211604ba8b12400948d5":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}