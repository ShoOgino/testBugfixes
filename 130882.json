{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final char[] value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) ).toCharArray();\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) ).toCharArray();\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) ).toCharArray();\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.copy(value, 0, value.length);\n    return charsRef;\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final char[] value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) ).toCharArray();\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) ).toCharArray();\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) ).toCharArray();\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.copy(value, 0, value.length);\n    return charsRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final char[] value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) ).toCharArray();\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) ).toCharArray();\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) ).toCharArray();\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.copy(value, 0, value.length);\n    return charsRef;\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final char[] value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) ).toCharArray();\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) ).toCharArray();\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) ).toCharArray();\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.copy(value, 0, value.length);\n    return charsRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final char[] value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) ).toCharArray();\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) ).toCharArray();\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) ).toCharArray();\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.copy(value, 0, value.length);\n    return charsRef;\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final char[] value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) ).toCharArray();\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) ).toCharArray();\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) ).toCharArray();\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.copy(value, 0, value.length);\n    return charsRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"765a6fa0e8e64eec1c2e5cb9ba80447470bb2a77","date":1318101542,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.length = value.length();\n    value.getChars(0, charsRef.length, charsRef.chars, 0);\n    return charsRef;\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final char[] value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) ).toCharArray();\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) ).toCharArray();\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) ).toCharArray();\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.copy(value, 0, value.length);\n    return charsRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.length = value.length();\n    value.getChars(0, charsRef.length, charsRef.chars, 0);\n    return charsRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["765a6fa0e8e64eec1c2e5cb9ba80447470bb2a77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"765a6fa0e8e64eec1c2e5cb9ba80447470bb2a77":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["765a6fa0e8e64eec1c2e5cb9ba80447470bb2a77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"765a6fa0e8e64eec1c2e5cb9ba80447470bb2a77":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}