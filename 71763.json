{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","commits":[{"id":"4caa441bee6bff2e56042e9ad2c8ffc6b2729cba","date":1347404545,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that it's initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) throws SolrException {\n    // :NOOP:\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12a02a9b179a0479e731098a89bf529a2282fe36","date":1347451976,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","sourceNew":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that it's initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) throws SolrException {\n    // :NOOP:\n  }\n\n","sourceOld":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that it's initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) throws SolrException {\n    // :NOOP:\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","sourceNew":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that it's initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) {\n    // override if your field type supports doc values\n    if (field.hasDocValues()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Field type \" + this + \" does not support doc values\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that it's initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) throws SolrException {\n    // :NOOP:\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","sourceNew":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that it's initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) {\n    // override if your field type supports doc values\n    if (field.hasDocValues()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Field type \" + this + \" does not support doc values\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that it's initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) throws SolrException {\n    // :NOOP:\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","sourceNew":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that its initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) {\n    // override if your field type supports doc values\n    if (field.hasDocValues()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Field type \" + this + \" does not support doc values\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that it's initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) {\n    // override if your field type supports doc values\n    if (field.hasDocValues()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Field type \" + this + \" does not support doc values\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12f7f335611574989edc8f87d25d91e89aa385b6","date":1489690739,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","sourceNew":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that its initialization does not violate any fundamental\n   * requirements of the <code>FieldType</code>.\n   * Subclasses may choose to throw a {@link SolrException}\n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) {\n    if (field.hasDocValues()) {\n      checkSupportsDocValues();\n    }\n    if (field.isLarge() && field.multiValued()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Field type \" + this + \" is 'large'; can't support multiValued\");\n    }\n    if (field.isLarge() && getNumberType() != null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Field type \" + this + \" is 'large'; can't support numerics\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that its initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) {\n    // override if your field type supports doc values\n    if (field.hasDocValues()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Field type \" + this + \" does not support doc values\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4eb0a25318cc756077fbde9bd3052690aed03d","date":1490280009,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#checkSchemaField(SchemaField).mjava","sourceNew":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that its initialization does not violate any fundamental\n   * requirements of the <code>FieldType</code>.\n   * Subclasses may choose to throw a {@link SolrException}\n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) {\n    if (field.hasDocValues()) {\n      checkSupportsDocValues();\n    }\n    if (field.isLarge() && field.multiValued()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Field type \" + this + \" is 'large'; can't support multiValued\");\n    }\n    if (field.isLarge() && getNumberType() != null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Field type \" + this + \" is 'large'; can't support numerics\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Check's {@link org.apache.solr.schema.SchemaField} instances constructed \n   * using this field type to ensure that they are valid.\n   *\n   * <p>\n   * This method is called by the <code>SchemaField</code> constructor to \n   * check that its initialization does not violate any fundemental \n   * requirements of the <code>FieldType</code>.  The default implementation \n   * does nothing, but subclasses may chose to throw a {@link SolrException}  \n   * if invariants are violated by the <code>SchemaField.</code>\n   * </p>\n   */\n  public void checkSchemaField(final SchemaField field) {\n    // override if your field type supports doc values\n    if (field.hasDocValues()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Field type \" + this + \" does not support doc values\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["73bb5a57dc75b54a39494f99986599cae7dff417"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["12a02a9b179a0479e731098a89bf529a2282fe36","73bb5a57dc75b54a39494f99986599cae7dff417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"12a02a9b179a0479e731098a89bf529a2282fe36":["4caa441bee6bff2e56042e9ad2c8ffc6b2729cba"],"12f7f335611574989edc8f87d25d91e89aa385b6":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"4caa441bee6bff2e56042e9ad2c8ffc6b2729cba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12f7f335611574989edc8f87d25d91e89aa385b6"],"73bb5a57dc75b54a39494f99986599cae7dff417":["12a02a9b179a0479e731098a89bf529a2282fe36"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["7b4eb0a25318cc756077fbde9bd3052690aed03d","12f7f335611574989edc8f87d25d91e89aa385b6"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4caa441bee6bff2e56042e9ad2c8ffc6b2729cba"],"7b4eb0a25318cc756077fbde9bd3052690aed03d":[],"12a02a9b179a0479e731098a89bf529a2282fe36":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"12f7f335611574989edc8f87d25d91e89aa385b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4caa441bee6bff2e56042e9ad2c8ffc6b2729cba":["12a02a9b179a0479e731098a89bf529a2282fe36"],"73bb5a57dc75b54a39494f99986599cae7dff417":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","7b4eb0a25318cc756077fbde9bd3052690aed03d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}