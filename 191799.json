{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.reusableTokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.reusableTokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    stream.reset();\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf7efd82433f3f64684711c16edfd149db6af111":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}