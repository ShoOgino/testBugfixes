{"path":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","sourceNew":"    @Override\n    public final void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      Bucket bucket = table.buckets[i];\n      if (bucket == null)\n        table.buckets[i] = bucket = new Bucket();\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","sourceOld":"    @Override\n    public final void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      Bucket bucket = table.buckets[i];\n      if (bucket == null)\n        table.buckets[i] = bucket = new Bucket();\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6790cef9c9b6973f40b5ea8fd98a6f51798956","date":1287395477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      Bucket bucket = table.buckets[i];\n      if (bucket == null)\n        table.buckets[i] = bucket = new Bucket();\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","sourceOld":"    @Override\n    public final void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      Bucket bucket = table.buckets[i];\n      if (bucket == null)\n        table.buckets[i] = bucket = new Bucket();\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      Bucket bucket = table.buckets[i];\n      if (bucket == null)\n        table.buckets[i] = bucket = new Bucket();\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","sourceOld":"    @Override\n    public final void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      Bucket bucket = table.buckets[i];\n      if (bucket == null)\n        table.buckets[i] = bucket = new Bucket();\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      Bucket bucket = table.buckets[i];\n      if (bucket == null)\n        table.buckets[i] = bucket = new Bucket();\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","sourceOld":"    @Override\n    public final void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      Bucket bucket = table.buckets[i];\n      if (bucket == null)\n        table.buckets[i] = bucket = new Bucket();\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd86d8c5713fc65e119372f12a3c5fdc47987b56","date":1318525216,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      final Bucket bucket = table.buckets[i];\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      Bucket bucket = table.buckets[i];\n      if (bucket == null)\n        table.buckets[i] = bucket = new Bucket();\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      final Bucket bucket = table.buckets[i];\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      final Bucket bucket = table.buckets[i];\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a6790cef9c9b6973f40b5ea8fd98a6f51798956":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dd86d8c5713fc65e119372f12a3c5fdc47987b56"],"dd86d8c5713fc65e119372f12a3c5fdc47987b56":["7a6790cef9c9b6973f40b5ea8fd98a6f51798956"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","7a6790cef9c9b6973f40b5ea8fd98a6f51798956"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9454a6510e2db155fb01faa5c049b06ece95fab9","7a6790cef9c9b6973f40b5ea8fd98a6f51798956"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a6790cef9c9b6973f40b5ea8fd98a6f51798956":["dd86d8c5713fc65e119372f12a3c5fdc47987b56","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd86d8c5713fc65e119372f12a3c5fdc47987b56":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7a6790cef9c9b6973f40b5ea8fd98a6f51798956","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}