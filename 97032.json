{"path":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestSwap(String,String).mjava","commits":[{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestSwap(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSwap(String from, String to) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.SWAP.toString(),\n              CoreAdminParams.CORE, from,\n              CoreAdminParams.OTHER, to),\n              resp);\n      assertNull(\"Exception on swap\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String fromName = \"@name='\" + from + \"'\";\n        String toName = \"@name='\" + to + \"'\";\n        if (persistList[idx].contains(fromName)) {\n          expressions[idx] = persistList[idx].replace(fromName, toName);\n        } else {\n          expressions[idx] = persistList[idx].replace(toName, fromName);\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestSwap(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestSwap(String,String).mjava","sourceNew":"  private void doTestSwap(String from, String to) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.SWAP.toString(),\n              CoreAdminParams.CORE, from,\n              CoreAdminParams.OTHER, to),\n              resp);\n      assertNull(\"Exception on swap\", resp.getException());\n\n      String[] persistList = getAllNodes();\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String fromName = \"@name='\" + from + \"'\";\n        String toName = \"@name='\" + to + \"'\";\n        if (persistList[idx].contains(fromName)) {\n          expressions[idx] = persistList[idx].replace(fromName, toName);\n        } else {\n          expressions[idx] = persistList[idx].replace(toName, fromName);\n        }\n      }\n\n      //assertXmlFile(origXml, expressions);\n      TestHarness.validateXPath(SOLR_XML_LOTS_SYSVARS, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSwap(String from, String to) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.SWAP.toString(),\n              CoreAdminParams.CORE, from,\n              CoreAdminParams.OTHER, to),\n              resp);\n      assertNull(\"Exception on swap\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String fromName = \"@name='\" + from + \"'\";\n        String toName = \"@name='\" + to + \"'\";\n        if (persistList[idx].contains(fromName)) {\n          expressions[idx] = persistList[idx].replace(fromName, toName);\n        } else {\n          expressions[idx] = persistList[idx].replace(toName, fromName);\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestSwap(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSwap(String from, String to) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.SWAP.toString(),\n              CoreAdminParams.CORE, from,\n              CoreAdminParams.OTHER, to),\n              resp);\n      assertNull(\"Exception on swap\", resp.getException());\n\n      String[] persistList = getAllNodes();\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String fromName = \"@name='\" + from + \"'\";\n        String toName = \"@name='\" + to + \"'\";\n        if (persistList[idx].contains(fromName)) {\n          expressions[idx] = persistList[idx].replace(fromName, toName);\n        } else {\n          expressions[idx] = persistList[idx].replace(toName, fromName);\n        }\n      }\n\n      //assertXmlFile(origXml, expressions);\n      TestHarness.validateXPath(SOLR_XML_LOTS_SYSVARS, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc18432e156d55186f09714af80941b71f6cb9f6","date":1387055478,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestSwap(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestSwap(String,String).mjava","sourceNew":"  private void doTestSwap(String from, String to) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n    int coreCount = countOccurrences(locator.xml, \"<core \");\n\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.SWAP.toString(),\n              CoreAdminParams.CORE, from,\n              CoreAdminParams.OTHER, to),\n              resp);\n      assertNull(\"Exception on swap\", resp.getException());\n\n      assertThat(\"Swapping cores should leave the same number of cores as before\",\n          countOccurrences(locator.xml, \"<core \"), is(coreCount));\n\n      String[] persistList = getAllNodes();\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String fromName = \"@name='\" + from + \"'\";\n        String toName = \"@name='\" + to + \"'\";\n        if (persistList[idx].contains(fromName)) {\n          expressions[idx] = persistList[idx].replace(fromName, toName);\n        } else {\n          expressions[idx] = persistList[idx].replace(toName, fromName);\n        }\n      }\n\n      //assertXmlFile(origXml, expressions);\n      TestHarness.validateXPath(SOLR_XML_LOTS_SYSVARS, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSwap(String from, String to) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.SWAP.toString(),\n              CoreAdminParams.CORE, from,\n              CoreAdminParams.OTHER, to),\n              resp);\n      assertNull(\"Exception on swap\", resp.getException());\n\n      String[] persistList = getAllNodes();\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String fromName = \"@name='\" + from + \"'\";\n        String toName = \"@name='\" + to + \"'\";\n        if (persistList[idx].contains(fromName)) {\n          expressions[idx] = persistList[idx].replace(fromName, toName);\n        } else {\n          expressions[idx] = persistList[idx].replace(toName, fromName);\n        }\n      }\n\n      //assertXmlFile(origXml, expressions);\n      TestHarness.validateXPath(SOLR_XML_LOTS_SYSVARS, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestSwap(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestSwap(String,String).mjava","sourceNew":"  private void doTestSwap(String from, String to) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n    int coreCount = countOccurrences(locator.xml, \"<core \");\n\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.SWAP.toString(),\n              CoreAdminParams.CORE, from,\n              CoreAdminParams.OTHER, to),\n              resp);\n      assertNull(\"Exception on swap\", resp.getException());\n\n      assertThat(\"Swapping cores should leave the same number of cores as before\",\n          countOccurrences(locator.xml, \"<core \"), is(coreCount));\n\n      String[] persistList = getAllNodes();\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String fromName = \"@name='\" + from + \"'\";\n        String toName = \"@name='\" + to + \"'\";\n        if (persistList[idx].contains(fromName)) {\n          expressions[idx] = persistList[idx].replace(fromName, toName);\n        } else {\n          expressions[idx] = persistList[idx].replace(toName, fromName);\n        }\n      }\n\n      //assertXmlFile(origXml, expressions);\n      TestHarness.validateXPath(SOLR_XML_LOTS_SYSVARS, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSwap(String from, String to) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.SWAP.toString(),\n              CoreAdminParams.CORE, from,\n              CoreAdminParams.OTHER, to),\n              resp);\n      assertNull(\"Exception on swap\", resp.getException());\n\n      String[] persistList = getAllNodes();\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String fromName = \"@name='\" + from + \"'\";\n        String toName = \"@name='\" + to + \"'\";\n        if (persistList[idx].contains(fromName)) {\n          expressions[idx] = persistList[idx].replace(fromName, toName);\n        } else {\n          expressions[idx] = persistList[idx].replace(toName, fromName);\n        }\n      }\n\n      //assertXmlFile(origXml, expressions);\n      TestHarness.validateXPath(SOLR_XML_LOTS_SYSVARS, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestSwap(String,String).mjava","sourceNew":null,"sourceOld":"  private void doTestSwap(String from, String to) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();\n\n    int coreCount = countOccurrences(locator.xml, \"<core \");\n\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.SWAP.toString(),\n              CoreAdminParams.CORE, from,\n              CoreAdminParams.OTHER, to),\n              resp);\n      assertNull(\"Exception on swap\", resp.getException());\n\n      assertThat(\"Swapping cores should leave the same number of cores as before\",\n          countOccurrences(locator.xml, \"<core \"), is(coreCount));\n\n      String[] persistList = getAllNodes();\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String fromName = \"@name='\" + from + \"'\";\n        String toName = \"@name='\" + to + \"'\";\n        if (persistList[idx].contains(fromName)) {\n          expressions[idx] = persistList[idx].replace(fromName, toName);\n        } else {\n          expressions[idx] = persistList[idx].replace(toName, fromName);\n        }\n      }\n\n      //assertXmlFile(origXml, expressions);\n      TestHarness.validateXPath(SOLR_XML_LOTS_SYSVARS, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["dc18432e156d55186f09714af80941b71f6cb9f6"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","dc18432e156d55186f09714af80941b71f6cb9f6"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"dc18432e156d55186f09714af80941b71f6cb9f6":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc6e48afbb50ae0a22fa76e226f04fd585532938","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","dc18432e156d55186f09714af80941b71f6cb9f6"],"dc18432e156d55186f09714af80941b71f6cb9f6":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}