{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","commits":[{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterFactoryTest[TestCommonGramsFilterFactory]#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10ddcde450bb525af01593bf6aa68f1f67e81b0d","date":1343104612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"/dev/null","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456307e9593d8518ec97cd724d8a7d3a109297b","date":1343503424,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"/dev/null","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", TEST_VERSION_CURRENT, loader, \n        \"words\", \"stop-1.txt\", \n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", TEST_VERSION_CURRENT, loader, \n        \"words\", \"stop-1.txt, stop-2.txt\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", TEST_VERSION_CURRENT, loader, \n        \"words\", \"stop-snowball.txt\", \n        \"format\", \"snowball\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-1.txt\", \n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-1.txt, stop-2.txt\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-snowball.txt\", \n        \"format\", \"snowball\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", TEST_VERSION_CURRENT, loader, \n        \"words\", \"stop-1.txt\", \n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", TEST_VERSION_CURRENT, loader, \n        \"words\", \"stop-1.txt, stop-2.txt\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", TEST_VERSION_CURRENT, loader, \n        \"words\", \"stop-snowball.txt\", \n        \"format\", \"snowball\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilterFactory.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-1.txt\", \n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-1.txt, stop-2.txt\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-snowball.txt\", \n        \"format\", \"snowball\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-1.txt\", \n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-1.txt, stop-2.txt\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-snowball.txt\", \n        \"format\", \"snowball\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilterFactory.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-1.txt\", \n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-1.txt, stop-2.txt\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-snowball.txt\", \n        \"format\", \"snowball\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-1.txt\", \n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-1.txt, stop-2.txt\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = (CommonGramsFilterFactory) tokenFilterFactory(\"CommonGrams\", Version.LATEST, loader,\n        \"words\", \"stop-snowball.txt\", \n        \"format\", \"snowball\", \n        \"ignoreCase\", \"true\");\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["280bf88d9ed3d9923e393961b594d9553970e4fd"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["e456307e9593d8518ec97cd724d8a7d3a109297b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["19e497fe4da591a79332da97681b8017d9c61165"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["19e497fe4da591a79332da97681b8017d9c61165","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"19e497fe4da591a79332da97681b8017d9c61165":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e456307e9593d8518ec97cd724d8a7d3a109297b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["19e497fe4da591a79332da97681b8017d9c61165"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"19e497fe4da591a79332da97681b8017d9c61165":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["280bf88d9ed3d9923e393961b594d9553970e4fd","5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"e456307e9593d8518ec97cd724d8a7d3a109297b":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}