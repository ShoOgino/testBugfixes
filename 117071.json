{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","commits":[{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String, Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String, Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice) val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String, Object>) val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String, Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String, Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice) val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String, Object>) val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String, Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String, Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice) val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String, Object>) val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String, Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String, Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice) val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String, Object>) val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(String collection, Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String, Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String, Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice) val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String, Object>) val, collection));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String, Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String, Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice) val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String, Object>) val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(String collection, Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String, Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String, Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice) val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String, Object>) val, collection));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String, Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String, Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice) val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String, Object>) val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3aa683bba99315838c968fefedf3d74f44aa993":["d470c8182e92b264680e34081b75e70a9f2b3c89","6681d02f2302c363be938426e68f8dfd090cc1bf"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["1c7a21395bae9e2f61aeb639f47aaca771c426ed","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1c7a21395bae9e2f61aeb639f47aaca771c426ed","0ad30c6a479e764150a3316e57263319775f1df2"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c7a21395bae9e2f61aeb639f47aaca771c426ed"]},"commit2Childs":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"d3aa683bba99315838c968fefedf3d74f44aa993":[],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","d470c8182e92b264680e34081b75e70a9f2b3c89","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5c99ad021f3da085fcb66220598a8f91dc5e453","1c7a21395bae9e2f61aeb639f47aaca771c426ed","55b50463286869f584cf849d1587a0fcd54d1dfa"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}