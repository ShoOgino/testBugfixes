{"path":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#initializeMetrics(SolrMetricsContext,String).mjava","commits":[{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, final String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    String className = this.getClass().getSimpleName();\n    log.debug(\"Initializing metrics for {}\", className);\n    numErrors = solrMetricsContext.meter(this, \"errors\", getCategory().toString(), scope, className);\n    numLost = solrMetricsContext.meter(this, \"lost\", getCategory().toString(), scope, className);\n    numLogged = solrMetricsContext.meter(this, \"count\", getCategory().toString(), scope, className);\n    requestTimes = solrMetricsContext.timer(this, \"requestTimes\", getCategory().toString(), scope, className);\n    totalTime = solrMetricsContext.counter(this, \"totalTime\", getCategory().toString(), scope, className);\n    if (async) {\n      solrMetricsContext.gauge(this, () -> blockingQueueSize, true, \"queueCapacity\", getCategory().toString(), scope, className);\n      solrMetricsContext.gauge(this, () -> blockingQueueSize - queue.remainingCapacity(), true, \"queueSize\", getCategory().toString(), scope, className);\n      queuedTime = solrMetricsContext.timer(this, \"queuedTime\", getCategory().toString(), scope, className);\n    }\n    solrMetricsContext.gauge(this, () -> async, true, \"async\", getCategory().toString(), scope, className);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, final String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    String className = this.getClass().getSimpleName();\n    log.debug(\"Initializing metrics for {}\", className);\n    numErrors = solrMetricsContext.meter(\"errors\", getCategory().toString(), scope, className);\n    numLost = solrMetricsContext.meter(\"lost\", getCategory().toString(), scope, className);\n    numLogged = solrMetricsContext.meter(\"count\", getCategory().toString(), scope, className);\n    requestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope, className);\n    totalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope, className);\n    if (async) {\n      solrMetricsContext.gauge(() -> blockingQueueSize, true, \"queueCapacity\", getCategory().toString(), scope, className);\n      solrMetricsContext.gauge(() -> blockingQueueSize - queue.remainingCapacity(), true, \"queueSize\", getCategory().toString(), scope, className);\n      queuedTime = solrMetricsContext.timer(\"queuedTime\", getCategory().toString(), scope, className);\n    }\n    solrMetricsContext.gauge(() -> async, true, \"async\", getCategory().toString(), scope, className);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, final String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    String className = this.getClass().getSimpleName();\n    log.debug(\"Initializing metrics for {}\", className);\n    numErrors = solrMetricsContext.meter(this, \"errors\", getCategory().toString(), scope, className);\n    numLost = solrMetricsContext.meter(this, \"lost\", getCategory().toString(), scope, className);\n    numLogged = solrMetricsContext.meter(this, \"count\", getCategory().toString(), scope, className);\n    requestTimes = solrMetricsContext.timer(this, \"requestTimes\", getCategory().toString(), scope, className);\n    totalTime = solrMetricsContext.counter(this, \"totalTime\", getCategory().toString(), scope, className);\n    if (async) {\n      solrMetricsContext.gauge(this, () -> blockingQueueSize, true, \"queueCapacity\", getCategory().toString(), scope, className);\n      solrMetricsContext.gauge(this, () -> blockingQueueSize - queue.remainingCapacity(), true, \"queueSize\", getCategory().toString(), scope, className);\n      queuedTime = solrMetricsContext.timer(this, \"queuedTime\", getCategory().toString(), scope, className);\n    }\n    solrMetricsContext.gauge(this, () -> async, true, \"async\", getCategory().toString(), scope, className);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"]},"commit2Childs":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}