{"path":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc#collect(int,int).mjava","commits":[{"id":"1319edcea595da81eb75d406bc82df2c3926862c","date":1463421250,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc#collect(int,int,IntFunction[SlotContext]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum, IntFunction<SlotContext> slotContext) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1319edcea595da81eb75d406bc82df2c3926862c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1319edcea595da81eb75d406bc82df2c3926862c"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1319edcea595da81eb75d406bc82df2c3926862c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"1319edcea595da81eb75d406bc82df2c3926862c":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["2c705a0d590cf911e7c942df49563ca2ea176e22","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}