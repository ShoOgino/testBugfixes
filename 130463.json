{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","commits":[{"id":"82235a501cff963da53cb98d86009e33e15cf47f","date":1459788663,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","pathOld":"/dev/null","sourceNew":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.polygons = polygons;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n    // we spill over the edge of the bounding box in each direction a bit,\n    // but it prevents edge case bugs.\n    latPerCell = latitudeRange / (GRID_SIZE - 1);\n    lonPerCell = longitudeRange / (GRID_SIZE - 1);\n    fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","pathOld":"/dev/null","sourceNew":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.polygons = polygons;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n    // we spill over the edge of the bounding box in each direction a bit,\n    // but it prevents edge case bugs.\n    latPerCell = latitudeRange / (GRID_SIZE - 1);\n    lonPerCell = longitudeRange / (GRID_SIZE - 1);\n    fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62fd278f6dca5263189264f3908508c1d38bd7f1","date":1459993764,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","sourceNew":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.polygons = polygons;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    if (latitudeRange < GRID_SIZE || longitudeRange < GRID_SIZE) {\n      // don't complicate fill right now if you pass e.g. emptyish stuff: make an \"empty grid\"\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","sourceOld":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.polygons = polygons;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n    // we spill over the edge of the bounding box in each direction a bit,\n    // but it prevents edge case bugs.\n    latPerCell = latitudeRange / (GRID_SIZE - 1);\n    lonPerCell = longitudeRange / (GRID_SIZE - 1);\n    fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b354f9ab8013d7a8ec8c652cef5f86f635c8443b","date":1460558006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","sourceNew":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.polygons = polygons;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    // if the range is too small, we can't divide it up in our grid nicely.\n    // in this case of a tiny polygon, we just make an empty grid instead of complicating/slowing down code.\n    final long minRange = (GRID_SIZE - 1) * (GRID_SIZE - 1);\n    if (latitudeRange < minRange || longitudeRange < minRange) {\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","sourceOld":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.polygons = polygons;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    if (latitudeRange < GRID_SIZE || longitudeRange < GRID_SIZE) {\n      // don't complicate fill right now if you pass e.g. emptyish stuff: make an \"empty grid\"\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","sourceNew":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.polygons = polygons;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    // if the range is too small, we can't divide it up in our grid nicely.\n    // in this case of a tiny polygon, we just make an empty grid instead of complicating/slowing down code.\n    final long minRange = (GRID_SIZE - 1) * (GRID_SIZE - 1);\n    if (latitudeRange < minRange || longitudeRange < minRange) {\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","sourceOld":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.polygons = polygons;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    if (latitudeRange < GRID_SIZE || longitudeRange < GRID_SIZE) {\n      // don't complicate fill right now if you pass e.g. emptyish stuff: make an \"empty grid\"\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034996547ca41c5004216fdd0178acbf06438da2","date":1461284133,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","sourceNew":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.tree = LatLonTree.build(polygons);\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    // if the range is too small, we can't divide it up in our grid nicely.\n    // in this case of a tiny polygon, we just make an empty grid instead of complicating/slowing down code.\n    final long minRange = (GRID_SIZE - 1) * (GRID_SIZE - 1);\n    if (latitudeRange < minRange || longitudeRange < minRange) {\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","sourceOld":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.polygons = polygons;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    // if the range is too small, we can't divide it up in our grid nicely.\n    // in this case of a tiny polygon, we just make an empty grid instead of complicating/slowing down code.\n    final long minRange = (GRID_SIZE - 1) * (GRID_SIZE - 1);\n    if (latitudeRange < minRange || longitudeRange < minRange) {\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","sourceNew":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.tree = LatLonTree.build(polygons);\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    // if the range is too small, we can't divide it up in our grid nicely.\n    // in this case of a tiny polygon, we just make an empty grid instead of complicating/slowing down code.\n    final long minRange = (GRID_SIZE - 1) * (GRID_SIZE - 1);\n    if (latitudeRange < minRange || longitudeRange < minRange) {\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","sourceOld":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.polygons = polygons;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    // if the range is too small, we can't divide it up in our grid nicely.\n    // in this case of a tiny polygon, we just make an empty grid instead of complicating/slowing down code.\n    final long minRange = (GRID_SIZE - 1) * (GRID_SIZE - 1);\n    if (latitudeRange < minRange || longitudeRange < minRange) {\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0f1175d994495cbd5763445c91c22f543d8687","date":1461352263,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,LatLonTree[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","sourceNew":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, LatLonTree[] tree) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.tree = tree;\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    // if the range is too small, we can't divide it up in our grid nicely.\n    // in this case of a tiny polygon, we just make an empty grid instead of complicating/slowing down code.\n    final long minRange = (GRID_SIZE - 1) * (GRID_SIZE - 1);\n    if (latitudeRange < minRange || longitudeRange < minRange) {\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","sourceOld":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.tree = LatLonTree.build(polygons);\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    // if the range is too small, we can't divide it up in our grid nicely.\n    // in this case of a tiny polygon, we just make an empty grid instead of complicating/slowing down code.\n    final long minRange = (GRID_SIZE - 1) * (GRID_SIZE - 1);\n    if (latitudeRange < minRange || longitudeRange < minRange) {\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#LatLonGrid(int,int,int,int,Polygon...).mjava","sourceNew":null,"sourceOld":"  LatLonGrid(int minLat, int maxLat, int minLon, int maxLon, Polygon... polygons) {\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.tree = LatLonTree.build(polygons);\n    if (minLon > maxLon) {\n      // maybe make 2 grids if you want this? \n      throw new IllegalArgumentException(\"Grid cannot cross the dateline\");\n    }\n    if (minLat > maxLat) {\n      throw new IllegalArgumentException(\"bogus grid\");\n    }\n    long latitudeRange = maxLat - (long) minLat;\n    long longitudeRange = maxLon - (long) minLon;\n\n    // if the range is too small, we can't divide it up in our grid nicely.\n    // in this case of a tiny polygon, we just make an empty grid instead of complicating/slowing down code.\n    final long minRange = (GRID_SIZE - 1) * (GRID_SIZE - 1);\n    if (latitudeRange < minRange || longitudeRange < minRange) {\n      latPerCell = lonPerCell = Long.MAX_VALUE;\n    } else {\n      // we spill over the edge of the bounding box in each direction a bit,\n      // but it prevents edge case bugs.\n      latPerCell = latitudeRange / (GRID_SIZE - 1);\n      lonPerCell = longitudeRange / (GRID_SIZE - 1);\n      fill(0, GRID_SIZE, 0, GRID_SIZE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82235a501cff963da53cb98d86009e33e15cf47f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82235a501cff963da53cb98d86009e33e15cf47f"],"b354f9ab8013d7a8ec8c652cef5f86f635c8443b":["62fd278f6dca5263189264f3908508c1d38bd7f1"],"bc0f1175d994495cbd5763445c91c22f543d8687":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["62fd278f6dca5263189264f3908508c1d38bd7f1","b354f9ab8013d7a8ec8c652cef5f86f635c8443b"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","034996547ca41c5004216fdd0178acbf06438da2"],"62fd278f6dca5263189264f3908508c1d38bd7f1":["82235a501cff963da53cb98d86009e33e15cf47f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","bc0f1175d994495cbd5763445c91c22f543d8687"],"034996547ca41c5004216fdd0178acbf06438da2":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"]},"commit2Childs":{"82235a501cff963da53cb98d86009e33e15cf47f":["09af2c9610ce53a4b25fd99344299b40318a4a1a","62fd278f6dca5263189264f3908508c1d38bd7f1"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"b354f9ab8013d7a8ec8c652cef5f86f635c8443b":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"bc0f1175d994495cbd5763445c91c22f543d8687":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["bc0f1175d994495cbd5763445c91c22f543d8687","f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","034996547ca41c5004216fdd0178acbf06438da2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82235a501cff963da53cb98d86009e33e15cf47f","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"62fd278f6dca5263189264f3908508c1d38bd7f1":["b354f9ab8013d7a8ec8c652cef5f86f635c8443b","9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"034996547ca41c5004216fdd0178acbf06438da2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}