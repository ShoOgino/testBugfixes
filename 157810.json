{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase#init(boolean,String,String...).mjava","commits":[{"id":"b6859380af04f895d004c9329693653f67412aa5","date":1393571599,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase#init(boolean,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  static void init(boolean ignoreCase, String affix, String... dictionaries) throws IOException, ParseException {\n    if (dictionaries.length == 0) {\n      throw new IllegalArgumentException(\"there must be at least one dictionary\");\n    }\n    \n    InputStream affixStream = StemmerTestBase.class.getResourceAsStream(affix);\n    if (affixStream == null) {\n      throw new FileNotFoundException(\"file not found: \" + affix);\n    }\n    \n    InputStream dictStreams[] = new InputStream[dictionaries.length];\n    for (int i = 0; i < dictionaries.length; i++) {\n      dictStreams[i] = StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n      if (dictStreams[i] == null) {\n        throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n      }\n    }\n    \n    try {\n      Dictionary dictionary = new Dictionary(affixStream, Arrays.asList(dictStreams), true);\n      stemmer = new Stemmer(dictionary);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream);\n      IOUtils.closeWhileHandlingException(dictStreams);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6b9214e93abd5c360b7dc32483691d5555a9c7e","date":1394289706,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase#init(boolean,String,String...).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase#init(boolean,String,String...).mjava","sourceNew":"  static void init(boolean ignoreCase, String affix, String... dictionaries) throws IOException, ParseException {\n    if (dictionaries.length == 0) {\n      throw new IllegalArgumentException(\"there must be at least one dictionary\");\n    }\n    \n    InputStream affixStream = StemmerTestBase.class.getResourceAsStream(affix);\n    if (affixStream == null) {\n      throw new FileNotFoundException(\"file not found: \" + affix);\n    }\n    \n    InputStream dictStreams[] = new InputStream[dictionaries.length];\n    for (int i = 0; i < dictionaries.length; i++) {\n      dictStreams[i] = StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n      if (dictStreams[i] == null) {\n        throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n      }\n    }\n    \n    try {\n      Dictionary dictionary = new Dictionary(affixStream, Arrays.asList(dictStreams), ignoreCase);\n      stemmer = new Stemmer(dictionary);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream);\n      IOUtils.closeWhileHandlingException(dictStreams);\n    }\n  }\n\n","sourceOld":"  static void init(boolean ignoreCase, String affix, String... dictionaries) throws IOException, ParseException {\n    if (dictionaries.length == 0) {\n      throw new IllegalArgumentException(\"there must be at least one dictionary\");\n    }\n    \n    InputStream affixStream = StemmerTestBase.class.getResourceAsStream(affix);\n    if (affixStream == null) {\n      throw new FileNotFoundException(\"file not found: \" + affix);\n    }\n    \n    InputStream dictStreams[] = new InputStream[dictionaries.length];\n    for (int i = 0; i < dictionaries.length; i++) {\n      dictStreams[i] = StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n      if (dictStreams[i] == null) {\n        throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n      }\n    }\n    \n    try {\n      Dictionary dictionary = new Dictionary(affixStream, Arrays.asList(dictStreams), true);\n      stemmer = new Stemmer(dictionary);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream);\n      IOUtils.closeWhileHandlingException(dictStreams);\n    }\n  }\n\n","bugFix":["b6859380af04f895d004c9329693653f67412aa5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase#init(boolean,String,String...).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase#init(boolean,String,String...).mjava","sourceNew":"  static void init(boolean ignoreCase, String affix, String... dictionaries) throws IOException, ParseException {\n    if (dictionaries.length == 0) {\n      throw new IllegalArgumentException(\"there must be at least one dictionary\");\n    }\n    \n    InputStream affixStream = StemmerTestBase.class.getResourceAsStream(affix);\n    if (affixStream == null) {\n      throw new FileNotFoundException(\"file not found: \" + affix);\n    }\n    \n    InputStream dictStreams[] = new InputStream[dictionaries.length];\n    for (int i = 0; i < dictionaries.length; i++) {\n      dictStreams[i] = StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n      if (dictStreams[i] == null) {\n        throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n      }\n    }\n    \n    try {\n      Dictionary dictionary = new Dictionary(affixStream, Arrays.asList(dictStreams), ignoreCase);\n      stemmer = new Stemmer(dictionary);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream);\n      IOUtils.closeWhileHandlingException(dictStreams);\n    }\n  }\n\n","sourceOld":"  static void init(boolean ignoreCase, String affix, String... dictionaries) throws IOException, ParseException {\n    if (dictionaries.length == 0) {\n      throw new IllegalArgumentException(\"there must be at least one dictionary\");\n    }\n    \n    InputStream affixStream = StemmerTestBase.class.getResourceAsStream(affix);\n    if (affixStream == null) {\n      throw new FileNotFoundException(\"file not found: \" + affix);\n    }\n    \n    InputStream dictStreams[] = new InputStream[dictionaries.length];\n    for (int i = 0; i < dictionaries.length; i++) {\n      dictStreams[i] = StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n      if (dictStreams[i] == null) {\n        throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n      }\n    }\n    \n    try {\n      Dictionary dictionary = new Dictionary(affixStream, Arrays.asList(dictStreams), true);\n      stemmer = new Stemmer(dictionary);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream);\n      IOUtils.closeWhileHandlingException(dictStreams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase#init(boolean,String,String...).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase#init(boolean,String,String...).mjava","sourceNew":"  static void init(boolean ignoreCase, String affix, String... dictionaries) throws IOException, ParseException {\n    if (dictionaries.length == 0) {\n      throw new IllegalArgumentException(\"there must be at least one dictionary\");\n    }\n    \n    InputStream affixStream = StemmerTestBase.class.getResourceAsStream(affix);\n    if (affixStream == null) {\n      throw new FileNotFoundException(\"file not found: \" + affix);\n    }\n    \n    InputStream dictStreams[] = new InputStream[dictionaries.length];\n    for (int i = 0; i < dictionaries.length; i++) {\n      dictStreams[i] = StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n      if (dictStreams[i] == null) {\n        throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n      }\n    }\n    \n    try {\n      Dictionary dictionary = new Dictionary(new RAMDirectory(), \"dictionary\", affixStream, Arrays.asList(dictStreams), ignoreCase);\n      stemmer = new Stemmer(dictionary);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream);\n      IOUtils.closeWhileHandlingException(dictStreams);\n    }\n  }\n\n","sourceOld":"  static void init(boolean ignoreCase, String affix, String... dictionaries) throws IOException, ParseException {\n    if (dictionaries.length == 0) {\n      throw new IllegalArgumentException(\"there must be at least one dictionary\");\n    }\n    \n    InputStream affixStream = StemmerTestBase.class.getResourceAsStream(affix);\n    if (affixStream == null) {\n      throw new FileNotFoundException(\"file not found: \" + affix);\n    }\n    \n    InputStream dictStreams[] = new InputStream[dictionaries.length];\n    for (int i = 0; i < dictionaries.length; i++) {\n      dictStreams[i] = StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n      if (dictStreams[i] == null) {\n        throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n      }\n    }\n    \n    try {\n      Dictionary dictionary = new Dictionary(affixStream, Arrays.asList(dictStreams), ignoreCase);\n      stemmer = new Stemmer(dictionary);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream);\n      IOUtils.closeWhileHandlingException(dictStreams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase#init(boolean,String,String...).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase#init(boolean,String,String...).mjava","sourceNew":"  static void init(boolean ignoreCase, String affix, String... dictionaries) throws IOException, ParseException {\n    if (dictionaries.length == 0) {\n      throw new IllegalArgumentException(\"there must be at least one dictionary\");\n    }\n    \n    InputStream affixStream = StemmerTestBase.class.getResourceAsStream(affix);\n    if (affixStream == null) {\n      throw new FileNotFoundException(\"file not found: \" + affix);\n    }\n    \n    InputStream dictStreams[] = new InputStream[dictionaries.length];\n    for (int i = 0; i < dictionaries.length; i++) {\n      dictStreams[i] = StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n      if (dictStreams[i] == null) {\n        throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n      }\n    }\n    \n    try {\n      Dictionary dictionary = new Dictionary(new ByteBuffersDirectory(), \"dictionary\", affixStream, Arrays.asList(dictStreams), ignoreCase);\n      stemmer = new Stemmer(dictionary);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream);\n      IOUtils.closeWhileHandlingException(dictStreams);\n    }\n  }\n\n","sourceOld":"  static void init(boolean ignoreCase, String affix, String... dictionaries) throws IOException, ParseException {\n    if (dictionaries.length == 0) {\n      throw new IllegalArgumentException(\"there must be at least one dictionary\");\n    }\n    \n    InputStream affixStream = StemmerTestBase.class.getResourceAsStream(affix);\n    if (affixStream == null) {\n      throw new FileNotFoundException(\"file not found: \" + affix);\n    }\n    \n    InputStream dictStreams[] = new InputStream[dictionaries.length];\n    for (int i = 0; i < dictionaries.length; i++) {\n      dictStreams[i] = StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n      if (dictStreams[i] == null) {\n        throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n      }\n    }\n    \n    try {\n      Dictionary dictionary = new Dictionary(new RAMDirectory(), \"dictionary\", affixStream, Arrays.asList(dictStreams), ignoreCase);\n      stemmer = new Stemmer(dictionary);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream);\n      IOUtils.closeWhileHandlingException(dictStreams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["b6859380af04f895d004c9329693653f67412aa5","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"b6b9214e93abd5c360b7dc32483691d5555a9c7e":["b6859380af04f895d004c9329693653f67412aa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6859380af04f895d004c9329693653f67412aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d77dafd89756a5161d244985903e3487ca109182":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"b6b9214e93abd5c360b7dc32483691d5555a9c7e":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6859380af04f895d004c9329693653f67412aa5"],"b6859380af04f895d004c9329693653f67412aa5":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["d77dafd89756a5161d244985903e3487ca109182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}