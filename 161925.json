{"path":"solr/core/src/test/org/apache/solr/cloud/TestSizeLimitedDistributedMap#testCleanup().mjava","commits":[{"id":"c4029846855e8477bc7762370913ed0225d83d60","date":1456556758,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSizeLimitedDistributedMap#testCleanup().mjava","pathOld":"/dev/null","sourceNew":"  public void testCleanup() throws Exception {\n    String zkDir = createTempDir(\"TestSizeLimitedDistributedMap\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n        DistributedMap map = Overseer.getCompletedMap(zkClient);\n        assertTrue(map instanceof SizeLimitedDistributedMap);\n        for (int i = 0; i < Overseer.NUM_RESPONSES_TO_STORE; i++) {\n          map.put(\"xyz_\" + i, new byte[0]);\n        }\n\n        assertEquals(\"Number of items do not match\", Overseer.NUM_RESPONSES_TO_STORE, map.size());\n        // add another to trigger cleanup\n        map.put(\"xyz_10000\", new byte[0]);\n        assertEquals(\"Distributed queue was not cleaned up\",\n            Overseer.NUM_RESPONSES_TO_STORE - (Overseer.NUM_RESPONSES_TO_STORE / 10) + 1, map.size());\n        for (int i = Overseer.NUM_RESPONSES_TO_STORE; i >= Overseer.NUM_RESPONSES_TO_STORE / 10; i--) {\n          assertTrue(map.contains(\"xyz_\" + i));\n        }\n        for (int i = Overseer.NUM_RESPONSES_TO_STORE / 10 - 1; i >= 0; i--) {\n          assertFalse(map.contains(\"xyz_\" + i));\n        }\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSizeLimitedDistributedMap#testCleanup().mjava","pathOld":"/dev/null","sourceNew":"  public void testCleanup() throws Exception {\n    String zkDir = createTempDir(\"TestSizeLimitedDistributedMap\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n        DistributedMap map = Overseer.getCompletedMap(zkClient);\n        assertTrue(map instanceof SizeLimitedDistributedMap);\n        for (int i = 0; i < Overseer.NUM_RESPONSES_TO_STORE; i++) {\n          map.put(\"xyz_\" + i, new byte[0]);\n        }\n\n        assertEquals(\"Number of items do not match\", Overseer.NUM_RESPONSES_TO_STORE, map.size());\n        // add another to trigger cleanup\n        map.put(\"xyz_10000\", new byte[0]);\n        assertEquals(\"Distributed queue was not cleaned up\",\n            Overseer.NUM_RESPONSES_TO_STORE - (Overseer.NUM_RESPONSES_TO_STORE / 10) + 1, map.size());\n        for (int i = Overseer.NUM_RESPONSES_TO_STORE; i >= Overseer.NUM_RESPONSES_TO_STORE / 10; i--) {\n          assertTrue(map.contains(\"xyz_\" + i));\n        }\n        for (int i = Overseer.NUM_RESPONSES_TO_STORE / 10 - 1; i >= 0; i--) {\n          assertFalse(map.contains(\"xyz_\" + i));\n        }\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd8a9ad1acc754f713e220250044c2bf06a22a0b","date":1518740056,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSizeLimitedDistributedMap#testCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSizeLimitedDistributedMap#testCleanup().mjava","sourceNew":"  public void testCleanup() throws Exception {\n    final List<String> deletedItems = new LinkedList<>();\n    final Set<String> expectedKeys = new HashSet<>();\n    int numResponsesToStore=TEST_NIGHTLY?Overseer.NUM_RESPONSES_TO_STORE:100;\n    \n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 10000)) {\n      String path = getAndMakeInitialPath(zkClient);\n      DistributedMap map = new SizeLimitedDistributedMap(zkClient, path, numResponsesToStore, (element)->deletedItems.add(element));\n      for (int i = 0; i < numResponsesToStore; i++) {\n        map.put(\"xyz_\" + i, new byte[0]);\n        expectedKeys.add(\"xyz_\" + i);\n      }\n\n      assertEquals(\"Number of items do not match\", numResponsesToStore, map.size());\n      assertTrue(\"Expected keys do not match\", expectedKeys.containsAll(map.keys()));\n      assertTrue(\"Expected keys do not match\", map.keys().containsAll(expectedKeys));\n      // add another to trigger cleanup\n      map.put(\"xyz_\" + numResponsesToStore, new byte[0]);\n      expectedKeys.add(\"xyz_\" + numResponsesToStore);\n      assertEquals(\"Distributed queue was not cleaned up\",\n          numResponsesToStore - (numResponsesToStore / 10) + 1, map.size());\n      for (int i = numResponsesToStore; i >= numResponsesToStore / 10; i--) {\n        assertTrue(map.contains(\"xyz_\" + i));\n      }\n      for (int i = numResponsesToStore / 10 - 1; i >= 0; i--) {\n        assertFalse(map.contains(\"xyz_\" + i));\n        assertTrue(deletedItems.contains(\"xyz_\" + i));\n        expectedKeys.remove(\"xyz_\" + i);\n      }\n      assertTrue(\"Expected keys do not match\", expectedKeys.containsAll(map.keys()));\n      assertTrue(\"Expected keys do not match\", map.keys().containsAll(expectedKeys));\n      map.remove(\"xyz_\" + numResponsesToStore);\n      assertFalse(\"map.remove shouldn't trigger the observer\", \n          deletedItems.contains(\"xyz_\" + numResponsesToStore));\n    }\n  }\n\n","sourceOld":"  public void testCleanup() throws Exception {\n    String zkDir = createTempDir(\"TestSizeLimitedDistributedMap\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n        DistributedMap map = Overseer.getCompletedMap(zkClient);\n        assertTrue(map instanceof SizeLimitedDistributedMap);\n        for (int i = 0; i < Overseer.NUM_RESPONSES_TO_STORE; i++) {\n          map.put(\"xyz_\" + i, new byte[0]);\n        }\n\n        assertEquals(\"Number of items do not match\", Overseer.NUM_RESPONSES_TO_STORE, map.size());\n        // add another to trigger cleanup\n        map.put(\"xyz_10000\", new byte[0]);\n        assertEquals(\"Distributed queue was not cleaned up\",\n            Overseer.NUM_RESPONSES_TO_STORE - (Overseer.NUM_RESPONSES_TO_STORE / 10) + 1, map.size());\n        for (int i = Overseer.NUM_RESPONSES_TO_STORE; i >= Overseer.NUM_RESPONSES_TO_STORE / 10; i--) {\n          assertTrue(map.contains(\"xyz_\" + i));\n        }\n        for (int i = Overseer.NUM_RESPONSES_TO_STORE / 10 - 1; i >= 0; i--) {\n          assertFalse(map.contains(\"xyz_\" + i));\n        }\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["af2638813028b254a88b418ebeafb541afb49653"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c4029846855e8477bc7762370913ed0225d83d60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4029846855e8477bc7762370913ed0225d83d60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"]},"commit2Childs":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af2638813028b254a88b418ebeafb541afb49653":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","c4029846855e8477bc7762370913ed0225d83d60"],"c4029846855e8477bc7762370913ed0225d83d60":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}