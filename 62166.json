{"path":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#size(SegmentInfo).mjava","commits":[{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#size(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  // Segment size in bytes, pro-rated by % deleted\n  private long size(SegmentInfo info) throws IOException {\n    final long byteSize = info.sizeInBytes(true);    \n    final int delCount = writer.get().numDeletedDocs(info);\n    final double delRatio = (info.docCount <= 0 ? 0.0f : ((double)delCount / (double)info.docCount));    \n    assert delRatio <= 1.0;\n    return (long) (byteSize * (1.0-delRatio));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#size(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  // Segment size in bytes, pro-rated by % deleted\n  private long size(SegmentInfo info) throws IOException {\n    final long byteSize = info.sizeInBytes(true);    \n    final int delCount = writer.get().numDeletedDocs(info);\n    final double delRatio = (info.docCount <= 0 ? 0.0f : ((double)delCount / (double)info.docCount));    \n    assert delRatio <= 1.0;\n    return (long) (byteSize * (1.0-delRatio));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#size(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  // Segment size in bytes, pro-rated by % deleted\n  private long size(SegmentInfo info) throws IOException {\n    final long byteSize = info.sizeInBytes(true);    \n    final int delCount = writer.get().numDeletedDocs(info);\n    final double delRatio = (info.docCount <= 0 ? 0.0f : ((double)delCount / (double)info.docCount));    \n    assert delRatio <= 1.0;\n    return (long) (byteSize * (1.0-delRatio));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#size(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  // Segment size in bytes, pro-rated by % deleted\n  private long size(SegmentInfo info) throws IOException {\n    final long byteSize = info.sizeInBytes(true);    \n    final int delCount = writer.get().numDeletedDocs(info);\n    final double delRatio = (info.docCount <= 0 ? 0.0f : ((double)delCount / (double)info.docCount));    \n    assert delRatio <= 1.0;\n    return (long) (byteSize * (1.0-delRatio));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#size(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#size(SegmentInfo).mjava","sourceNew":"  // Segment size in bytes, pro-rated by % deleted\n  private long size(SegmentInfo info) throws IOException {\n    final long byteSize = info.sizeInBytes();    \n    final int delCount = writer.get().numDeletedDocs(info);\n    final double delRatio = (info.docCount <= 0 ? 0.0f : ((double)delCount / (double)info.docCount));    \n    assert delRatio <= 1.0;\n    return (long) (byteSize * (1.0-delRatio));\n  }\n\n","sourceOld":"  // Segment size in bytes, pro-rated by % deleted\n  private long size(SegmentInfo info) throws IOException {\n    final long byteSize = info.sizeInBytes(true);    \n    final int delCount = writer.get().numDeletedDocs(info);\n    final double delRatio = (info.docCount <= 0 ? 0.0f : ((double)delCount / (double)info.docCount));    \n    assert delRatio <= 1.0;\n    return (long) (byteSize * (1.0-delRatio));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#size(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#size(SegmentInfo).mjava","sourceNew":"  // Segment size in bytes, pro-rated by % deleted\n  private long size(SegmentInfo info) throws IOException {\n    final long byteSize = info.sizeInBytes();    \n    final int delCount = writer.get().numDeletedDocs(info);\n    final double delRatio = (info.docCount <= 0 ? 0.0f : ((double)delCount / (double)info.docCount));    \n    assert delRatio <= 1.0;\n    return (long) (byteSize * (1.0-delRatio));\n  }\n\n","sourceOld":"  // Segment size in bytes, pro-rated by % deleted\n  private long size(SegmentInfo info) throws IOException {\n    final long byteSize = info.sizeInBytes();    \n    final int delCount = writer.get().numDeletedDocs(info);\n    final double delRatio = (info.docCount <= 0 ? 0.0f : ((double)delCount / (double)info.docCount));    \n    assert delRatio <= 1.0;\n    return (long) (byteSize * (1.0-delRatio));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3cc749c053615f5871f3b95715fe292f34e70a53":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","3cc749c053615f5871f3b95715fe292f34e70a53","45669a651c970812a680841b97a77cce06af559f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}