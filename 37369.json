{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#writeField(FieldInfo,DimensionalReader).mjava","commits":[{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#writeField(FieldInfo,DimensionalReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, DimensionalReader values) throws IOException {\n\n    try (BKDWriter writer = new BKDWriter(writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getDimensionCount(),\n                                          fieldInfo.getDimensionNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.QUERY_CROSSES_CELL;\n          }\n        });\n\n      indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#writeField(FieldInfo,DimensionalReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#writeField(FieldInfo,DimensionalReader).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, DimensionalReader values) throws IOException {\n\n    try (BKDWriter writer = new BKDWriter(writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getDimensionCount(),\n                                          fieldInfo.getDimensionNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, DimensionalReader values) throws IOException {\n\n    try (BKDWriter writer = new BKDWriter(writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getDimensionCount(),\n                                          fieldInfo.getDimensionNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.QUERY_CROSSES_CELL;\n          }\n        });\n\n      indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d53f98721d7cda12df9fd4b2e8e2c235be9ac494","date":1450448699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#writeField(FieldInfo,DimensionalReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#writeField(FieldInfo,DimensionalReader).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, DimensionalReader values) throws IOException {\n\n    try (BKDWriter writer = new BKDWriter(writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getDimensionCount(),\n                                          fieldInfo.getDimensionNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, DimensionalReader values) throws IOException {\n\n    try (BKDWriter writer = new BKDWriter(writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getDimensionCount(),\n                                          fieldInfo.getDimensionNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0c44765ee347f8c49bc6c0ffe1cdfb42738bd6a","date":1450910176,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#writeField(FieldInfo,DimensionalReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#writeField(FieldInfo,DimensionalReader).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, DimensionalReader values) throws IOException {\n\n    try (BKDWriter writer = new BKDWriter(writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getDimensionCount(),\n                                          fieldInfo.getDimensionNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, DimensionalReader values) throws IOException {\n\n    try (BKDWriter writer = new BKDWriter(writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getDimensionCount(),\n                                          fieldInfo.getDimensionNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointWriter#writeField(FieldInfo,PointReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#writeField(FieldInfo,DimensionalReader).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointReader values) throws IOException {\n\n    try (BKDWriter writer = new BKDWriter(writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, DimensionalReader values) throws IOException {\n\n    try (BKDWriter writer = new BKDWriter(writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getDimensionCount(),\n                                          fieldInfo.getDimensionNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["d0c44765ee347f8c49bc6c0ffe1cdfb42738bd6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d53f98721d7cda12df9fd4b2e8e2c235be9ac494":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"d0c44765ee347f8c49bc6c0ffe1cdfb42738bd6a":["d53f98721d7cda12df9fd4b2e8e2c235be9ac494"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"d53f98721d7cda12df9fd4b2e8e2c235be9ac494":["d0c44765ee347f8c49bc6c0ffe1cdfb42738bd6a"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["d53f98721d7cda12df9fd4b2e8e2c235be9ac494"],"d0c44765ee347f8c49bc6c0ffe1cdfb42738bd6a":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}