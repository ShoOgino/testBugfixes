{"path":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector.GraphTermsCollector#buildAutomaton(BytesRefHash).mjava","commits":[{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector.GraphTermsCollector#buildAutomaton(BytesRefHash).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Build an automaton to represent the frontier query\n     */\n    private Automaton buildAutomaton(BytesRefHash termBytesHash) {\n      // need top pass a sorted set of terms to the autn builder (maybe a better way to avoid this?)\n      final TreeSet<BytesRef> terms = new TreeSet<BytesRef>();\n      for (int i = 0; i < termBytesHash.size(); i++) {\n        BytesRef ref = new BytesRef();\n        termBytesHash.get(i, ref);\n        terms.add(ref);\n      }\n      final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n      return a;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}