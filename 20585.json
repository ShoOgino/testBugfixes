{"path":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","commits":[{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(signedIndex.minR);\n    String maxRP = pad(signedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","sourceNew":"  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(signedIndex.minR);\n    String maxRP = pad(signedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  }\n\n","sourceOld":"  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(signedIndex.minR);\n    String maxRP = pad(signedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","sourceNew":"  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(signedIndex.minR);\n    String maxRP = pad(signedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  }\n\n","sourceOld":"  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(signedIndex.minR);\n    String maxRP = pad(signedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","sourceNew":"  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(signedIndex.minR);\n    String maxRP = pad(signedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  }\n\n","sourceOld":"  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(signedIndex.minR);\n    String maxRP = pad(signedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["6f7a11eba51d213f09b96054111cf56a1e5796a3","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}