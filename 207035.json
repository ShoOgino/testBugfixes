{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processRangeFacets(Filter).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processRangeFacets(Filter).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processRangeFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of range facets\n   * @param filter the base filter to use\n   * @throws IOException if searching fails\n   */\n  public void processRangeFacets(final Filter filter) throws IOException {\n    for( RangeFacetRequest rfr : rangeFacets ){\n      String[] pivotStr;\n      String start = rfr.getStart();\n      if (start.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Query result requests can not be used in Range Facets\");\n      } else if (start.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(start.substring(start.indexOf('(')+1,start.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setStart(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setStart(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String end = rfr.getEnd();\n      if (end.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n      } else if (end.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(end.substring(end.indexOf('(')+1,end.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setEnd(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setEnd(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String[] gaps = rfr.getGaps();\n      for (int count = 0; count<gaps.length; count++){\n        String gap = gaps[count];\n        if (gap.contains(AnalyticsParams.QUERY_RESULT)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n        } else if (gap.contains(AnalyticsParams.RESULT)) {\n          try {\n            pivotStr = ExpressionFactory.getArguments(gap.substring(gap.indexOf('(')+1,gap.indexOf(')')).trim());\n            if (pivotStr.length==1) {\n              gaps[count]=getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              gaps[count]=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n      }\n      // Computes the end points of the ranges in the rangeFacet\n      final RangeEndpointCalculator<? extends Comparable<?>> rec = RangeEndpointCalculator.create(rfr);\n      final SchemaField sf = rfr.getField();\n      \n      // Create a rangeFacetAccumulator for each range and \n      // collect the documents for that range.\n      for( FacetRange range : rec.getRanges() ){\n        final String upper;\n        final String lower;\n        String facetValue = \"\";\n        if( range.lower == null ){\n          facetValue = \"(*\";\n          lower = null;\n        } else {\n          lower = range.lower;\n          facetValue = ((range.includeLower)?\"[\":\"(\") + range.lower;\n        }\n        facetValue+=\" TO \";\n        if( range.upper == null ){\n          upper = null;\n          facetValue += \"*)\";\n        } else {\n          upper = range.upper;\n          facetValue += range.upper + ((range.includeUpper)?\"]\":\")\");\n        }\n        \n        Query q = sf.getType().getRangeQuery(null, sf, lower, upper, range.includeLower,range.includeUpper);\n        RangeFacetAccumulator rAcc = new RangeFacetAccumulator(this,rfr.getName(),facetValue);\n        // The searcher sends docIds to the RangeFacetAccumulator which forwards\n        // them to <code>collectRange()</code> in this class for collection.\n        searcher.search(q, filter, rAcc);\n        computeRangeFacet(sf.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of range facets\n   * @param filter the base filter to use\n   * @throws IOException if searching fails\n   */\n  public void processRangeFacets(final Filter filter) throws IOException {\n    for( RangeFacetRequest rfr : rangeFacets ){\n      String[] pivotStr;\n      String start = rfr.getStart();\n      if (start.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Query result requests can not be used in Range Facets\");\n      } else if (start.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(start.substring(start.indexOf('(')+1,start.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setStart(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setStart(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String end = rfr.getEnd();\n      if (end.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n      } else if (end.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(end.substring(end.indexOf('(')+1,end.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setEnd(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setEnd(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String[] gaps = rfr.getGaps();\n      for (int count = 0; count<gaps.length; count++){\n        String gap = gaps[count];\n        if (gap.contains(AnalyticsParams.QUERY_RESULT)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n        } else if (gap.contains(AnalyticsParams.RESULT)) {\n          try {\n            pivotStr = ExpressionFactory.getArguments(gap.substring(gap.indexOf('(')+1,gap.indexOf(')')).trim());\n            if (pivotStr.length==1) {\n              gaps[count]=getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              gaps[count]=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n      }\n      // Computes the end points of the ranges in the rangeFacet\n      final RangeEndpointCalculator<? extends Comparable<?>> rec = RangeEndpointCalculator.create(rfr);\n      final SchemaField sf = rfr.getField();\n      \n      // Create a rangeFacetAccumulator for each range and \n      // collect the documents for that range.\n      for( FacetRange range : rec.getRanges() ){\n        final String upper;\n        final String lower;\n        String facetValue = \"\";\n        if( range.lower == null ){\n          facetValue = \"(*\";\n          lower = null;\n        } else {\n          lower = range.lower;\n          facetValue = ((range.includeLower)?\"[\":\"(\") + range.lower;\n        }\n        facetValue+=\" TO \";\n        if( range.upper == null ){\n          upper = null;\n          facetValue += \"*)\";\n        } else {\n          upper = range.upper;\n          facetValue += range.upper + ((range.includeUpper)?\"]\":\")\");\n        }\n        \n        Query q = sf.getType().getRangeQuery(null, sf, lower, upper, range.includeLower,range.includeUpper);\n        RangeFacetAccumulator rAcc = new RangeFacetAccumulator(this,rfr.getName(),facetValue);\n        // The searcher sends docIds to the RangeFacetAccumulator which forwards\n        // them to <code>collectRange()</code> in this class for collection.\n        searcher.search(q, filter, rAcc);\n        computeRangeFacet(sf.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processRangeFacets(Filter).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processRangeFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of range facets\n   * @param filter the base filter to use\n   * @throws IOException if searching fails\n   */\n  public void processRangeFacets(final Filter filter) throws IOException {\n    for( RangeFacetRequest rfr : rangeFacets ){\n      String[] pivotStr;\n      String start = rfr.getStart();\n      if (start.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Query result requests can not be used in Range Facets\");\n      } else if (start.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(start.substring(start.indexOf('(')+1,start.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setStart(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setStart(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String end = rfr.getEnd();\n      if (end.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n      } else if (end.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(end.substring(end.indexOf('(')+1,end.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setEnd(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setEnd(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String[] gaps = rfr.getGaps();\n      for (int count = 0; count<gaps.length; count++){\n        String gap = gaps[count];\n        if (gap.contains(AnalyticsParams.QUERY_RESULT)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n        } else if (gap.contains(AnalyticsParams.RESULT)) {\n          try {\n            pivotStr = ExpressionFactory.getArguments(gap.substring(gap.indexOf('(')+1,gap.indexOf(')')).trim());\n            if (pivotStr.length==1) {\n              gaps[count]=getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              gaps[count]=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n      }\n      // Computes the end points of the ranges in the rangeFacet\n      final RangeEndpointCalculator<? extends Comparable<?>> rec = RangeEndpointCalculator.create(rfr);\n      final SchemaField sf = rfr.getField();\n      \n      // Create a rangeFacetAccumulator for each range and \n      // collect the documents for that range.\n      for( FacetRange range : rec.getRanges() ){\n        final String upper;\n        final String lower;\n        String facetValue = \"\";\n        if( range.lower == null ){\n          facetValue = \"(*\";\n          lower = null;\n        } else {\n          lower = range.lower;\n          facetValue = ((range.includeLower)?\"[\":\"(\") + range.lower;\n        }\n        facetValue+=\" TO \";\n        if( range.upper == null ){\n          upper = null;\n          facetValue += \"*)\";\n        } else {\n          upper = range.upper;\n          facetValue += range.upper + ((range.includeUpper)?\"]\":\")\");\n        }\n        \n        Query q = sf.getType().getRangeQuery(null, sf, lower, upper, range.includeLower,range.includeUpper);\n        RangeFacetAccumulator rAcc = new RangeFacetAccumulator(this,rfr.getName(),facetValue);\n        // The searcher sends docIds to the RangeFacetAccumulator which forwards\n        // them to <code>collectRange()</code> in this class for collection.\n        searcher.search(new FilteredQuery(q, filter), rAcc);\n        computeRangeFacet(sf.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of range facets\n   * @param filter the base filter to use\n   * @throws IOException if searching fails\n   */\n  public void processRangeFacets(final Filter filter) throws IOException {\n    for( RangeFacetRequest rfr : rangeFacets ){\n      String[] pivotStr;\n      String start = rfr.getStart();\n      if (start.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Query result requests can not be used in Range Facets\");\n      } else if (start.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(start.substring(start.indexOf('(')+1,start.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setStart(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setStart(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String end = rfr.getEnd();\n      if (end.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n      } else if (end.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(end.substring(end.indexOf('(')+1,end.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setEnd(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setEnd(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String[] gaps = rfr.getGaps();\n      for (int count = 0; count<gaps.length; count++){\n        String gap = gaps[count];\n        if (gap.contains(AnalyticsParams.QUERY_RESULT)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n        } else if (gap.contains(AnalyticsParams.RESULT)) {\n          try {\n            pivotStr = ExpressionFactory.getArguments(gap.substring(gap.indexOf('(')+1,gap.indexOf(')')).trim());\n            if (pivotStr.length==1) {\n              gaps[count]=getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              gaps[count]=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n      }\n      // Computes the end points of the ranges in the rangeFacet\n      final RangeEndpointCalculator<? extends Comparable<?>> rec = RangeEndpointCalculator.create(rfr);\n      final SchemaField sf = rfr.getField();\n      \n      // Create a rangeFacetAccumulator for each range and \n      // collect the documents for that range.\n      for( FacetRange range : rec.getRanges() ){\n        final String upper;\n        final String lower;\n        String facetValue = \"\";\n        if( range.lower == null ){\n          facetValue = \"(*\";\n          lower = null;\n        } else {\n          lower = range.lower;\n          facetValue = ((range.includeLower)?\"[\":\"(\") + range.lower;\n        }\n        facetValue+=\" TO \";\n        if( range.upper == null ){\n          upper = null;\n          facetValue += \"*)\";\n        } else {\n          upper = range.upper;\n          facetValue += range.upper + ((range.includeUpper)?\"]\":\")\");\n        }\n        \n        Query q = sf.getType().getRangeQuery(null, sf, lower, upper, range.includeLower,range.includeUpper);\n        RangeFacetAccumulator rAcc = new RangeFacetAccumulator(this,rfr.getName(),facetValue);\n        // The searcher sends docIds to the RangeFacetAccumulator which forwards\n        // them to <code>collectRange()</code> in this class for collection.\n        searcher.search(q, filter, rAcc);\n        computeRangeFacet(sf.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processRangeFacets(Filter).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processRangeFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of range facets\n   * @param filter the base filter to use\n   * @throws IOException if searching fails\n   */\n  public void processRangeFacets(final Filter filter) throws IOException {\n    for( RangeFacetRequest rfr : rangeFacets ){\n      String[] pivotStr;\n      String start = rfr.getStart();\n      if (start.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Query result requests can not be used in Range Facets\");\n      } else if (start.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(start.substring(start.indexOf('(')+1,start.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setStart(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setStart(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String end = rfr.getEnd();\n      if (end.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n      } else if (end.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(end.substring(end.indexOf('(')+1,end.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setEnd(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setEnd(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String[] gaps = rfr.getGaps();\n      for (int count = 0; count<gaps.length; count++){\n        String gap = gaps[count];\n        if (gap.contains(AnalyticsParams.QUERY_RESULT)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n        } else if (gap.contains(AnalyticsParams.RESULT)) {\n          try {\n            pivotStr = ExpressionFactory.getArguments(gap.substring(gap.indexOf('(')+1,gap.indexOf(')')).trim());\n            if (pivotStr.length==1) {\n              gaps[count]=getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              gaps[count]=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n      }\n      // Computes the end points of the ranges in the rangeFacet\n      final RangeEndpointCalculator<? extends Comparable<?>> rec = RangeEndpointCalculator.create(rfr);\n      final SchemaField sf = rfr.getField();\n      \n      // Create a rangeFacetAccumulator for each range and \n      // collect the documents for that range.\n      for( FacetRange range : rec.getRanges() ){\n        final String upper;\n        final String lower;\n        String facetValue = \"\";\n        if( range.lower == null ){\n          facetValue = \"(*\";\n          lower = null;\n        } else {\n          lower = range.lower;\n          facetValue = ((range.includeLower)?\"[\":\"(\") + range.lower;\n        }\n        facetValue+=\" TO \";\n        if( range.upper == null ){\n          upper = null;\n          facetValue += \"*)\";\n        } else {\n          upper = range.upper;\n          facetValue += range.upper + ((range.includeUpper)?\"]\":\")\");\n        }\n        \n        Query q = sf.getType().getRangeQuery(null, sf, lower, upper, range.includeLower,range.includeUpper);\n        RangeFacetAccumulator rAcc = new RangeFacetAccumulator(this,rfr.getName(),facetValue);\n        // The searcher sends docIds to the RangeFacetAccumulator which forwards\n        // them to <code>collectRange()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, rAcc);\n        computeRangeFacet(sf.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of range facets\n   * @param filter the base filter to use\n   * @throws IOException if searching fails\n   */\n  public void processRangeFacets(final Filter filter) throws IOException {\n    for( RangeFacetRequest rfr : rangeFacets ){\n      String[] pivotStr;\n      String start = rfr.getStart();\n      if (start.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Query result requests can not be used in Range Facets\");\n      } else if (start.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(start.substring(start.indexOf('(')+1,start.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setStart(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setStart(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String end = rfr.getEnd();\n      if (end.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n      } else if (end.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(end.substring(end.indexOf('(')+1,end.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setEnd(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setEnd(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String[] gaps = rfr.getGaps();\n      for (int count = 0; count<gaps.length; count++){\n        String gap = gaps[count];\n        if (gap.contains(AnalyticsParams.QUERY_RESULT)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n        } else if (gap.contains(AnalyticsParams.RESULT)) {\n          try {\n            pivotStr = ExpressionFactory.getArguments(gap.substring(gap.indexOf('(')+1,gap.indexOf(')')).trim());\n            if (pivotStr.length==1) {\n              gaps[count]=getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              gaps[count]=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n      }\n      // Computes the end points of the ranges in the rangeFacet\n      final RangeEndpointCalculator<? extends Comparable<?>> rec = RangeEndpointCalculator.create(rfr);\n      final SchemaField sf = rfr.getField();\n      \n      // Create a rangeFacetAccumulator for each range and \n      // collect the documents for that range.\n      for( FacetRange range : rec.getRanges() ){\n        final String upper;\n        final String lower;\n        String facetValue = \"\";\n        if( range.lower == null ){\n          facetValue = \"(*\";\n          lower = null;\n        } else {\n          lower = range.lower;\n          facetValue = ((range.includeLower)?\"[\":\"(\") + range.lower;\n        }\n        facetValue+=\" TO \";\n        if( range.upper == null ){\n          upper = null;\n          facetValue += \"*)\";\n        } else {\n          upper = range.upper;\n          facetValue += range.upper + ((range.includeUpper)?\"]\":\")\");\n        }\n        \n        Query q = sf.getType().getRangeQuery(null, sf, lower, upper, range.includeLower,range.includeUpper);\n        RangeFacetAccumulator rAcc = new RangeFacetAccumulator(this,rfr.getName(),facetValue);\n        // The searcher sends docIds to the RangeFacetAccumulator which forwards\n        // them to <code>collectRange()</code> in this class for collection.\n        searcher.search(new FilteredQuery(q, filter), rAcc);\n        computeRangeFacet(sf.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processRangeFacets(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Initiates the collecting of range facets\n   * @param filter the base filter to use\n   * @throws IOException if searching fails\n   */\n  public void processRangeFacets(final Filter filter) throws IOException {\n    for( RangeFacetRequest rfr : rangeFacets ){\n      String[] pivotStr;\n      String start = rfr.getStart();\n      if (start.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Query result requests can not be used in Range Facets\");\n      } else if (start.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(start.substring(start.indexOf('(')+1,start.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setStart(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setStart(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String end = rfr.getEnd();\n      if (end.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n      } else if (end.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(end.substring(end.indexOf('(')+1,end.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setEnd(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setEnd(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String[] gaps = rfr.getGaps();\n      for (int count = 0; count<gaps.length; count++){\n        String gap = gaps[count];\n        if (gap.contains(AnalyticsParams.QUERY_RESULT)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n        } else if (gap.contains(AnalyticsParams.RESULT)) {\n          try {\n            pivotStr = ExpressionFactory.getArguments(gap.substring(gap.indexOf('(')+1,gap.indexOf(')')).trim());\n            if (pivotStr.length==1) {\n              gaps[count]=getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              gaps[count]=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n      }\n      // Computes the end points of the ranges in the rangeFacet\n      final RangeEndpointCalculator<? extends Comparable<?>> rec = RangeEndpointCalculator.create(rfr);\n      final SchemaField sf = rfr.getField();\n      \n      // Create a rangeFacetAccumulator for each range and \n      // collect the documents for that range.\n      for( FacetRange range : rec.getRanges() ){\n        final String upper;\n        final String lower;\n        String facetValue = \"\";\n        if( range.lower == null ){\n          facetValue = \"(*\";\n          lower = null;\n        } else {\n          lower = range.lower;\n          facetValue = ((range.includeLower)?\"[\":\"(\") + range.lower;\n        }\n        facetValue+=\" TO \";\n        if( range.upper == null ){\n          upper = null;\n          facetValue += \"*)\";\n        } else {\n          upper = range.upper;\n          facetValue += range.upper + ((range.includeUpper)?\"]\":\")\");\n        }\n        \n        Query q = sf.getType().getRangeQuery(null, sf, lower, upper, range.includeLower,range.includeUpper);\n        RangeFacetAccumulator rAcc = new RangeFacetAccumulator(this,rfr.getName(),facetValue);\n        // The searcher sends docIds to the RangeFacetAccumulator which forwards\n        // them to <code>collectRange()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, rAcc);\n        computeRangeFacet(sf.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processRangeFacets(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Initiates the collecting of range facets\n   * @param filter the base filter to use\n   * @throws IOException if searching fails\n   */\n  public void processRangeFacets(final Filter filter) throws IOException {\n    for( RangeFacetRequest rfr : rangeFacets ){\n      String[] pivotStr;\n      String start = rfr.getStart();\n      if (start.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Query result requests can not be used in Range Facets\");\n      } else if (start.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(start.substring(start.indexOf('(')+1,start.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setStart(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setStart(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String end = rfr.getEnd();\n      if (end.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n      } else if (end.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(end.substring(end.indexOf('(')+1,end.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setEnd(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setEnd(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String[] gaps = rfr.getGaps();\n      for (int count = 0; count<gaps.length; count++){\n        String gap = gaps[count];\n        if (gap.contains(AnalyticsParams.QUERY_RESULT)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n        } else if (gap.contains(AnalyticsParams.RESULT)) {\n          try {\n            pivotStr = ExpressionFactory.getArguments(gap.substring(gap.indexOf('(')+1,gap.indexOf(')')).trim());\n            if (pivotStr.length==1) {\n              gaps[count]=getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              gaps[count]=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n      }\n      // Computes the end points of the ranges in the rangeFacet\n      final RangeEndpointCalculator<? extends Comparable<?>> rec = RangeEndpointCalculator.create(rfr);\n      final SchemaField sf = rfr.getField();\n      \n      // Create a rangeFacetAccumulator for each range and \n      // collect the documents for that range.\n      for( FacetRange range : rec.getRanges() ){\n        final String upper;\n        final String lower;\n        String facetValue = \"\";\n        if( range.lower == null ){\n          facetValue = \"(*\";\n          lower = null;\n        } else {\n          lower = range.lower;\n          facetValue = ((range.includeLower)?\"[\":\"(\") + range.lower;\n        }\n        facetValue+=\" TO \";\n        if( range.upper == null ){\n          upper = null;\n          facetValue += \"*)\";\n        } else {\n          upper = range.upper;\n          facetValue += range.upper + ((range.includeUpper)?\"]\":\")\");\n        }\n        \n        Query q = sf.getType().getRangeQuery(null, sf, lower, upper, range.includeLower,range.includeUpper);\n        RangeFacetAccumulator rAcc = new RangeFacetAccumulator(this,rfr.getName(),facetValue);\n        // The searcher sends docIds to the RangeFacetAccumulator which forwards\n        // them to <code>collectRange()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, rAcc);\n        computeRangeFacet(sf.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processRangeFacets(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Initiates the collecting of range facets\n   * @param filter the base filter to use\n   * @throws IOException if searching fails\n   */\n  public void processRangeFacets(final Filter filter) throws IOException {\n    for( RangeFacetRequest rfr : rangeFacets ){\n      String[] pivotStr;\n      String start = rfr.getStart();\n      if (start.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Query result requests can not be used in Range Facets\");\n      } else if (start.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(start.substring(start.indexOf('(')+1,start.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setStart(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setStart(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+start+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String end = rfr.getEnd();\n      if (end.contains(AnalyticsParams.QUERY_RESULT)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n      } else if (end.contains(AnalyticsParams.RESULT)) {\n        try {\n          pivotStr = ExpressionFactory.getArguments(end.substring(end.indexOf('(')+1,end.indexOf(')')).trim());\n          if (pivotStr.length==1) {\n            rfr.setEnd(getResult(pivotStr[0]));\n          } else if (pivotStr.length==3) {\n            rfr.setEnd(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" has an invalid amount of arguments.\");\n          }\n        } catch (IndexOutOfBoundsException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+end+\" is invalid. Lacks parentheses.\",e);\n        }\n      }\n      String[] gaps = rfr.getGaps();\n      for (int count = 0; count<gaps.length; count++){\n        String gap = gaps[count];\n        if (gap.contains(AnalyticsParams.QUERY_RESULT)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Query result requests can not be used in Range Facets\");\n        } else if (gap.contains(AnalyticsParams.RESULT)) {\n          try {\n            pivotStr = ExpressionFactory.getArguments(gap.substring(gap.indexOf('(')+1,gap.indexOf(')')).trim());\n            if (pivotStr.length==1) {\n              gaps[count]=getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              gaps[count]=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+gap+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n      }\n      // Computes the end points of the ranges in the rangeFacet\n      final RangeEndpointCalculator<? extends Comparable<?>> rec = RangeEndpointCalculator.create(rfr);\n      final SchemaField sf = rfr.getField();\n      \n      // Create a rangeFacetAccumulator for each range and \n      // collect the documents for that range.\n      for( FacetRange range : rec.getRanges() ){\n        final String upper;\n        final String lower;\n        String facetValue = \"\";\n        if( range.lower == null ){\n          facetValue = \"(*\";\n          lower = null;\n        } else {\n          lower = range.lower;\n          facetValue = ((range.includeLower)?\"[\":\"(\") + range.lower;\n        }\n        facetValue+=\" TO \";\n        if( range.upper == null ){\n          upper = null;\n          facetValue += \"*)\";\n        } else {\n          upper = range.upper;\n          facetValue += range.upper + ((range.includeUpper)?\"]\":\")\");\n        }\n        \n        Query q = sf.getType().getRangeQuery(null, sf, lower, upper, range.includeLower,range.includeUpper);\n        RangeFacetAccumulator rAcc = new RangeFacetAccumulator(this,rfr.getName(),facetValue);\n        // The searcher sends docIds to the RangeFacetAccumulator which forwards\n        // them to <code>collectRange()</code> in this class for collection.\n        Query filtered = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(filter, Occur.FILTER)\n            .build();\n        searcher.search(filtered, rAcc);\n        computeRangeFacet(sf.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["1db68e96dd908fcd79ef809095822736aa601d08","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["1db68e96dd908fcd79ef809095822736aa601d08"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["1db68e96dd908fcd79ef809095822736aa601d08","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}