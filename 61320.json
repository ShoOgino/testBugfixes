{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    Map<String,Object> json = null;\n\n    // ensure we're requesting JSON back from Solr\n    URL url = new URL(getUrl);\n    String queryString = url.getQuery();\n    if (queryString != null) {\n      if (queryString.indexOf(\"wt=json\") == -1) {\n        getUrl += \"&wt=json\";\n      }\n    } else {\n      getUrl += \"?wt=json\";      \n    }\n       \n    // Prepare a request object\n    HttpGet httpget = new HttpGet(getUrl);\n    \n    // Execute the request\n    HttpResponse response = httpClient.execute(httpget);\n    \n    // Get hold of the response entity\n    HttpEntity entity = response.getEntity();\n    if (response.getStatusLine().getStatusCode() != 200) {\n      StringBuilder body = new StringBuilder();\n      if (entity != null) {\n        InputStream instream = entity.getContent();\n        String line;\n        try {\n          BufferedReader reader = \n              new BufferedReader(new InputStreamReader(instream, \"UTF-8\"));\n          while ((line = reader.readLine()) != null) {\n            body.append(line);\n          }\n        } catch (Exception ignore) {\n          // squelch it - just trying to compose an error message here\n        } finally {\n          instream.close();\n        }\n      }\n      throw new Exception(\"GET request [\" + getUrl + \"] failed due to: \"\n          + response.getStatusLine() + \": \" + body);\n    }\n    \n    // If the response does not enclose an entity, there is no need\n    // to worry about connection release\n    if (entity != null) {\n      InputStreamReader isr = null;\n      try {\n        isr = new InputStreamReader(entity.getContent(), \"UTF-8\");\n        Object resp = \n            ObjectBuilder.getVal(new JSONParser(isr));\n        if (resp != null && resp instanceof Map) {\n          json = (Map<String,Object>)resp;\n        } else {\n          throw new SolrServerException(\"Expected JSON object in response from \"+\n              getUrl+\" but received \"+ resp);\n        }\n      } catch (RuntimeException ex) {\n        // In case of an unexpected exception you may want to abort\n        // the HTTP request in order to shut down the underlying\n        // connection and release it back to the connection manager.\n        httpget.abort();\n        throw ex;\n      } finally {\n        // Closing the input stream will trigger connection release\n        isr.close();\n      }\n    }\n    \n    // lastly check the response JSON from Solr to see if it is an error\n    int statusCode = -1;\n    Map responseHeader = (Map)json.get(\"responseHeader\");\n    if (responseHeader != null) {\n      Long status = (Long)responseHeader.get(\"status\");\n      if (status != null)\n        statusCode = status.intValue();\n    }\n    \n    if (statusCode == -1)\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n        getUrl+\"! Response: \"+json);\n    \n    if (statusCode != 0) {      \n      String errMsg = null;\n      Map error = (Map) json.get(\"error\");\n      if (error != null) {\n        errMsg = (String)error.get(\"msg\");\n      }\n      \n      if (errMsg == null) errMsg = String.valueOf(json);\n      throw new SolrServerException(\"Request to \"+getUrl+\" failed due to: \"+errMsg);\n    }\n\n    return json;\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6985d2d06f6096c93a00bb73a94e89ae28431be1","date":1411398680,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    Map<String,Object> json = null;\n       \n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(\"wt\", \"json\").build());\n\n    //Will throw HttpResponseException if a non-ok response\n    String content = httpClient.execute(httpGet, new BasicResponseHandler());\n    \n    Object resp = ObjectBuilder.getVal(new JSONParser(content));\n    if (resp != null && resp instanceof Map) {\n      json = (Map<String,Object>)resp;\n    } else {\n      throw new SolrServerException(\"Expected JSON object in response from \"+\n          getUrl+\" but received \"+ resp);\n    }\n    \n    // lastly check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    \n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      \n      errMsg = errMsg == null ? String.valueOf(json) : errMsg;\n      throw new SolrServerException(\"Request to \"+getUrl+\" failed due to: \"+errMsg);\n    }\n\n    return json;\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    Map<String,Object> json = null;\n\n    // ensure we're requesting JSON back from Solr\n    URL url = new URL(getUrl);\n    String queryString = url.getQuery();\n    if (queryString != null) {\n      if (queryString.indexOf(\"wt=json\") == -1) {\n        getUrl += \"&wt=json\";\n      }\n    } else {\n      getUrl += \"?wt=json\";      \n    }\n       \n    // Prepare a request object\n    HttpGet httpget = new HttpGet(getUrl);\n    \n    // Execute the request\n    HttpResponse response = httpClient.execute(httpget);\n    \n    // Get hold of the response entity\n    HttpEntity entity = response.getEntity();\n    if (response.getStatusLine().getStatusCode() != 200) {\n      StringBuilder body = new StringBuilder();\n      if (entity != null) {\n        InputStream instream = entity.getContent();\n        String line;\n        try {\n          BufferedReader reader = \n              new BufferedReader(new InputStreamReader(instream, \"UTF-8\"));\n          while ((line = reader.readLine()) != null) {\n            body.append(line);\n          }\n        } catch (Exception ignore) {\n          // squelch it - just trying to compose an error message here\n        } finally {\n          instream.close();\n        }\n      }\n      throw new Exception(\"GET request [\" + getUrl + \"] failed due to: \"\n          + response.getStatusLine() + \": \" + body);\n    }\n    \n    // If the response does not enclose an entity, there is no need\n    // to worry about connection release\n    if (entity != null) {\n      InputStreamReader isr = null;\n      try {\n        isr = new InputStreamReader(entity.getContent(), \"UTF-8\");\n        Object resp = \n            ObjectBuilder.getVal(new JSONParser(isr));\n        if (resp != null && resp instanceof Map) {\n          json = (Map<String,Object>)resp;\n        } else {\n          throw new SolrServerException(\"Expected JSON object in response from \"+\n              getUrl+\" but received \"+ resp);\n        }\n      } catch (RuntimeException ex) {\n        // In case of an unexpected exception you may want to abort\n        // the HTTP request in order to shut down the underlying\n        // connection and release it back to the connection manager.\n        httpget.abort();\n        throw ex;\n      } finally {\n        // Closing the input stream will trigger connection release\n        isr.close();\n      }\n    }\n    \n    // lastly check the response JSON from Solr to see if it is an error\n    int statusCode = -1;\n    Map responseHeader = (Map)json.get(\"responseHeader\");\n    if (responseHeader != null) {\n      Long status = (Long)responseHeader.get(\"status\");\n      if (status != null)\n        statusCode = status.intValue();\n    }\n    \n    if (statusCode == -1)\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n        getUrl+\"! Response: \"+json);\n    \n    if (statusCode != 0) {      \n      String errMsg = null;\n      Map error = (Map) json.get(\"error\");\n      if (error != null) {\n        errMsg = (String)error.get(\"msg\");\n      }\n      \n      if (errMsg == null) errMsg = String.valueOf(json);\n      throw new SolrServerException(\"Request to \"+getUrl+\" failed due to: \"+errMsg);\n    }\n\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e25c332f157326faecb36f76173033c1284776a5","date":1414729852,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(\"wt\", \"json\").build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(\"Request to \"+getUrl+\" failed due to: \"+errMsg);\n    }\n    return json;\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    Map<String,Object> json = null;\n       \n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(\"wt\", \"json\").build());\n\n    //Will throw HttpResponseException if a non-ok response\n    String content = httpClient.execute(httpGet, new BasicResponseHandler());\n    \n    Object resp = ObjectBuilder.getVal(new JSONParser(content));\n    if (resp != null && resp instanceof Map) {\n      json = (Map<String,Object>)resp;\n    } else {\n      throw new SolrServerException(\"Expected JSON object in response from \"+\n          getUrl+\" but received \"+ resp);\n    }\n    \n    // lastly check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    \n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      \n      errMsg = errMsg == null ? String.valueOf(json) : errMsg;\n      throw new SolrServerException(\"Request to \"+getUrl+\" failed due to: \"+errMsg);\n    }\n\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"209c0259a9b7087b2111411ec790d6557ef86307","date":1419393649,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(\"wt\", \"json\").build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    }\n    return json;\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(\"wt\", \"json\").build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(\"Request to \"+getUrl+\" failed due to: \"+errMsg);\n    }\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    }\n    return json;\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(\"wt\", \"json\").build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    }\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    }\n    return json;\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(\"wt\", \"json\").build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    }\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    } else {\n      // make sure no \"failure\" object in there either\n      Object failureObj = json.get(\"failure\");\n      if (failureObj != null) {\n        if (failureObj instanceof Map) {\n          Object err = ((Map)failureObj).get(\"\");\n          if (err != null)\n            throw new SolrServerException(err.toString());\n        }\n        throw new SolrServerException(failureObj.toString());\n      }\n    }\n    return json;\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    }\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    } else {\n      // make sure no \"failure\" object in there either\n      Object failureObj = json.get(\"failure\");\n      if (failureObj != null) {\n        if (failureObj instanceof Map) {\n          Object err = ((Map)failureObj).get(\"\");\n          if (err != null)\n            throw new SolrServerException(err.toString());\n        }\n        throw new SolrServerException(failureObj.toString());\n      }\n    }\n    return json;\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    } else {\n      // make sure no \"failure\" object in there either\n      Object failureObj = json.get(\"failure\");\n      if (failureObj != null) {\n        if (failureObj instanceof Map) {\n          Object err = ((Map)failureObj).get(\"\");\n          if (err != null)\n            throw new SolrServerException(err.toString());\n        }\n        throw new SolrServerException(failureObj.toString());\n      }\n    }\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"070b525fb213c5643ba35e1b60f1a1d4f7b23312","date":1475678176,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext(null));\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    } else {\n      // make sure no \"failure\" object in there either\n      Object failureObj = json.get(\"failure\");\n      if (failureObj != null) {\n        if (failureObj instanceof Map) {\n          Object err = ((Map)failureObj).get(\"\");\n          if (err != null)\n            throw new SolrServerException(err.toString());\n        }\n        throw new SolrServerException(failureObj.toString());\n      }\n    }\n    return json;\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    } else {\n      // make sure no \"failure\" object in there either\n      Object failureObj = json.get(\"failure\");\n      if (failureObj != null) {\n        if (failureObj instanceof Map) {\n          Object err = ((Map)failureObj).get(\"\");\n          if (err != null)\n            throw new SolrServerException(err.toString());\n        }\n        throw new SolrServerException(failureObj.toString());\n      }\n    }\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07cebc9816f8c940e8e9683abbdc742fe95e25d7","date":1475696954,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    } else {\n      // make sure no \"failure\" object in there either\n      Object failureObj = json.get(\"failure\");\n      if (failureObj != null) {\n        if (failureObj instanceof Map) {\n          Object err = ((Map)failureObj).get(\"\");\n          if (err != null)\n            throw new SolrServerException(err.toString());\n        }\n        throw new SolrServerException(failureObj.toString());\n      }\n    }\n    return json;\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext(null));\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    } else {\n      // make sure no \"failure\" object in there either\n      Object failureObj = json.get(\"failure\");\n      if (failureObj != null) {\n        if (failureObj instanceof Map) {\n          Object err = ((Map)failureObj).get(\"\");\n          if (err != null)\n            throw new SolrServerException(err.toString());\n        }\n        throw new SolrServerException(failureObj.toString());\n      }\n    }\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8677448a186f4abd32218787f7ae73ad38f575cf","date":1477484362,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    try {\n      // ensure we're requesting JSON back from Solr\n      HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n\n      // make the request and get back a parsed JSON object\n      Map<String, Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n      // check the response JSON from Solr to see if it is an error\n      Long statusCode = asLong(\"/responseHeader/status\", json);\n      if (statusCode == -1) {\n        throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n            getUrl+\"! Response: \"+json);\n      } else if (statusCode != 0) {\n        String errMsg = asString(\"/error/msg\", json);\n        if (errMsg == null)\n          errMsg = String.valueOf(json);\n        throw new SolrServerException(errMsg);\n      } else {\n        // make sure no \"failure\" object in there either\n        Object failureObj = json.get(\"failure\");\n        if (failureObj != null) {\n          if (failureObj instanceof Map) {\n            Object err = ((Map)failureObj).get(\"\");\n            if (err != null)\n              throw new SolrServerException(err.toString());\n          }\n          throw new SolrServerException(failureObj.toString());\n        }\n      }\n      return json;\n    } catch (ClientProtocolException cpe) {\n      // Currently detecting authentication by string-matching the HTTP response\n      // Perhaps SolrClient should have thrown an exception itself??\n      if (cpe.getMessage().contains(\"HTTP ERROR 401\") || cpe.getMessage().contentEquals(\"HTTP ERROR 403\")) {\n        int code = cpe.getMessage().contains(\"HTTP ERROR 401\") ? 401 : 403; \n        throw new SolrException(SolrException.ErrorCode.getErrorCode(code), \n            \"Solr requires authentication for \" + getUrl + \". Please supply valid credentials. HTTP code=\" + code);\n      } else {\n        throw cpe;\n      }\n    }\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    } else {\n      // make sure no \"failure\" object in there either\n      Object failureObj = json.get(\"failure\");\n      if (failureObj != null) {\n        if (failureObj instanceof Map) {\n          Object err = ((Map)failureObj).get(\"\");\n          if (err != null)\n            throw new SolrServerException(err.toString());\n        }\n        throw new SolrServerException(failureObj.toString());\n      }\n    }\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    try {\n      // ensure we're requesting JSON back from Solr\n      HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n\n      // make the request and get back a parsed JSON object\n      Map<String, Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n      // check the response JSON from Solr to see if it is an error\n      Long statusCode = asLong(\"/responseHeader/status\", json);\n      if (statusCode == -1) {\n        throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n            getUrl+\"! Response: \"+json);\n      } else if (statusCode != 0) {\n        String errMsg = asString(\"/error/msg\", json);\n        if (errMsg == null)\n          errMsg = String.valueOf(json);\n        throw new SolrServerException(errMsg);\n      } else {\n        // make sure no \"failure\" object in there either\n        Object failureObj = json.get(\"failure\");\n        if (failureObj != null) {\n          if (failureObj instanceof Map) {\n            Object err = ((Map)failureObj).get(\"\");\n            if (err != null)\n              throw new SolrServerException(err.toString());\n          }\n          throw new SolrServerException(failureObj.toString());\n        }\n      }\n      return json;\n    } catch (ClientProtocolException cpe) {\n      // Currently detecting authentication by string-matching the HTTP response\n      // Perhaps SolrClient should have thrown an exception itself??\n      if (cpe.getMessage().contains(\"HTTP ERROR 401\") || cpe.getMessage().contentEquals(\"HTTP ERROR 403\")) {\n        int code = cpe.getMessage().contains(\"HTTP ERROR 401\") ? 401 : 403; \n        throw new SolrException(SolrException.ErrorCode.getErrorCode(code), \n            \"Solr requires authentication for \" + getUrl + \". Please supply valid credentials. HTTP code=\" + code);\n      } else {\n        throw cpe;\n      }\n    }\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    // ensure we're requesting JSON back from Solr\n    HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n    // make the request and get back a parsed JSON object\n    Map<String,Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n    // check the response JSON from Solr to see if it is an error\n    Long statusCode = asLong(\"/responseHeader/status\", json);\n    if (statusCode == -1) {\n      throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n          getUrl+\"! Response: \"+json);\n    } else if (statusCode != 0) {\n      String errMsg = asString(\"/error/msg\", json);\n      if (errMsg == null)\n        errMsg = String.valueOf(json);\n      throw new SolrServerException(errMsg);\n    } else {\n      // make sure no \"failure\" object in there either\n      Object failureObj = json.get(\"failure\");\n      if (failureObj != null) {\n        if (failureObj instanceof Map) {\n          Object err = ((Map)failureObj).get(\"\");\n          if (err != null)\n            throw new SolrServerException(err.toString());\n        }\n        throw new SolrServerException(failureObj.toString());\n      }\n    }\n    return json;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    try {\n      // ensure we're requesting JSON back from Solr\n      HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n\n      // make the request and get back a parsed JSON object\n      Map<String, Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n      // check the response JSON from Solr to see if it is an error\n      Long statusCode = asLong(\"/responseHeader/status\", json);\n      if (statusCode == -1) {\n        throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n            getUrl+\"! Response: \"+json);\n      } else if (statusCode != 0) {\n        String errMsg = asString(\"/error/msg\", json);\n        if (errMsg == null)\n          errMsg = String.valueOf(json);\n        throw new SolrServerException(errMsg);\n      } else {\n        // make sure no \"failure\" object in there either\n        Object failureObj = json.get(\"failure\");\n        if (failureObj != null) {\n          if (failureObj instanceof Map) {\n            Object err = ((Map)failureObj).get(\"\");\n            if (err != null)\n              throw new SolrServerException(err.toString());\n          }\n          throw new SolrServerException(failureObj.toString());\n        }\n      }\n      return json;\n    } catch (ClientProtocolException cpe) {\n      // Currently detecting authentication by string-matching the HTTP response\n      // Perhaps SolrClient should have thrown an exception itself??\n      if (cpe.getMessage().contains(\"HTTP ERROR 401\") || cpe.getMessage().contentEquals(\"HTTP ERROR 403\")) {\n        int code = cpe.getMessage().contains(\"HTTP ERROR 401\") ? 401 : 403; \n        throw new SolrException(SolrException.ErrorCode.getErrorCode(code), \n            \"Solr requires authentication for \" + getUrl + \". Please supply valid credentials. HTTP code=\" + code);\n      } else {\n        throw cpe;\n      }\n    }\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    try {\n      // ensure we're requesting JSON back from Solr\n      HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n\n      // make the request and get back a parsed JSON object\n      Map<String, Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n      // check the response JSON from Solr to see if it is an error\n      Long statusCode = asLong(\"/responseHeader/status\", json);\n      if (statusCode == -1) {\n        throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n            getUrl+\"! Response: \"+json);\n      } else if (statusCode != 0) {\n        String errMsg = asString(\"/error/msg\", json);\n        if (errMsg == null)\n          errMsg = String.valueOf(json);\n        throw new SolrServerException(errMsg);\n      } else {\n        // make sure no \"failure\" object in there either\n        Object failureObj = json.get(\"failure\");\n        if (failureObj != null) {\n          if (failureObj instanceof Map) {\n            Object err = ((Map)failureObj).get(\"\");\n            if (err != null)\n              throw new SolrServerException(err.toString());\n          }\n          throw new SolrServerException(failureObj.toString());\n        }\n      }\n      return json;\n    } catch (ClientProtocolException cpe) {\n      // Currently detecting authentication by string-matching the HTTP response\n      // Perhaps SolrClient should have thrown an exception itself??\n      if (cpe.getMessage().contains(\"HTTP ERROR 401\") || cpe.getMessage().contentEquals(\"HTTP ERROR 403\")) {\n        int code = cpe.getMessage().contains(\"HTTP ERROR 401\") ? 401 : 403; \n        throw new SolrException(SolrException.ErrorCode.getErrorCode(code), \n            \"Solr requires authentication for \" + getUrl + \". Please supply valid credentials. HTTP code=\" + code);\n      } else {\n        throw cpe;\n      }\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    try {\n      // ensure we're requesting JSON back from Solr\n      HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n\n      // make the request and get back a parsed JSON object\n      Map<String, Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n      // check the response JSON from Solr to see if it is an error\n      Long statusCode = asLong(\"/responseHeader/status\", json);\n      if (statusCode == -1) {\n        throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n            getUrl+\"! Response: \"+json);\n      } else if (statusCode != 0) {\n        String errMsg = asString(\"/error/msg\", json);\n        if (errMsg == null)\n          errMsg = String.valueOf(json);\n        throw new SolrServerException(errMsg);\n      } else {\n        // make sure no \"failure\" object in there either\n        Object failureObj = json.get(\"failure\");\n        if (failureObj != null) {\n          if (failureObj instanceof Map) {\n            Object err = ((Map)failureObj).get(\"\");\n            if (err != null)\n              throw new SolrServerException(err.toString());\n          }\n          throw new SolrServerException(failureObj.toString());\n        }\n      }\n      return json;\n    } catch (ClientProtocolException cpe) {\n      // Currently detecting authentication by string-matching the HTTP response\n      // Perhaps SolrClient should have thrown an exception itself??\n      if (cpe.getMessage().contains(\"HTTP ERROR 401\") || cpe.getMessage().contentEquals(\"HTTP ERROR 403\")) {\n        int code = cpe.getMessage().contains(\"HTTP ERROR 401\") ? 401 : 403; \n        throw new SolrException(SolrException.ErrorCode.getErrorCode(code), \n            \"Solr requires authentication for \" + getUrl + \". Please supply valid credentials. HTTP code=\" + code);\n      } else {\n        throw cpe;\n      }\n    }\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    try {\n      // ensure we're requesting JSON back from Solr\n      HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n\n      // make the request and get back a parsed JSON object\n      Map<String, Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n      // check the response JSON from Solr to see if it is an error\n      Long statusCode = asLong(\"/responseHeader/status\", json);\n      if (statusCode == -1) {\n        throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n            getUrl+\"! Response: \"+json);\n      } else if (statusCode != 0) {\n        String errMsg = asString(\"/error/msg\", json);\n        if (errMsg == null)\n          errMsg = String.valueOf(json);\n        throw new SolrServerException(errMsg);\n      } else {\n        // make sure no \"failure\" object in there either\n        Object failureObj = json.get(\"failure\");\n        if (failureObj != null) {\n          if (failureObj instanceof Map) {\n            Object err = ((Map)failureObj).get(\"\");\n            if (err != null)\n              throw new SolrServerException(err.toString());\n          }\n          throw new SolrServerException(failureObj.toString());\n        }\n      }\n      return json;\n    } catch (ClientProtocolException cpe) {\n      // Currently detecting authentication by string-matching the HTTP response\n      // Perhaps SolrClient should have thrown an exception itself??\n      if (cpe.getMessage().contains(\"HTTP ERROR 401\") || cpe.getMessage().contentEquals(\"HTTP ERROR 403\")) {\n        int code = cpe.getMessage().contains(\"HTTP ERROR 401\") ? 401 : 403; \n        throw new SolrException(SolrException.ErrorCode.getErrorCode(code), \n            \"Solr requires authentication for \" + getUrl + \". Please supply valid credentials. HTTP code=\" + code);\n      } else {\n        throw cpe;\n      }\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    try {\n      // ensure we're requesting JSON back from Solr\n      HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n\n      // make the request and get back a parsed JSON object\n      Map<String, Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n      // check the response JSON from Solr to see if it is an error\n      Long statusCode = asLong(\"/responseHeader/status\", json);\n      if (statusCode == -1) {\n        throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n            getUrl+\"! Response: \"+json);\n      } else if (statusCode != 0) {\n        String errMsg = asString(\"/error/msg\", json);\n        if (errMsg == null)\n          errMsg = String.valueOf(json);\n        throw new SolrServerException(errMsg);\n      } else {\n        // make sure no \"failure\" object in there either\n        Object failureObj = json.get(\"failure\");\n        if (failureObj != null) {\n          if (failureObj instanceof Map) {\n            Object err = ((Map)failureObj).get(\"\");\n            if (err != null)\n              throw new SolrServerException(err.toString());\n          }\n          throw new SolrServerException(failureObj.toString());\n        }\n      }\n      return json;\n    } catch (ClientProtocolException cpe) {\n      // Currently detecting authentication by string-matching the HTTP response\n      // Perhaps SolrClient should have thrown an exception itself??\n      if (cpe.getMessage().contains(\"HTTP ERROR 401\") || cpe.getMessage().contentEquals(\"HTTP ERROR 403\")) {\n        int code = cpe.getMessage().contains(\"HTTP ERROR 401\") ? 401 : 403; \n        throw new SolrException(SolrException.ErrorCode.getErrorCode(code), \n            \"Solr requires authentication for \" + getUrl + \". Please supply valid credentials. HTTP code=\" + code);\n      } else {\n        throw cpe;\n      }\n    }\n  }  \n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    try {\n      // ensure we're requesting JSON back from Solr\n      HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n\n      // make the request and get back a parsed JSON object\n      Map<String, Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n      // check the response JSON from Solr to see if it is an error\n      Long statusCode = asLong(\"/responseHeader/status\", json);\n      if (statusCode == -1) {\n        throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n            getUrl+\"! Response: \"+json);\n      } else if (statusCode != 0) {\n        String errMsg = asString(\"/error/msg\", json);\n        if (errMsg == null)\n          errMsg = String.valueOf(json);\n        throw new SolrServerException(errMsg);\n      } else {\n        // make sure no \"failure\" object in there either\n        Object failureObj = json.get(\"failure\");\n        if (failureObj != null) {\n          if (failureObj instanceof Map) {\n            Object err = ((Map)failureObj).get(\"\");\n            if (err != null)\n              throw new SolrServerException(err.toString());\n          }\n          throw new SolrServerException(failureObj.toString());\n        }\n      }\n      return json;\n    } catch (ClientProtocolException cpe) {\n      // Currently detecting authentication by string-matching the HTTP response\n      // Perhaps SolrClient should have thrown an exception itself??\n      if (cpe.getMessage().contains(\"HTTP ERROR 401\") || cpe.getMessage().contentEquals(\"HTTP ERROR 403\")) {\n        int code = cpe.getMessage().contains(\"HTTP ERROR 401\") ? 401 : 403; \n        throw new SolrException(SolrException.ErrorCode.getErrorCode(code), \n            \"Solr requires authentication for \" + getUrl + \". Please supply valid credentials. HTTP code=\" + code);\n      } else {\n        throw cpe;\n      }\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    try {\n      // ensure we're requesting JSON back from Solr\n      HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n\n      // make the request and get back a parsed JSON object\n      Map<String, Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n      // check the response JSON from Solr to see if it is an error\n      Long statusCode = asLong(\"/responseHeader/status\", json);\n      if (statusCode == -1) {\n        throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n            getUrl+\"! Response: \"+json);\n      } else if (statusCode != 0) {\n        String errMsg = asString(\"/error/msg\", json);\n        if (errMsg == null)\n          errMsg = String.valueOf(json);\n        throw new SolrServerException(errMsg);\n      } else {\n        // make sure no \"failure\" object in there either\n        Object failureObj = json.get(\"failure\");\n        if (failureObj != null) {\n          if (failureObj instanceof Map) {\n            Object err = ((Map)failureObj).get(\"\");\n            if (err != null)\n              throw new SolrServerException(err.toString());\n          }\n          throw new SolrServerException(failureObj.toString());\n        }\n      }\n      return json;\n    } catch (ClientProtocolException cpe) {\n      // Currently detecting authentication by string-matching the HTTP response\n      // Perhaps SolrClient should have thrown an exception itself??\n      if (cpe.getMessage().contains(\"HTTP ERROR 401\") || cpe.getMessage().contentEquals(\"HTTP ERROR 403\")) {\n        int code = cpe.getMessage().contains(\"HTTP ERROR 401\") ? 401 : 403;\n        throw new SolrException(SolrException.ErrorCode.getErrorCode(code),\n            \"Solr requires authentication for \" + getUrl + \". Please supply valid credentials. HTTP code=\" + code);\n      } else {\n        throw cpe;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr and then doing some\n   * validation of the response.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl) throws Exception {\n    try {\n      // ensure we're requesting JSON back from Solr\n      HttpGet httpGet = new HttpGet(new URIBuilder(getUrl).setParameter(CommonParams.WT, CommonParams.JSON).build());\n\n      // make the request and get back a parsed JSON object\n      Map<String, Object> json = httpClient.execute(httpGet, new SolrResponseHandler(), HttpClientUtil.createNewHttpClientRequestContext());\n      // check the response JSON from Solr to see if it is an error\n      Long statusCode = asLong(\"/responseHeader/status\", json);\n      if (statusCode == -1) {\n        throw new SolrServerException(\"Unable to determine outcome of GET request to: \"+\n            getUrl+\"! Response: \"+json);\n      } else if (statusCode != 0) {\n        String errMsg = asString(\"/error/msg\", json);\n        if (errMsg == null)\n          errMsg = String.valueOf(json);\n        throw new SolrServerException(errMsg);\n      } else {\n        // make sure no \"failure\" object in there either\n        Object failureObj = json.get(\"failure\");\n        if (failureObj != null) {\n          if (failureObj instanceof Map) {\n            Object err = ((Map)failureObj).get(\"\");\n            if (err != null)\n              throw new SolrServerException(err.toString());\n          }\n          throw new SolrServerException(failureObj.toString());\n        }\n      }\n      return json;\n    } catch (ClientProtocolException cpe) {\n      // Currently detecting authentication by string-matching the HTTP response\n      // Perhaps SolrClient should have thrown an exception itself??\n      if (cpe.getMessage().contains(\"HTTP ERROR 401\") || cpe.getMessage().contentEquals(\"HTTP ERROR 403\")) {\n        int code = cpe.getMessage().contains(\"HTTP ERROR 401\") ? 401 : 403; \n        throw new SolrException(SolrException.ErrorCode.getErrorCode(code), \n            \"Solr requires authentication for \" + getUrl + \". Please supply valid credentials. HTTP code=\" + code);\n      } else {\n        throw cpe;\n      }\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["859081acf00749f5dd462772c571d611d4a4d2db"],"e25c332f157326faecb36f76173033c1284776a5":["6985d2d06f6096c93a00bb73a94e89ae28431be1"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["8677448a186f4abd32218787f7ae73ad38f575cf"],"4ca20be81c9284c840498143264e583ccbb8525a":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"859081acf00749f5dd462772c571d611d4a4d2db":["4ca20be81c9284c840498143264e583ccbb8525a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["8677448a186f4abd32218787f7ae73ad38f575cf","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["209c0259a9b7087b2111411ec790d6557ef86307"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8677448a186f4abd32218787f7ae73ad38f575cf":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"209c0259a9b7087b2111411ec790d6557ef86307":["e25c332f157326faecb36f76173033c1284776a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["859081acf00749f5dd462772c571d611d4a4d2db","8677448a186f4abd32218787f7ae73ad38f575cf"],"d2638f781be724518ff6c2263d14a48cf6e68017":["209c0259a9b7087b2111411ec790d6557ef86307","1390137e395d2f07f9ba5b8c43d293befe84d563"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"6985d2d06f6096c93a00bb73a94e89ae28431be1":["709714c6ee47950678dd2d2ef4e0473886909226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["8677448a186f4abd32218787f7ae73ad38f575cf","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"e25c332f157326faecb36f76173033c1284776a5":["209c0259a9b7087b2111411ec790d6557ef86307"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4ca20be81c9284c840498143264e583ccbb8525a":["859081acf00749f5dd462772c571d611d4a4d2db"],"859081acf00749f5dd462772c571d611d4a4d2db":["070b525fb213c5643ba35e1b60f1a1d4f7b23312","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["8677448a186f4abd32218787f7ae73ad38f575cf"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["4ca20be81c9284c840498143264e583ccbb8525a","d2638f781be724518ff6c2263d14a48cf6e68017"],"709714c6ee47950678dd2d2ef4e0473886909226":["6985d2d06f6096c93a00bb73a94e89ae28431be1"],"8677448a186f4abd32218787f7ae73ad38f575cf":["b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"209c0259a9b7087b2111411ec790d6557ef86307":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6985d2d06f6096c93a00bb73a94e89ae28431be1":["e25c332f157326faecb36f76173033c1284776a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}