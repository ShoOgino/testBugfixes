{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#processAliases(SolrQueryRequest,Aliases,List[String]).mjava","commits":[{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#processAliases(SolrQueryRequest,Aliases,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void processAliases(SolrQueryRequest solrReq, Aliases aliases,\n      List<String> collectionsList) {\n    String collection = solrReq.getParams().get(\"collection\");\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<String>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(\"collection\", collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#processAliases(SolrQueryRequest,Aliases,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#processAliases(SolrQueryRequest,Aliases,List[String]).mjava","sourceNew":"  private void processAliases(SolrQueryRequest solrReq, Aliases aliases,\n      List<String> collectionsList) {\n    String collection = solrReq.getParams().get(\"collection\");\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(\"collection\", collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","sourceOld":"  private void processAliases(SolrQueryRequest solrReq, Aliases aliases,\n      List<String> collectionsList) {\n    String collection = solrReq.getParams().get(\"collection\");\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<String>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(\"collection\", collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#processAliases(Aliases,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#processAliases(SolrQueryRequest,Aliases,List[String]).mjava","sourceNew":"  private void processAliases(Aliases aliases,\n                              List<String> collectionsList) {\n    String collection = solrReq.getParams().get(\"collection\");\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(\"collection\", collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","sourceOld":"  private void processAliases(SolrQueryRequest solrReq, Aliases aliases,\n      List<String> collectionsList) {\n    String collection = solrReq.getParams().get(\"collection\");\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(\"collection\", collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a760e2135dfe20a04dea360873d4de1c6a0280bb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}