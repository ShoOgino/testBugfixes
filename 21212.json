{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getRelevantReplicasCount(Policy.Session,Clause.Condition,String,String).mjava","commits":[{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getRelevantReplicasCount(Policy.Session,Clause.Condition,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static int getRelevantReplicasCount(Policy.Session session, Clause.Condition cv, String collection, String shard) {\n    AtomicInteger totalReplicasOfInterest = new AtomicInteger(0);\n    Clause clause = cv.getClause();\n    for (Row row : session.matrix) {\n      row.forEachReplica(replicaInfo -> {\n        if (replicaInfo.getCollection().equals(collection)) {\n          if (clause.getShard() ==null || clause.getShard().op == Operand.WILDCARD || replicaInfo.getShard().equals(shard)) {\n            if (cv.getClause().type == null || replicaInfo.getType() == cv.getClause().type)\n              totalReplicasOfInterest.incrementAndGet();\n          }\n        }\n      });\n    }\n    return totalReplicasOfInterest.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getRelevantReplicasCount(Policy.Session,Clause.Condition,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static int getRelevantReplicasCount(Policy.Session session, Clause.Condition cv, String collection, String shard) {\n    AtomicInteger totalReplicasOfInterest = new AtomicInteger(0);\n    Clause clause = cv.getClause();\n    for (Row row : session.matrix) {\n      row.forEachReplica(replicaInfo -> {\n        if (replicaInfo.getCollection().equals(collection)) {\n          if (clause.getShard() ==null || clause.getShard().op == Operand.WILDCARD || replicaInfo.getShard().equals(shard)) {\n            if (cv.getClause().type == null || replicaInfo.getType() == cv.getClause().type)\n              totalReplicasOfInterest.incrementAndGet();\n          }\n        }\n      });\n    }\n    return totalReplicasOfInterest.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getRelevantReplicasCount(Policy.Session,Clause.Condition,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static int getRelevantReplicasCount(Policy.Session session, Clause.Condition cv, String collection, String shard) {\n    AtomicInteger totalReplicasOfInterest = new AtomicInteger(0);\n    Clause clause = cv.getClause();\n    for (Row row : session.matrix) {\n      row.forEachReplica(replicaInfo -> {\n        if (replicaInfo.getCollection().equals(collection)) {\n          if (clause.getShard() ==null || clause.getShard().op == Operand.WILDCARD || replicaInfo.getShard().equals(shard)) {\n            if (cv.getClause().type == null || replicaInfo.getType() == cv.getClause().type)\n              totalReplicasOfInterest.incrementAndGet();\n          }\n        }\n      });\n    }\n    return totalReplicasOfInterest.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getRelevantReplicasCount(Policy.Session,Clause.Condition,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getRelevantReplicasCount(Policy.Session,Clause.Condition,String,String).mjava","sourceNew":"  private static int getRelevantReplicasCount(Policy.Session session, Clause.Condition cv, String collection, String shard) {\n    AtomicInteger totalReplicasOfInterest = new AtomicInteger(0);\n    Clause clause = cv.getClause();\n    for (Row row : session.matrix) {\n      row.forEachReplica(replicaInfo -> {\n        if (clause.isMatch(replicaInfo, collection, shard))\n          totalReplicasOfInterest.incrementAndGet();\n      });\n    }\n    return totalReplicasOfInterest.get();\n  }\n\n","sourceOld":"  private static int getRelevantReplicasCount(Policy.Session session, Clause.Condition cv, String collection, String shard) {\n    AtomicInteger totalReplicasOfInterest = new AtomicInteger(0);\n    Clause clause = cv.getClause();\n    for (Row row : session.matrix) {\n      row.forEachReplica(replicaInfo -> {\n        if (replicaInfo.getCollection().equals(collection)) {\n          if (clause.getShard() ==null || clause.getShard().op == Operand.WILDCARD || replicaInfo.getShard().equals(shard)) {\n            if (cv.getClause().type == null || replicaInfo.getType() == cv.getClause().type)\n              totalReplicasOfInterest.incrementAndGet();\n          }\n        }\n      });\n    }\n    return totalReplicasOfInterest.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#getRelevantReplicasCount(Policy.Session,Clause.Condition,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getRelevantReplicasCount(Policy.Session,Clause.Condition,String,String).mjava","sourceNew":"  static int getRelevantReplicasCount(Policy.Session session, Clause.Condition cv, String collection, String shard) {\n    AtomicInteger totalReplicasOfInterest = new AtomicInteger(0);\n    Clause clause = cv.getClause();\n    for (Row row : session.matrix) {\n      row.forEachReplica(replicaInfo -> {\n        if (clause.isMatch(replicaInfo, collection, shard))\n          totalReplicasOfInterest.incrementAndGet();\n      });\n    }\n    return totalReplicasOfInterest.get();\n  }\n\n","sourceOld":"  private static int getRelevantReplicasCount(Policy.Session session, Clause.Condition cv, String collection, String shard) {\n    AtomicInteger totalReplicasOfInterest = new AtomicInteger(0);\n    Clause clause = cv.getClause();\n    for (Row row : session.matrix) {\n      row.forEachReplica(replicaInfo -> {\n        if (clause.isMatch(replicaInfo, collection, shard))\n          totalReplicasOfInterest.incrementAndGet();\n      });\n    }\n    return totalReplicasOfInterest.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6bec22994bec86702ad05304ae983f7be5b5a7"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7d6bec22994bec86702ad05304ae983f7be5b5a7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}