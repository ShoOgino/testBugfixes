{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","sourceNew":"    /**\n     * Shutdown the serving instance\n     * @throws IOException \n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (zkDb != null) {\n        zkDb.close();\n      }\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n      }\n    }\n\n","sourceOld":"    /**\n     * Shutdown the serving instance\n     * @throws IOException \n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (zkDb != null) {\n        zkDb.close();\n      }\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","sourceNew":"    /**\n     * Shutdown the serving instance\n     * @throws IOException \n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (zkDb != null) {\n        zkDb.close();\n      }\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n      }\n    }\n\n","sourceOld":"    /**\n     * Shutdown the serving instance\n     * @throws IOException \n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (zkDb != null) {\n        zkDb.close();\n      }\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","sourceNew":"    /**\n     * Shutdown the serving instance\n     * @throws IOException \n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (zkDb != null) {\n        zkDb.close();\n      }\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n      }\n    }\n\n","sourceOld":"    /**\n     * Shutdown the serving instance\n     * @throws IOException \n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (zkDb != null) {\n        zkDb.close();\n      }\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","sourceNew":"    /**\n     * Shutdown the serving instance\n     * @throws IOException If there is a low-level I/O error.\n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (zkDb != null) {\n        zkDb.close();\n      }\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n      }\n    }\n\n","sourceOld":"    /**\n     * Shutdown the serving instance\n     * @throws IOException \n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (zkDb != null) {\n        zkDb.close();\n      }\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","sourceNew":"    /**\n     * Shutdown the serving instance\n     * @throws IOException If there is a low-level I/O error.\n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n        try {\n          cnxnFactory.join();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      if (zkDb != null) {\n        zkDb.close();\n      }\n    }\n\n","sourceOld":"    /**\n     * Shutdown the serving instance\n     * @throws IOException If there is a low-level I/O error.\n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (zkDb != null) {\n        zkDb.close();\n      }\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n      }\n    }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","sourceNew":"    /**\n     * Shutdown the serving instance\n     * @throws IOException If there is a low-level I/O error.\n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n        try {\n          cnxnFactory.join();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      if (zkDb != null) {\n        zkDb.close();\n      }\n    }\n\n","sourceOld":"    /**\n     * Shutdown the serving instance\n     * @throws IOException If there is a low-level I/O error.\n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (zkDb != null) {\n        zkDb.close();\n      }\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#shutdown().mjava","sourceNew":"    /**\n     * Shutdown the serving instance\n     * @throws IOException If there is a low-level I/O error.\n     */\n    protected void shutdown() throws IOException {\n\n      // shutting down the cnxnFactory will close the zooKeeperServer\n      // zooKeeperServer.shutdown();\n\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      try {\n        if (cnxnFactory != null) {\n          while (true) {\n            cnxnFactory.shutdown();\n            try {\n              cnxnFactory.join();\n              break;\n            } catch (InterruptedException e) {\n              // Thread.currentThread().interrupt();\n              // don't keep interrupted status\n            }\n          }\n        }\n        if (zkDb != null) {\n          zkDb.close();\n        }\n\n        if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n          waitForServerDown(getZkHost(), 30000);\n        }\n      } finally {\n\n        ObjectReleaseTracker.release(this);\n      }\n    }\n\n","sourceOld":"    /**\n     * Shutdown the serving instance\n     * @throws IOException If there is a low-level I/O error.\n     */\n    protected void shutdown() throws IOException {\n      zooKeeperServer.shutdown();\n      ZKDatabase zkDb = zooKeeperServer.getZKDatabase();\n      if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {\n        waitForServerDown(getZkHost() + \":\" + getPort(), 5000);\n      }\n      if (cnxnFactory != null) {\n        cnxnFactory.shutdown();\n        try {\n          cnxnFactory.join();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      if (zkDb != null) {\n        zkDb.close();\n      }\n    }\n\n","bugFix":["d81db427da01a781fb21f0b421c42b039326265d","1416f9d09d016a6894cd17e1caac137dad2bba59","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","1416f9d09d016a6894cd17e1caac137dad2bba59"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}