{"path":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#handleIndividualVersions(List[Long],boolean).mjava","commits":[{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#handleIndividualVersions(List[Long],boolean).mjava","pathOld":"/dev/null","sourceNew":"    private MissedUpdatesRequest handleIndividualVersions(List<Long> otherVersions, boolean completeList) {\n      List<Long> toRequest = new ArrayList<>();\n      for (Long otherVersion : otherVersions) {\n        // stop when the entries get old enough that reorders may lead us to see updates we don't need\n        if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n        if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n          // we either have this update, or already requested it\n          // TODO: what if the shard we previously requested this from returns failure (because it goes\n          // down)\n          continue;\n        }\n\n        toRequest.add(otherVersion);\n        requestedUpdateSet.add(otherVersion);\n      }\n\n      return MissedUpdatesRequest.of(StrUtils.join(toRequest, ','), toRequest.size());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#handleIndividualVersions(List[Long],boolean).mjava","pathOld":"/dev/null","sourceNew":"    private MissedUpdatesRequest handleIndividualVersions(List<Long> otherVersions, boolean completeList) {\n      List<Long> toRequest = new ArrayList<>();\n      for (Long otherVersion : otherVersions) {\n        // stop when the entries get old enough that reorders may lead us to see updates we don't need\n        if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n        if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n          // we either have this update, or already requested it\n          // TODO: what if the shard we previously requested this from returns failure (because it goes\n          // down)\n          continue;\n        }\n\n        toRequest.add(otherVersion);\n        requestedUpdateSet.add(otherVersion);\n      }\n\n      return MissedUpdatesRequest.of(StrUtils.join(toRequest, ','), toRequest.size());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#handleIndividualVersions(List[Long],boolean).mjava","pathOld":"/dev/null","sourceNew":"    private MissedUpdatesRequest handleIndividualVersions(List<Long> otherVersions, boolean completeList) {\n      List<Long> toRequest = new ArrayList<>();\n      for (Long otherVersion : otherVersions) {\n        // stop when the entries get old enough that reorders may lead us to see updates we don't need\n        if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n        if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n          // we either have this update, or already requested it\n          // TODO: what if the shard we previously requested this from returns failure (because it goes\n          // down)\n          continue;\n        }\n\n        toRequest.add(otherVersion);\n        requestedUpdateSet.add(otherVersion);\n      }\n\n      return MissedUpdatesRequest.of(StrUtils.join(toRequest, ','), toRequest.size());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce70cdb9511a671e0e15d4dc93b8334c86b6e681","date":1542017422,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinderBase#handleIndividualVersions(List[Long],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#handleIndividualVersions(List[Long],boolean).mjava","sourceNew":"    MissedUpdatesRequest handleIndividualVersions(List<Long> otherVersions, boolean completeList) {\n      List<Long> toRequest = new ArrayList<>();\n      for (Long otherVersion : otherVersions) {\n        // stop when the entries get old enough that reorders may lead us to see updates we don't need\n        if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n        if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n          // we either have this update, or already requested it\n          // TODO: what if the shard we previously requested this from returns failure (because it goes\n          // down)\n          continue;\n        }\n\n        toRequest.add(otherVersion);\n        requestedUpdateSet.add(otherVersion);\n      }\n\n      return MissedUpdatesRequest.of(StrUtils.join(toRequest, ','), toRequest.size());\n    }\n\n","sourceOld":"    private MissedUpdatesRequest handleIndividualVersions(List<Long> otherVersions, boolean completeList) {\n      List<Long> toRequest = new ArrayList<>();\n      for (Long otherVersion : otherVersions) {\n        // stop when the entries get old enough that reorders may lead us to see updates we don't need\n        if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n        if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n          // we either have this update, or already requested it\n          // TODO: what if the shard we previously requested this from returns failure (because it goes\n          // down)\n          continue;\n        }\n\n        toRequest.add(otherVersion);\n        requestedUpdateSet.add(otherVersion);\n      }\n\n      return MissedUpdatesRequest.of(StrUtils.join(toRequest, ','), toRequest.size());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"ce70cdb9511a671e0e15d4dc93b8334c86b6e681":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ce70cdb9511a671e0e15d4dc93b8334c86b6e681"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ce70cdb9511a671e0e15d4dc93b8334c86b6e681":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ce70cdb9511a671e0e15d4dc93b8334c86b6e681","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}