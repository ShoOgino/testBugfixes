{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#advance(int).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance target=\" + target);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, false);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance target=\" + target);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, false);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed947d41796fd2096684c439e8a9b69aac940cf","date":1321538339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance target=\" + target);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, false);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance target=\" + target);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, false);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance target=\" + target);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, false);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance target=\" + target);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, false);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance target=\" + target);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, false);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance target=\" + target);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, false);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}