{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getNextLevelCells(Shape).mjava","commits":[{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getNextLevelCells(Shape).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the cells at the next grid cell level underneath this one, optionally filtered by\n   * {@code shapeFilter}. The returned cells should have {@link #getShapeRel()} set to\n   * their relation with {@code shapeFilter}.  In addition, for non-points {@link #isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p/>\n   * IMPORTANT: Cells returned from this iterator can be shared, as well as the bytes.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  CellIterator getNextLevelCells(Shape shapeFilter);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getNextLevelCells(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getNextLevelCells(Shape).mjava","sourceNew":"  /**\n   * Gets the cells at the next grid cell level underneath this one, optionally filtered by\n   * {@code shapeFilter}. The returned cells should have {@link #getShapeRel()} set to\n   * their relation with {@code shapeFilter}.  In addition, for non-points {@link #isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p>\n   * IMPORTANT: Cells returned from this iterator can be shared, as well as the bytes.\n   * <p>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  CellIterator getNextLevelCells(Shape shapeFilter);\n\n","sourceOld":"  /**\n   * Gets the cells at the next grid cell level underneath this one, optionally filtered by\n   * {@code shapeFilter}. The returned cells should have {@link #getShapeRel()} set to\n   * their relation with {@code shapeFilter}.  In addition, for non-points {@link #isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p/>\n   * IMPORTANT: Cells returned from this iterator can be shared, as well as the bytes.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  CellIterator getNextLevelCells(Shape shapeFilter);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getNextLevelCells(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getNextLevelCells(Shape).mjava","sourceNew":"  /**\n   * Gets the cells at the next grid cell level underneath this one, optionally filtered by\n   * {@code shapeFilter}. The returned cells should have {@link #getShapeRel()} set to\n   * their relation with {@code shapeFilter}.  In addition, for non-points {@link #isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p>\n   * IMPORTANT: Cells returned from this iterator can be shared, as well as the bytes.\n   * <p>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  CellIterator getNextLevelCells(Shape shapeFilter);\n\n","sourceOld":"  /**\n   * Gets the cells at the next grid cell level underneath this one, optionally filtered by\n   * {@code shapeFilter}. The returned cells should have {@link #getShapeRel()} set to\n   * their relation with {@code shapeFilter}.  In addition, for non-points {@link #isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p>\n   * IMPORTANT: Cells returned from this iterator can be shared, as well as the bytes.\n   * <p>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  CellIterator getNextLevelCells(Shape shapeFilter);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getNextLevelCells(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getNextLevelCells(Shape).mjava","sourceNew":"  /**\n   * Gets the cells at the next grid cell level underneath this one, optionally filtered by\n   * {@code shapeFilter}. The returned cells should have {@link #getShapeRel()} set to\n   * their relation with {@code shapeFilter}.  In addition, for non-points {@link #isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p>\n   * IMPORTANT: Cells returned from this iterator can be shared, as well as the bytes.\n   * <p>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  CellIterator getNextLevelCells(Shape shapeFilter);\n\n","sourceOld":"  /**\n   * Gets the cells at the next grid cell level underneath this one, optionally filtered by\n   * {@code shapeFilter}. The returned cells should have {@link #getShapeRel()} set to\n   * their relation with {@code shapeFilter}.  In addition, for non-points {@link #isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p>\n   * IMPORTANT: Cells returned from this iterator can be shared, as well as the bytes.\n   * <p>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  CellIterator getNextLevelCells(Shape shapeFilter);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["14600834a1fbc7c12faf344466e00cca8cc67de4","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}