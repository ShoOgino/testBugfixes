{"path":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","commits":[{"id":"4d407445fd90f1db48b495a5a86957e999836701","date":1014411551,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * ({field1}:{query}) ({field2}:{query}) ({field3}:{query})...({fieldx}:{query})\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParserException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, false, false);\n        }\n        return bQuery;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bda318649f764d9c0ccbb2a2e8ba0c7c22a87b18","date":1016767353,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParserException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, false, false);\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * ({field1}:{query}) ({field2}:{query}) ({field3}:{query})...({fieldx}:{query})\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParserException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, false, false);\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0859992fd49ca637e9f00011fa4b0281196a9c58","date":1065658314,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, false, false);\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParserException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, false, false);\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2a35410e365d9b0027637c577b72b8a6f96ce85","date":1093643417,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, false, false);\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0","date":1102865269,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @deprecated use {@link #parse(String)} instead\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e900489ad1a2c8cad93069388c03f601b1a441d0","date":1102865793,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","sourceNew":"    /**\n     * <p>Parses a query which searches on the fields specified.\n     * If x fields are specified, this effectively constructs:</p>\n     *\n     * <code>\n     * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n     * </code>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @deprecated use {@link #parse(String)} instead but note that it\n     *  returns a different query for queries where all terms are required:\n     *  its query excepts all terms, no matter in what field they occur whereas\n     *  the query built by this (deprecated) method expected all terms in all fields \n     *  at the same time.\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @deprecated use {@link #parse(String)} instead\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aae9fe64c5e6de1908855356afc05d7eb82903f","date":1121973155,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * If x fields are specified, this effectively constructs:\n   *\n   * <code>\n   * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n   * </code>\n   *\n   * @param query Query string to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws TokenMgrError if query parsing fails\n   * @deprecated use {@link #parse(String)} instead but note that it\n   *  returns a different query for queries where all terms are required:\n   *  its query excepts all terms, no matter in what field they occur whereas\n   *  the query built by this (deprecated) method expected all terms in all fields \n   *  at the same time.\n   */\n  public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n  {\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      Query q = parse(query, fields[i], analyzer);\n      bQuery.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return bQuery;\n  }\n\n","sourceOld":"    /**\n     * <p>Parses a query which searches on the fields specified.\n     * If x fields are specified, this effectively constructs:</p>\n     *\n     * <code>\n     * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n     * </code>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @deprecated use {@link #parse(String)} instead but note that it\n     *  returns a different query for queries where all terms are required:\n     *  its query excepts all terms, no matter in what field they occur whereas\n     *  the query built by this (deprecated) method expected all terms in all fields \n     *  at the same time.\n     */\n    public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses a query which searches on the fields specified.\n   * If x fields are specified, this effectively constructs:\n   *\n   * <code>\n   * (field1:query) (field2:query) (field3:query)...(fieldx:query)\n   * </code>\n   *\n   * @param query Query string to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws TokenMgrError if query parsing fails\n   * @deprecated use {@link #parse(String)} instead but note that it\n   *  returns a different query for queries where all terms are required:\n   *  its query excepts all terms, no matter in what field they occur whereas\n   *  the query built by this (deprecated) method expected all terms in all fields \n   *  at the same time.\n   */\n  public static Query parse(String query, String[] fields, Analyzer analyzer)\n\tthrows ParseException\n  {\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      Query q = parse(query, fields[i], analyzer);\n      bQuery.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6aae9fe64c5e6de1908855356afc05d7eb82903f":["e900489ad1a2c8cad93069388c03f601b1a441d0"],"0859992fd49ca637e9f00011fa4b0281196a9c58":["bda318649f764d9c0ccbb2a2e8ba0c7c22a87b18"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["6aae9fe64c5e6de1908855356afc05d7eb82903f"],"e900489ad1a2c8cad93069388c03f601b1a441d0":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"bda318649f764d9c0ccbb2a2e8ba0c7c22a87b18":["4d407445fd90f1db48b495a5a86957e999836701"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["b2a35410e365d9b0027637c577b72b8a6f96ce85"],"4d407445fd90f1db48b495a5a86957e999836701":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b2a35410e365d9b0027637c577b72b8a6f96ce85":["0859992fd49ca637e9f00011fa4b0281196a9c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"6aae9fe64c5e6de1908855356afc05d7eb82903f":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"0859992fd49ca637e9f00011fa4b0281196a9c58":["b2a35410e365d9b0027637c577b72b8a6f96ce85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e900489ad1a2c8cad93069388c03f601b1a441d0":["6aae9fe64c5e6de1908855356afc05d7eb82903f"],"bda318649f764d9c0ccbb2a2e8ba0c7c22a87b18":["0859992fd49ca637e9f00011fa4b0281196a9c58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d407445fd90f1db48b495a5a86957e999836701"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["e900489ad1a2c8cad93069388c03f601b1a441d0"],"4d407445fd90f1db48b495a5a86957e999836701":["bda318649f764d9c0ccbb2a2e8ba0c7c22a87b18"],"b2a35410e365d9b0027637c577b72b8a6f96ce85":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}