{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#nextNonLeaf().mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"/dev/null","sourceNew":"  public boolean nextNonLeaf() {\n    // if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.length = prefix + suffix;\n    if (ste.term.bytes.length < ste.term.length) {\n      ste.term.grow(ste.term.length);\n    }\n    suffixesReader.readBytes(ste.term.bytes, prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      termOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      termOrd += suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      // if (DEBUG) {\n      //   System.out.println(\"    lastSubFP=\" + lastSubFP);\n      // }\n      return true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() {\n    // if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.setLength(prefix + suffix);\n    ste.term.grow(ste.term.length());\n    suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      termOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      termOrd += suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      // if (DEBUG) {\n      //   System.out.println(\"    lastSubFP=\" + lastSubFP);\n      // }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() {\n    // if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.length = prefix + suffix;\n    if (ste.term.bytes.length < ste.term.length) {\n      ste.term.grow(ste.term.length);\n    }\n    suffixesReader.readBytes(ste.term.bytes, prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      termOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      termOrd += suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      // if (DEBUG) {\n      //   System.out.println(\"    lastSubFP=\" + lastSubFP);\n      // }\n      return true;\n    }\n  }\n\n","bugFix":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}