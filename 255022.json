{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#next().mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#next().mjava","pathOld":"/dev/null","sourceNew":"  public Token next() throws IOException {\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = bufferInput.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // 找到了句子末尾\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = bufferInput.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = bufferInput.read();\n        ch = (char) ci;\n        // 如果碰上了两个连续的skip字符，例如两个回车，两个空格或者，\n        // 一个回车，一个空格等等，将其视为句子结束，以免句子太长而内存不足\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return null;\n    else {\n      t.clear();\n      t.reinit(buffer.toString(), tokenStart, tokenEnd, \"sentence\");\n      return t;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2","date":1245784531,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#next().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#next().mjava","sourceNew":"  public Token next() throws IOException {\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = bufferInput.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // 找到了句子末尾\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = bufferInput.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = bufferInput.read();\n        ch = (char) ci;\n        // 如果碰上了两个连续的skip字符，例如两个回车，两个空格或者，\n        // 一个回车，一个空格等等，将其视为句子结束，以免句子太长而内存不足\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return null;\n    else {\n      t.clear();\n      t.reinit(buffer.toString(), input.correctOffset(tokenStart), input.correctOffset(tokenEnd), \"sentence\");\n      return t;\n    }\n  }\n\n","sourceOld":"  public Token next() throws IOException {\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = bufferInput.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // 找到了句子末尾\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = bufferInput.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = bufferInput.read();\n        ch = (char) ci;\n        // 如果碰上了两个连续的skip字符，例如两个回车，两个空格或者，\n        // 一个回车，一个空格等等，将其视为句子结束，以免句子太长而内存不足\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return null;\n    else {\n      t.clear();\n      t.reinit(buffer.toString(), tokenStart, tokenEnd, \"sentence\");\n      return t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be5ef2f970a6c1141562b06dd26ed04c3dc29d70","date":1246444343,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#next().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#next().mjava","sourceNew":"  public Token next() throws IOException {\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = bufferInput.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = bufferInput.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = bufferInput.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return null;\n    else {\n      t.clear();\n      t.reinit(buffer.toString(), input.correctOffset(tokenStart), input.correctOffset(tokenEnd), \"sentence\");\n      return t;\n    }\n  }\n\n","sourceOld":"  public Token next() throws IOException {\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = bufferInput.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // 找到了句子末尾\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = bufferInput.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = bufferInput.read();\n        ch = (char) ci;\n        // 如果碰上了两个连续的skip字符，例如两个回车，两个空格或者，\n        // 一个回车，一个空格等等，将其视为句子结束，以免句子太长而内存不足\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return null;\n    else {\n      t.clear();\n      t.reinit(buffer.toString(), input.correctOffset(tokenStart), input.correctOffset(tokenEnd), \"sentence\");\n      return t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#next().mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return null;\n    else {\n      reusableToken.clear();\n      reusableToken.reinit(buffer.toString(), input.correctOffset(tokenStart), input.correctOffset(tokenEnd), \"sentence\");\n      return reusableToken;\n    }\n  }\n\n","sourceOld":"  public Token next() throws IOException {\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = bufferInput.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = bufferInput.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = bufferInput.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return null;\n    else {\n      t.clear();\n      t.reinit(buffer.toString(), input.correctOffset(tokenStart), input.correctOffset(tokenEnd), \"sentence\");\n      return t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["05ff0cc6e864c7d71a48579f2acfca4f58943568"]},"commit2Childs":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}