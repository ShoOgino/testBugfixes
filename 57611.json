{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","commits":[{"id":"79509167584beb75c0b777d2b701adeb1f06d885","date":1441841855,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"/dev/null","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = (long)bucket.get(\"count\");\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"071baff2e8ccdf4709b106e0c0f720868fd7b444","date":1463622773,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = (long)bucket.get(\"count\");\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = (long)bucket.get(\"count\");\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eb10453c4217aa50392c51e3e89deb8b779bd51","date":1463648949,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = (long)bucket.get(\"count\");\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = (long)bucket.get(\"count\");\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = (long)bucket.get(\"count\");\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = (long)bucket.get(\"count\");\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029","date":1464287977,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = (long)bucket.get(\"count\");\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":["79509167584beb75c0b777d2b701adeb1f06d885"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = (long)bucket.get(\"count\");\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = (long)bucket.get(\"count\");\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            t.put(identifier, d);\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b4e21f270c812affb9d34da7e81113045b05e0","date":1497389490,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1a7f6770040ad89221dd0ae0cae091e79a1b16","date":1504635259,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            Number d = ((Number)bucket.get(\"facet_\"+m));\n            if(metric.outputLong) {\n              if (d instanceof Long || d instanceof Integer) {\n                t.put(identifier, d.longValue());\n              } else {\n                t.put(identifier, Math.round(d.doubleValue()));\n              }\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            Number d = ((Number)bucket.get(\"facet_\"+m));\n            if(metric.outputLong) {\n              if (d instanceof Long || d instanceof Integer) {\n                t.put(identifier, d.longValue());\n              } else {\n                t.put(identifier, Math.round(d.doubleValue()));\n              }\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            Number d = ((Number)bucket.get(\"facet_\"+m));\n            if(metric.outputLong) {\n              if (d instanceof Long || d instanceof Integer) {\n                t.put(identifier, d.longValue());\n              } else {\n                t.put(identifier, Math.round(d.doubleValue()));\n              }\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            Number d = ((Number)bucket.get(\"facet_\"+m));\n            if(metric.outputLong) {\n              if (d instanceof Long || d instanceof Integer) {\n                t.put(identifier, d.longValue());\n              } else {\n                t.put(identifier, Math.round(d.doubleValue()));\n              }\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            double d = (double)bucket.get(\"facet_\"+m);\n            if(metric.outputLong) {\n              t.put(identifier, Math.round(d));\n            } else {\n              t.put(identifier, d);\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#fillTuples(int,List[Tuple],Tuple,NamedList,Bucket[],Metric[]).mjava","sourceNew":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          @SuppressWarnings({\"rawtypes\"}) NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            Number d = ((Number)bucket.get(\"facet_\"+m));\n            if(metric.outputLong) {\n              if (d instanceof Long || d instanceof Integer) {\n                t.put(identifier, d.longValue());\n              } else {\n                t.put(identifier, Math.round(d.doubleValue()));\n              }\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","sourceOld":"  private void fillTuples(int level,\n                          List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          Bucket[] _buckets,\n                          Metric[] _metrics) {\n\n    String bucketName = _buckets[level].toString();\n    NamedList nl = (NamedList)facets.get(bucketName);\n    if(nl == null) {\n      return;\n    }\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      if (val instanceof Integer) {\n        val=((Integer)val).longValue();  // calcite currently expects Long values here\n      }\n      Tuple t = currentTuple.clone();\n      t.put(bucketName, val);\n      int nextLevel = level+1;\n      if(nextLevel<_buckets.length) {\n        fillTuples(nextLevel,\n                   tuples,\n                   t.clone(),\n                   bucket,\n                   _buckets,\n                   _metrics);\n      } else {\n        int m = 0;\n        for(Metric metric : _metrics) {\n          String identifier = metric.getIdentifier();\n          if(!identifier.startsWith(\"count(\")) {\n            Number d = ((Number)bucket.get(\"facet_\"+m));\n            if(metric.outputLong) {\n              if (d instanceof Long || d instanceof Integer) {\n                t.put(identifier, d.longValue());\n              } else {\n                t.put(identifier, Math.round(d.doubleValue()));\n              }\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n            ++m;\n          } else {\n            long l = ((Number)bucket.get(\"count\")).longValue();\n            t.put(\"count(*)\", l);\n          }\n        }\n        tuples.add(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1eb10453c4217aa50392c51e3e89deb8b779bd51":["79509167584beb75c0b777d2b701adeb1f06d885","071baff2e8ccdf4709b106e0c0f720868fd7b444"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["28288370235ed02234a64753cdbf0c6ec096304a","7a1a7f6770040ad89221dd0ae0cae091e79a1b16"],"79509167584beb75c0b777d2b701adeb1f06d885":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["79509167584beb75c0b777d2b701adeb1f06d885"],"a6b4e21f270c812affb9d34da7e81113045b05e0":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"83870855d82aba6819217abeff5a40779dbb28b4":["d470c8182e92b264680e34081b75e70a9f2b3c89","c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"28288370235ed02234a64753cdbf0c6ec096304a":["d9fe3175bbaa122d67f736a75c2984617c502cc0","a6b4e21f270c812affb9d34da7e81113045b05e0"],"7a1a7f6770040ad89221dd0ae0cae091e79a1b16":["28288370235ed02234a64753cdbf0c6ec096304a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["79509167584beb75c0b777d2b701adeb1f06d885","c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["79509167584beb75c0b777d2b701adeb1f06d885","1eb10453c4217aa50392c51e3e89deb8b779bd51"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"a9b741b54c163686a5fd077895a797daa9b0b95f":["c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["28288370235ed02234a64753cdbf0c6ec096304a","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a9b741b54c163686a5fd077895a797daa9b0b95f","a6b4e21f270c812affb9d34da7e81113045b05e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"1eb10453c4217aa50392c51e3e89deb8b779bd51":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"79509167584beb75c0b777d2b701adeb1f06d885":["1eb10453c4217aa50392c51e3e89deb8b779bd51","071baff2e8ccdf4709b106e0c0f720868fd7b444","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["1eb10453c4217aa50392c51e3e89deb8b779bd51"],"a6b4e21f270c812affb9d34da7e81113045b05e0":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b21283ed01203901a7257aa4b7f0a0899c86e56e","7a1a7f6770040ad89221dd0ae0cae091e79a1b16","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"7a1a7f6770040ad89221dd0ae0cae091e79a1b16":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["83870855d82aba6819217abeff5a40779dbb28b4","c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"a9b741b54c163686a5fd077895a797daa9b0b95f":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["a6b4e21f270c812affb9d34da7e81113045b05e0","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79509167584beb75c0b777d2b701adeb1f06d885"],"c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}