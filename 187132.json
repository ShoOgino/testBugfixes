{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(int,int,int,int).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Overwrite this method, if you like to receive the raw int range bounds.\n     * You can use this for e.g. debugging purposes (print out range bounds).\n     */\n    public void addRange(final int precisionStep, final int min, final int max, final int shift) {\n      /*System.out.println(Integer.toHexString((min^0x80000000) >>> shift)+\"..\"+\n        Integer.toHexString((max^0x80000000) >>> shift));*/\n      addRange(intToPrefixCoded(min, shift), intToPrefixCoded(max, shift), shift/precisionStep);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08566707eaac91c2a59f35d09c29d3423b8b0caf","date":1235326633,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(int,int,int,int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(int,int,int,int).mjava","sourceNew":"    /**\n     * Overwrite this method, if you like to receive the raw int range bounds.\n     * You can use this for e.g. debugging purposes (print out range bounds).\n     */\n    public void addRange(final int min, final int max, final int shift, final int level) {\n      /*System.out.println(Integer.toHexString((min^0x80000000) >>> shift)+\"..\"+\n        Integer.toHexString((max^0x80000000) >>> shift));*/\n      addRange(intToPrefixCoded(min, shift), intToPrefixCoded(max, shift), level);\n    }\n\n","sourceOld":"    /**\n     * Overwrite this method, if you like to receive the raw int range bounds.\n     * You can use this for e.g. debugging purposes (print out range bounds).\n     */\n    public void addRange(final int precisionStep, final int min, final int max, final int shift) {\n      /*System.out.println(Integer.toHexString((min^0x80000000) >>> shift)+\"..\"+\n        Integer.toHexString((max^0x80000000) >>> shift));*/\n      addRange(intToPrefixCoded(min, shift), intToPrefixCoded(max, shift), shift/precisionStep);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(int,int,int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(int,int,int,int).mjava","sourceNew":"    /**\n     * Overwrite this method, if you like to receive the raw int range bounds.\n     * You can use this for e.g. debugging purposes (print out range bounds).\n     */\n    public void addRange(final int min, final int max, final int shift) {\n      addRange(intToPrefixCoded(min, shift), intToPrefixCoded(max, shift));\n    }\n\n","sourceOld":"    /**\n     * Overwrite this method, if you like to receive the raw int range bounds.\n     * You can use this for e.g. debugging purposes (print out range bounds).\n     */\n    public void addRange(final int min, final int max, final int shift, final int level) {\n      /*System.out.println(Integer.toHexString((min^0x80000000) >>> shift)+\"..\"+\n        Integer.toHexString((max^0x80000000) >>> shift));*/\n      addRange(intToPrefixCoded(min, shift), intToPrefixCoded(max, shift), level);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["08566707eaac91c2a59f35d09c29d3423b8b0caf"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08566707eaac91c2a59f35d09c29d3423b8b0caf":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"]},"commit2Childs":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["08566707eaac91c2a59f35d09c29d3423b8b0caf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"08566707eaac91c2a59f35d09c29d3423b8b0caf":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}