{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","commits":[{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num)\n      throws MalformedURLException, SolrServerException, IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n        baseUrl);\n    Create createCmd = new Create();\n    createCmd.setCoreName(collection + num);\n    createCmd.setCollection(collection);\n    createCmd.setNumShards(2);\n    createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n        + collection + num);\n    server.request(createCmd);\n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["99a533edf1b9ea2c1b85e012d6e826545389e9c8","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99a533edf1b9ea2c1b85e012d6e826545389e9c8","date":1329256696,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num)\n      throws MalformedURLException, SolrServerException, IOException {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num)\n      throws MalformedURLException, SolrServerException, IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n        baseUrl);\n    Create createCmd = new Create();\n    createCmd.setCoreName(collection + num);\n    createCmd.setCollection(collection);\n    createCmd.setNumShards(2);\n    createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n        + collection + num);\n    server.request(createCmd);\n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"bugIntro":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8","date":1329853856,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num)\n      throws MalformedURLException, SolrServerException, IOException, InterruptedException {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num)\n      throws MalformedURLException, SolrServerException, IOException {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num)\n      throws MalformedURLException, SolrServerException, IOException, InterruptedException {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num)\n      throws MalformedURLException, SolrServerException, IOException {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num) {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num)\n      throws MalformedURLException, SolrServerException, IOException, InterruptedException {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","bugFix":["6101715a4732c1fe39eae50ce4a23fec6fc270d0","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num) {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num)\n      throws MalformedURLException, SolrServerException, IOException, InterruptedException {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num) {\n    createSolrCore(collection, collectionClients, baseUrl, num, null);\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num) {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","bugFix":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num) {\n    createSolrCore(collection, collectionClients, baseUrl, num, null);\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num) {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num) {\n    createSolrCore(collection, collectionClients, baseUrl, num, null);\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num) {\n    createCollection(collection, collectionClients, baseUrl, num, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrClient],String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int).mjava","sourceNew":"  private void createCollection(String collection,\n      List<SolrClient> collectionClients, String baseUrl, int num) {\n    createSolrCore(collection, collectionClients, baseUrl, num, null);\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num) {\n    createSolrCore(collection, collectionClients, baseUrl, num, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["99a533edf1b9ea2c1b85e012d6e826545389e9c8","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"d82832af39f94dbb58a3130fd216ff1d49435589":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"bafca15d8e408346a67f4282ad1143b88023893b":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d82832af39f94dbb58a3130fd216ff1d49435589","fe33227f6805edab2036cbb80645cc4e2d1fa424","db4fdbf3d262768eabc027cd8321edca0cd11fa8","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d82832af39f94dbb58a3130fd216ff1d49435589","fe33227f6805edab2036cbb80645cc4e2d1fa424","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}