{"path":"src/java/org/apache/solr/search/HashDocSet#intersectionSize(DocSet).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/HashDocSet#intersectionSize(DocSet).mjava","pathOld":"/dev/null","sourceNew":"  public int intersectionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=0;\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=0;\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40315af5cee91832c085cc5a17c468000dbe8297","date":1149988547,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/HashDocSet#intersectionSize(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/HashDocSet#intersectionSize(DocSet).mjava","sourceNew":"  @Override\n  public int intersectionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=0;\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=0;\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n\n  }\n\n","sourceOld":"  public int intersectionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=0;\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=0;\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"280ae26026909c359d527e517864805ec8982963","date":1149994510,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/HashDocSet#intersectionSize(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/HashDocSet#intersectionSize(DocSet).mjava","sourceNew":"  @Override\n  public int intersectionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=0;\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=0;\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n    \n  }\n\n","sourceOld":"  @Override\n  public int intersectionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=0;\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=0;\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e97c9c9ecb6ca9b558635bc9787f15f4cf19040","date":1169358391,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/HashDocSet#intersectionSize(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/HashDocSet#intersectionSize(DocSet).mjava","sourceNew":"  @Override\n  public int intersectionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=0;\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=0;\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n\n  }\n\n","sourceOld":"  @Override\n  public int intersectionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=0;\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=0;\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/HashDocSet#intersectionSize(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/HashDocSet#intersectionSize(DocSet).mjava","sourceNew":"  @Override\n  public int intersectionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=0;\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=0;\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n\n  }\n\n","sourceOld":"  @Override\n  public int intersectionSize(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set for the most efficient\n     // intersection.\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int resultCount=0;\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id >= 0 && b.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   } else {\n     int resultCount=0;\n     for (int i=0; i<table.length; i++) {\n       int id=table[i];\n       if (id >= 0 && other.exists(id)) {\n         resultCount++;\n       }\n     }\n     return resultCount;\n   }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"280ae26026909c359d527e517864805ec8982963":["40315af5cee91832c085cc5a17c468000dbe8297"],"40315af5cee91832c085cc5a17c468000dbe8297":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0e97c9c9ecb6ca9b558635bc9787f15f4cf19040"],"0e97c9c9ecb6ca9b558635bc9787f15f4cf19040":["280ae26026909c359d527e517864805ec8982963"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["40315af5cee91832c085cc5a17c468000dbe8297"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"280ae26026909c359d527e517864805ec8982963":["0e97c9c9ecb6ca9b558635bc9787f15f4cf19040"],"40315af5cee91832c085cc5a17c468000dbe8297":["280ae26026909c359d527e517864805ec8982963"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"0e97c9c9ecb6ca9b558635bc9787f15f4cf19040":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}