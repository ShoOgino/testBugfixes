{"path":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#listStatus(Path).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#listStatus(Path).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   *\n   * (<b>Note</b>: Returned list is not sorted in any given order,\n   * due to reliance on Java's {@link File#list()} API.)\n   */\n  @Override\n  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf = pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n\n    if (localf.isDirectory()) {\n      String[] names = FileUtil.list(localf);\n      results = new FileStatus[names.length];\n      int j = 0;\n      for (int i = 0; i < names.length; i++) {\n        try {\n          // Assemble the path using the Path 3 arg constructor to make sure\n          // paths with colon are properly resolved on Linux\n          results[j] = getFileStatus(new Path(f, new Path(null, null,\n              names[i])));\n          j++;\n        } catch (FileNotFoundException e) {\n          // ignore the files not found since the dir list may have have\n          // changed since the names[] list was generated.\n        }\n      }\n      if (j == names.length) {\n        return results;\n      }\n      return Arrays.copyOf(results, j);\n    }\n\n    if (!useDeprecatedFileStatus) {\n      return new FileStatus[] { getFileStatus(f) };\n    }\n    return new FileStatus[] {\n        new DeprecatedRawLocalFileStatus(localf,\n            getDefaultBlockSize(f), this) };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#listStatus(Path).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   *\n   * (<b>Note</b>: Returned list is not sorted in any given order,\n   * due to reliance on Java's {@link File#list()} API.)\n   */\n  @Override\n  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf = pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n\n    if (localf.isDirectory()) {\n      String[] names = FileUtil.list(localf);\n      results = new FileStatus[names.length];\n      int j = 0;\n      for (int i = 0; i < names.length; i++) {\n        try {\n          // Assemble the path using the Path 3 arg constructor to make sure\n          // paths with colon are properly resolved on Linux\n          results[j] = getFileStatus(new Path(f, new Path(null, null,\n              names[i])));\n          j++;\n        } catch (FileNotFoundException e) {\n          // ignore the files not found since the dir list may have have\n          // changed since the names[] list was generated.\n        }\n      }\n      if (j == names.length) {\n        return results;\n      }\n      return Arrays.copyOf(results, j);\n    }\n\n    if (!useDeprecatedFileStatus) {\n      return new FileStatus[] { getFileStatus(f) };\n    }\n    return new FileStatus[] {\n        new DeprecatedRawLocalFileStatus(localf,\n            getDefaultBlockSize(f), this) };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}