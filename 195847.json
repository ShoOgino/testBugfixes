{"path":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesComparator().mjava","commits":[{"id":"a2576170b353998ba9157b6d148ebfde21138316","date":1523488980,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesComparator().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testNodePreferenceRulesComparator() throws Exception {\n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.add(\n      new Replica(\n        \"node1\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host1:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"NRT\"\n        )\n      )\n    );\n    replicas.add(\n      new Replica(\n        \"node2\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node2\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n    replicas.add(\n      new Replica(\n        \"node3\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node3\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"PULL\"\n        )\n      )\n    );\n\n    // Simple replica type rule\n    List<String> rules = StrUtils.splitSmart(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG\", \n      ','\n    );\n    HttpShardHandlerFactory.NodePreferenceRulesComparator comparator = \n      new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n\n    // Another simple replica type rule\n    rules = StrUtils.splitSmart(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT\", \n      ','\n    );\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // replicaLocation rule\n    rules = StrUtils.splitSmart(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2:8983\", ',');\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // Add a replica so that sorting by replicaType:TLOG can cause a tie\n    replicas.add(\n      new Replica(\n        \"node4\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node4\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n\n    // replicaType and replicaLocation combined rule\n    rules = StrUtils.splitSmart(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\", \n      ','\n    );\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    // Bad rule\n    rules = StrUtils.splitSmart(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE, ',');\n    try {\n      comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n      replicas.sort(comparator);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference rule: \" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE, e.getMessage());\n    }\n\n    // Unknown rule\n    rules = StrUtils.splitSmart(\"badRule:test\", ',');\n    try {\n      comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n      replicas.sort(comparator);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference type: badRule\", e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5a9deac6e313e80a1f56468e14bb4c491b83d7","date":1523529596,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesComparator().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testNodePreferenceRulesComparator() throws Exception {\n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.add(\n      new Replica(\n        \"node1\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host1:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"NRT\"\n        )\n      )\n    );\n    replicas.add(\n      new Replica(\n        \"node2\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node2\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n    replicas.add(\n      new Replica(\n        \"node3\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node3\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"PULL\"\n        )\n      )\n    );\n\n    // Simple replica type rule\n    List<String> rules = StrUtils.splitSmart(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG\", \n      ','\n    );\n    HttpShardHandlerFactory.NodePreferenceRulesComparator comparator = \n      new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n\n    // Another simple replica type rule\n    rules = StrUtils.splitSmart(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT\", \n      ','\n    );\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // replicaLocation rule\n    rules = StrUtils.splitSmart(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2:8983\", ',');\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // Add a replica so that sorting by replicaType:TLOG can cause a tie\n    replicas.add(\n      new Replica(\n        \"node4\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node4\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n\n    // replicaType and replicaLocation combined rule\n    rules = StrUtils.splitSmart(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\", \n      ','\n    );\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    // Bad rule\n    rules = StrUtils.splitSmart(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE, ',');\n    try {\n      comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n      replicas.sort(comparator);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference rule: \" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE, e.getMessage());\n    }\n\n    // Unknown rule\n    rules = StrUtils.splitSmart(\"badRule:test\", ',');\n    try {\n      comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n      replicas.sort(comparator);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference type: badRule\", e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"033183e9e2da4609614733f0226a38c88c49ed36","date":1557334549,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesComparator().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesComparator().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testNodePreferenceRulesComparator() throws Exception {\n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.add(\n      new Replica(\n        \"node1\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host1:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"NRT\"\n        )\n      )\n    );\n    replicas.add(\n      new Replica(\n        \"node2\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node2\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n    replicas.add(\n      new Replica(\n        \"node3\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node3\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"PULL\"\n        )\n      )\n    );\n\n    // Simple replica type rule\n    List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG\");\n    HttpShardHandlerFactory.NodePreferenceRulesComparator comparator = \n      new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n\n    // Another simple replica type rule\n    rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // replicaLocation rule\n    rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2:8983\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // Add a replica so that sorting by replicaType:TLOG can cause a tie\n    replicas.add(\n      new Replica(\n        \"node4\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node4\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n\n    // replicaType and replicaLocation combined rule\n    rules = PreferenceRule.from(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    // Bad rule\n\n    try {\n      rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference rule: \" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE, e.getMessage());\n    }\n\n    // Unknown rule\n    rules = PreferenceRule.from(\"badRule:test\");\n    try {\n      comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n      replicas.sort(comparator);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference type: badRule\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testNodePreferenceRulesComparator() throws Exception {\n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.add(\n      new Replica(\n        \"node1\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host1:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"NRT\"\n        )\n      )\n    );\n    replicas.add(\n      new Replica(\n        \"node2\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node2\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n    replicas.add(\n      new Replica(\n        \"node3\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node3\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"PULL\"\n        )\n      )\n    );\n\n    // Simple replica type rule\n    List<String> rules = StrUtils.splitSmart(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG\", \n      ','\n    );\n    HttpShardHandlerFactory.NodePreferenceRulesComparator comparator = \n      new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n\n    // Another simple replica type rule\n    rules = StrUtils.splitSmart(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT\", \n      ','\n    );\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // replicaLocation rule\n    rules = StrUtils.splitSmart(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2:8983\", ',');\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // Add a replica so that sorting by replicaType:TLOG can cause a tie\n    replicas.add(\n      new Replica(\n        \"node4\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node4\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n\n    // replicaType and replicaLocation combined rule\n    rules = StrUtils.splitSmart(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\", \n      ','\n    );\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    // Bad rule\n    rules = StrUtils.splitSmart(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE, ',');\n    try {\n      comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n      replicas.sort(comparator);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference rule: \" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE, e.getMessage());\n    }\n\n    // Unknown rule\n    rules = StrUtils.splitSmart(\"badRule:test\", ',');\n    try {\n      comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n      replicas.sort(comparator);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference type: badRule\", e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78d42a7a80ee59932aca8a1fe42b53cf202e75ad","date":1566412272,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesComparator().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesComparator().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testNodePreferenceRulesComparator() throws Exception {\n    List<Replica> replicas = getBasicReplicaList();\n\n    // Simple replica type rule\n    List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG\");\n    HttpShardHandlerFactory.NodePreferenceRulesComparator comparator = \n      new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n\n    // Another simple replica type rule\n    rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // replicaLocation rule\n    rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2:8983\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // Add a replica so that sorting by replicaType:TLOG can cause a tie\n    replicas.add(\n      new Replica(\n        \"node4\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node4\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n\n    // replicaType and replicaLocation combined rule\n    rules = PreferenceRule.from(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    // Bad rule\n\n    try {\n      rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference rule: \" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE, e.getMessage());\n    }\n\n    // Unknown rule\n    rules = PreferenceRule.from(\"badRule:test\");\n    try {\n      comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n      replicas.sort(comparator);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference type: badRule\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testNodePreferenceRulesComparator() throws Exception {\n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.add(\n      new Replica(\n        \"node1\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host1:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"NRT\"\n        )\n      )\n    );\n    replicas.add(\n      new Replica(\n        \"node2\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node2\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n    replicas.add(\n      new Replica(\n        \"node3\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node3\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"PULL\"\n        )\n      )\n    );\n\n    // Simple replica type rule\n    List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG\");\n    HttpShardHandlerFactory.NodePreferenceRulesComparator comparator = \n      new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n\n    // Another simple replica type rule\n    rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // replicaLocation rule\n    rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2:8983\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // Add a replica so that sorting by replicaType:TLOG can cause a tie\n    replicas.add(\n      new Replica(\n        \"node4\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node4\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n\n    // replicaType and replicaLocation combined rule\n    rules = PreferenceRule.from(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    // Bad rule\n\n    try {\n      rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference rule: \" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE, e.getMessage());\n    }\n\n    // Unknown rule\n    rules = PreferenceRule.from(\"badRule:test\");\n    try {\n      comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n      replicas.sort(comparator);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference type: badRule\", e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesComparator().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testNodePreferenceRulesComparator() throws Exception {\n    List<Replica> replicas = getBasicReplicaList();\n\n    // Simple replica type rule\n    List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG\");\n    HttpShardHandlerFactory.NodePreferenceRulesComparator comparator = \n      new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n\n    // Another simple replica type rule\n    rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // replicaLocation rule\n    rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2:8983\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n\n    // Add a replica so that sorting by replicaType:TLOG can cause a tie\n    replicas.add(\n      new Replica(\n        \"node4\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node4\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n\n    // replicaType and replicaLocation combined rule\n    rules = PreferenceRule.from(\n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    // Bad rule\n\n    try {\n      rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference rule: \" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE, e.getMessage());\n    }\n\n    // Unknown rule\n    rules = PreferenceRule.from(\"badRule:test\");\n    try {\n      comparator = new HttpShardHandlerFactory.NodePreferenceRulesComparator(rules, null);\n      replicas.sort(comparator);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Invalid shards.preference type: badRule\", e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a2576170b353998ba9157b6d148ebfde21138316"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["033183e9e2da4609614733f0226a38c88c49ed36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2576170b353998ba9157b6d148ebfde21138316":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"],"033183e9e2da4609614733f0226a38c88c49ed36":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["033183e9e2da4609614733f0226a38c88c49ed36"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7","a2576170b353998ba9157b6d148ebfde21138316"],"a2576170b353998ba9157b6d148ebfde21138316":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"033183e9e2da4609614733f0226a38c88c49ed36":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}