{"path":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(IndexReader,int).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp;\n      if (docToOrd instanceof Direct8) {\n        perSegComp = new ByteOrdComparator(((Direct8) docToOrd).getArray(), termsIndex, docBase);\n      } else if (docToOrd instanceof Direct16) {\n        perSegComp = new ShortOrdComparator(((Direct16) docToOrd).getArray(), termsIndex, docBase);\n      } else if (docToOrd instanceof Direct32) {\n        perSegComp = new IntOrdComparator(((Direct32) docToOrd).getArray(), termsIndex, docBase);\n      } else {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp;\n      if (docToOrd instanceof Direct8) {\n        perSegComp = new ByteOrdComparator(((Direct8) docToOrd).getArray(), termsIndex, docBase);\n      } else if (docToOrd instanceof Direct16) {\n        perSegComp = new ShortOrdComparator(((Direct16) docToOrd).getArray(), termsIndex, docBase);\n      } else if (docToOrd instanceof Direct32) {\n        perSegComp = new IntOrdComparator(((Direct32) docToOrd).getArray(), termsIndex, docBase);\n      } else {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp;\n      if (docToOrd instanceof Direct8) {\n        perSegComp = new ByteOrdComparator(((Direct8) docToOrd).getArray(), termsIndex, docBase);\n      } else if (docToOrd instanceof Direct16) {\n        perSegComp = new ShortOrdComparator(((Direct16) docToOrd).getArray(), termsIndex, docBase);\n      } else if (docToOrd instanceof Direct32) {\n        perSegComp = new IntOrdComparator(((Direct32) docToOrd).getArray(), termsIndex, docBase);\n      } else {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp;\n      if (docToOrd instanceof Direct8) {\n        perSegComp = new ByteOrdComparator(((Direct8) docToOrd).getArray(), termsIndex, docBase);\n      } else if (docToOrd instanceof Direct16) {\n        perSegComp = new ShortOrdComparator(((Direct16) docToOrd).getArray(), termsIndex, docBase);\n      } else if (docToOrd instanceof Direct32) {\n        perSegComp = new IntOrdComparator(((Direct32) docToOrd).getArray(), termsIndex, docBase);\n      } else {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c71d502dea2f9d6ed3d8783f510ea3254435de9","date":1318266042,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp = null;\n      if (docToOrd.hasArray()) {\n        final Object arr = docToOrd.getArray();\n        if (arr instanceof byte[]) {\n          perSegComp = new ByteOrdComparator((byte[]) arr, termsIndex, docBase);\n        } else if (arr instanceof short[]) {\n          perSegComp = new ShortOrdComparator((short[]) arr, termsIndex, docBase);\n        } else if (arr instanceof int[]) {\n          perSegComp = new IntOrdComparator((int[]) arr, termsIndex, docBase);\n        }\n        // Don't specialize the long[] case since it's not\n        // possible, ie, worse case is MAX_INT-1 docs with\n        // every one having a unique value.\n      }\n      if (perSegComp == null) {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp;\n      if (docToOrd instanceof Direct8) {\n        perSegComp = new ByteOrdComparator(((Direct8) docToOrd).getArray(), termsIndex, docBase);\n      } else if (docToOrd instanceof Direct16) {\n        perSegComp = new ShortOrdComparator(((Direct16) docToOrd).getArray(), termsIndex, docBase);\n      } else if (docToOrd instanceof Direct32) {\n        perSegComp = new IntOrdComparator(((Direct32) docToOrd).getArray(), termsIndex, docBase);\n      } else {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp = null;\n      if (docToOrd.hasArray()) {\n        final Object arr = docToOrd.getArray();\n        if (arr instanceof byte[]) {\n          perSegComp = new ByteOrdComparator((byte[]) arr, termsIndex, docBase);\n        } else if (arr instanceof short[]) {\n          perSegComp = new ShortOrdComparator((short[]) arr, termsIndex, docBase);\n        } else if (arr instanceof int[]) {\n          perSegComp = new IntOrdComparator((int[]) arr, termsIndex, docBase);\n        }\n        // Don't specialize the long[] case since it's not\n        // possible, ie, worse case is MAX_INT-1 docs with\n        // every one having a unique value.\n      }\n      if (perSegComp == null) {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp = null;\n      if (docToOrd.hasArray()) {\n        final Object arr = docToOrd.getArray();\n        if (arr instanceof byte[]) {\n          perSegComp = new ByteOrdComparator((byte[]) arr, termsIndex, docBase);\n        } else if (arr instanceof short[]) {\n          perSegComp = new ShortOrdComparator((short[]) arr, termsIndex, docBase);\n        } else if (arr instanceof int[]) {\n          perSegComp = new IntOrdComparator((int[]) arr, termsIndex, docBase);\n        }\n        // Don't specialize the long[] case since it's not\n        // possible, ie, worse case is MAX_INT-1 docs with\n        // every one having a unique value.\n      }\n      if (perSegComp == null) {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp = null;\n      if (docToOrd.hasArray()) {\n        final Object arr = docToOrd.getArray();\n        if (arr instanceof byte[]) {\n          perSegComp = new ByteOrdComparator((byte[]) arr, termsIndex, docBase);\n        } else if (arr instanceof short[]) {\n          perSegComp = new ShortOrdComparator((short[]) arr, termsIndex, docBase);\n        } else if (arr instanceof int[]) {\n          perSegComp = new IntOrdComparator((int[]) arr, termsIndex, docBase);\n        }\n        // Don't specialize the long[] case since it's not\n        // possible, ie, worse case is MAX_INT-1 docs with\n        // every one having a unique value.\n      }\n      if (perSegComp == null) {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp = null;\n      if (docToOrd.hasArray()) {\n        final Object arr = docToOrd.getArray();\n        if (arr instanceof byte[]) {\n          perSegComp = new ByteOrdComparator((byte[]) arr, termsIndex, docBase);\n        } else if (arr instanceof short[]) {\n          perSegComp = new ShortOrdComparator((short[]) arr, termsIndex, docBase);\n        } else if (arr instanceof int[]) {\n          perSegComp = new IntOrdComparator((int[]) arr, termsIndex, docBase);\n        }\n        // Don't specialize the long[] case since it's not\n        // possible, ie, worse case is MAX_INT-1 docs with\n        // every one having a unique value.\n      }\n      if (perSegComp == null) {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp = null;\n      if (docToOrd.hasArray()) {\n        final Object arr = docToOrd.getArray();\n        if (arr instanceof byte[]) {\n          perSegComp = new ByteOrdComparator((byte[]) arr, termsIndex, docBase);\n        } else if (arr instanceof short[]) {\n          perSegComp = new ShortOrdComparator((short[]) arr, termsIndex, docBase);\n        } else if (arr instanceof int[]) {\n          perSegComp = new IntOrdComparator((int[]) arr, termsIndex, docBase);\n        }\n        // Don't specialize the long[] case since it's not\n        // possible, ie, worse case is MAX_INT-1 docs with\n        // every one having a unique value.\n      }\n      if (perSegComp == null) {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();\n      FieldComparator perSegComp = null;\n      if (docToOrd.hasArray()) {\n        final Object arr = docToOrd.getArray();\n        if (arr instanceof byte[]) {\n          perSegComp = new ByteOrdComparator((byte[]) arr, termsIndex, docBase);\n        } else if (arr instanceof short[]) {\n          perSegComp = new ShortOrdComparator((short[]) arr, termsIndex, docBase);\n        } else if (arr instanceof int[]) {\n          perSegComp = new IntOrdComparator((int[]) arr, termsIndex, docBase);\n        }\n        // Don't specialize the long[] case since it's not\n        // possible, ie, worse case is MAX_INT-1 docs with\n        // every one having a unique value.\n      }\n      if (perSegComp == null) {\n        perSegComp = new AnyOrdComparator(docToOrd, termsIndex, docBase);\n      }\n\n      currentReaderGen++;\n      if (bottomSlot != -1) {\n        perSegComp.setBottom(bottomSlot);\n      }\n\n      return perSegComp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3c71d502dea2f9d6ed3d8783f510ea3254435de9":["323f871ffe96b871d8c534a614be60751bb023c2"],"323f871ffe96b871d8c534a614be60751bb023c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["3c71d502dea2f9d6ed3d8783f510ea3254435de9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3c71d502dea2f9d6ed3d8783f510ea3254435de9","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3c71d502dea2f9d6ed3d8783f510ea3254435de9":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"323f871ffe96b871d8c534a614be60751bb023c2":["3c71d502dea2f9d6ed3d8783f510ea3254435de9","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["323f871ffe96b871d8c534a614be60751bb023c2","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}