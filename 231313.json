{"path":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","commits":[{"id":"d99092e7a9892440b9da55d5b75d3d77206ee80e","date":1224496135,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"/dev/null","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setIndexDeletionPolicy(policy)\n        .setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setIndexDeletionPolicy(policy)\n        .setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["d99092e7a9892440b9da55d5b75d3d77206ee80e","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}