{"path":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#resetSkip(IntIndexOutput.Index,IntIndexOutput.Index,IntIndexOutput.Index).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#resetSkip(IntIndexOutput.Index,IntIndexOutput.Index,IntIndexOutput.Index).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#resetSkip(IntIndexOutput.Index,IntIndexOutput.Index,IntIndexOutput.Index).mjava","sourceNew":"  // Called @ start of new term\n  protected void resetSkip(IntIndexOutput.Index topDocIndex, IntIndexOutput.Index topFreqIndex, IntIndexOutput.Index topPosIndex)\n    throws IOException {\n    super.resetSkip();\n\n    Arrays.fill(lastSkipDoc, 0);\n    Arrays.fill(lastSkipPayloadLength, -1);  // we don't have to write the first length in the skip list\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      docIndex[i].copyFrom(topDocIndex, true);\n      if (freqOutput != null) {\n        freqIndex[i].copyFrom(topFreqIndex, true);\n      }\n      if (posOutput != null) {\n        posIndex[i].copyFrom(topPosIndex, true);\n      }\n    }\n    if (payloadOutput != null) {\n      Arrays.fill(lastSkipPayloadPointer, payloadOutput.getFilePointer());\n    }\n  }\n\n","sourceOld":"  // Called @ start of new term\n  protected void resetSkip(IntIndexOutput.Index topDocIndex, IntIndexOutput.Index topFreqIndex, IntIndexOutput.Index topPosIndex)\n    throws IOException {\n    super.resetSkip();\n\n    Arrays.fill(lastSkipDoc, 0);\n    Arrays.fill(lastSkipPayloadLength, -1);  // we don't have to write the first length in the skip list\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      docIndex[i].copyFrom(topDocIndex, true);\n      if (freqOutput != null) {\n        freqIndex[i].copyFrom(topFreqIndex, true);\n      }\n      if (posOutput != null) {\n        posIndex[i].copyFrom(topPosIndex, true);\n      }\n    }\n    if (payloadOutput != null) {\n      Arrays.fill(lastSkipPayloadPointer, payloadOutput.getFilePointer());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#resetSkip(IntIndexOutput.Index,IntIndexOutput.Index,IntIndexOutput.Index).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#resetSkip(IntIndexOutput.Index,IntIndexOutput.Index,IntIndexOutput.Index).mjava","sourceNew":"  // Called @ start of new term\n  protected void resetSkip(IntIndexOutput.Index topDocIndex, IntIndexOutput.Index topFreqIndex, IntIndexOutput.Index topPosIndex)\n    throws IOException {\n    super.resetSkip();\n\n    Arrays.fill(lastSkipDoc, 0);\n    Arrays.fill(lastSkipPayloadLength, -1);  // we don't have to write the first length in the skip list\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      docIndex[i].copyFrom(topDocIndex, true);\n      if (freqOutput != null) {\n        freqIndex[i].copyFrom(topFreqIndex, true);\n      }\n      if (posOutput != null) {\n        posIndex[i].copyFrom(topPosIndex, true);\n      }\n    }\n    if (payloadOutput != null) {\n      Arrays.fill(lastSkipPayloadPointer, payloadOutput.getFilePointer());\n    }\n  }\n\n","sourceOld":"  // Called @ start of new term\n  protected void resetSkip(IntIndexOutput.Index topDocIndex, IntIndexOutput.Index topFreqIndex, IntIndexOutput.Index topPosIndex)\n    throws IOException {\n    super.resetSkip();\n\n    Arrays.fill(lastSkipDoc, 0);\n    Arrays.fill(lastSkipPayloadLength, -1);  // we don't have to write the first length in the skip list\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      docIndex[i].copyFrom(topDocIndex, true);\n      if (freqOutput != null) {\n        freqIndex[i].copyFrom(topFreqIndex, true);\n      }\n      if (posOutput != null) {\n        posIndex[i].copyFrom(topPosIndex, true);\n      }\n    }\n    if (payloadOutput != null) {\n      Arrays.fill(lastSkipPayloadPointer, payloadOutput.getFilePointer());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}