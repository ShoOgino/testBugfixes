{"path":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,String).mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,String).mjava","pathOld":"/dev/null","sourceNew":"   private void printSegment(PrintWriter out, String segment)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n      SegmentReader reader =\n        new SegmentReader(new SegmentInfo(segment, 1, directory));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n      directory.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,String).mjava","sourceNew":"   private void printSegment(PrintWriter out, String segment)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n      SegmentReader reader =\n        SegmentReader.get(new SegmentInfo(segment, 1, directory));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n      directory.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, String segment)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n      SegmentReader reader =\n        new SegmentReader(new SegmentInfo(segment, 1, directory));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n      directory.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf637fee66c296142fb5989e338efc018320655","date":1168455996,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,String,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,String).mjava","sourceNew":"   private void printSegment(PrintWriter out, String segment, int docCount)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n      SegmentReader reader =\n        SegmentReader.get(new SegmentInfo(segment, docCount, directory));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n      directory.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, String segment)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n      SegmentReader reader =\n        SegmentReader.get(new SegmentInfo(segment, 1, directory));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n      directory.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf637fee66c296142fb5989e338efc018320655":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fcf637fee66c296142fb5989e338efc018320655"]},"commit2Childs":{"fcf637fee66c296142fb5989e338efc018320655":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["fcf637fee66c296142fb5989e338efc018320655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}