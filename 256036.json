{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","sourceNew":"  // Delete by Term\n  private synchronized long applyTermDeletes(Iterable<Term> termsIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return 0;\n    }\n\n    TermsEnum termsEnum = null;\n\n    String currentField = null;\n    DocsEnum docs = null;\n\n    assert checkDeleteTerm(null);\n\n    boolean any = false;\n\n    //System.out.println(Thread.currentThread().getName() + \" del terms reader=\" + reader);\n    for (Term term : termsIter) {\n      // Since we visit terms sorted, we gain performance\n      // by re-using the same TermsEnum and seeking only\n      // forwards\n      if (!term.field().equals(currentField)) {\n        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(null);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      assert checkDeleteTerm(term);\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes(), false)) {\n        DocsEnum docsEnum = termsEnum.docs(rld.liveDocs, docs, false);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        if (docsEnum != null) {\n          while (true) {\n            final int docID = docsEnum.nextDoc();\n            //System.out.println(Thread.currentThread().getName() + \" del term=\" + term + \" doc=\" + docID);\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }   \n            // NOTE: there is no limit check on the docID\n            // when deleting by Term (unlike by Query)\n            // because on flush we apply all Term deletes to\n            // each segment.  So all Term deleting here is\n            // against prior segments:\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n            if (rld.delete(docID)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by Term\n  private synchronized long applyTermDeletes(Iterable<Term> termsIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return 0;\n    }\n\n    TermsEnum termsEnum = null;\n\n    String currentField = null;\n    DocsEnum docs = null;\n\n    assert checkDeleteTerm(null);\n\n    boolean any = false;\n\n    //System.out.println(Thread.currentThread().getName() + \" del terms reader=\" + reader);\n    for (Term term : termsIter) {\n      // Since we visit terms sorted, we gain performance\n      // by re-using the same TermsEnum and seeking only\n      // forwards\n      if (!term.field().equals(currentField)) {\n        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(null);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      assert checkDeleteTerm(term);\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes(), false)) {\n        DocsEnum docsEnum = termsEnum.docs(rld.liveDocs, docs, false);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        if (docsEnum != null) {\n          while (true) {\n            final int docID = docsEnum.nextDoc();\n            //System.out.println(Thread.currentThread().getName() + \" del term=\" + term + \" doc=\" + docID);\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }   \n            // NOTE: there is no limit check on the docID\n            // when deleting by Term (unlike by Query)\n            // because on flush we apply all Term deletes to\n            // each segment.  So all Term deleting here is\n            // against prior segments:\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n            if (rld.delete(docID)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","sourceNew":"  // Delete by Term\n  private synchronized long applyTermDeletes(Iterable<Term> termsIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return 0;\n    }\n\n    TermsEnum termsEnum = null;\n\n    String currentField = null;\n    DocsEnum docs = null;\n\n    assert checkDeleteTerm(null);\n\n    boolean any = false;\n\n    //System.out.println(Thread.currentThread().getName() + \" del terms reader=\" + reader);\n    for (Term term : termsIter) {\n      // Since we visit terms sorted, we gain performance\n      // by re-using the same TermsEnum and seeking only\n      // forwards\n      if (!term.field().equals(currentField)) {\n        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(null);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      assert checkDeleteTerm(term);\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes(), false)) {\n        DocsEnum docsEnum = termsEnum.docs(rld.liveDocs, docs, false);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        if (docsEnum != null) {\n          while (true) {\n            final int docID = docsEnum.nextDoc();\n            //System.out.println(Thread.currentThread().getName() + \" del term=\" + term + \" doc=\" + docID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }   \n            // NOTE: there is no limit check on the docID\n            // when deleting by Term (unlike by Query)\n            // because on flush we apply all Term deletes to\n            // each segment.  So all Term deleting here is\n            // against prior segments:\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n            if (rld.delete(docID)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by Term\n  private synchronized long applyTermDeletes(Iterable<Term> termsIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return 0;\n    }\n\n    TermsEnum termsEnum = null;\n\n    String currentField = null;\n    DocsEnum docs = null;\n\n    assert checkDeleteTerm(null);\n\n    boolean any = false;\n\n    //System.out.println(Thread.currentThread().getName() + \" del terms reader=\" + reader);\n    for (Term term : termsIter) {\n      // Since we visit terms sorted, we gain performance\n      // by re-using the same TermsEnum and seeking only\n      // forwards\n      if (!term.field().equals(currentField)) {\n        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(null);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      assert checkDeleteTerm(term);\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes(), false)) {\n        DocsEnum docsEnum = termsEnum.docs(rld.liveDocs, docs, false);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        if (docsEnum != null) {\n          while (true) {\n            final int docID = docsEnum.nextDoc();\n            //System.out.println(Thread.currentThread().getName() + \" del term=\" + term + \" doc=\" + docID);\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }   \n            // NOTE: there is no limit check on the docID\n            // when deleting by Term (unlike by Query)\n            // because on flush we apply all Term deletes to\n            // each segment.  So all Term deleting here is\n            // against prior segments:\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n            if (rld.delete(docID)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","sourceNew":"  // Delete by Term\n  private synchronized long applyTermDeletes(Iterable<Term> termsIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return 0;\n    }\n\n    TermsEnum termsEnum = null;\n\n    String currentField = null;\n    DocsEnum docs = null;\n\n    assert checkDeleteTerm(null);\n\n    boolean any = false;\n\n    //System.out.println(Thread.currentThread().getName() + \" del terms reader=\" + reader);\n    for (Term term : termsIter) {\n      // Since we visit terms sorted, we gain performance\n      // by re-using the same TermsEnum and seeking only\n      // forwards\n      if (!term.field().equals(currentField)) {\n        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(null);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      assert checkDeleteTerm(term);\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes(), false)) {\n        DocsEnum docsEnum = termsEnum.docs(rld.liveDocs, docs, false);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        if (docsEnum != null) {\n          while (true) {\n            final int docID = docsEnum.nextDoc();\n            //System.out.println(Thread.currentThread().getName() + \" del term=\" + term + \" doc=\" + docID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }   \n            // NOTE: there is no limit check on the docID\n            // when deleting by Term (unlike by Query)\n            // because on flush we apply all Term deletes to\n            // each segment.  So all Term deleting here is\n            // against prior segments:\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n            if (rld.delete(docID)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by Term\n  private synchronized long applyTermDeletes(Iterable<Term> termsIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return 0;\n    }\n\n    TermsEnum termsEnum = null;\n\n    String currentField = null;\n    DocsEnum docs = null;\n\n    assert checkDeleteTerm(null);\n\n    boolean any = false;\n\n    //System.out.println(Thread.currentThread().getName() + \" del terms reader=\" + reader);\n    for (Term term : termsIter) {\n      // Since we visit terms sorted, we gain performance\n      // by re-using the same TermsEnum and seeking only\n      // forwards\n      if (!term.field().equals(currentField)) {\n        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(null);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      assert checkDeleteTerm(term);\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes(), false)) {\n        DocsEnum docsEnum = termsEnum.docs(rld.liveDocs, docs, false);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        if (docsEnum != null) {\n          while (true) {\n            final int docID = docsEnum.nextDoc();\n            //System.out.println(Thread.currentThread().getName() + \" del term=\" + term + \" doc=\" + docID);\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }   \n            // NOTE: there is no limit check on the docID\n            // when deleting by Term (unlike by Query)\n            // because on flush we apply all Term deletes to\n            // each segment.  So all Term deleting here is\n            // against prior segments:\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n            if (rld.delete(docID)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],ReadersAndLiveDocs,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","sourceNew":"  // Delete by Term\n  private synchronized long applyTermDeletes(Iterable<Term> termsIter, ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return 0;\n    }\n\n    TermsEnum termsEnum = null;\n\n    String currentField = null;\n    DocsEnum docs = null;\n\n    assert checkDeleteTerm(null);\n\n    boolean any = false;\n\n    //System.out.println(Thread.currentThread().getName() + \" del terms reader=\" + reader);\n    for (Term term : termsIter) {\n      // Since we visit terms sorted, we gain performance\n      // by re-using the same TermsEnum and seeking only\n      // forwards\n      if (!term.field().equals(currentField)) {\n        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(null);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      assert checkDeleteTerm(term);\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes(), false)) {\n        DocsEnum docsEnum = termsEnum.docs(rld.getLiveDocs(), docs, false);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        if (docsEnum != null) {\n          while (true) {\n            final int docID = docsEnum.nextDoc();\n            //System.out.println(Thread.currentThread().getName() + \" del term=\" + term + \" doc=\" + docID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }   \n            // NOTE: there is no limit check on the docID\n            // when deleting by Term (unlike by Query)\n            // because on flush we apply all Term deletes to\n            // each segment.  So all Term deleting here is\n            // against prior segments:\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n            if (rld.delete(docID)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by Term\n  private synchronized long applyTermDeletes(Iterable<Term> termsIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return 0;\n    }\n\n    TermsEnum termsEnum = null;\n\n    String currentField = null;\n    DocsEnum docs = null;\n\n    assert checkDeleteTerm(null);\n\n    boolean any = false;\n\n    //System.out.println(Thread.currentThread().getName() + \" del terms reader=\" + reader);\n    for (Term term : termsIter) {\n      // Since we visit terms sorted, we gain performance\n      // by re-using the same TermsEnum and seeking only\n      // forwards\n      if (!term.field().equals(currentField)) {\n        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(null);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      assert checkDeleteTerm(term);\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes(), false)) {\n        DocsEnum docsEnum = termsEnum.docs(rld.liveDocs, docs, false);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        if (docsEnum != null) {\n          while (true) {\n            final int docID = docsEnum.nextDoc();\n            //System.out.println(Thread.currentThread().getName() + \" del term=\" + term + \" doc=\" + docID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }   \n            // NOTE: there is no limit check on the docID\n            // when deleting by Term (unlike by Query)\n            // because on flush we apply all Term deletes to\n            // each segment.  So all Term deleting here is\n            // against prior segments:\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n            if (rld.delete(docID)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb","02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":5,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],ReadersAndLiveDocs,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyTermDeletes(Iterable[Term],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","sourceNew":"  // Delete by Term\n  private synchronized long applyTermDeletes(Iterable<Term> termsIter, ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return 0;\n    }\n\n    TermsEnum termsEnum = null;\n\n    String currentField = null;\n    DocsEnum docs = null;\n\n    assert checkDeleteTerm(null);\n\n    boolean any = false;\n\n    //System.out.println(Thread.currentThread().getName() + \" del terms reader=\" + reader);\n    for (Term term : termsIter) {\n      // Since we visit terms sorted, we gain performance\n      // by re-using the same TermsEnum and seeking only\n      // forwards\n      if (!term.field().equals(currentField)) {\n        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(null);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      assert checkDeleteTerm(term);\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes(), false)) {\n        DocsEnum docsEnum = termsEnum.docs(rld.getLiveDocs(), docs, false);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        if (docsEnum != null) {\n          while (true) {\n            final int docID = docsEnum.nextDoc();\n            //System.out.println(Thread.currentThread().getName() + \" del term=\" + term + \" doc=\" + docID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }   \n            // NOTE: there is no limit check on the docID\n            // when deleting by Term (unlike by Query)\n            // because on flush we apply all Term deletes to\n            // each segment.  So all Term deleting here is\n            // against prior segments:\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n            if (rld.delete(docID)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by Term\n  private synchronized long applyTermDeletes(Iterable<Term> termsIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return 0;\n    }\n\n    TermsEnum termsEnum = null;\n\n    String currentField = null;\n    DocsEnum docs = null;\n\n    assert checkDeleteTerm(null);\n\n    boolean any = false;\n\n    //System.out.println(Thread.currentThread().getName() + \" del terms reader=\" + reader);\n    for (Term term : termsIter) {\n      // Since we visit terms sorted, we gain performance\n      // by re-using the same TermsEnum and seeking only\n      // forwards\n      if (!term.field().equals(currentField)) {\n        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(null);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      assert checkDeleteTerm(term);\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes(), false)) {\n        DocsEnum docsEnum = termsEnum.docs(rld.liveDocs, docs, false);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        if (docsEnum != null) {\n          while (true) {\n            final int docID = docsEnum.nextDoc();\n            //System.out.println(Thread.currentThread().getName() + \" del term=\" + term + \" doc=\" + docID);\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }   \n            // NOTE: there is no limit check on the docID\n            // when deleting by Term (unlike by Query)\n            // because on flush we apply all Term deletes to\n            // each segment.  So all Term deleting here is\n            // against prior segments:\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n            if (rld.delete(docID)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}