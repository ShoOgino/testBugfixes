{"path":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#deprecatedGetFileLinkStatusInternal(Path).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#deprecatedGetFileLinkStatusInternal(Path).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deprecated. Remains for legacy support. Should be removed when {@link Stat}\n   * gains support for Windows and other operating systems.\n   */\n  @Deprecated\n  private FileStatus deprecatedGetFileLinkStatusInternal(final Path f)\n      throws IOException {\n    String target = FileUtil.readLink(new File(f.toString()));\n\n    try {\n      FileStatus fs = getFileStatus(f);\n      // If f refers to a regular file or directory\n      if (target.isEmpty()) {\n        return fs;\n      }\n      // Otherwise f refers to a symlink\n      return new FileStatus(fs.getLen(),\n          false,\n          fs.getReplication(),\n          fs.getBlockSize(),\n          fs.getModificationTime(),\n          fs.getAccessTime(),\n          fs.getPermission(),\n          fs.getOwner(),\n          fs.getGroup(),\n          new Path(target),\n          f);\n    } catch (FileNotFoundException e) {\n      /* The exists method in the File class returns false for dangling\n       * links so we can get a FileNotFoundException for links that exist.\n       * It's also possible that we raced with a delete of the link. Use\n       * the readBasicFileAttributes method in java.nio.file.attributes\n       * when available.\n       */\n      if (!target.isEmpty()) {\n        return new FileStatus(0, false, 0, 0, 0, 0, FsPermission.getDefault(),\n            \"\", \"\", new Path(target), f);\n      }\n      // f refers to a file or directory that does not exist\n      throw e;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#deprecatedGetFileLinkStatusInternal(Path).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deprecated. Remains for legacy support. Should be removed when {@link Stat}\n   * gains support for Windows and other operating systems.\n   */\n  @Deprecated\n  private FileStatus deprecatedGetFileLinkStatusInternal(final Path f)\n      throws IOException {\n    String target = FileUtil.readLink(new File(f.toString()));\n\n    try {\n      FileStatus fs = getFileStatus(f);\n      // If f refers to a regular file or directory\n      if (target.isEmpty()) {\n        return fs;\n      }\n      // Otherwise f refers to a symlink\n      return new FileStatus(fs.getLen(),\n          false,\n          fs.getReplication(),\n          fs.getBlockSize(),\n          fs.getModificationTime(),\n          fs.getAccessTime(),\n          fs.getPermission(),\n          fs.getOwner(),\n          fs.getGroup(),\n          new Path(target),\n          f);\n    } catch (FileNotFoundException e) {\n      /* The exists method in the File class returns false for dangling\n       * links so we can get a FileNotFoundException for links that exist.\n       * It's also possible that we raced with a delete of the link. Use\n       * the readBasicFileAttributes method in java.nio.file.attributes\n       * when available.\n       */\n      if (!target.isEmpty()) {\n        return new FileStatus(0, false, 0, 0, 0, 0, FsPermission.getDefault(),\n            \"\", \"\", new Path(target), f);\n      }\n      // f refers to a file or directory that does not exist\n      throw e;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}