{"path":"src/java/org/apache/solr/common/SolrInputDocument#getEmptyCollection(String).mjava","commits":[{"id":"0902cc3e4d3f7e4fe37a1474010f51523cafbbef","date":1181874468,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrInputDocument#getEmptyCollection(String).mjava","pathOld":"/dev/null","sourceNew":"   /**\n   * Return a base collection to manage the fields for a given value.  If\n   * the field is defined to be \"distinct\", the field will be backed as \n   * a Set rather then a List.  Adding the same value multiple times will\n   * only keep a single instance of that value.\n   */\n  @Override\n  protected Collection<Object> getEmptyCollection( String name )\n  {\n    if( _keepDuplicates == null || Boolean.TRUE == _keepDuplicates.get( name )) {\n      return new ArrayList<Object>();\n    }\n    return new LinkedHashSet<Object>();  // keep the order? -- perhaps HashSet?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e90486608f7012c992de10544f6940a730a00e6","date":1182105448,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrInputDocument#getEmptyCollection(String).mjava","pathOld":"src/java/org/apache/solr/common/SolrInputDocument#getEmptyCollection(String).mjava","sourceNew":"   /**\n   * Return a base collection to manage the fields for a given value.  If\n   * the field is defined to be \"distinct\", the field will be backed as \n   * a Set rather then a List.  Adding the same value multiple times will\n   * only keep a single instance of that value.\n   */\n  @Override\n  protected Collection<Object> getEmptyCollection( String name )\n  {\n    if( _removeDuplicates == null || Boolean.FALSE == _removeDuplicates.get( name )) {\n      return new ArrayList<Object>();\n    }\n    return new LinkedHashSet<Object>();  // keep the order? -- perhaps HashSet?\n  }\n\n","sourceOld":"   /**\n   * Return a base collection to manage the fields for a given value.  If\n   * the field is defined to be \"distinct\", the field will be backed as \n   * a Set rather then a List.  Adding the same value multiple times will\n   * only keep a single instance of that value.\n   */\n  @Override\n  protected Collection<Object> getEmptyCollection( String name )\n  {\n    if( _keepDuplicates == null || Boolean.TRUE == _keepDuplicates.get( name )) {\n      return new ArrayList<Object>();\n    }\n    return new LinkedHashSet<Object>();  // keep the order? -- perhaps HashSet?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08660ed40a9678f35d6d7dc9d8574b4c16d1d892","date":1182152068,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrInputDocument#getEmptyCollection(String).mjava","pathOld":"src/java/org/apache/solr/common/SolrInputDocument#getEmptyCollection(String).mjava","sourceNew":"   /**\n   * Return a base collection to manage the fields for a given value.  If\n   * the field is defined to be \"distinct\", the field will be backed as \n   * a Set rather then a List.  Adding the same value multiple times will\n   * only keep a single instance of that value.\n   */\n  @Override\n  protected Collection<Object> getEmptyCollection( String name )\n  {\n    boolean distint = false;\n    if( _removeDuplicates != null ) {\n      Boolean v = _removeDuplicates.get( name );\n      if( v == null ) {\n        v = _removeDuplicates.get( null );\n      }\n      distint = (v == Boolean.TRUE);\n    }\n    return distint ? new LinkedHashSet<Object>() : new ArrayList<Object>(1);  // keep the order? -- perhaps HashSet?\n  }\n\n","sourceOld":"   /**\n   * Return a base collection to manage the fields for a given value.  If\n   * the field is defined to be \"distinct\", the field will be backed as \n   * a Set rather then a List.  Adding the same value multiple times will\n   * only keep a single instance of that value.\n   */\n  @Override\n  protected Collection<Object> getEmptyCollection( String name )\n  {\n    if( _removeDuplicates == null || Boolean.FALSE == _removeDuplicates.get( name )) {\n      return new ArrayList<Object>();\n    }\n    return new LinkedHashSet<Object>();  // keep the order? -- perhaps HashSet?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebb24ab555aab7c4dd5d2264c06a4f19fb217913","date":1183353562,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/common/SolrInputDocument#getEmptyCollection(String).mjava","sourceNew":null,"sourceOld":"   /**\n   * Return a base collection to manage the fields for a given value.  If\n   * the field is defined to be \"distinct\", the field will be backed as \n   * a Set rather then a List.  Adding the same value multiple times will\n   * only keep a single instance of that value.\n   */\n  @Override\n  protected Collection<Object> getEmptyCollection( String name )\n  {\n    boolean distint = false;\n    if( _removeDuplicates != null ) {\n      Boolean v = _removeDuplicates.get( name );\n      if( v == null ) {\n        v = _removeDuplicates.get( null );\n      }\n      distint = (v == Boolean.TRUE);\n    }\n    return distint ? new LinkedHashSet<Object>() : new ArrayList<Object>(1);  // keep the order? -- perhaps HashSet?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e90486608f7012c992de10544f6940a730a00e6":["0902cc3e4d3f7e4fe37a1474010f51523cafbbef"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["08660ed40a9678f35d6d7dc9d8574b4c16d1d892"],"08660ed40a9678f35d6d7dc9d8574b4c16d1d892":["9e90486608f7012c992de10544f6940a730a00e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0902cc3e4d3f7e4fe37a1474010f51523cafbbef":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9e90486608f7012c992de10544f6940a730a00e6":["08660ed40a9678f35d6d7dc9d8574b4c16d1d892"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":[],"08660ed40a9678f35d6d7dc9d8574b4c16d1d892":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0902cc3e4d3f7e4fe37a1474010f51523cafbbef"],"0902cc3e4d3f7e4fe37a1474010f51523cafbbef":["9e90486608f7012c992de10544f6940a730a00e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}