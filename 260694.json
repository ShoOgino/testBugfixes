{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IntegrateEvaluator#doWork(Object...).mjava","commits":[{"id":"8857e97c9165df294ead035e9c708f0c038d29a4","date":1513947461,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IntegrateEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length != 3) {\n      throw new IOException(\"The integrate function requires 3 parameters\");\n    }\n\n    if (!(values[0] instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) values[0];\n    if(!(vectorFunction.getFunction() instanceof UnivariateFunction)) {\n      throw new IOException(\"Cannot evaluate integral from parameter.\");\n    }\n\n    Number min = null;\n    Number max = null;\n\n    if(values[1] instanceof Number) {\n      min = (Number) values[1];\n    } else {\n      throw new IOException(\"The second parameter of the integrate function must be a number\");\n    }\n\n    if(values[2] instanceof Number ) {\n      max = (Number) values[2];\n    } else {\n      throw new IOException(\"The third parameter of the integrate function must be a number\");\n    }\n\n    UnivariateFunction func = (UnivariateFunction)vectorFunction.getFunction();\n\n    RombergIntegrator rombergIntegrator = new RombergIntegrator();\n    return rombergIntegrator.integrate(5000, func, min.doubleValue(), max.doubleValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6331fb5344e3d737be63af3a7bd470ee133004a","date":1569798100,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IntegrateEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IntegrateEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length > 3) {\n      throw new IOException(\"The integrate function requires at most 3 parameters\");\n    }\n\n    if (!(values[0] instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) values[0];\n    if (!(vectorFunction.getFunction() instanceof UnivariateFunction)) {\n      throw new IOException(\"Cannot evaluate integral from parameter.\");\n    }\n\n    UnivariateFunction func = (UnivariateFunction) vectorFunction.getFunction();\n\n    if(values.length == 3) {\n\n\n      Number min = null;\n      Number max = null;\n\n      if (values[1] instanceof Number) {\n        min = (Number) values[1];\n      } else {\n        throw new IOException(\"The second parameter of the integrate function must be a number\");\n      }\n\n      if (values[2] instanceof Number) {\n        max = (Number) values[2];\n      } else {\n        throw new IOException(\"The third parameter of the integrate function must be a number\");\n      }\n\n      RombergIntegrator rombergIntegrator = new RombergIntegrator();\n      return rombergIntegrator.integrate(5000, func, min.doubleValue(), max.doubleValue());\n    } else {\n      RombergIntegrator integrator = new RombergIntegrator();\n\n      double[] x = (double[])vectorFunction.getFromContext(\"x\");\n      double[] y = (double[])vectorFunction.getFromContext(\"y\");\n      ArrayList<Number> out = new ArrayList();\n      out.add(0);\n      for(int i=1; i<x.length; i++) {\n        out.add(integrator.integrate(5000, func, x[0], x[i]));\n      }\n\n      return out;\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length != 3) {\n      throw new IOException(\"The integrate function requires 3 parameters\");\n    }\n\n    if (!(values[0] instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) values[0];\n    if(!(vectorFunction.getFunction() instanceof UnivariateFunction)) {\n      throw new IOException(\"Cannot evaluate integral from parameter.\");\n    }\n\n    Number min = null;\n    Number max = null;\n\n    if(values[1] instanceof Number) {\n      min = (Number) values[1];\n    } else {\n      throw new IOException(\"The second parameter of the integrate function must be a number\");\n    }\n\n    if(values[2] instanceof Number ) {\n      max = (Number) values[2];\n    } else {\n      throw new IOException(\"The third parameter of the integrate function must be a number\");\n    }\n\n    UnivariateFunction func = (UnivariateFunction)vectorFunction.getFunction();\n\n    RombergIntegrator rombergIntegrator = new RombergIntegrator();\n    return rombergIntegrator.integrate(5000, func, min.doubleValue(), max.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IntegrateEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IntegrateEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length > 3) {\n      throw new IOException(\"The integrate function requires at most 3 parameters\");\n    }\n\n    if (!(values[0] instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) values[0];\n    if (!(vectorFunction.getFunction() instanceof UnivariateFunction)) {\n      throw new IOException(\"Cannot evaluate integral from parameter.\");\n    }\n\n    UnivariateFunction func = (UnivariateFunction) vectorFunction.getFunction();\n\n    if(values.length == 3) {\n\n\n      Number min = null;\n      Number max = null;\n\n      if (values[1] instanceof Number) {\n        min = (Number) values[1];\n      } else {\n        throw new IOException(\"The second parameter of the integrate function must be a number\");\n      }\n\n      if (values[2] instanceof Number) {\n        max = (Number) values[2];\n      } else {\n        throw new IOException(\"The third parameter of the integrate function must be a number\");\n      }\n\n      RombergIntegrator rombergIntegrator = new RombergIntegrator();\n      return rombergIntegrator.integrate(5000, func, min.doubleValue(), max.doubleValue());\n    } else {\n      RombergIntegrator integrator = new RombergIntegrator();\n\n      double[] x = (double[])vectorFunction.getFromContext(\"x\");\n      double[] y = (double[])vectorFunction.getFromContext(\"y\");\n      ArrayList<Number> out = new ArrayList();\n      out.add(0);\n      for(int i=1; i<x.length; i++) {\n        out.add(integrator.integrate(5000, func, x[0], x[i]));\n      }\n\n      return out;\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length != 3) {\n      throw new IOException(\"The integrate function requires 3 parameters\");\n    }\n\n    if (!(values[0] instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) values[0];\n    if(!(vectorFunction.getFunction() instanceof UnivariateFunction)) {\n      throw new IOException(\"Cannot evaluate integral from parameter.\");\n    }\n\n    Number min = null;\n    Number max = null;\n\n    if(values[1] instanceof Number) {\n      min = (Number) values[1];\n    } else {\n      throw new IOException(\"The second parameter of the integrate function must be a number\");\n    }\n\n    if(values[2] instanceof Number ) {\n      max = (Number) values[2];\n    } else {\n      throw new IOException(\"The third parameter of the integrate function must be a number\");\n    }\n\n    UnivariateFunction func = (UnivariateFunction)vectorFunction.getFunction();\n\n    RombergIntegrator rombergIntegrator = new RombergIntegrator();\n    return rombergIntegrator.integrate(5000, func, min.doubleValue(), max.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IntegrateEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IntegrateEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length > 3) {\n      throw new IOException(\"The integrate function requires at most 3 parameters\");\n    }\n\n    if (!(values[0] instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) values[0];\n    if (!(vectorFunction.getFunction() instanceof UnivariateFunction)) {\n      throw new IOException(\"Cannot evaluate integral from parameter.\");\n    }\n\n    UnivariateFunction func = (UnivariateFunction) vectorFunction.getFunction();\n\n    if(values.length == 3) {\n\n\n      Number min = null;\n      Number max = null;\n\n      if (values[1] instanceof Number) {\n        min = (Number) values[1];\n      } else {\n        throw new IOException(\"The second parameter of the integrate function must be a number\");\n      }\n\n      if (values[2] instanceof Number) {\n        max = (Number) values[2];\n      } else {\n        throw new IOException(\"The third parameter of the integrate function must be a number\");\n      }\n\n      RombergIntegrator rombergIntegrator = new RombergIntegrator();\n      return rombergIntegrator.integrate(5000, func, min.doubleValue(), max.doubleValue());\n    } else {\n      RombergIntegrator integrator = new RombergIntegrator();\n\n      double[] x = (double[])vectorFunction.getFromContext(\"x\");\n      double[] y = (double[])vectorFunction.getFromContext(\"y\");\n      ArrayList<Number> out = new ArrayList<>();\n      out.add(0);\n      for(int i=1; i<x.length; i++) {\n        out.add(integrator.integrate(5000, func, x[0], x[i]));\n      }\n\n      return out;\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length > 3) {\n      throw new IOException(\"The integrate function requires at most 3 parameters\");\n    }\n\n    if (!(values[0] instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) values[0];\n    if (!(vectorFunction.getFunction() instanceof UnivariateFunction)) {\n      throw new IOException(\"Cannot evaluate integral from parameter.\");\n    }\n\n    UnivariateFunction func = (UnivariateFunction) vectorFunction.getFunction();\n\n    if(values.length == 3) {\n\n\n      Number min = null;\n      Number max = null;\n\n      if (values[1] instanceof Number) {\n        min = (Number) values[1];\n      } else {\n        throw new IOException(\"The second parameter of the integrate function must be a number\");\n      }\n\n      if (values[2] instanceof Number) {\n        max = (Number) values[2];\n      } else {\n        throw new IOException(\"The third parameter of the integrate function must be a number\");\n      }\n\n      RombergIntegrator rombergIntegrator = new RombergIntegrator();\n      return rombergIntegrator.integrate(5000, func, min.doubleValue(), max.doubleValue());\n    } else {\n      RombergIntegrator integrator = new RombergIntegrator();\n\n      double[] x = (double[])vectorFunction.getFromContext(\"x\");\n      double[] y = (double[])vectorFunction.getFromContext(\"y\");\n      ArrayList<Number> out = new ArrayList();\n      out.add(0);\n      for(int i=1; i<x.length; i++) {\n        out.add(integrator.integrate(5000, func, x[0], x[i]));\n      }\n\n      return out;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["b6331fb5344e3d737be63af3a7bd470ee133004a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6331fb5344e3d737be63af3a7bd470ee133004a":["8857e97c9165df294ead035e9c708f0c038d29a4"],"8857e97c9165df294ead035e9c708f0c038d29a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["8857e97c9165df294ead035e9c708f0c038d29a4","b6331fb5344e3d737be63af3a7bd470ee133004a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8857e97c9165df294ead035e9c708f0c038d29a4"],"b6331fb5344e3d737be63af3a7bd470ee133004a":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"8857e97c9165df294ead035e9c708f0c038d29a4":["b6331fb5344e3d737be63af3a7bd470ee133004a","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}