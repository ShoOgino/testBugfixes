{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sort(BKDConfig,int,MutablePointValues,int,int).mjava","commits":[{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sort(BKDConfig,int,MutablePointValues,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sort(int,int,MutablePointValues,int,int).mjava","sourceNew":"  /** Sort the given {@link MutablePointValues} based on its packed value then doc ID. */\n  public static void sort(BKDConfig config, int maxDoc,\n                          MutablePointValues reader, int from, int to) {\n    final int bitsPerDocId = PackedInts.bitsRequired(maxDoc - 1);\n    new MSBRadixSorter(config.packedBytesLength + (bitsPerDocId + 7) / 8) {\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected int byteAt(int i, int k) {\n        if (k < config.packedBytesLength) {\n          return Byte.toUnsignedInt(reader.getByteAt(i, k));\n        } else {\n          final int shift = bitsPerDocId - ((k - config.packedBytesLength + 1) << 3);\n          return (reader.getDocID(i) >>> Math.max(0, shift)) & 0xff;\n        }\n      }\n\n      @Override\n      protected org.apache.lucene.util.Sorter getFallbackSorter(int k) {\n        return new IntroSorter() {\n\n          final BytesRef pivot = new BytesRef();\n          final BytesRef scratch = new BytesRef();\n          int pivotDoc;\n\n          @Override\n          protected void swap(int i, int j) {\n            reader.swap(i, j);\n          }\n\n          @Override\n          protected void setPivot(int i) {\n            reader.getValue(i, pivot);\n            pivotDoc = reader.getDocID(i);\n          }\n\n          @Override\n          protected int comparePivot(int j) {\n            if (k < config.packedBytesLength) {\n              reader.getValue(j, scratch);\n              int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + k, pivot.offset + k + config.packedBytesLength - k,\n                  scratch.bytes, scratch.offset + k, scratch.offset + k + config.packedBytesLength - k);\n              if (cmp != 0) {\n                return cmp;\n              }\n            }\n            return pivotDoc - reader.getDocID(j);\n          }\n        };\n      }\n\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort the given {@link MutablePointValues} based on its packed value then doc ID. */\n  public static void sort(int maxDoc, int packedBytesLength,\n                          MutablePointValues reader, int from, int to) {\n    final int bitsPerDocId = PackedInts.bitsRequired(maxDoc - 1);\n    new MSBRadixSorter(packedBytesLength + (bitsPerDocId + 7) / 8) {\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected int byteAt(int i, int k) {\n        if (k < packedBytesLength) {\n          return Byte.toUnsignedInt(reader.getByteAt(i, k));\n        } else {\n          final int shift = bitsPerDocId - ((k - packedBytesLength + 1) << 3);\n          return (reader.getDocID(i) >>> Math.max(0, shift)) & 0xff;\n        }\n      }\n\n      @Override\n      protected org.apache.lucene.util.Sorter getFallbackSorter(int k) {\n        return new IntroSorter() {\n\n          final BytesRef pivot = new BytesRef();\n          final BytesRef scratch = new BytesRef();\n          int pivotDoc;\n\n          @Override\n          protected void swap(int i, int j) {\n            reader.swap(i, j);\n          }\n\n          @Override\n          protected void setPivot(int i) {\n            reader.getValue(i, pivot);\n            pivotDoc = reader.getDocID(i);\n          }\n\n          @Override\n          protected int comparePivot(int j) {\n            if (k < packedBytesLength) {\n              reader.getValue(j, scratch);\n              int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + k, pivot.offset + k + packedBytesLength - k,\n                  scratch.bytes, scratch.offset + k, scratch.offset + k + packedBytesLength - k);\n              if (cmp != 0) {\n                return cmp;\n              }\n            }\n            return pivotDoc - reader.getDocID(j);\n          }\n        };\n      }\n\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}