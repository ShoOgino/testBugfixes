{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#close().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager#close().mjava","sourceNew":"  /** Close this to future searching; any searches still in\n   *  process in other threads won't be affected, and they\n   *  should still call {@link #release} after they are\n   *  done.\n   *\n   *  <p><b>NOTE: you must ensure no other threads are\n   *  calling {@link #record} while you call close();\n   *  otherwise it's possible not all searcher references\n   *  will be freed. */\n  @Override\n  public synchronized void close() throws IOException {\n    closed = true;\n    final List<SearcherTracker> toClose = new ArrayList<SearcherTracker>(searchers.values());\n\n    // Remove up front in case exc below, so we don't\n    // over-decRef on double-close:\n    for(SearcherTracker tracker : toClose) {\n      searchers.remove(tracker.version);\n    }\n\n    IOUtils.close(toClose);\n\n    // Make some effort to catch mis-use:\n    if (searchers.size() != 0) {\n      throw new IllegalStateException(\"another thread called record while this SearcherLifetimeManager instance was being closed; not all searchers were closed\");\n    }\n  }\n\n","sourceOld":"  /** Close this to future searching; any searches still in\n   *  process in other threads won't be affected, and they\n   *  should still call {@link #release} after they are\n   *  done.\n   *\n   *  <p><b>NOTE: you must ensure no other threads are\n   *  calling {@link #record} while you call close();\n   *  otherwise it's possible not all searcher references\n   *  will be freed. */\n  @Override\n  public synchronized void close() throws IOException {\n    closed = true;\n    final List<SearcherTracker> toClose = new ArrayList<SearcherTracker>(searchers.values());\n\n    // Remove up front in case exc below, so we don't\n    // over-decRef on double-close:\n    for(SearcherTracker tracker : toClose) {\n      searchers.remove(tracker.version);\n    }\n\n    IOUtils.close(toClose);\n\n    // Make some effort to catch mis-use:\n    if (searchers.size() != 0) {\n      throw new IllegalStateException(\"another thread called record while this SearcherLifetimeManager instance was being closed; not all searchers were closed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccabfc8011f977f52dc687bb0ab2573820675e01","date":1351134700,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#close().mjava","sourceNew":"  /** Close this to future searching; any searches still in\n   *  process in other threads won't be affected, and they\n   *  should still call {@link #release} after they are\n   *  done.\n   *\n   *  <p><b>NOTE</b>: you must ensure no other threads are\n   *  calling {@link #record} while you call close();\n   *  otherwise it's possible not all searcher references\n   *  will be freed. */\n  @Override\n  public synchronized void close() throws IOException {\n    closed = true;\n    final List<SearcherTracker> toClose = new ArrayList<SearcherTracker>(searchers.values());\n\n    // Remove up front in case exc below, so we don't\n    // over-decRef on double-close:\n    for(SearcherTracker tracker : toClose) {\n      searchers.remove(tracker.version);\n    }\n\n    IOUtils.close(toClose);\n\n    // Make some effort to catch mis-use:\n    if (searchers.size() != 0) {\n      throw new IllegalStateException(\"another thread called record while this SearcherLifetimeManager instance was being closed; not all searchers were closed\");\n    }\n  }\n\n","sourceOld":"  /** Close this to future searching; any searches still in\n   *  process in other threads won't be affected, and they\n   *  should still call {@link #release} after they are\n   *  done.\n   *\n   *  <p><b>NOTE: you must ensure no other threads are\n   *  calling {@link #record} while you call close();\n   *  otherwise it's possible not all searcher references\n   *  will be freed. */\n  @Override\n  public synchronized void close() throws IOException {\n    closed = true;\n    final List<SearcherTracker> toClose = new ArrayList<SearcherTracker>(searchers.values());\n\n    // Remove up front in case exc below, so we don't\n    // over-decRef on double-close:\n    for(SearcherTracker tracker : toClose) {\n      searchers.remove(tracker.version);\n    }\n\n    IOUtils.close(toClose);\n\n    // Make some effort to catch mis-use:\n    if (searchers.size() != 0) {\n      throw new IllegalStateException(\"another thread called record while this SearcherLifetimeManager instance was being closed; not all searchers were closed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#close().mjava","sourceNew":"  /** Close this to future searching; any searches still in\n   *  process in other threads won't be affected, and they\n   *  should still call {@link #release} after they are\n   *  done.\n   *\n   *  <p><b>NOTE</b>: you must ensure no other threads are\n   *  calling {@link #record} while you call close();\n   *  otherwise it's possible not all searcher references\n   *  will be freed. */\n  @Override\n  public synchronized void close() throws IOException {\n    closed = true;\n    final List<SearcherTracker> toClose = new ArrayList<SearcherTracker>(searchers.values());\n\n    // Remove up front in case exc below, so we don't\n    // over-decRef on double-close:\n    for(SearcherTracker tracker : toClose) {\n      searchers.remove(tracker.version);\n    }\n\n    IOUtils.close(toClose);\n\n    // Make some effort to catch mis-use:\n    if (searchers.size() != 0) {\n      throw new IllegalStateException(\"another thread called record while this SearcherLifetimeManager instance was being closed; not all searchers were closed\");\n    }\n  }\n\n","sourceOld":"  /** Close this to future searching; any searches still in\n   *  process in other threads won't be affected, and they\n   *  should still call {@link #release} after they are\n   *  done.\n   *\n   *  <p><b>NOTE: you must ensure no other threads are\n   *  calling {@link #record} while you call close();\n   *  otherwise it's possible not all searcher references\n   *  will be freed. */\n  @Override\n  public synchronized void close() throws IOException {\n    closed = true;\n    final List<SearcherTracker> toClose = new ArrayList<SearcherTracker>(searchers.values());\n\n    // Remove up front in case exc below, so we don't\n    // over-decRef on double-close:\n    for(SearcherTracker tracker : toClose) {\n      searchers.remove(tracker.version);\n    }\n\n    IOUtils.close(toClose);\n\n    // Make some effort to catch mis-use:\n    if (searchers.size() != 0) {\n      throw new IllegalStateException(\"another thread called record while this SearcherLifetimeManager instance was being closed; not all searchers were closed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#close().mjava","sourceNew":"  /** Close this to future searching; any searches still in\n   *  process in other threads won't be affected, and they\n   *  should still call {@link #release} after they are\n   *  done.\n   *\n   *  <p><b>NOTE</b>: you must ensure no other threads are\n   *  calling {@link #record} while you call close();\n   *  otherwise it's possible not all searcher references\n   *  will be freed. */\n  @Override\n  public synchronized void close() throws IOException {\n    closed = true;\n    final List<SearcherTracker> toClose = new ArrayList<>(searchers.values());\n\n    // Remove up front in case exc below, so we don't\n    // over-decRef on double-close:\n    for(SearcherTracker tracker : toClose) {\n      searchers.remove(tracker.version);\n    }\n\n    IOUtils.close(toClose);\n\n    // Make some effort to catch mis-use:\n    if (searchers.size() != 0) {\n      throw new IllegalStateException(\"another thread called record while this SearcherLifetimeManager instance was being closed; not all searchers were closed\");\n    }\n  }\n\n","sourceOld":"  /** Close this to future searching; any searches still in\n   *  process in other threads won't be affected, and they\n   *  should still call {@link #release} after they are\n   *  done.\n   *\n   *  <p><b>NOTE</b>: you must ensure no other threads are\n   *  calling {@link #record} while you call close();\n   *  otherwise it's possible not all searcher references\n   *  will be freed. */\n  @Override\n  public synchronized void close() throws IOException {\n    closed = true;\n    final List<SearcherTracker> toClose = new ArrayList<SearcherTracker>(searchers.values());\n\n    // Remove up front in case exc below, so we don't\n    // over-decRef on double-close:\n    for(SearcherTracker tracker : toClose) {\n      searchers.remove(tracker.version);\n    }\n\n    IOUtils.close(toClose);\n\n    // Make some effort to catch mis-use:\n    if (searchers.size() != 0) {\n      throw new IllegalStateException(\"another thread called record while this SearcherLifetimeManager instance was being closed; not all searchers were closed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ccabfc8011f977f52dc687bb0ab2573820675e01"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2126b84bd093fa3d921582a109a0ee578c28126":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ccabfc8011f977f52dc687bb0ab2573820675e01"],"ccabfc8011f977f52dc687bb0ab2573820675e01":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f2126b84bd093fa3d921582a109a0ee578c28126","ccabfc8011f977f52dc687bb0ab2573820675e01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"ccabfc8011f977f52dc687bb0ab2573820675e01":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}