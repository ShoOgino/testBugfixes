{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/DepthOneFacetResultsHandler#compute().mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DepthOneFacetResultsHandler#compute().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final FacetResult compute() throws IOException {\n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    \n    int rootOrd = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n        \n    FacetResultNode root = new FacetResultNode();\n    root.ordinal = rootOrd;\n    root.label = facetRequest.categoryPath;\n    root.value = valueOf(rootOrd);\n    if (facetRequest.numResults > taxonomyReader.getSize()) {\n      // specialize this case, user is interested in all available results\n      ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n      int child = children[rootOrd];\n      addSiblings(child, siblings, nodes);\n      Collections.sort(nodes, new Comparator<FacetResultNode>() {\n        @Override\n        public int compare(FacetResultNode o1, FacetResultNode o2) {\n          int value = (int) (o2.value - o1.value);\n          if (value == 0) {\n            value = o2.ordinal - o1.ordinal;\n          }\n          return value;\n        }\n      });\n      \n      root.subResults = nodes;\n      return new FacetResult(facetRequest, root, nodes.size());\n    }\n    \n    // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n    PriorityQueue<FacetResultNode> pq = new FacetResultNodeQueue(facetRequest.numResults, true);\n    int numResults = addSiblings(children[rootOrd], siblings, pq);\n\n    // pop() the least (sentinel) elements\n    int pqsize = pq.size();\n    int size = numResults < pqsize ? numResults : pqsize;\n    for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n    // create the FacetResultNodes.\n    FacetResultNode[] subResults = new FacetResultNode[size];\n    for (int i = size - 1; i >= 0; i--) {\n      FacetResultNode node = pq.pop();\n      node.label = taxonomyReader.getPath(node.ordinal);\n      subResults[i] = node;\n    }\n    root.subResults = Arrays.asList(subResults);\n    return new FacetResult(facetRequest, root, size);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d1f7dc2d5ba61f478d9439f5b6afe27c8809422a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1f7dc2d5ba61f478d9439f5b6afe27c8809422a","date":1365621037,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DepthOneFacetResultsHandler#compute().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DepthOneFacetResultsHandler#compute().mjava","sourceNew":"  @Override\n  public final FacetResult compute() throws IOException {\n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    \n    int rootOrd = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n        \n    FacetResultNode root = new FacetResultNode(rootOrd, valueOf(rootOrd));\n    root.label = facetRequest.categoryPath;\n    if (facetRequest.numResults > taxonomyReader.getSize()) {\n      // specialize this case, user is interested in all available results\n      ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n      int child = children[rootOrd];\n      addSiblings(child, siblings, nodes);\n      Collections.sort(nodes, new Comparator<FacetResultNode>() {\n        @Override\n        public int compare(FacetResultNode o1, FacetResultNode o2) {\n          int value = (int) (o2.value - o1.value);\n          if (value == 0) {\n            value = o2.ordinal - o1.ordinal;\n          }\n          return value;\n        }\n      });\n      \n      root.subResults = nodes;\n      return new FacetResult(facetRequest, root, nodes.size());\n    }\n    \n    // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n    PriorityQueue<FacetResultNode> pq = new FacetResultNodeQueue(facetRequest.numResults, true);\n    int numSiblings = addSiblings(children[rootOrd], siblings, pq);\n\n    // pop() the least (sentinel) elements\n    int pqsize = pq.size();\n    int size = numSiblings < pqsize ? numSiblings : pqsize;\n    for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n    // create the FacetResultNodes.\n    FacetResultNode[] subResults = new FacetResultNode[size];\n    for (int i = size - 1; i >= 0; i--) {\n      FacetResultNode node = pq.pop();\n      node.label = taxonomyReader.getPath(node.ordinal);\n      subResults[i] = node;\n    }\n    root.subResults = Arrays.asList(subResults);\n    return new FacetResult(facetRequest, root, numSiblings);\n  }\n\n","sourceOld":"  @Override\n  public final FacetResult compute() throws IOException {\n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    \n    int rootOrd = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n        \n    FacetResultNode root = new FacetResultNode();\n    root.ordinal = rootOrd;\n    root.label = facetRequest.categoryPath;\n    root.value = valueOf(rootOrd);\n    if (facetRequest.numResults > taxonomyReader.getSize()) {\n      // specialize this case, user is interested in all available results\n      ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n      int child = children[rootOrd];\n      addSiblings(child, siblings, nodes);\n      Collections.sort(nodes, new Comparator<FacetResultNode>() {\n        @Override\n        public int compare(FacetResultNode o1, FacetResultNode o2) {\n          int value = (int) (o2.value - o1.value);\n          if (value == 0) {\n            value = o2.ordinal - o1.ordinal;\n          }\n          return value;\n        }\n      });\n      \n      root.subResults = nodes;\n      return new FacetResult(facetRequest, root, nodes.size());\n    }\n    \n    // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n    PriorityQueue<FacetResultNode> pq = new FacetResultNodeQueue(facetRequest.numResults, true);\n    int numResults = addSiblings(children[rootOrd], siblings, pq);\n\n    // pop() the least (sentinel) elements\n    int pqsize = pq.size();\n    int size = numResults < pqsize ? numResults : pqsize;\n    for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n    // create the FacetResultNodes.\n    FacetResultNode[] subResults = new FacetResultNode[size];\n    for (int i = size - 1; i >= 0; i--) {\n      FacetResultNode node = pq.pop();\n      node.label = taxonomyReader.getPath(node.ordinal);\n      subResults[i] = node;\n    }\n    root.subResults = Arrays.asList(subResults);\n    return new FacetResult(facetRequest, root, size);\n  }\n\n","bugFix":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b1c67b5eba853532b31132bf5aef70a3b2be63f","date":1375351298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DepthOneFacetResultsHandler#compute().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DepthOneFacetResultsHandler#compute().mjava","sourceNew":"  @Override\n  public final FacetResult compute() throws IOException {\n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    \n    int rootOrd = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n        \n    FacetResultNode root = new FacetResultNode(rootOrd, resolver.valueOf(rootOrd));\n    root.label = facetRequest.categoryPath;\n    if (facetRequest.numResults > taxonomyReader.getSize()) {\n      // specialize this case, user is interested in all available results\n      ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n      int ordinal = children[rootOrd];\n      while (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n        double value = resolver.valueOf(ordinal);\n        if (value > 0) {\n          FacetResultNode node = new FacetResultNode(ordinal, value);\n          node.label = taxonomyReader.getPath(ordinal);\n          nodes.add(node);\n        }\n        ordinal = siblings[ordinal];\n      }\n\n      CollectionUtil.introSort(nodes, Collections.reverseOrder(new Comparator<FacetResultNode>() {\n        @Override\n        public int compare(FacetResultNode o1, FacetResultNode o2) {\n          return o1.compareTo(o2);\n        }\n      }));\n      \n      root.subResults = nodes;\n      return new FacetResult(facetRequest, root, nodes.size());\n    }\n    \n    // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n    PriorityQueue<FacetResultNode> pq = new FacetResultNodeQueue(facetRequest.numResults, true);\n    int ordinal = children[rootOrd];\n    FacetResultNode top = pq.top();\n    int numSiblings = 0;\n    while (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = resolver.valueOf(ordinal);\n      if (value > 0) {\n        ++numSiblings;\n        if (value > top.value) {\n          top.value = value;\n          top.ordinal = ordinal;\n          top = pq.updateTop();\n        }\n      }\n      ordinal = siblings[ordinal];\n    }\n\n    // pop() the least (sentinel) elements\n    int pqsize = pq.size();\n    int size = numSiblings < pqsize ? numSiblings : pqsize;\n    for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n    // create the FacetResultNodes.\n    FacetResultNode[] subResults = new FacetResultNode[size];\n    for (int i = size - 1; i >= 0; i--) {\n      FacetResultNode node = pq.pop();\n      node.label = taxonomyReader.getPath(node.ordinal);\n      subResults[i] = node;\n    }\n    root.subResults = Arrays.asList(subResults);\n    return new FacetResult(facetRequest, root, numSiblings);\n  }\n\n","sourceOld":"  @Override\n  public final FacetResult compute() throws IOException {\n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    \n    int rootOrd = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n        \n    FacetResultNode root = new FacetResultNode(rootOrd, valueOf(rootOrd));\n    root.label = facetRequest.categoryPath;\n    if (facetRequest.numResults > taxonomyReader.getSize()) {\n      // specialize this case, user is interested in all available results\n      ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n      int child = children[rootOrd];\n      addSiblings(child, siblings, nodes);\n      Collections.sort(nodes, new Comparator<FacetResultNode>() {\n        @Override\n        public int compare(FacetResultNode o1, FacetResultNode o2) {\n          int value = (int) (o2.value - o1.value);\n          if (value == 0) {\n            value = o2.ordinal - o1.ordinal;\n          }\n          return value;\n        }\n      });\n      \n      root.subResults = nodes;\n      return new FacetResult(facetRequest, root, nodes.size());\n    }\n    \n    // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n    PriorityQueue<FacetResultNode> pq = new FacetResultNodeQueue(facetRequest.numResults, true);\n    int numSiblings = addSiblings(children[rootOrd], siblings, pq);\n\n    // pop() the least (sentinel) elements\n    int pqsize = pq.size();\n    int size = numSiblings < pqsize ? numSiblings : pqsize;\n    for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n    // create the FacetResultNodes.\n    FacetResultNode[] subResults = new FacetResultNode[size];\n    for (int i = size - 1; i >= 0; i--) {\n      FacetResultNode node = pq.pop();\n      node.label = taxonomyReader.getPath(node.ordinal);\n      subResults[i] = node;\n    }\n    root.subResults = Arrays.asList(subResults);\n    return new FacetResult(facetRequest, root, numSiblings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DepthOneFacetResultsHandler#compute().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DepthOneFacetResultsHandler#compute().mjava","sourceNew":"  @Override\n  public final FacetResult compute() throws IOException {\n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    \n    int rootOrd = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n        \n    FacetResultNode root = new FacetResultNode(rootOrd, resolver.valueOf(rootOrd));\n    root.label = facetRequest.categoryPath;\n    if (facetRequest.numResults > taxonomyReader.getSize()) {\n      // specialize this case, user is interested in all available results\n      ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n      int ordinal = children[rootOrd];\n      while (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n        double value = resolver.valueOf(ordinal);\n        if (value > 0) {\n          FacetResultNode node = new FacetResultNode(ordinal, value);\n          node.label = taxonomyReader.getPath(ordinal);\n          nodes.add(node);\n        }\n        ordinal = siblings[ordinal];\n      }\n\n      CollectionUtil.introSort(nodes, Collections.reverseOrder(new Comparator<FacetResultNode>() {\n        @Override\n        public int compare(FacetResultNode o1, FacetResultNode o2) {\n          return o1.compareTo(o2);\n        }\n      }));\n      \n      root.subResults = nodes;\n      return new FacetResult(facetRequest, root, nodes.size());\n    }\n    \n    // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n    PriorityQueue<FacetResultNode> pq = new FacetResultNodeQueue(facetRequest.numResults, true);\n    int ordinal = children[rootOrd];\n    FacetResultNode top = pq.top();\n    int numSiblings = 0;\n    while (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = resolver.valueOf(ordinal);\n      if (value > 0) {\n        ++numSiblings;\n        if (value > top.value) {\n          top.value = value;\n          top.ordinal = ordinal;\n          top = pq.updateTop();\n        }\n      }\n      ordinal = siblings[ordinal];\n    }\n\n    // pop() the least (sentinel) elements\n    int pqsize = pq.size();\n    int size = numSiblings < pqsize ? numSiblings : pqsize;\n    for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n    // create the FacetResultNodes.\n    FacetResultNode[] subResults = new FacetResultNode[size];\n    for (int i = size - 1; i >= 0; i--) {\n      FacetResultNode node = pq.pop();\n      node.label = taxonomyReader.getPath(node.ordinal);\n      subResults[i] = node;\n    }\n    root.subResults = Arrays.asList(subResults);\n    return new FacetResult(facetRequest, root, numSiblings);\n  }\n\n","sourceOld":"  @Override\n  public final FacetResult compute() throws IOException {\n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    \n    int rootOrd = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n        \n    FacetResultNode root = new FacetResultNode(rootOrd, valueOf(rootOrd));\n    root.label = facetRequest.categoryPath;\n    if (facetRequest.numResults > taxonomyReader.getSize()) {\n      // specialize this case, user is interested in all available results\n      ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n      int child = children[rootOrd];\n      addSiblings(child, siblings, nodes);\n      Collections.sort(nodes, new Comparator<FacetResultNode>() {\n        @Override\n        public int compare(FacetResultNode o1, FacetResultNode o2) {\n          int value = (int) (o2.value - o1.value);\n          if (value == 0) {\n            value = o2.ordinal - o1.ordinal;\n          }\n          return value;\n        }\n      });\n      \n      root.subResults = nodes;\n      return new FacetResult(facetRequest, root, nodes.size());\n    }\n    \n    // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n    PriorityQueue<FacetResultNode> pq = new FacetResultNodeQueue(facetRequest.numResults, true);\n    int numSiblings = addSiblings(children[rootOrd], siblings, pq);\n\n    // pop() the least (sentinel) elements\n    int pqsize = pq.size();\n    int size = numSiblings < pqsize ? numSiblings : pqsize;\n    for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n    // create the FacetResultNodes.\n    FacetResultNode[] subResults = new FacetResultNode[size];\n    for (int i = size - 1; i >= 0; i--) {\n      FacetResultNode node = pq.pop();\n      node.label = taxonomyReader.getPath(node.ordinal);\n      subResults[i] = node;\n    }\n    root.subResults = Arrays.asList(subResults);\n    return new FacetResult(facetRequest, root, numSiblings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DepthOneFacetResultsHandler#compute().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final FacetResult compute() throws IOException {\n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    \n    int rootOrd = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n        \n    FacetResultNode root = new FacetResultNode(rootOrd, resolver.valueOf(rootOrd));\n    root.label = facetRequest.categoryPath;\n    if (facetRequest.numResults > taxonomyReader.getSize()) {\n      // specialize this case, user is interested in all available results\n      ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n      int ordinal = children[rootOrd];\n      while (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n        double value = resolver.valueOf(ordinal);\n        if (value > 0) {\n          FacetResultNode node = new FacetResultNode(ordinal, value);\n          node.label = taxonomyReader.getPath(ordinal);\n          nodes.add(node);\n        }\n        ordinal = siblings[ordinal];\n      }\n\n      CollectionUtil.introSort(nodes, Collections.reverseOrder(new Comparator<FacetResultNode>() {\n        @Override\n        public int compare(FacetResultNode o1, FacetResultNode o2) {\n          return o1.compareTo(o2);\n        }\n      }));\n      \n      root.subResults = nodes;\n      return new FacetResult(facetRequest, root, nodes.size());\n    }\n    \n    // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n    PriorityQueue<FacetResultNode> pq = new FacetResultNodeQueue(facetRequest.numResults, true);\n    int ordinal = children[rootOrd];\n    FacetResultNode top = pq.top();\n    int numSiblings = 0;\n    while (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = resolver.valueOf(ordinal);\n      if (value > 0) {\n        ++numSiblings;\n        if (value > top.value) {\n          top.value = value;\n          top.ordinal = ordinal;\n          top = pq.updateTop();\n        }\n      }\n      ordinal = siblings[ordinal];\n    }\n\n    // pop() the least (sentinel) elements\n    int pqsize = pq.size();\n    int size = numSiblings < pqsize ? numSiblings : pqsize;\n    for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n    // create the FacetResultNodes.\n    FacetResultNode[] subResults = new FacetResultNode[size];\n    for (int i = size - 1; i >= 0; i--) {\n      FacetResultNode node = pq.pop();\n      node.label = taxonomyReader.getPath(node.ordinal);\n      subResults[i] = node;\n    }\n    root.subResults = Arrays.asList(subResults);\n    return new FacetResult(facetRequest, root, numSiblings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DepthOneFacetResultsHandler#compute().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final FacetResult compute() throws IOException {\n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    \n    int rootOrd = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n        \n    FacetResultNode root = new FacetResultNode(rootOrd, resolver.valueOf(rootOrd));\n    root.label = facetRequest.categoryPath;\n    if (facetRequest.numResults > taxonomyReader.getSize()) {\n      // specialize this case, user is interested in all available results\n      ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n      int ordinal = children[rootOrd];\n      while (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n        double value = resolver.valueOf(ordinal);\n        if (value > 0) {\n          FacetResultNode node = new FacetResultNode(ordinal, value);\n          node.label = taxonomyReader.getPath(ordinal);\n          nodes.add(node);\n        }\n        ordinal = siblings[ordinal];\n      }\n\n      CollectionUtil.introSort(nodes, Collections.reverseOrder(new Comparator<FacetResultNode>() {\n        @Override\n        public int compare(FacetResultNode o1, FacetResultNode o2) {\n          return o1.compareTo(o2);\n        }\n      }));\n      \n      root.subResults = nodes;\n      return new FacetResult(facetRequest, root, nodes.size());\n    }\n    \n    // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n    PriorityQueue<FacetResultNode> pq = new FacetResultNodeQueue(facetRequest.numResults, true);\n    int ordinal = children[rootOrd];\n    FacetResultNode top = pq.top();\n    int numSiblings = 0;\n    while (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = resolver.valueOf(ordinal);\n      if (value > 0) {\n        ++numSiblings;\n        if (value > top.value) {\n          top.value = value;\n          top.ordinal = ordinal;\n          top = pq.updateTop();\n        }\n      }\n      ordinal = siblings[ordinal];\n    }\n\n    // pop() the least (sentinel) elements\n    int pqsize = pq.size();\n    int size = numSiblings < pqsize ? numSiblings : pqsize;\n    for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n    // create the FacetResultNodes.\n    FacetResultNode[] subResults = new FacetResultNode[size];\n    for (int i = size - 1; i >= 0; i--) {\n      FacetResultNode node = pq.pop();\n      node.label = taxonomyReader.getPath(node.ordinal);\n      subResults[i] = node;\n    }\n    root.subResults = Arrays.asList(subResults);\n    return new FacetResult(facetRequest, root, numSiblings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["d1f7dc2d5ba61f478d9439f5b6afe27c8809422a"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3b1c67b5eba853532b31132bf5aef70a3b2be63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f7dc2d5ba61f478d9439f5b6afe27c8809422a":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d1f7dc2d5ba61f478d9439f5b6afe27c8809422a"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3b1c67b5eba853532b31132bf5aef70a3b2be63f","d33e19a97046248623a7591aeaa6547233fd15e2"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"d1f7dc2d5ba61f478d9439f5b6afe27c8809422a":["3b1c67b5eba853532b31132bf5aef70a3b2be63f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["d1f7dc2d5ba61f478d9439f5b6afe27c8809422a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}