{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public String format(Passage passages[], String content) {\n        StringBuilder sb = new StringBuilder();\n        int pos = 0;\n        for (Passage passage : passages) {\n            // don't add ellipsis if its the first one, or if its connected.\n            if (passage.startOffset > pos && pos > 0) {\n                sb.append(ellipsis);\n            }\n            pos = passage.startOffset;\n            for (int i = 0; i < passage.numMatches; i++) {\n                int start = passage.matchStarts[i];\n                int end = passage.matchEnds[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                    append(sb, content, pos, start);\n                }\n                if (end > pos) {\n                    sb.append(preTag);\n                    append(sb, content, Math.max(pos, start), end);\n                    sb.append(postTag);\n                    pos = end;\n                }\n            }\n            // its possible a \"term\" from the analyzer could span a sentence boundary.\n            append(sb, content, pos, Math.max(pos, passage.endOffset));\n            pos = passage.endOffset;\n        }\n        return sb.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public String format(Passage passages[], String content) {\n        StringBuilder sb = new StringBuilder();\n        int pos = 0;\n        for (Passage passage : passages) {\n            // don't add ellipsis if its the first one, or if its connected.\n            if (passage.startOffset > pos && pos > 0) {\n                sb.append(ellipsis);\n            }\n            pos = passage.startOffset;\n            for (int i = 0; i < passage.numMatches; i++) {\n                int start = passage.matchStarts[i];\n                int end = passage.matchEnds[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                    append(sb, content, pos, start);\n                }\n                if (end > pos) {\n                    sb.append(preTag);\n                    append(sb, content, Math.max(pos, start), end);\n                    sb.append(postTag);\n                    pos = end;\n                }\n            }\n            // its possible a \"term\" from the analyzer could span a sentence boundary.\n            append(sb, content, pos, Math.max(pos, passage.endOffset));\n            pos = passage.endOffset;\n        }\n        return sb.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f714d649962c934166dedd1e83173e36356b328","date":1479399594,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","sourceNew":"    @Override\n    public String format(Passage passages[], String content) {\n        StringBuilder sb = new StringBuilder();\n        int pos = 0;\n        for (Passage passage : passages) {\n            // don't add ellipsis if its the first one, or if its connected.\n            if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(ellipsis);\n            }\n            pos = passage.getStartOffset();\n            for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                    append(sb, content, pos, start);\n                }\n                if (end > pos) {\n                    sb.append(preTag);\n                    append(sb, content, Math.max(pos, start), end);\n                    sb.append(postTag);\n                    pos = end;\n                }\n            }\n            // its possible a \"term\" from the analyzer could span a sentence boundary.\n            append(sb, content, pos, Math.max(pos, passage.getEndOffset()));\n            pos = passage.getEndOffset();\n        }\n        return sb.toString();\n    }\n\n","sourceOld":"    @Override\n    public String format(Passage passages[], String content) {\n        StringBuilder sb = new StringBuilder();\n        int pos = 0;\n        for (Passage passage : passages) {\n            // don't add ellipsis if its the first one, or if its connected.\n            if (passage.startOffset > pos && pos > 0) {\n                sb.append(ellipsis);\n            }\n            pos = passage.startOffset;\n            for (int i = 0; i < passage.numMatches; i++) {\n                int start = passage.matchStarts[i];\n                int end = passage.matchEnds[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                    append(sb, content, pos, start);\n                }\n                if (end > pos) {\n                    sb.append(preTag);\n                    append(sb, content, Math.max(pos, start), end);\n                    sb.append(postTag);\n                    pos = end;\n                }\n            }\n            // its possible a \"term\" from the analyzer could span a sentence boundary.\n            append(sb, content, pos, Math.max(pos, passage.endOffset));\n            pos = passage.endOffset;\n        }\n        return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8","date":1479399820,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","sourceNew":"  @Override\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.getStartOffset() > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.getStartOffset();\n      for (int i = 0; i < passage.getNumMatches(); i++) {\n        int start = passage.getMatchStarts()[i];\n        int end = passage.getMatchEnds()[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          append(sb, content, pos, start);\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          append(sb, content, Math.max(pos, start), end);\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.getEndOffset()));\n      pos = passage.getEndOffset();\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"    @Override\n    public String format(Passage passages[], String content) {\n        StringBuilder sb = new StringBuilder();\n        int pos = 0;\n        for (Passage passage : passages) {\n            // don't add ellipsis if its the first one, or if its connected.\n            if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(ellipsis);\n            }\n            pos = passage.getStartOffset();\n            for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                    append(sb, content, pos, start);\n                }\n                if (end > pos) {\n                    sb.append(preTag);\n                    append(sb, content, Math.max(pos, start), end);\n                    sb.append(postTag);\n                    pos = end;\n                }\n            }\n            // its possible a \"term\" from the analyzer could span a sentence boundary.\n            append(sb, content, pos, Math.max(pos, passage.getEndOffset()));\n            pos = passage.getEndOffset();\n        }\n        return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","sourceNew":"  @Override\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.getStartOffset() > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.getStartOffset();\n      for (int i = 0; i < passage.getNumMatches(); i++) {\n        int start = passage.getMatchStarts()[i];\n        int end = passage.getMatchEnds()[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          append(sb, content, pos, start);\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          append(sb, content, Math.max(pos, start), end);\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.getEndOffset()));\n      pos = passage.getEndOffset();\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"    @Override\n    public String format(Passage passages[], String content) {\n        StringBuilder sb = new StringBuilder();\n        int pos = 0;\n        for (Passage passage : passages) {\n            // don't add ellipsis if its the first one, or if its connected.\n            if (passage.startOffset > pos && pos > 0) {\n                sb.append(ellipsis);\n            }\n            pos = passage.startOffset;\n            for (int i = 0; i < passage.numMatches; i++) {\n                int start = passage.matchStarts[i];\n                int end = passage.matchEnds[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                    append(sb, content, pos, start);\n                }\n                if (end > pos) {\n                    sb.append(preTag);\n                    append(sb, content, Math.max(pos, start), end);\n                    sb.append(postTag);\n                    pos = end;\n                }\n            }\n            // its possible a \"term\" from the analyzer could span a sentence boundary.\n            append(sb, content, pos, Math.max(pos, passage.endOffset));\n            pos = passage.endOffset;\n        }\n        return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1548b5cb1c65d84a553dae805cd10643dfee307a","date":1534187883,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/DefaultPassageFormatter#format(Passage[],String).mjava","sourceNew":"  @Override\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.getStartOffset() > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.getStartOffset();\n      for (int i = 0; i < passage.getNumMatches(); i++) {\n        int start = passage.getMatchStarts()[i];\n        assert start >= pos && start < passage.getEndOffset();\n        //append content before this start\n        append(sb, content, pos, start);\n\n        int end = passage.getMatchEnds()[i];\n        assert end > start;\n        // its possible to have overlapping terms.\n        //   Look ahead to expand 'end' past all overlapping:\n        while (i + 1 < passage.getNumMatches() && passage.getMatchStarts()[i+1] < end) {\n          end = passage.getMatchEnds()[++i];\n        }\n        end = Math.min(end, passage.getEndOffset()); // in case match straddles past passage\n\n        sb.append(preTag);\n        append(sb, content, start, end);\n        sb.append(postTag);\n\n        pos = end;\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.getEndOffset()));\n      pos = passage.getEndOffset();\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.getStartOffset() > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.getStartOffset();\n      for (int i = 0; i < passage.getNumMatches(); i++) {\n        int start = passage.getMatchStarts()[i];\n        int end = passage.getMatchEnds()[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          append(sb, content, pos, start);\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          append(sb, content, Math.max(pos, start), end);\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.getEndOffset()));\n      pos = passage.getEndOffset();\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1548b5cb1c65d84a553dae805cd10643dfee307a":["2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f714d649962c934166dedd1e83173e36356b328":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8":["1f714d649962c934166dedd1e83173e36356b328"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1548b5cb1c65d84a553dae805cd10643dfee307a"]},"commit2Childs":{"1548b5cb1c65d84a553dae805cd10643dfee307a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["1f714d649962c934166dedd1e83173e36356b328","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f714d649962c934166dedd1e83173e36356b328":["2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8"],"2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8":["1548b5cb1c65d84a553dae805cd10643dfee307a","2e859e664a65796dadf8aaf65db6f66f3a885368"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2e859e664a65796dadf8aaf65db6f66f3a885368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}