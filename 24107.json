{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMixedOptions().mjava","commits":[{"id":"f21ce13f410ee015e1ba14687ab4b8518ac52a11","date":1359713213,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMixedOptions().mjava","pathOld":"/dev/null","sourceNew":"  // different options for the same field\n  public void testMixedOptions() throws IOException {\n    final int numFields = _TestUtil.nextInt(random(), 1, 3);\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(numFields, 10);\n    for (Options options1 : validOptions()) {\n      for (Options options2 : validOptions()) {\n        if (options1 == options2) {\n          continue;\n        }\n        final Directory dir = newDirectory();\n        final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n        final RandomDocument doc1 = docFactory.newDocument(numFields, 20, options1);\n        final RandomDocument doc2 = docFactory.newDocument(numFields, 20,  options2);\n        writer.addDocument(addId(doc1.toDocument(), \"1\"));\n        writer.addDocument(addId(doc2.toDocument(), \"2\"));\n        final IndexReader reader = writer.getReader();\n        final int doc1ID = docID(reader, \"1\");\n        assertEquals(doc1, reader.getTermVectors(doc1ID));\n        final int doc2ID = docID(reader, \"2\");\n        assertEquals(doc2, reader.getTermVectors(doc2ID));\n        reader.close();\n        writer.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa6955ed1b1007ded1349ab72cea4555640432f","date":1359721908,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMixedOptions().mjava","pathOld":"/dev/null","sourceNew":"  // different options for the same field\n  public void testMixedOptions() throws IOException {\n    final int numFields = _TestUtil.nextInt(random(), 1, 3);\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(numFields, 10);\n    for (Options options1 : validOptions()) {\n      for (Options options2 : validOptions()) {\n        if (options1 == options2) {\n          continue;\n        }\n        final Directory dir = newDirectory();\n        final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n        final RandomDocument doc1 = docFactory.newDocument(numFields, 20, options1);\n        final RandomDocument doc2 = docFactory.newDocument(numFields, 20,  options2);\n        writer.addDocument(addId(doc1.toDocument(), \"1\"));\n        writer.addDocument(addId(doc2.toDocument(), \"2\"));\n        final IndexReader reader = writer.getReader();\n        final int doc1ID = docID(reader, \"1\");\n        assertEquals(doc1, reader.getTermVectors(doc1ID));\n        final int doc2ID = docID(reader, \"2\");\n        assertEquals(doc2, reader.getTermVectors(doc2ID));\n        reader.close();\n        writer.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMixedOptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMixedOptions().mjava","sourceNew":"  // different options for the same field\n  public void testMixedOptions() throws IOException {\n    final int numFields = TestUtil.nextInt(random(), 1, 3);\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(numFields, 10);\n    for (Options options1 : validOptions()) {\n      for (Options options2 : validOptions()) {\n        if (options1 == options2) {\n          continue;\n        }\n        final Directory dir = newDirectory();\n        final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n        final RandomDocument doc1 = docFactory.newDocument(numFields, 20, options1);\n        final RandomDocument doc2 = docFactory.newDocument(numFields, 20,  options2);\n        writer.addDocument(addId(doc1.toDocument(), \"1\"));\n        writer.addDocument(addId(doc2.toDocument(), \"2\"));\n        final IndexReader reader = writer.getReader();\n        final int doc1ID = docID(reader, \"1\");\n        assertEquals(doc1, reader.getTermVectors(doc1ID));\n        final int doc2ID = docID(reader, \"2\");\n        assertEquals(doc2, reader.getTermVectors(doc2ID));\n        reader.close();\n        writer.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  // different options for the same field\n  public void testMixedOptions() throws IOException {\n    final int numFields = _TestUtil.nextInt(random(), 1, 3);\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(numFields, 10);\n    for (Options options1 : validOptions()) {\n      for (Options options2 : validOptions()) {\n        if (options1 == options2) {\n          continue;\n        }\n        final Directory dir = newDirectory();\n        final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n        final RandomDocument doc1 = docFactory.newDocument(numFields, 20, options1);\n        final RandomDocument doc2 = docFactory.newDocument(numFields, 20,  options2);\n        writer.addDocument(addId(doc1.toDocument(), \"1\"));\n        writer.addDocument(addId(doc2.toDocument(), \"2\"));\n        final IndexReader reader = writer.getReader();\n        final int doc1ID = docID(reader, \"1\");\n        assertEquals(doc1, reader.getTermVectors(doc1ID));\n        final int doc2ID = docID(reader, \"2\");\n        assertEquals(doc2, reader.getTermVectors(doc2ID));\n        reader.close();\n        writer.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMixedOptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMixedOptions().mjava","sourceNew":"  // different options for the same field\n  public void testMixedOptions() throws IOException {\n    final int numFields = TestUtil.nextInt(random(), 1, 3);\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(numFields, 10);\n    for (Options options1 : validOptions()) {\n      for (Options options2 : validOptions()) {\n        if (options1 == options2) {\n          continue;\n        }\n        final Directory dir = newDirectory();\n        final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n        final RandomDocument doc1 = docFactory.newDocument(numFields, 20, options1);\n        final RandomDocument doc2 = docFactory.newDocument(numFields, 20,  options2);\n        writer.addDocument(addId(doc1.toDocument(), \"1\"));\n        writer.addDocument(addId(doc2.toDocument(), \"2\"));\n        final IndexReader reader = writer.getReader();\n        final int doc1ID = docID(reader, \"1\");\n        assertEquals(doc1, reader.getTermVectors(doc1ID));\n        final int doc2ID = docID(reader, \"2\");\n        assertEquals(doc2, reader.getTermVectors(doc2ID));\n        reader.close();\n        writer.shutdown();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  // different options for the same field\n  public void testMixedOptions() throws IOException {\n    final int numFields = TestUtil.nextInt(random(), 1, 3);\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(numFields, 10);\n    for (Options options1 : validOptions()) {\n      for (Options options2 : validOptions()) {\n        if (options1 == options2) {\n          continue;\n        }\n        final Directory dir = newDirectory();\n        final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n        final RandomDocument doc1 = docFactory.newDocument(numFields, 20, options1);\n        final RandomDocument doc2 = docFactory.newDocument(numFields, 20,  options2);\n        writer.addDocument(addId(doc1.toDocument(), \"1\"));\n        writer.addDocument(addId(doc2.toDocument(), \"2\"));\n        final IndexReader reader = writer.getReader();\n        final int doc1ID = docID(reader, \"1\");\n        assertEquals(doc1, reader.getTermVectors(doc1ID));\n        final int doc2ID = docID(reader, \"2\");\n        assertEquals(doc2, reader.getTermVectors(doc2ID));\n        reader.close();\n        writer.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMixedOptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMixedOptions().mjava","sourceNew":"  // different options for the same field\n  public void testMixedOptions() throws IOException {\n    final int numFields = TestUtil.nextInt(random(), 1, 3);\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(numFields, 10);\n    for (Options options1 : validOptions()) {\n      for (Options options2 : validOptions()) {\n        if (options1 == options2) {\n          continue;\n        }\n        final Directory dir = newDirectory();\n        final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n        final RandomDocument doc1 = docFactory.newDocument(numFields, 20, options1);\n        final RandomDocument doc2 = docFactory.newDocument(numFields, 20,  options2);\n        writer.addDocument(addId(doc1.toDocument(), \"1\"));\n        writer.addDocument(addId(doc2.toDocument(), \"2\"));\n        final IndexReader reader = writer.getReader();\n        final int doc1ID = docID(reader, \"1\");\n        assertEquals(doc1, reader.getTermVectors(doc1ID));\n        final int doc2ID = docID(reader, \"2\");\n        assertEquals(doc2, reader.getTermVectors(doc2ID));\n        reader.close();\n        writer.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  // different options for the same field\n  public void testMixedOptions() throws IOException {\n    final int numFields = TestUtil.nextInt(random(), 1, 3);\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(numFields, 10);\n    for (Options options1 : validOptions()) {\n      for (Options options2 : validOptions()) {\n        if (options1 == options2) {\n          continue;\n        }\n        final Directory dir = newDirectory();\n        final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n        final RandomDocument doc1 = docFactory.newDocument(numFields, 20, options1);\n        final RandomDocument doc2 = docFactory.newDocument(numFields, 20,  options2);\n        writer.addDocument(addId(doc1.toDocument(), \"1\"));\n        writer.addDocument(addId(doc2.toDocument(), \"2\"));\n        final IndexReader reader = writer.getReader();\n        final int doc1ID = docID(reader, \"1\");\n        assertEquals(doc1, reader.getTermVectors(doc1ID));\n        final int doc2ID = docID(reader, \"2\");\n        assertEquals(doc2, reader.getTermVectors(doc2ID));\n        reader.close();\n        writer.shutdown();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fa6955ed1b1007ded1349ab72cea4555640432f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"6613659748fe4411a7dcf85266e55db1f95f7315":["f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"0fa6955ed1b1007ded1349ab72cea4555640432f":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0fa6955ed1b1007ded1349ab72cea4555640432f","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["0fa6955ed1b1007ded1349ab72cea4555640432f","6613659748fe4411a7dcf85266e55db1f95f7315"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0fa6955ed1b1007ded1349ab72cea4555640432f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}