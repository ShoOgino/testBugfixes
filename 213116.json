{"path":"lucene/backwards/src/demo/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,Searcher,Query,int,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/demo/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,Searcher,Query,int,boolean,boolean).mjava","pathOld":"backwards/src/demo/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,Searcher,Query,int,boolean,boolean).mjava","sourceNew":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, Searcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopScoreDocCollector collector = TopScoreDocCollector.create(\n        5 * hitsPerPage, false);\n    searcher.search(query, collector);\n    ScoreDoc[] hits = collector.topDocs().scoreDocs;\n    \n    int numTotalHits = collector.getTotalHits();\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        collector = TopScoreDocCollector.create(numTotalHits, false);\n        searcher.search(query, collector);\n        hits = collector.topDocs().scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, Searcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopScoreDocCollector collector = TopScoreDocCollector.create(\n        5 * hitsPerPage, false);\n    searcher.search(query, collector);\n    ScoreDoc[] hits = collector.topDocs().scoreDocs;\n    \n    int numTotalHits = collector.getTotalHits();\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        collector = TopScoreDocCollector.create(numTotalHits, false);\n        searcher.search(query, collector);\n        hits = collector.topDocs().scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/demo/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,Searcher,Query,int,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, Searcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopScoreDocCollector collector = TopScoreDocCollector.create(\n        5 * hitsPerPage, false);\n    searcher.search(query, collector);\n    ScoreDoc[] hits = collector.topDocs().scoreDocs;\n    \n    int numTotalHits = collector.getTotalHits();\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        collector = TopScoreDocCollector.create(numTotalHits, false);\n        searcher.search(query, collector);\n        hits = collector.topDocs().scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}