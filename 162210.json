{"path":"src/test/org/apache/solr/HighlighterTest#testVariableFragsize().mjava","commits":[{"id":"af09a11446184597ca824554260a98704507f8a7","date":1157138567,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/HighlighterTest#testVariableFragsize().mjava","pathOld":"/dev/null","sourceNew":"  public void testVariableFragsize() {\n     assertU(adoc(\"tv_text\", \"a long days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all\", \n           \"id\", \"1\"));\n     assertU(commit());\n     assertU(optimize());\n\n     // default length\n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"tv_text\");\n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n       \"standard\", 0, 200, args);\n     assertQ(\"Basic summarization\",\n           sumLRF.makeRequest(\"tv_text:long\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\"\n           );\n     \n     // 25\n     args.put(\"hl.fragsize\",\"25\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Basic summarization\",\n           sumLRF.makeRequest(\"tv_text:long\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night']\"\n           );\n     \n     // 0 - NullFragmenter\n     args.put(\"hl.fragsize\",\"0\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Basic summarization\",\n           sumLRF.makeRequest(\"tv_text:long\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all']\"\n           );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"218fde9d650f817f30726670473f41b564398acd","date":1181882189,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testVariableFragsize().mjava","pathOld":"src/test/org/apache/solr/HighlighterTest#testVariableFragsize().mjava","sourceNew":"  public void testVariableFragsize() {\n     assertU(adoc(\"tv_text\", \"a long days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all\", \n           \"id\", \"1\"));\n     assertU(commit());\n     assertU(optimize());\n\n     // default length\n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"tv_text\");\n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n       \"standard\", 0, 200, args);\n     assertQ(\"Basic summarization\",\n           sumLRF.makeRequest(\"tv_text:long\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\"\n           );\n     \n     // 25\n     args.put(\"hl.fragsize\",\"25\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Basic summarization\",\n           sumLRF.makeRequest(\"tv_text:long\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night']\"\n           );\n     \n     // 0 - NullFragmenter\n     args.put(\"hl.fragsize\",\"0\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Basic summarization\",\n           sumLRF.makeRequest(\"tv_text:long\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all']\"\n           );\n  }\n\n","sourceOld":"  public void testVariableFragsize() {\n     assertU(adoc(\"tv_text\", \"a long days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all\", \n           \"id\", \"1\"));\n     assertU(commit());\n     assertU(optimize());\n\n     // default length\n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"tv_text\");\n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n       \"standard\", 0, 200, args);\n     assertQ(\"Basic summarization\",\n           sumLRF.makeRequest(\"tv_text:long\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\"\n           );\n     \n     // 25\n     args.put(\"hl.fragsize\",\"25\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Basic summarization\",\n           sumLRF.makeRequest(\"tv_text:long\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night']\"\n           );\n     \n     // 0 - NullFragmenter\n     args.put(\"hl.fragsize\",\"0\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Basic summarization\",\n           sumLRF.makeRequest(\"tv_text:long\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"218fde9d650f817f30726670473f41b564398acd":["af09a11446184597ca824554260a98704507f8a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"af09a11446184597ca824554260a98704507f8a7":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"218fde9d650f817f30726670473f41b564398acd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["af09a11446184597ca824554260a98704507f8a7"],"af09a11446184597ca824554260a98704507f8a7":["218fde9d650f817f30726670473f41b564398acd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["218fde9d650f817f30726670473f41b564398acd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}