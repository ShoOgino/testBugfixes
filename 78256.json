{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/IntArrayAllocator#IntArrayAllocator(int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/IntArrayAllocator#IntArrayAllocator(int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/IntArrayAllocator#IntArrayAllocator(int,int).mjava","sourceNew":"  /**\n   * Construct an allocator for counter arrays of length <CODE>length</CODE>,\n   * keeping around a pool of up to <CODE>maxArrays</CODE> old arrays.\n   * <P>\n   * Note that the pool size only restricts the number of arrays that hang\n   * around when not needed, but <I>not</I> the maximum number of arrays\n   * that are allocated when actually is use: If a number of concurrent\n   * threads ask for an allocation, all of them will get a counter array,\n   * even if their number is greater than maxArrays. If an application wants\n   * to limit the number of concurrent threads making allocations, it needs\n   * to do so on its own - for example by blocking new threads until the\n   * existing ones have finished.\n   * <P>\n   * In particular, when maxArrays=0, this object behaves as a trivial\n   * allocator, always allocating a new array and never reusing an old one. \n   */\n  public IntArrayAllocator(int length, int maxArrays) {\n    super(maxArrays);\n    this.length = length;\n  }\n\n","sourceOld":"  /**\n   * Construct an allocator for counter arrays of length <CODE>length</CODE>,\n   * keeping around a pool of up to <CODE>maxArrays</CODE> old arrays.\n   * <P>\n   * Note that the pool size only restricts the number of arrays that hang\n   * around when not needed, but <I>not</I> the maximum number of arrays\n   * that are allocated when actually is use: If a number of concurrent\n   * threads ask for an allocation, all of them will get a counter array,\n   * even if their number is greater than maxArrays. If an application wants\n   * to limit the number of concurrent threads making allocations, it needs\n   * to do so on its own - for example by blocking new threads until the\n   * existing ones have finished.\n   * <P>\n   * In particular, when maxArrays=0, this object behaves as a trivial\n   * allocator, always allocating a new array and never reusing an old one. \n   */\n  public IntArrayAllocator(int length, int maxArrays) {\n    super(maxArrays);\n    this.length = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a2548b7f050533ac9a884b31cab5fb6f0386fbb","date":1355233860,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/IntArrayAllocator#IntArrayAllocator(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct an allocator for counter arrays of length <CODE>length</CODE>,\n   * keeping around a pool of up to <CODE>maxArrays</CODE> old arrays.\n   * <P>\n   * Note that the pool size only restricts the number of arrays that hang\n   * around when not needed, but <I>not</I> the maximum number of arrays\n   * that are allocated when actually is use: If a number of concurrent\n   * threads ask for an allocation, all of them will get a counter array,\n   * even if their number is greater than maxArrays. If an application wants\n   * to limit the number of concurrent threads making allocations, it needs\n   * to do so on its own - for example by blocking new threads until the\n   * existing ones have finished.\n   * <P>\n   * In particular, when maxArrays=0, this object behaves as a trivial\n   * allocator, always allocating a new array and never reusing an old one. \n   */\n  public IntArrayAllocator(int length, int maxArrays) {\n    super(maxArrays);\n    this.length = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/IntArrayAllocator#IntArrayAllocator(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct an allocator for counter arrays of length <CODE>length</CODE>,\n   * keeping around a pool of up to <CODE>maxArrays</CODE> old arrays.\n   * <P>\n   * Note that the pool size only restricts the number of arrays that hang\n   * around when not needed, but <I>not</I> the maximum number of arrays\n   * that are allocated when actually is use: If a number of concurrent\n   * threads ask for an allocation, all of them will get a counter array,\n   * even if their number is greater than maxArrays. If an application wants\n   * to limit the number of concurrent threads making allocations, it needs\n   * to do so on its own - for example by blocking new threads until the\n   * existing ones have finished.\n   * <P>\n   * In particular, when maxArrays=0, this object behaves as a trivial\n   * allocator, always allocating a new array and never reusing an old one. \n   */\n  public IntArrayAllocator(int length, int maxArrays) {\n    super(maxArrays);\n    this.length = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a2548b7f050533ac9a884b31cab5fb6f0386fbb"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}