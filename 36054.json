{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","commits":[{"id":"aec1849055a2ada9ab66fe871645565085cd5462","date":1400041327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","pathOld":"/dev/null","sourceNew":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<MutableValue>();\n      converted.sortValues = original.sortValues; // ?\n      TrieField.TrieTypes type = ((TrieField)fieldType).getType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["38bbc20b9f0152f78a6f08c072856630e9b89fa1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","pathOld":"/dev/null","sourceNew":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<MutableValue>();\n      converted.sortValues = original.sortValues; // ?\n      TrieField.TrieTypes type = ((TrieField)fieldType).getType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","pathOld":"/dev/null","sourceNew":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<MutableValue>();\n      converted.sortValues = original.sortValues; // ?\n      TrieField.TrieTypes type = ((TrieField)fieldType).getType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdd24a5b48ffd59f921ccc4f5199fc029f65797","date":1485039431,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","sourceNew":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<MutableValue>();\n      converted.sortValues = original.sortValues; // ?\n      TrieField.NumberType type = ((TrieField)fieldType).getType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<MutableValue>();\n      converted.sortValues = original.sortValues; // ?\n      TrieField.TrieTypes type = ((TrieField)fieldType).getType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","sourceNew":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<MutableValue>();\n      converted.sortValues = original.sortValues; // ?\n      TrieField.NumberType type = ((TrieField)fieldType).getType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<MutableValue>();\n      converted.sortValues = original.sortValues; // ?\n      TrieField.TrieTypes type = ((TrieField)fieldType).getType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d81baa64023bbb9b43f6d929ee168b105940d30","date":1486492702,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","sourceNew":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<MutableValue>();\n      converted.sortValues = original.sortValues; // ?\n      NumberType type = fieldType.getNumberType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<MutableValue>();\n      converted.sortValues = original.sortValues; // ?\n      TrieField.NumberType type = ((TrieField)fieldType).getType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38bbc20b9f0152f78a6f08c072856630e9b89fa1","date":1571567239,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#toMutable(SchemaField,Collection[SearchGroup[BytesRef]]).mjava","sourceNew":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<>();\n      converted.sortValues = original.sortValues; // ?\n      NumberType type = fieldType.getNumberType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","sourceOld":"  static Collection<SearchGroup<MutableValue>> toMutable(SchemaField field, Collection<SearchGroup<BytesRef>> values) {\n    FieldType fieldType = field.getType();\n    List<SearchGroup<MutableValue>> result = new ArrayList<>(values.size());\n    for (SearchGroup<BytesRef> original : values) {\n      SearchGroup<MutableValue> converted = new SearchGroup<MutableValue>();\n      converted.sortValues = original.sortValues; // ?\n      NumberType type = fieldType.getNumberType();\n      final MutableValue v;\n      switch (type) {\n        case INTEGER:\n          MutableValueInt mutableInt = new MutableValueInt();\n          if (original.groupValue == null) {\n            mutableInt.value = 0;\n            mutableInt.exists = false;\n          } else {\n            mutableInt.value = (Integer) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableInt;\n          break;\n        case FLOAT:\n          MutableValueFloat mutableFloat = new MutableValueFloat();\n          if (original.groupValue == null) {\n            mutableFloat.value = 0;\n            mutableFloat.exists = false;\n          } else {\n            mutableFloat.value = (Float) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableFloat;\n          break;\n        case DOUBLE:\n          MutableValueDouble mutableDouble = new MutableValueDouble();\n          if (original.groupValue == null) {\n            mutableDouble.value = 0;\n            mutableDouble.exists = false;\n          } else {\n            mutableDouble.value = (Double) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableDouble;\n          break;\n        case LONG:\n          MutableValueLong mutableLong = new MutableValueLong();\n          if (original.groupValue == null) {\n            mutableLong.value = 0;\n            mutableLong.exists = false;\n          } else {\n            mutableLong.value = (Long) fieldType.toObject(field, original.groupValue);\n          }\n          v = mutableLong;\n          break;\n        case DATE:\n          MutableValueDate mutableDate = new MutableValueDate();\n          if (original.groupValue == null) {\n            mutableDate.value = 0;\n            mutableDate.exists = false;\n          } else {\n            mutableDate.value = ((Date)fieldType.toObject(field, original.groupValue)).getTime();\n          }\n          v = mutableDate;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      converted.groupValue = v;\n      result.add(converted);\n    }\n    return result;\n  }\n\n","bugFix":["aec1849055a2ada9ab66fe871645565085cd5462"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"38bbc20b9f0152f78a6f08c072856630e9b89fa1":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"aec1849055a2ada9ab66fe871645565085cd5462":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","aec1849055a2ada9ab66fe871645565085cd5462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["93dd449115a9247533e44bab47e8429e5dccbc6d","3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38bbc20b9f0152f78a6f08c072856630e9b89fa1"]},"commit2Childs":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["3d81baa64023bbb9b43f6d929ee168b105940d30","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"38bbc20b9f0152f78a6f08c072856630e9b89fa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aec1849055a2ada9ab66fe871645565085cd5462":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["38bbc20b9f0152f78a6f08c072856630e9b89fa1"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","56572ec06f1407c066d6b7399413178b33176cd8","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aec1849055a2ada9ab66fe871645565085cd5462","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}