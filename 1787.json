{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyDestination().mjava","commits":[{"id":"0a8943eb15df4a89f924a7bcea7fec04688d304c","date":1397578332,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyDestination().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyDestination() throws Exception {\n    Directory source = newDirectory();\n    Directory dest = getDirectory(createTempDir(\"testCopyDestination\"));\n    \n    IndexOutput output = source.createOutput(\"foobar\", newIOContext(random()));\n    int numBytes = random().nextInt(20000);\n    byte bytes[] = new byte[numBytes];\n    random().nextBytes(bytes);\n    output.writeBytes(bytes, bytes.length);\n    output.close();\n    \n    source.copy(dest, \"foobar\", \"foobaz\", newIOContext(random()));\n    assertTrue(slowFileExists(dest, \"foobaz\"));\n    \n    IndexInput input = dest.openInput(\"foobaz\", newIOContext(random()));\n    byte bytes2[] = new byte[numBytes];\n    input.readBytes(bytes2, 0, bytes2.length);\n    assertEquals(input.length(), numBytes);\n    input.close();\n    \n    assertArrayEquals(bytes, bytes2);\n    \n    IOUtils.close(source, dest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52d4cfb22484037a9b8e9080e03aeaff60954880","date":1420125313,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyFromDestination().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyDestination().mjava","sourceNew":"  public void testCopyFromDestination() throws Exception {\n    Directory source = newDirectory();\n    Directory dest = getDirectory(createTempDir(\"testCopyDestination\"));\n    \n    IndexOutput output = source.createOutput(\"foobar\", newIOContext(random()));\n    int numBytes = random().nextInt(20000);\n    byte bytes[] = new byte[numBytes];\n    random().nextBytes(bytes);\n    output.writeBytes(bytes, bytes.length);\n    output.close();\n    \n    dest.copyFrom(source, \"foobar\", \"foobaz\", newIOContext(random()));\n    assertTrue(slowFileExists(dest, \"foobaz\"));\n    \n    IndexInput input = dest.openInput(\"foobaz\", newIOContext(random()));\n    byte bytes2[] = new byte[numBytes];\n    input.readBytes(bytes2, 0, bytes2.length);\n    assertEquals(input.length(), numBytes);\n    input.close();\n    \n    assertArrayEquals(bytes, bytes2);\n    \n    IOUtils.close(source, dest);\n  }\n\n","sourceOld":"  public void testCopyDestination() throws Exception {\n    Directory source = newDirectory();\n    Directory dest = getDirectory(createTempDir(\"testCopyDestination\"));\n    \n    IndexOutput output = source.createOutput(\"foobar\", newIOContext(random()));\n    int numBytes = random().nextInt(20000);\n    byte bytes[] = new byte[numBytes];\n    random().nextBytes(bytes);\n    output.writeBytes(bytes, bytes.length);\n    output.close();\n    \n    source.copy(dest, \"foobar\", \"foobaz\", newIOContext(random()));\n    assertTrue(slowFileExists(dest, \"foobaz\"));\n    \n    IndexInput input = dest.openInput(\"foobaz\", newIOContext(random()));\n    byte bytes2[] = new byte[numBytes];\n    input.readBytes(bytes2, 0, bytes2.length);\n    assertEquals(input.length(), numBytes);\n    input.close();\n    \n    assertArrayEquals(bytes, bytes2);\n    \n    IOUtils.close(source, dest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a8943eb15df4a89f924a7bcea7fec04688d304c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52d4cfb22484037a9b8e9080e03aeaff60954880":["0a8943eb15df4a89f924a7bcea7fec04688d304c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52d4cfb22484037a9b8e9080e03aeaff60954880"]},"commit2Childs":{"0a8943eb15df4a89f924a7bcea7fec04688d304c":["52d4cfb22484037a9b8e9080e03aeaff60954880"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a8943eb15df4a89f924a7bcea7fec04688d304c"],"52d4cfb22484037a9b8e9080e03aeaff60954880":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}