{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq; // all postings have tf=1\n            } else {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq; // all postings have tf=1\n            } else {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq; // all postings have tf=1\n            } else {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            postingsReader.decodeTerm(bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq; // all postings have tf=1\n            } else {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq; // all postings have tf=1\n            } else {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq; // all postings have tf=1\n            } else {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            postingsReader.decodeTerm(bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq; // all postings have tf=1\n            } else {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            postingsReader.decodeTerm(bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          boolean absolute = metaDataUpto == 0;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // docFreq, totalTermFreq\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n              state.totalTermFreq = state.docFreq; // all postings have tf=1\n            } else {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata\n            for (int i = 0; i < longs.length; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n            metaDataUpto++;\n            absolute = false;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"086ffe31d8fba0110227db122974163709ecc1b4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["2bb2842e561df4e8e9ad89010605fc86ac265465","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["038e2a9b07e2f8ae58336613cea227bf8b973484","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}