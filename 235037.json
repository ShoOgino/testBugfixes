{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    \n    FacetsAccumulator fAccumulator = \n      new StandardFacetsAccumulator(getFacetedSearchParams(), indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    \n    FacetsAccumulator fAccumulator = \n      new StandardFacetsAccumulator(getFacetedSearchParams(), indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    \n    FacetsAccumulator fAccumulator = \n      new StandardFacetsAccumulator(getFacetSearchParams(), indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    \n    FacetsAccumulator fAccumulator = \n      new StandardFacetsAccumulator(getFacetedSearchParams(), indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    \n    FacetsAccumulator fAccumulator = \n      new StandardFacetsAccumulator(getFacetSearchParams(), indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    \n    FacetsAccumulator fAccumulator = \n      new StandardFacetsAccumulator(getFacetedSearchParams(), indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90213788e5007cc5e2b3d88200a8265de9d4e6d4","date":1359060940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    FacetsAccumulator fAccumulator = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    \n    FacetsAccumulator fAccumulator = \n      new StandardFacetsAccumulator(getFacetSearchParams(), indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    FacetsAccumulator fAccumulator = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    \n    FacetsAccumulator fAccumulator = \n      new StandardFacetsAccumulator(getFacetSearchParams(), indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    FacetsAccumulator fAccumulator = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    FacetsAccumulator fAccumulator = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    FacetsAccumulator fAccumulator = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    FacetsAccumulator fAccumulator = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements);\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    FacetsAccumulator fAccumulator = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["dd45d4a2ee01a1932d33eec42f5272c2402da679","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["61d5f95d14e5b9b046998c51e16709a398c15226","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["61d5f95d14e5b9b046998c51e16709a398c15226"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}