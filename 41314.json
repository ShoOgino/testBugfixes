{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,IOContext,Directory,DocValuesFormat,Long,FieldInfos).mjava","commits":[{"id":"0567bdc5c86c94ced64201187cfcef2417d76dda","date":1400678298,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,IOContext,Directory,DocValuesFormat,Long,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,IOContext,Directory,DocValuesFormat,Long,List[FieldInfo]).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, List<FieldInfo> infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, new FieldInfos(infos.toArray(new FieldInfo[infos.size()])), context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,IOContext,Directory,DocValuesFormat,Long,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,IOContext,Directory,DocValuesFormat,Long,List[FieldInfo]).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, List<FieldInfo> infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, new FieldInfos(infos.toArray(new FieldInfo[infos.size()])), context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,IOContext,Directory,DocValuesFormat,Long,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,IOContext,Directory,DocValuesFormat,Long,List[FieldInfo]).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, List<FieldInfo> infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, new FieldInfos(infos.toArray(new FieldInfo[infos.size()])), context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"240c2c222c1b7eb253bd7e596c2d4731355836ef","date":1416366514,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,IOContext,Directory,DocValuesFormat,Long,FieldInfos).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, Directory dir, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, IOContext.READ, segmentSuffix);\n    DocValuesFormat dvFormat = si.info.getCodec().docValuesFormat();\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0567bdc5c86c94ced64201187cfcef2417d76dda":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0567bdc5c86c94ced64201187cfcef2417d76dda"],"240c2c222c1b7eb253bd7e596c2d4731355836ef":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0567bdc5c86c94ced64201187cfcef2417d76dda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["240c2c222c1b7eb253bd7e596c2d4731355836ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0567bdc5c86c94ced64201187cfcef2417d76dda","a656b32c3aa151037a8c52e9b134acc3cbf482bc","b7605579001505896d48b07160075a5c8b8e128e"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["a656b32c3aa151037a8c52e9b134acc3cbf482bc","240c2c222c1b7eb253bd7e596c2d4731355836ef","b7605579001505896d48b07160075a5c8b8e128e"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"240c2c222c1b7eb253bd7e596c2d4731355836ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a656b32c3aa151037a8c52e9b134acc3cbf482bc","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}