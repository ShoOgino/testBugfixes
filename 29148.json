{"path":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","commits":[{"id":"b3d038c41e70424a134ef69a524f3cc0fb40d854","date":1096548028,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Field binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Field binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Field stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n    \n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n    \n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = new String(docFromReader.get(\"stringStored\"));\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = new String(docFromReader.get(\"stringCompressed\"));\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n    \n    /** delete the document from index */\n    reader.delete(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Field binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Field binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Field stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n    \n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n    \n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = new String(docFromReader.get(\"stringStored\"));\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = new String(docFromReader.get(\"stringCompressed\"));\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    \n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Field binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Field binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Field stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n    \n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n    \n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = new String(docFromReader.get(\"stringStored\"));\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = new String(docFromReader.get(\"stringCompressed\"));\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n    \n    /** delete the document from index */\n    reader.delete(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n    \n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n    \n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = new String(docFromReader.get(\"stringStored\"));\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = new String(docFromReader.get(\"stringCompressed\"));\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    \n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Field binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Field binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Field stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n    \n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n    \n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = new String(docFromReader.get(\"stringStored\"));\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = new String(docFromReader.get(\"stringCompressed\"));\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b97548d27406e9f33187836e1de98d473a63f5d","date":1196088721,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n    \n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n    \n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = docFromReader.get(\"stringCompressed\");\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    \n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n    \n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n    \n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = new String(docFromReader.get(\"stringStored\"));\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = new String(docFromReader.get(\"stringCompressed\"));\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n    \n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n    \n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = docFromReader.get(\"stringCompressed\");\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    \n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n    \n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n    \n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = docFromReader.get(\"stringCompressed\");\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de01496176b31b9496ca92b2faebc31e16d91cc0","date":1237569222,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n\n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = docFromReader.get(\"stringCompressed\");\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n\n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n    \n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n    \n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = docFromReader.get(\"stringCompressed\");\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n\n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = docFromReader.get(\"stringCompressed\");\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n\n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n\n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = docFromReader.get(\"stringCompressed\");\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n\n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n\n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = docFromReader.get(\"stringCompressed\");\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n\n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n\n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = docFromReader.get(\"stringCompressed\");\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n\n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", binaryValCompressed.getBytes(), Field.Store.COMPRESS);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", binaryValCompressed, Field.Store.COMPRESS, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValCompressed.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    doc.add(binaryFldCompressed);\n    \n    doc.add(stringFldStored);\n    doc.add(stringFldCompressed);\n\n    /** test for field count */\n    assertEquals(4, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(docFromReader.getBinaryValue(\"binaryCompressed\"));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the compressed string field and compare it's content with the original one */\n    String stringFldCompressedTest = docFromReader.get(\"stringCompressed\");\n    assertTrue(stringFldCompressedTest.equals(binaryValCompressed));\n\n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes());\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes());\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes());\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes());\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes());\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes());\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes());\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes());\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes());\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["de01496176b31b9496ca92b2faebc31e16d91cc0","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["8b97548d27406e9f33187836e1de98d473a63f5d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"de01496176b31b9496ca92b2faebc31e16d91cc0":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["de01496176b31b9496ca92b2faebc31e16d91cc0"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["e0c804f7aa477229414a7e12882af490c241f64d"],"8b97548d27406e9f33187836e1de98d473a63f5d":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e0c804f7aa477229414a7e12882af490c241f64d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e0c804f7aa477229414a7e12882af490c241f64d"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["de01496176b31b9496ca92b2faebc31e16d91cc0"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["8b97548d27406e9f33187836e1de98d473a63f5d"],"de01496176b31b9496ca92b2faebc31e16d91cc0":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"8b97548d27406e9f33187836e1de98d473a63f5d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e0c804f7aa477229414a7e12882af490c241f64d":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}