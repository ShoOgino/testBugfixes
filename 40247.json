{"path":"src/java/org/apache/lucene/search/SloppyPhraseScorer#termPositionsDiffer(PhrasePositions).mjava","commits":[{"id":"b3e493496c35fb4f17315b8827d1ba1ae1585554","date":1177392767,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SloppyPhraseScorer#termPositionsDiffer(PhrasePositions).mjava","pathOld":"/dev/null","sourceNew":"    // disalow two pp's to have the same tp position, so that same word twice \n    // in query would go elswhere in the matched doc\n    private boolean termPositionsDiffer(PhrasePositions pp) {\n        // efficiency note: a more efficient implemention could keep a map between repeating \n        // pp's, so that if pp1a, pp1b, pp1c are repeats term1, and pp2a, pp2b are repeats \n        // of term2, pp2a would only be checked against pp2b but not against pp1a, pp1b, pp1c. \n        // However this would complicate code, for a rather rare case, so choice is to compromise here.\n        int tpPos = pp.position + pp.offset;\n        for (int i = 0; i < repeats.length; i++) {\n            PhrasePositions pp2 = repeats[i];\n            if (pp2 == pp)\n                continue;\n            int tpPos2 = pp2.position + pp2.offset;\n            if (tpPos2 == tpPos)\n                return false;\n        }\n        return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3b2ceed5f2320db5cc371e0dd95622cda9a9a56a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a","date":1217778014,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SloppyPhraseScorer#termPositionsDiffer(PhrasePositions).mjava","pathOld":"src/java/org/apache/lucene/search/SloppyPhraseScorer#termPositionsDiffer(PhrasePositions).mjava","sourceNew":"    /**\n     * We disallow two pp's to have the same TermPosition, thereby verifying multiple occurrences \n     * in the query of the same word would go elsewhere in the matched doc.\n     * @return null if differ (i.e. valid) otherwise return the higher offset PhrasePositions\n     * out of the first two PPs found to not differ.\n     */\n    private PhrasePositions termPositionsDiffer(PhrasePositions pp) {\n        // efficiency note: a more efficient implementation could keep a map between repeating \n        // pp's, so that if pp1a, pp1b, pp1c are repeats term1, and pp2a, pp2b are repeats \n        // of term2, pp2a would only be checked against pp2b but not against pp1a, pp1b, pp1c. \n        // However this would complicate code, for a rather rare case, so choice is to compromise here.\n        int tpPos = pp.position + pp.offset;\n        for (int i = 0; i < repeats.length; i++) {\n            PhrasePositions pp2 = repeats[i];\n            if (pp2 == pp)\n                continue;\n            int tpPos2 = pp2.position + pp2.offset;\n            if (tpPos2 == tpPos)\n                return pp.offset > pp2.offset ? pp : pp2; // do not differ: return the one with higher offset.\n        }\n        return null; \n    }\n\n","sourceOld":"    // disalow two pp's to have the same tp position, so that same word twice \n    // in query would go elswhere in the matched doc\n    private boolean termPositionsDiffer(PhrasePositions pp) {\n        // efficiency note: a more efficient implemention could keep a map between repeating \n        // pp's, so that if pp1a, pp1b, pp1c are repeats term1, and pp2a, pp2b are repeats \n        // of term2, pp2a would only be checked against pp2b but not against pp1a, pp1b, pp1c. \n        // However this would complicate code, for a rather rare case, so choice is to compromise here.\n        int tpPos = pp.position + pp.offset;\n        for (int i = 0; i < repeats.length; i++) {\n            PhrasePositions pp2 = repeats[i];\n            if (pp2 == pp)\n                continue;\n            int tpPos2 = pp2.position + pp2.offset;\n            if (tpPos2 == tpPos)\n                return false;\n        }\n        return true;\n    }\n\n","bugFix":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer#termPositionsDiffer(PhrasePositions).mjava","pathOld":"src/java/org/apache/lucene/search/SloppyPhraseScorer#termPositionsDiffer(PhrasePositions).mjava","sourceNew":"    /**\n     * We disallow two pp's to have the same TermPosition, thereby verifying multiple occurrences \n     * in the query of the same word would go elsewhere in the matched doc.\n     * @return null if differ (i.e. valid) otherwise return the higher offset PhrasePositions\n     * out of the first two PPs found to not differ.\n     */\n    private PhrasePositions termPositionsDiffer(PhrasePositions pp) {\n        // efficiency note: a more efficient implementation could keep a map between repeating \n        // pp's, so that if pp1a, pp1b, pp1c are repeats term1, and pp2a, pp2b are repeats \n        // of term2, pp2a would only be checked against pp2b but not against pp1a, pp1b, pp1c. \n        // However this would complicate code, for a rather rare case, so choice is to compromise here.\n        int tpPos = pp.position + pp.offset;\n        for (int i = 0; i < repeats.length; i++) {\n            PhrasePositions pp2 = repeats[i];\n            if (pp2 == pp)\n                continue;\n            int tpPos2 = pp2.position + pp2.offset;\n            if (tpPos2 == tpPos)\n                return pp.offset > pp2.offset ? pp : pp2; // do not differ: return the one with higher offset.\n        }\n        return null; \n    }\n\n","sourceOld":"    /**\n     * We disallow two pp's to have the same TermPosition, thereby verifying multiple occurrences \n     * in the query of the same word would go elsewhere in the matched doc.\n     * @return null if differ (i.e. valid) otherwise return the higher offset PhrasePositions\n     * out of the first two PPs found to not differ.\n     */\n    private PhrasePositions termPositionsDiffer(PhrasePositions pp) {\n        // efficiency note: a more efficient implementation could keep a map between repeating \n        // pp's, so that if pp1a, pp1b, pp1c are repeats term1, and pp2a, pp2b are repeats \n        // of term2, pp2a would only be checked against pp2b but not against pp1a, pp1b, pp1c. \n        // However this would complicate code, for a rather rare case, so choice is to compromise here.\n        int tpPos = pp.position + pp.offset;\n        for (int i = 0; i < repeats.length; i++) {\n            PhrasePositions pp2 = repeats[i];\n            if (pp2 == pp)\n                continue;\n            int tpPos2 = pp2.position + pp2.offset;\n            if (tpPos2 == tpPos)\n                return pp.offset > pp2.offset ? pp : pp2; // do not differ: return the one with higher offset.\n        }\n        return null; \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"b3e493496c35fb4f17315b8827d1ba1ae1585554":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3b2ceed5f2320db5cc371e0dd95622cda9a9a56a"]},"commit2Childs":{"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e493496c35fb4f17315b8827d1ba1ae1585554":["3b2ceed5f2320db5cc371e0dd95622cda9a9a56a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}