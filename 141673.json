{"path":"lucene/core/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minY = decode(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minX = decode(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxX = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n    // check internal node against query\n    Relation rel = rectangle2D.relate(minX, maxX, minY, maxY);\n    // TODO: Check if this really helps\n    if (queryRelation == QueryRelation.INTERSECTS && rel == Relation.CELL_CROSSES_QUERY) {\n      // for intersects we can restrict the conditions by using the inner box\n      double innerMaxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, minYOffset));\n      if (rectangle2D.relate(minX, maxX, minY, innerMaxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMaX = decode(NumericUtils.sortableBytesToInt(maxTriangle, minXOffset));\n      if (rectangle2D.relate(minX, innerMaX, minY, maxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinY = decode(NumericUtils.sortableBytesToInt(minTriangle, maxYOffset));\n      if (rectangle2D.relate(minX, maxX, innerMinY, maxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinX = decode(NumericUtils.sortableBytesToInt(minTriangle, maxXOffset));\n      if (rectangle2D.relate(innerMinX, maxX, minY, maxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n    return rel;\n  }\n\n","sourceOld":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minY = decode(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minX = decode(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxX = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n    // check internal node against query\n    PointValues.Relation rel = rectangle2D.relate(minX, maxX, minY, maxY);\n    // TODO: Check if this really helps\n    if (queryRelation == QueryRelation.INTERSECTS && rel == PointValues.Relation.CELL_CROSSES_QUERY) {\n      // for intersects we can restrict the conditions by using the inner box\n      double innerMaxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, minYOffset));\n      if (rectangle2D.relate(minX, maxX, minY, innerMaxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMaX = decode(NumericUtils.sortableBytesToInt(maxTriangle, minXOffset));\n      if (rectangle2D.relate(minX, innerMaX, minY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinY = decode(NumericUtils.sortableBytesToInt(minTriangle, maxYOffset));\n      if (rectangle2D.relate(minX, maxX, innerMinY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinX = decode(NumericUtils.sortableBytesToInt(minTriangle, maxXOffset));\n      if (rectangle2D.relate(innerMinX, maxX, minY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n    }\n    return rel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minY = decode(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minX = decode(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxX = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n    // check internal node against query\n    Relation rel = rectangle2D.relate(minX, maxX, minY, maxY);\n    // TODO: Check if this really helps\n    if (queryRelation == QueryRelation.INTERSECTS && rel == Relation.CELL_CROSSES_QUERY) {\n      // for intersects we can restrict the conditions by using the inner box\n      double innerMaxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, minYOffset));\n      if (rectangle2D.relate(minX, maxX, minY, innerMaxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMaX = decode(NumericUtils.sortableBytesToInt(maxTriangle, minXOffset));\n      if (rectangle2D.relate(minX, innerMaX, minY, maxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinY = decode(NumericUtils.sortableBytesToInt(minTriangle, maxYOffset));\n      if (rectangle2D.relate(minX, maxX, innerMinY, maxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinX = decode(NumericUtils.sortableBytesToInt(minTriangle, maxXOffset));\n      if (rectangle2D.relate(innerMinX, maxX, minY, maxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n    return rel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a923e28c9d079048c6993884ec89c44f0380b923":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a923e28c9d079048c6993884ec89c44f0380b923"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a923e28c9d079048c6993884ec89c44f0380b923"],"a923e28c9d079048c6993884ec89c44f0380b923":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}