{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testTotalHitsWithScore().mjava","commits":[{"id":"5003664d14ef48a0557ce1d8a684b15d62efe912","date":1539883534,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testTotalHitsWithScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testTotalHitsWithScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    for (int totalHitsThreshold = 1; totalHitsThreshold < 20; ++ totalHitsThreshold) {\n      Sort sort = new Sort(FIELD_SCORE, new SortField(\"foo\", SortField.Type.LONG));\n      TopFieldCollector collector = TopFieldCollector.create(sort, 2, null, totalHitsThreshold);\n      ScoreAndDoc scorer = new ScoreAndDoc();\n\n      LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n      leafCollector.setScorer(scorer);\n\n      scorer.doc = 0;\n      scorer.score = 3;\n      leafCollector.collect(0);\n\n      scorer.doc = 1;\n      scorer.score = 3;\n      leafCollector.collect(1);\n\n      leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n      leafCollector.setScorer(scorer);\n\n      scorer.doc = 1;\n      scorer.score = 3;\n      leafCollector.collect(1);\n\n      scorer.doc = 5;\n      scorer.score = 4;\n      leafCollector.collect(1);\n\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(4, topDocs.totalHits.value);\n      assertEquals(totalHitsThreshold <= 4, scorer.minCompetitiveScore != null);\n      assertEquals(totalHitsThreshold <= 4 ? TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO : TotalHits.Relation.EQUAL_TO, topDocs.totalHits.relation);\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5374ec368ef9441d694af8df95b2ffbae3d7f03b","date":1548748689,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testTotalHitsWithScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testTotalHitsWithScore().mjava","sourceNew":"  public void testTotalHitsWithScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    for (int totalHitsThreshold = 0; totalHitsThreshold < 20; ++ totalHitsThreshold) {\n      Sort sort = new Sort(FIELD_SCORE, new SortField(\"foo\", SortField.Type.LONG));\n      TopFieldCollector collector = TopFieldCollector.create(sort, 2, null, totalHitsThreshold);\n      ScoreAndDoc scorer = new ScoreAndDoc();\n\n      LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n      leafCollector.setScorer(scorer);\n\n      scorer.doc = 0;\n      scorer.score = 3;\n      leafCollector.collect(0);\n\n      scorer.doc = 1;\n      scorer.score = 3;\n      leafCollector.collect(1);\n\n      leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n      leafCollector.setScorer(scorer);\n\n      scorer.doc = 1;\n      scorer.score = 3;\n      leafCollector.collect(1);\n\n      scorer.doc = 5;\n      scorer.score = 4;\n      leafCollector.collect(1);\n\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(4, topDocs.totalHits.value);\n      assertEquals(totalHitsThreshold < 4, scorer.minCompetitiveScore != null);\n      assertEquals(totalHitsThreshold < 4 ? TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO : TotalHits.Relation.EQUAL_TO, topDocs.totalHits.relation);\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTotalHitsWithScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    for (int totalHitsThreshold = 1; totalHitsThreshold < 20; ++ totalHitsThreshold) {\n      Sort sort = new Sort(FIELD_SCORE, new SortField(\"foo\", SortField.Type.LONG));\n      TopFieldCollector collector = TopFieldCollector.create(sort, 2, null, totalHitsThreshold);\n      ScoreAndDoc scorer = new ScoreAndDoc();\n\n      LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n      leafCollector.setScorer(scorer);\n\n      scorer.doc = 0;\n      scorer.score = 3;\n      leafCollector.collect(0);\n\n      scorer.doc = 1;\n      scorer.score = 3;\n      leafCollector.collect(1);\n\n      leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n      leafCollector.setScorer(scorer);\n\n      scorer.doc = 1;\n      scorer.score = 3;\n      leafCollector.collect(1);\n\n      scorer.doc = 5;\n      scorer.score = 4;\n      leafCollector.collect(1);\n\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(4, topDocs.totalHits.value);\n      assertEquals(totalHitsThreshold <= 4, scorer.minCompetitiveScore != null);\n      assertEquals(totalHitsThreshold <= 4 ? TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO : TotalHits.Relation.EQUAL_TO, topDocs.totalHits.relation);\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8cfef9a283b113d2e08b7bf1bbf0cee52b894f4","date":1548850288,"type":3,"author":"Luca Cavanna","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testTotalHitsWithScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testTotalHitsWithScore().mjava","sourceNew":"  public void testTotalHitsWithScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    for (int totalHitsThreshold = 0; totalHitsThreshold < 20; ++ totalHitsThreshold) {\n      Sort sort = new Sort(FIELD_SCORE, new SortField(\"foo\", SortField.Type.LONG));\n      TopFieldCollector collector = TopFieldCollector.create(sort, 2, null, totalHitsThreshold);\n      ScoreAndDoc scorer = new ScoreAndDoc();\n\n      LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n      leafCollector.setScorer(scorer);\n\n      scorer.doc = 0;\n      scorer.score = 3;\n      leafCollector.collect(0);\n\n      scorer.doc = 1;\n      scorer.score = 3;\n      leafCollector.collect(1);\n\n      leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n      leafCollector.setScorer(scorer);\n\n      scorer.doc = 1;\n      scorer.score = 3;\n      leafCollector.collect(1);\n\n      scorer.doc = 5;\n      scorer.score = 4;\n      leafCollector.collect(1);\n\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(totalHitsThreshold < 4, scorer.minCompetitiveScore != null);\n      assertEquals(new TotalHits(4, totalHitsThreshold < 4 ? TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO : TotalHits.Relation.EQUAL_TO), topDocs.totalHits);\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTotalHitsWithScore() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    for (int totalHitsThreshold = 0; totalHitsThreshold < 20; ++ totalHitsThreshold) {\n      Sort sort = new Sort(FIELD_SCORE, new SortField(\"foo\", SortField.Type.LONG));\n      TopFieldCollector collector = TopFieldCollector.create(sort, 2, null, totalHitsThreshold);\n      ScoreAndDoc scorer = new ScoreAndDoc();\n\n      LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n      leafCollector.setScorer(scorer);\n\n      scorer.doc = 0;\n      scorer.score = 3;\n      leafCollector.collect(0);\n\n      scorer.doc = 1;\n      scorer.score = 3;\n      leafCollector.collect(1);\n\n      leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n      leafCollector.setScorer(scorer);\n\n      scorer.doc = 1;\n      scorer.score = 3;\n      leafCollector.collect(1);\n\n      scorer.doc = 5;\n      scorer.score = 4;\n      leafCollector.collect(1);\n\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(4, topDocs.totalHits.value);\n      assertEquals(totalHitsThreshold < 4, scorer.minCompetitiveScore != null);\n      assertEquals(totalHitsThreshold < 4 ? TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO : TotalHits.Relation.EQUAL_TO, topDocs.totalHits.relation);\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8cfef9a283b113d2e08b7bf1bbf0cee52b894f4":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5374ec368ef9441d694af8df95b2ffbae3d7f03b":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"5003664d14ef48a0557ce1d8a684b15d62efe912":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8cfef9a283b113d2e08b7bf1bbf0cee52b894f4"]},"commit2Childs":{"c8cfef9a283b113d2e08b7bf1bbf0cee52b894f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"5374ec368ef9441d694af8df95b2ffbae3d7f03b":["c8cfef9a283b113d2e08b7bf1bbf0cee52b894f4"],"5003664d14ef48a0557ce1d8a684b15d62efe912":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}