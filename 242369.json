{"path":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","pathOld":"/dev/null","sourceNew":"  public void testUTF8toUTF32() {\n    final Random r = newRandom();\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    for(int i=0;i<50000;i++) {\n      final String s = _TestUtil.randomUnicodeString(r);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","sourceNew":"  public void testUTF8toUTF32() {\n    final Random r = newRandom();\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    for(int i=0;i<50000*_TestUtil.getRandomMultiplier();i++) {\n      final String s = _TestUtil.randomUnicodeString(r);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testUTF8toUTF32() {\n    final Random r = newRandom();\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    for(int i=0;i<50000;i++) {\n      final String s = _TestUtil.randomUnicodeString(r);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","sourceNew":"  public void testUTF8toUTF32() {\n    final Random r = newRandom();\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = 50000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(r);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testUTF8toUTF32() {\n    final Random r = newRandom();\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    for(int i=0;i<50000*_TestUtil.getRandomMultiplier();i++) {\n      final String s = _TestUtil.randomUnicodeString(r);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","sourceNew":"  public void testUTF8toUTF32() {\n    final Random r = newRandom();\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = 50000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(r);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testUTF8toUTF32() {\n    final Random r = newRandom();\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    for(int i=0;i<50000*_TestUtil.getRandomMultiplier();i++) {\n      final String s = _TestUtil.randomUnicodeString(r);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","sourceNew":"  public void testUTF8toUTF32() {\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = 50000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(random);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testUTF8toUTF32() {\n    final Random r = newRandom();\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = 50000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(r);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","sourceNew":"  public void testUTF8toUTF32() {\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = 50000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(random);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testUTF8toUTF32() {\n    final Random r = newRandom();\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = 50000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(r);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","sourceNew":"  public void testUTF8toUTF32() {\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = atLeast(50000);\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(random);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testUTF8toUTF32() {\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = 50000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(random);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","sourceNew":"  public void testUTF8toUTF32() {\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = atLeast(50000);\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(random);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testUTF8toUTF32() {\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = 50000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(random);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","sourceNew":"  public void testUTF8toUTF32() {\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = atLeast(50000);\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(random);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testUTF8toUTF32() {\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = 50000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(random);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8toUTF32().mjava","sourceNew":"  public void testUTF8toUTF32() {\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = atLeast(50000);\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(random);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testUTF8toUTF32() {\n    BytesRef utf8 = new BytesRef(20);\n    IntsRef utf32 = new IntsRef(20);\n    int[] codePoints = new int[20];\n    int num = atLeast(50000);\n    for (int i = 0; i < num; i++) {\n      final String s = _TestUtil.randomUnicodeString(random);\n      UnicodeUtil.UTF16toUTF8(s, 0, s.length(), utf8);\n      UnicodeUtil.UTF8toUTF32(utf8, utf32);\n      \n      int charUpto = 0;\n      int intUpto = 0;\n      while(charUpto < s.length()) {\n        final int cp = s.codePointAt(charUpto);\n        codePoints[intUpto++] = cp;\n        charUpto += Character.charCount(cp);\n      }\n      if (!ArrayUtil.equals(codePoints, 0, utf32.ints, utf32.offset, intUpto)) {\n        System.out.println(\"FAILED\");\n        for(int j=0;j<s.length();j++) {\n          System.out.println(\"  char[\" + j + \"]=\" + Integer.toHexString(s.charAt(j)));\n        }\n        System.out.println();\n        assertEquals(intUpto, utf32.length);\n        for(int j=0;j<intUpto;j++) {\n          System.out.println(\"  \" + Integer.toHexString(utf32.ints[j]) + \" vs \" + Integer.toHexString(codePoints[j]));\n        }\n        fail(\"mismatch\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["2aafd88401639311b0404e67c94e829e123a0e45"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["1f653cfcf159baeaafe5d01682a911e95bba4012","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["2aafd88401639311b0404e67c94e829e123a0e45","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["1f653cfcf159baeaafe5d01682a911e95bba4012","f83af14a2a8131b14d7aee6274c740334e0363d3"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"2aafd88401639311b0404e67c94e829e123a0e45":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}