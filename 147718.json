{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],ScoreMode).mjava","commits":[{"id":"5b559eeae2a2a767f75666f9b692659cfe1bf631","date":1533724482,"type":1,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],ScoreMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, ScoreMode scoreMode) throws IOException {\n    super(weight, subScorers, scoreMode);\n    this.subScorers = subScorers;\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) throws IOException {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n\n    if (needsScores == false) {\n      this.maxScore = Float.MAX_VALUE;\n    } else {\n      float scoreMax = 0;\n      double otherScoreSum = 0;\n      for (Scorer scorer : subScorers) {\n        scorer.advanceShallow(0);\n        float subScore = scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n        if (subScore >= scoreMax) {\n          otherScoreSum += scoreMax;\n          scoreMax = subScore;\n        } else {\n          otherScoreSum += subScore;\n        }\n      }\n\n      if (tieBreakerMultiplier == 0) {\n        this.maxScore = scoreMax;\n      } else {\n        // The error of sums depends on the order in which values are summed up. In\n        // order to avoid this issue, we compute an upper bound of the value that\n        // the sum may take. If the max relative error is b, then it means that two\n        // sums are always within 2*b of each other.\n        otherScoreSum *= (1 + 2 * MathUtil.sumRelativeErrorBound(subScorers.size() - 1));\n        this.maxScore = (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcc716154659eaae17d9a262f1444c401b3b76da","date":1563973977,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],ScoreMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],ScoreMode).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, ScoreMode scoreMode) throws IOException {\n    super(weight, subScorers, scoreMode);\n    this.subScorers = subScorers;\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      this.disjunctionBlockPropagator = new DisjunctionScoreBlockBoundaryPropagator(subScorers);\n    } else {\n      this.disjunctionBlockPropagator = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, ScoreMode scoreMode) throws IOException {\n    super(weight, subScorers, scoreMode);\n    this.subScorers = subScorers;\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b559eeae2a2a767f75666f9b692659cfe1bf631":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bcc716154659eaae17d9a262f1444c401b3b76da":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bcc716154659eaae17d9a262f1444c401b3b76da"]},"commit2Childs":{"5b559eeae2a2a767f75666f9b692659cfe1bf631":["bcc716154659eaae17d9a262f1444c401b3b76da"],"bcc716154659eaae17d9a262f1444c401b3b76da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}