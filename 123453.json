{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk#testDeltaImport_replace_resolvesUnprefixedPk().mjava","commits":[{"id":"b7326b9db90075ac88781359aefe6fccd60f9b8f","date":1297897301,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk#testDeltaImport_replace_resolvesUnprefixedPk().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeltaImport_replace_resolvesUnprefixedPk() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n    List deltaRows = new ArrayList();\n    deltaRows.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY, deltaRows.iterator());\n    MockDataSource.setIterator(DELETED_PK_QUERY, EMPTY_LIST.iterator());\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"baz\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", rows.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testDeltaImport_replace_resolvesUnprefixedPk\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:bar\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:baz\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk#testDeltaImport_replace_resolvesUnprefixedPk().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeltaImport_replace_resolvesUnprefixedPk() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n    List deltaRows = new ArrayList();\n    deltaRows.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY, deltaRows.iterator());\n    MockDataSource.setIterator(DELETED_PK_QUERY, EMPTY_LIST.iterator());\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"baz\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", rows.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testDeltaImport_replace_resolvesUnprefixedPk\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:bar\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:baz\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk#testDeltaImport_replace_resolvesUnprefixedPk().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeltaImport_replace_resolvesUnprefixedPk() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n    List deltaRows = new ArrayList();\n    deltaRows.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY, deltaRows.iterator());\n    MockDataSource.setIterator(DELETED_PK_QUERY, EMPTY_LIST.iterator());\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"baz\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", rows.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testDeltaImport_replace_resolvesUnprefixedPk\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:bar\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:baz\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk#testDeltaImport_replace_resolvesUnprefixedPk().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk#testDeltaImport_replace_resolvesUnprefixedPk().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeltaImport_replace_resolvesUnprefixedPk() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n    List deltaRows = new ArrayList();\n    deltaRows.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY, deltaRows.iterator());\n    MockDataSource.setIterator(DELETED_PK_QUERY, EMPTY_LIST.iterator());\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"baz\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", rows.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testDeltaImport_replace_resolvesUnprefixedPk\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:bar\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:baz\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeltaImport_replace_resolvesUnprefixedPk() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n    List deltaRows = new ArrayList();\n    deltaRows.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY, deltaRows.iterator());\n    MockDataSource.setIterator(DELETED_PK_QUERY, EMPTY_LIST.iterator());\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"baz\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", rows.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testDeltaImport_replace_resolvesUnprefixedPk\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:bar\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:baz\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk#testDeltaImport_replace_resolvesUnprefixedPk().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDeltaPrefixedPk#testDeltaImport_replace_resolvesUnprefixedPk().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeltaImport_replace_resolvesUnprefixedPk() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n    List deltaRows = new ArrayList();\n    deltaRows.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY, deltaRows.iterator());\n    MockDataSource.setIterator(DELETED_PK_QUERY, EMPTY_LIST.iterator());\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"baz\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", rows.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testDeltaImport_replace_resolvesUnprefixedPk\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:bar\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:baz\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeltaImport_replace_resolvesUnprefixedPk() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n    List deltaRows = new ArrayList();\n    deltaRows.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELTA_QUERY, deltaRows.iterator());\n    MockDataSource.setIterator(DELETED_PK_QUERY, EMPTY_LIST.iterator());\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"baz\"));\n    MockDataSource.setIterator(\"select * from x where id='1'\", rows.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testDeltaImport_replace_resolvesUnprefixedPk\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:bar\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:baz\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b7326b9db90075ac88781359aefe6fccd60f9b8f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["b7326b9db90075ac88781359aefe6fccd60f9b8f","b7326b9db90075ac88781359aefe6fccd60f9b8f"],"c26f00b574427b55127e869b935845554afde1fa":["b7326b9db90075ac88781359aefe6fccd60f9b8f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7326b9db90075ac88781359aefe6fccd60f9b8f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b7326b9db90075ac88781359aefe6fccd60f9b8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1bdbf92da222965b46c0a942c3857ba56e5c638","b7326b9db90075ac88781359aefe6fccd60f9b8f","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b7326b9db90075ac88781359aefe6fccd60f9b8f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}