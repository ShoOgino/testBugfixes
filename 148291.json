{"path":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23efe117e64d88e5c679ae37487842678c948680","date":1424702349,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"*:*\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // add second document, check facets for items with count =2\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertU(commit());\n    assertQ(\"check many tokens\",\n            req(\"q\", \"*:*\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='2']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='2']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4998) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='2']\"\n              );\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3802d95c3a31be21ea2971945049b711d95ef8d5","date":1455055616,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    for(String method:new String[]{\"fc\",\"uif\"}){\n      assertQ(\"check many tokens\",\n            req(\"q\", \"*:*\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",method\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n    }\n\n    // add second document, check facets for items with count =2\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertU(commit());\n    \n    for(String method:new String[]{\"fc\",\"uif\"}){\n      assertQ(\"check many tokens\",\n            req(\"q\", \"*:*\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",method\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='2']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='2']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4998) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='2']\"\n              );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"*:*\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // add second document, check facets for items with count =2\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertU(commit());\n    assertQ(\"check many tokens\",\n            req(\"q\", \"*:*\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='2']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='2']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4998) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='2']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c64189697927b548f74ba66dfa5051548662938","date":1455059336,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    for(String method:new String[]{\"fc\",\"uif\"}){\n      assertQ(\"check many tokens\",\n            req(\"q\", \"*:*\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",method\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n    }\n\n    // add second document, check facets for items with count =2\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertU(commit());\n    \n    for(String method:new String[]{\"fc\",\"uif\"}){\n      assertQ(\"check many tokens\",\n            req(\"q\", \"*:*\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",method\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='2']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='2']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4998) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='2']\"\n              );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"*:*\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // add second document, check facets for items with count =2\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertU(commit());\n    assertQ(\"check many tokens\",\n            req(\"q\", \"*:*\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='2']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='2']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4998) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='2']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"23efe117e64d88e5c679ae37487842678c948680":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c64189697927b548f74ba66dfa5051548662938":["23efe117e64d88e5c679ae37487842678c948680","3802d95c3a31be21ea2971945049b711d95ef8d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c64189697927b548f74ba66dfa5051548662938"],"3802d95c3a31be21ea2971945049b711d95ef8d5":["23efe117e64d88e5c679ae37487842678c948680"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"23efe117e64d88e5c679ae37487842678c948680":["3c64189697927b548f74ba66dfa5051548662938","3802d95c3a31be21ea2971945049b711d95ef8d5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","23efe117e64d88e5c679ae37487842678c948680"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3c64189697927b548f74ba66dfa5051548662938":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3802d95c3a31be21ea2971945049b711d95ef8d5":["3c64189697927b548f74ba66dfa5051548662938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}