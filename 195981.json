{"path":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeIndexValues().mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeIndexValues().mjava","pathOld":"/dev/null","sourceNew":"  private void mergeIndexValues() throws IOException {\n    final int numFields = fieldInfos.size();\n    for (int i = 0; i < numFields; i++) {\n      final FieldInfo fieldInfo = fieldInfos.fieldInfo(i);\n      final Values v = fieldInfo.indexValues;\n      // nocommit we need some kind of compatibility notation for values such\n      // that two slighly different segments can be merged eg. fixed vs.\n      // variable byte len or float32 vs. float64\n\n      if (v != null) {\n        int docBase = 0;\n        final List<Writer.MergeState> mergeStates = new ArrayList<Writer.MergeState>();\n        for (IndexReader reader : readers) {\n          Reader r = reader.getIndexValues(fieldInfo.name);\n          if (r != null) {\n            mergeStates.add(new Writer.MergeState(r, docBase, reader\n                .maxDoc(), reader.getDeletedDocs()));\n          }\n          docBase += reader.numDocs();\n        }\n        if (mergeStates.isEmpty()) {\n          continue;\n        }\n        final String id = segment + \"_\" + fieldInfo.number;\n        final Writer writer;\n        switch (v) {\n        case PACKED_INTS:\n        case PACKED_INTS_FIXED:\n          writer = Ints.getWriter(directory, id, true);\n          break;\n        case SIMPLE_FLOAT_4BYTE:\n          writer = Floats.getWriter(directory, id, 4);\n          break;\n        case SIMPLE_FLOAT_8BYTE:\n          writer = Floats.getWriter(directory, id, 8);\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.STRAIGHT, null, true);\n          break;\n        case BYTES_FIXED_DEREF:\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.DEREF, null, true);\n          break;\n        case BYTES_FIXED_SORTED:\n          // nocommit -- enable setting Comparator\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.SORTED, null, true);\n          break;\n        case BYTES_VAR_STRAIGHT:\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.STRAIGHT, null, false);\n          break;\n        case BYTES_VAR_DEREF:\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.DEREF, null, false);\n          break;\n        case BYTES_VAR_SORTED:\n          // nocommit -- enable setting Comparator\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.SORTED, null, false);\n          break;\n        default:\n          continue;\n        }\n        writer.add(mergeStates);\n        writer.finish(mergedDocs);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeIndexValues().mjava","sourceNew":null,"sourceOld":"  private void mergeIndexValues() throws IOException {\n    final int numFields = fieldInfos.size();\n    for (int i = 0; i < numFields; i++) {\n      final FieldInfo fieldInfo = fieldInfos.fieldInfo(i);\n      final Values v = fieldInfo.indexValues;\n      // nocommit we need some kind of compatibility notation for values such\n      // that two slighly different segments can be merged eg. fixed vs.\n      // variable byte len or float32 vs. float64\n\n      if (v != null) {\n        int docBase = 0;\n        final List<Writer.MergeState> mergeStates = new ArrayList<Writer.MergeState>();\n        for (IndexReader reader : readers) {\n          Reader r = reader.getIndexValues(fieldInfo.name);\n          if (r != null) {\n            mergeStates.add(new Writer.MergeState(r, docBase, reader\n                .maxDoc(), reader.getDeletedDocs()));\n          }\n          docBase += reader.numDocs();\n        }\n        if (mergeStates.isEmpty()) {\n          continue;\n        }\n        final String id = segment + \"_\" + fieldInfo.number;\n        final Writer writer;\n        switch (v) {\n        case PACKED_INTS:\n        case PACKED_INTS_FIXED:\n          writer = Ints.getWriter(directory, id, true);\n          break;\n        case SIMPLE_FLOAT_4BYTE:\n          writer = Floats.getWriter(directory, id, 4);\n          break;\n        case SIMPLE_FLOAT_8BYTE:\n          writer = Floats.getWriter(directory, id, 8);\n          break;\n        case BYTES_FIXED_STRAIGHT:\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.STRAIGHT, null, true);\n          break;\n        case BYTES_FIXED_DEREF:\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.DEREF, null, true);\n          break;\n        case BYTES_FIXED_SORTED:\n          // nocommit -- enable setting Comparator\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.SORTED, null, true);\n          break;\n        case BYTES_VAR_STRAIGHT:\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.STRAIGHT, null, false);\n          break;\n        case BYTES_VAR_DEREF:\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.DEREF, null, false);\n          break;\n        case BYTES_VAR_SORTED:\n          // nocommit -- enable setting Comparator\n          writer = Bytes.getWriter(directory, id,\n              Bytes.Mode.SORTED, null, false);\n          break;\n        default:\n          continue;\n        }\n        writer.add(mergeStates);\n        writer.finish(mergedDocs);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":[],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}