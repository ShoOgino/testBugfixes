{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n    numBytesUsed = 0;\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n    numBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n    numBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":null,"sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"/dev/null","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":null,"sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for (DocumentsWriterThreadState threadState : threadStates) {\n      threadState.consumer.doAfterFlush();\n    }\n\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    fieldInfos = fieldInfos.newFieldInfosWithGlobalFieldNumberMap();\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for (DocumentsWriterThreadState threadState : threadStates) {\n      threadState.consumer.doAfterFlush();\n    }\n\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    fieldInfos = fieldInfos.newFieldInfosWithGlobalFieldNumberMap();\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for (DocumentsWriterThreadState threadState : threadStates) {\n      threadState.consumer.doAfterFlush();\n    }\n\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    fieldInfos = new FieldInfos(fieldInfos);\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for (DocumentsWriterThreadState threadState : threadStates) {\n      threadState.consumer.doAfterFlush();\n    }\n\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    fieldInfos = new FieldInfos(fieldInfos);\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":null,"sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for (DocumentsWriterThreadState threadState : threadStates) {\n      threadState.consumer.doAfterFlush();\n    }\n\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    fieldInfos = new FieldInfos(fieldInfos);\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":null,"sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for (DocumentsWriterThreadState threadState : threadStates) {\n      threadState.consumer.doAfterFlush();\n    }\n\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    fieldInfos = new FieldInfos(fieldInfos);\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":null,"sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for (DocumentsWriterThreadState threadState : threadStates) {\n      threadState.consumer.doAfterFlush();\n    }\n\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    fieldInfos = new FieldInfos(fieldInfos);\n    numDocs = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["334c1175813aea771a71728cd2c4ee4754fd0603"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["1224a4027481acce15495b03bce9b48b93b42722","8fe956d65251358d755c56f14fe8380644790e47"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["334c1175813aea771a71728cd2c4ee4754fd0603","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014","8fe956d65251358d755c56f14fe8380644790e47"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"334c1175813aea771a71728cd2c4ee4754fd0603":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"1224a4027481acce15495b03bce9b48b93b42722":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}