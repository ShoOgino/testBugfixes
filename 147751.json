{"path":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"f1de703f36b1071144037c80ca5fe118aa5e96fd","date":1493947151,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * 1. convert incoming update document to atomic-type update document \n     * for specified fields in processor definition.\n     * 2. if incoming update document contains already atomic-type updates, skip\n     * 3. fields not specified in processor param(s) in solrconfig.xml for atomic action\n     * will be treated as conventional updates.\n     * 4. retry when encounter version conflict\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void processAdd(AddUpdateCommand cmd)\n        throws IOException {\n\n      SolrInputDocument orgdoc = cmd.getSolrInputDocument();\n      boolean isAtomicUpdateAddedByMe = false;\n\n      Iterator<String> paramsIterator = req.getParams().getParameterNamesIterator();\n\n      while (paramsIterator.hasNext()) {\n\n        String param = paramsIterator.next();\n\n        if (!param.startsWith(ATOMIC_FIELD_PREFIX)) continue;\n\n        String field = param.substring(ATOMIC_FIELD_PREFIX.length(), param.length());\n        String operation = req.getParams().get(param);\n\n        if (!VALID_OPS.contains(operation)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Unexpected param(s) for AtomicUpdateProcessor, invalid atomic op passed: '\" +\n                  req.getParams().get(param) + \"'\");\n        }\n        if (orgdoc.get(field) == null || orgdoc.get(field).getValue() instanceof Map) {\n          // no value for the field or it's already an atomic update operation\n          //continue processing other fields\n          continue;\n        }\n\n        orgdoc.setField(field, singletonMap(operation, orgdoc.get(field).getValue()));\n        isAtomicUpdateAddedByMe = true;\n      }\n\n      // if atomic, put _version_ for optimistic concurrency if doc present in index\n      if (isAtomicUpdateAddedByMe) {\n        Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n        if (lastVersion != null) {\n          orgdoc.setField(VERSION, lastVersion);\n        }\n        processAddWithRetry(cmd, 0);\n      } else {\n        super.processAdd(cmd);\n      }\n      // else send it for doc to get inserted for the first time\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * 1. convert incoming update document to atomic-type update document \n     * for specified fields in processor definition.\n     * 2. if incoming update document contains already atomic-type updates, skip\n     * 3. fields not specified in processor param(s) in solrconfig.xml for atomic action\n     * will be treated as conventional updates.\n     * 4. retry when encounter version conflict\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void processAdd(AddUpdateCommand cmd)\n        throws IOException {\n\n      SolrInputDocument orgdoc = cmd.getSolrInputDocument();\n      boolean isAtomicUpdateAddedByMe = false;\n\n      Iterator<String> paramsIterator = req.getParams().getParameterNamesIterator();\n\n      while (paramsIterator.hasNext()) {\n\n        String param = paramsIterator.next();\n\n        if (!param.startsWith(ATOMIC_FIELD_PREFIX)) continue;\n\n        String field = param.substring(ATOMIC_FIELD_PREFIX.length(), param.length());\n        String operation = req.getParams().get(param);\n\n        if (!VALID_OPS.contains(operation)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Unexpected param(s) for AtomicUpdateProcessor, invalid atomic op passed: '\" +\n                  req.getParams().get(param) + \"'\");\n        }\n        if (orgdoc.get(field) == null || orgdoc.get(field).getValue() instanceof Map) {\n          // no value for the field or it's already an atomic update operation\n          //continue processing other fields\n          continue;\n        }\n\n        orgdoc.setField(field, singletonMap(operation, orgdoc.get(field).getValue()));\n        isAtomicUpdateAddedByMe = true;\n      }\n\n      // if atomic, put _version_ for optimistic concurrency if doc present in index\n      if (isAtomicUpdateAddedByMe) {\n        Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n        if (lastVersion != null) {\n          orgdoc.setField(VERSION, lastVersion);\n        }\n        processAddWithRetry(cmd, 0);\n      } else {\n        super.processAdd(cmd);\n      }\n      // else send it for doc to get inserted for the first time\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"392e007070227c0fd1c28259a11f55a06a9bd7c2","date":1522221057,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    /*\n     * 1. convert incoming update document to atomic-type update document \n     * for specified fields in processor definition.\n     * 2. if incoming update document contains already atomic-type updates, skip\n     * 3. fields not specified in processor param(s) in solrconfig.xml for atomic action\n     * will be treated as conventional updates.\n     * 4. retry when encounter version conflict\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void processAdd(AddUpdateCommand cmd)\n        throws IOException {\n\n      SolrInputDocument orgdoc = cmd.getSolrInputDocument();\n      boolean isAtomicUpdateAddedByMe = false;\n\n      Iterator<String> paramsIterator = req.getParams().getParameterNamesIterator();\n\n      while (paramsIterator.hasNext()) {\n\n        String param = paramsIterator.next();\n\n        if (!param.startsWith(ATOMIC_FIELD_PREFIX)) continue;\n\n        String field = param.substring(ATOMIC_FIELD_PREFIX.length(), param.length());\n        String operation = req.getParams().get(param);\n\n        if (!VALID_OPS.contains(operation)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Unexpected param(s) for AtomicUpdateProcessor, invalid atomic op passed: '\" +\n                  req.getParams().get(param) + \"'\");\n        }\n        if (orgdoc.get(field) == null || orgdoc.get(field).getValue() instanceof Map) {\n          // no value for the field or it's already an atomic update operation\n          //continue processing other fields\n          continue;\n        }\n\n        orgdoc.setField(field, singletonMap(operation, orgdoc.get(field).getValue()));\n        isAtomicUpdateAddedByMe = true;\n      }\n\n      // if atomic, put _version_ for optimistic concurrency if doc present in index\n      if (isAtomicUpdateAddedByMe) {\n        Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n        // if lastVersion is null then we put -1 to assert that document must not exist\n        lastVersion = lastVersion == null ? -1 : lastVersion;\n        orgdoc.setField(VERSION, lastVersion);\n        processAddWithRetry(cmd, 1, cmd.getSolrInputDocument().deepCopy());\n      } else {\n        super.processAdd(cmd);\n      }\n      // else send it for doc to get inserted for the first time\n    }\n\n","sourceOld":"    /*\n     * 1. convert incoming update document to atomic-type update document \n     * for specified fields in processor definition.\n     * 2. if incoming update document contains already atomic-type updates, skip\n     * 3. fields not specified in processor param(s) in solrconfig.xml for atomic action\n     * will be treated as conventional updates.\n     * 4. retry when encounter version conflict\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void processAdd(AddUpdateCommand cmd)\n        throws IOException {\n\n      SolrInputDocument orgdoc = cmd.getSolrInputDocument();\n      boolean isAtomicUpdateAddedByMe = false;\n\n      Iterator<String> paramsIterator = req.getParams().getParameterNamesIterator();\n\n      while (paramsIterator.hasNext()) {\n\n        String param = paramsIterator.next();\n\n        if (!param.startsWith(ATOMIC_FIELD_PREFIX)) continue;\n\n        String field = param.substring(ATOMIC_FIELD_PREFIX.length(), param.length());\n        String operation = req.getParams().get(param);\n\n        if (!VALID_OPS.contains(operation)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Unexpected param(s) for AtomicUpdateProcessor, invalid atomic op passed: '\" +\n                  req.getParams().get(param) + \"'\");\n        }\n        if (orgdoc.get(field) == null || orgdoc.get(field).getValue() instanceof Map) {\n          // no value for the field or it's already an atomic update operation\n          //continue processing other fields\n          continue;\n        }\n\n        orgdoc.setField(field, singletonMap(operation, orgdoc.get(field).getValue()));\n        isAtomicUpdateAddedByMe = true;\n      }\n\n      // if atomic, put _version_ for optimistic concurrency if doc present in index\n      if (isAtomicUpdateAddedByMe) {\n        Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n        if (lastVersion != null) {\n          orgdoc.setField(VERSION, lastVersion);\n        }\n        processAddWithRetry(cmd, 0);\n      } else {\n        super.processAdd(cmd);\n      }\n      // else send it for doc to get inserted for the first time\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    /*\n     * 1. convert incoming update document to atomic-type update document \n     * for specified fields in processor definition.\n     * 2. if incoming update document contains already atomic-type updates, skip\n     * 3. fields not specified in processor param(s) in solrconfig.xml for atomic action\n     * will be treated as conventional updates.\n     * 4. retry when encounter version conflict\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void processAdd(AddUpdateCommand cmd)\n        throws IOException {\n\n      SolrInputDocument orgdoc = cmd.getSolrInputDocument();\n      boolean isAtomicUpdateAddedByMe = false;\n\n      Iterator<String> paramsIterator = req.getParams().getParameterNamesIterator();\n\n      while (paramsIterator.hasNext()) {\n\n        String param = paramsIterator.next();\n\n        if (!param.startsWith(ATOMIC_FIELD_PREFIX)) continue;\n\n        String field = param.substring(ATOMIC_FIELD_PREFIX.length(), param.length());\n        String operation = req.getParams().get(param);\n\n        if (!VALID_OPS.contains(operation)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Unexpected param(s) for AtomicUpdateProcessor, invalid atomic op passed: '\" +\n                  req.getParams().get(param) + \"'\");\n        }\n        if (orgdoc.get(field) == null || orgdoc.get(field).getValue() instanceof Map) {\n          // no value for the field or it's already an atomic update operation\n          //continue processing other fields\n          continue;\n        }\n\n        orgdoc.setField(field, singletonMap(operation, orgdoc.get(field).getValue()));\n        isAtomicUpdateAddedByMe = true;\n      }\n\n      // if atomic, put _version_ for optimistic concurrency if doc present in index\n      if (isAtomicUpdateAddedByMe) {\n        Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n        // if lastVersion is null then we put -1 to assert that document must not exist\n        lastVersion = lastVersion == null ? -1 : lastVersion;\n        orgdoc.setField(VERSION, lastVersion);\n        processAddWithRetry(cmd, 1, cmd.getSolrInputDocument().deepCopy());\n      } else {\n        super.processAdd(cmd);\n      }\n      // else send it for doc to get inserted for the first time\n    }\n\n","sourceOld":"    /*\n     * 1. convert incoming update document to atomic-type update document \n     * for specified fields in processor definition.\n     * 2. if incoming update document contains already atomic-type updates, skip\n     * 3. fields not specified in processor param(s) in solrconfig.xml for atomic action\n     * will be treated as conventional updates.\n     * 4. retry when encounter version conflict\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void processAdd(AddUpdateCommand cmd)\n        throws IOException {\n\n      SolrInputDocument orgdoc = cmd.getSolrInputDocument();\n      boolean isAtomicUpdateAddedByMe = false;\n\n      Iterator<String> paramsIterator = req.getParams().getParameterNamesIterator();\n\n      while (paramsIterator.hasNext()) {\n\n        String param = paramsIterator.next();\n\n        if (!param.startsWith(ATOMIC_FIELD_PREFIX)) continue;\n\n        String field = param.substring(ATOMIC_FIELD_PREFIX.length(), param.length());\n        String operation = req.getParams().get(param);\n\n        if (!VALID_OPS.contains(operation)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Unexpected param(s) for AtomicUpdateProcessor, invalid atomic op passed: '\" +\n                  req.getParams().get(param) + \"'\");\n        }\n        if (orgdoc.get(field) == null || orgdoc.get(field).getValue() instanceof Map) {\n          // no value for the field or it's already an atomic update operation\n          //continue processing other fields\n          continue;\n        }\n\n        orgdoc.setField(field, singletonMap(operation, orgdoc.get(field).getValue()));\n        isAtomicUpdateAddedByMe = true;\n      }\n\n      // if atomic, put _version_ for optimistic concurrency if doc present in index\n      if (isAtomicUpdateAddedByMe) {\n        Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n        if (lastVersion != null) {\n          orgdoc.setField(VERSION, lastVersion);\n        }\n        processAddWithRetry(cmd, 0);\n      } else {\n        super.processAdd(cmd);\n      }\n      // else send it for doc to get inserted for the first time\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f1de703f36b1071144037c80ca5fe118aa5e96fd"],"392e007070227c0fd1c28259a11f55a06a9bd7c2":["f1de703f36b1071144037c80ca5fe118aa5e96fd"],"43564cbb30b064675027cfb569564e8531096e97":["f1de703f36b1071144037c80ca5fe118aa5e96fd","392e007070227c0fd1c28259a11f55a06a9bd7c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1de703f36b1071144037c80ca5fe118aa5e96fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"392e007070227c0fd1c28259a11f55a06a9bd7c2":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","f1de703f36b1071144037c80ca5fe118aa5e96fd"],"f1de703f36b1071144037c80ca5fe118aa5e96fd":["e9017cf144952056066919f1ebc7897ff9bd71b1","392e007070227c0fd1c28259a11f55a06a9bd7c2","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}