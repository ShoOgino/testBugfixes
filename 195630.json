{"path":"backwards/src/demo/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/demo/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final Searcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/demo/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","pathOld":"backwards/src/demo/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","sourceNew":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final Searcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final Searcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}