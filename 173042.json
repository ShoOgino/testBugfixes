{"path":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.WeightedPhraseInfo#WeightedPhraseInfo(LinkedList[TermInfo],float,int).mjava","commits":[{"id":"d64148a458eb3ddf4d1bb1f1753cb9af194e1707","date":1247144811,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.WeightedPhraseInfo#WeightedPhraseInfo(LinkedList[TermInfo],float,int).mjava","pathOld":"/dev/null","sourceNew":"    public WeightedPhraseInfo( LinkedList<TermInfo> terms, float boost, int number ){\n      this.boost = boost;\n      this.seqnum = number;\n      termsOffsets = new ArrayList<Toffs>( terms.size() );\n      TermInfo ti = terms.get( 0 );\n      termsOffsets.add( new Toffs( ti.getStartOffset(), ti.getEndOffset() ) );\n      if( terms.size() == 1 ){\n        text = ti.getText();\n        return;\n      }\n      StringBuilder sb = new StringBuilder();\n      sb.append( ti.getText() );\n      int pos = ti.getPosition();\n      for( int i = 1; i < terms.size(); i++ ){\n        ti = terms.get( i );\n        sb.append( ti.getText() );\n        if( ti.getPosition() - pos == 1 ){\n          Toffs to = termsOffsets.get( termsOffsets.size() - 1 );\n          to.setEndOffset( ti.getEndOffset() );\n        }\n        else{\n          termsOffsets.add( new Toffs( ti.getStartOffset(), ti.getEndOffset() ) );\n        }\n        pos = ti.getPosition();\n      }\n      text = sb.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.WeightedPhraseInfo#WeightedPhraseInfo(LinkedList[TermInfo],float,int).mjava","pathOld":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.WeightedPhraseInfo#WeightedPhraseInfo(LinkedList[TermInfo],float,int).mjava","sourceNew":"    public WeightedPhraseInfo( LinkedList<TermInfo> terms, float boost, int number ){\n      this.boost = boost;\n      this.seqnum = number;\n      termsOffsets = new ArrayList<Toffs>( terms.size() );\n      TermInfo ti = terms.get( 0 );\n      termsOffsets.add( new Toffs( ti.getStartOffset(), ti.getEndOffset() ) );\n      if( terms.size() == 1 ){\n        text = ti.getText();\n        return;\n      }\n      StringBuilder sb = new StringBuilder();\n      sb.append( ti.getText() );\n      int pos = ti.getPosition();\n      for( int i = 1; i < terms.size(); i++ ){\n        ti = terms.get( i );\n        sb.append( ti.getText() );\n        if( ti.getPosition() - pos == 1 ){\n          Toffs to = termsOffsets.get( termsOffsets.size() - 1 );\n          to.setEndOffset( ti.getEndOffset() );\n        }\n        else{\n          termsOffsets.add( new Toffs( ti.getStartOffset(), ti.getEndOffset() ) );\n        }\n        pos = ti.getPosition();\n      }\n      text = sb.toString();\n    }\n\n","sourceOld":"    public WeightedPhraseInfo( LinkedList<TermInfo> terms, float boost, int number ){\n      this.boost = boost;\n      this.seqnum = number;\n      termsOffsets = new ArrayList<Toffs>( terms.size() );\n      TermInfo ti = terms.get( 0 );\n      termsOffsets.add( new Toffs( ti.getStartOffset(), ti.getEndOffset() ) );\n      if( terms.size() == 1 ){\n        text = ti.getText();\n        return;\n      }\n      StringBuilder sb = new StringBuilder();\n      sb.append( ti.getText() );\n      int pos = ti.getPosition();\n      for( int i = 1; i < terms.size(); i++ ){\n        ti = terms.get( i );\n        sb.append( ti.getText() );\n        if( ti.getPosition() - pos == 1 ){\n          Toffs to = termsOffsets.get( termsOffsets.size() - 1 );\n          to.setEndOffset( ti.getEndOffset() );\n        }\n        else{\n          termsOffsets.add( new Toffs( ti.getStartOffset(), ti.getEndOffset() ) );\n        }\n        pos = ti.getPosition();\n      }\n      text = sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}