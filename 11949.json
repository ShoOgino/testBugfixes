{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","commits":[{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35","date":1501089160,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName);\n    assertTrue(sf.multiValued());\n    assertTrue(sf.getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    if (sf.getType().getNumberType() == NumberType.FLOAT || sf.getType().getNumberType() == NumberType.DOUBLE) {\n      doTestDoubleFloatRangeLimits(fieldName, sf.getType().getNumberType() == NumberType.DOUBLE);\n    }\n    \n  }\n\n","sourceOld":"  private void doTestPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    SchemaField sf = h.getCore().getLatestSchema().getField(fieldName);\n    assertTrue(sf.multiValued());\n    assertTrue(sf.getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    if (sf.getType().getNumberType() == NumberType.FLOAT || sf.getType().getNumberType() == NumberType.DOUBLE) {\n      doTestDoubleFloatRangeLimits(fieldName, sf.getType().getNumberType() == NumberType.DOUBLE);\n    }\n    \n  }\n\n","sourceOld":"  private void doTestPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["aaf90fc29510e72665ac7934f34c3d1c25efad64","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}