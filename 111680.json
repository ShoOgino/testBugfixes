{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","commits":[{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","pathOld":"/dev/null","sourceNew":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), -1, -1, -1));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a02c4ae57f80a4a8e4b19b39a158573ec86e28e","date":1527605883,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","sourceNew":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    if (mp instanceof FilterMergePolicy) {\n      assumeFalse(\"test doesn't work with MockRandomMP\",\n          ((FilterMergePolicy) mp).in instanceof MockRandomMergePolicy);\n    }\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), -1, -1, -1));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","sourceOld":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), -1, -1, -1));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","sourceNew":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    if (mp instanceof FilterMergePolicy) {\n      assumeFalse(\"test doesn't work with MockRandomMP\",\n          ((FilterMergePolicy) mp).in instanceof MockRandomMergePolicy);\n    }\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), 0, -1, -1, -1));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","sourceOld":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    if (mp instanceof FilterMergePolicy) {\n      assumeFalse(\"test doesn't work with MockRandomMP\",\n          ((FilterMergePolicy) mp).in instanceof MockRandomMergePolicy);\n    }\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), -1, -1, -1));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","sourceNew":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    if (mp instanceof FilterMergePolicy) {\n      assumeFalse(\"test doesn't work with MockRandomMP\",\n          ((FilterMergePolicy) mp).in instanceof MockRandomMergePolicy);\n    }\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), 0, -1, -1, -1));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","sourceOld":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    if (mp instanceof FilterMergePolicy) {\n      assumeFalse(\"test doesn't work with MockRandomMP\",\n          ((FilterMergePolicy) mp).in instanceof MockRandomMergePolicy);\n    }\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), -1, -1, -1));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","sourceNew":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    if (mp instanceof FilterMergePolicy) {\n      assumeFalse(\"test doesn't work with MockRandomMP\",\n          ((FilterMergePolicy) mp).in instanceof MockRandomMergePolicy);\n    }\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), 0, -1, -1, -1));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","sourceOld":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    if (mp instanceof FilterMergePolicy) {\n      assumeFalse(\"test doesn't work with MockRandomMP\",\n          ((FilterMergePolicy) mp).in instanceof MockRandomMergePolicy);\n    }\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), -1, -1, -1));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14654be3f7a82c9a3c52169e365baa55bfe64f66","date":1587212697,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testFindForcedDeletesMerges().mjava","sourceNew":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    if (mp instanceof FilterMergePolicy) {\n      assumeFalse(\"test doesn't work with MockRandomMP\",\n          ((FilterMergePolicy) mp).in instanceof MockRandomMergePolicy);\n    }\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), 0, -1, -1, -1, StringHelper.randomId()));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","sourceOld":"  public void testFindForcedDeletesMerges() throws IOException {\n    MergePolicy mp = mergePolicy();\n    if (mp instanceof FilterMergePolicy) {\n      assumeFalse(\"test doesn't work with MockRandomMP\",\n          ((FilterMergePolicy) mp).in instanceof MockRandomMergePolicy);\n    }\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    try (Directory directory = newDirectory()) {\n      MergePolicy.MergeContext context = new MockMergeContext(s -> 0);\n      int numSegs = random().nextInt(10);\n      for (int i = 0; i < numSegs; i++) {\n        SegmentInfo info = new SegmentInfo(\n            directory, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(Integer.MAX_VALUE), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        info.setFiles(Collections.emptyList());\n        infos.add(new SegmentCommitInfo(info, random().nextInt(1), 0, -1, -1, -1));\n      }\n      MergePolicy.MergeSpecification forcedDeletesMerges = mp.findForcedDeletesMerges(infos, context);\n      if (forcedDeletesMerges != null) {\n        assertEquals(0, forcedDeletesMerges.merges.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14654be3f7a82c9a3c52169e365baa55bfe64f66":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["9a02c4ae57f80a4a8e4b19b39a158573ec86e28e","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"1d28f215464f76024caf026606f8ea51a5319c53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["9a02c4ae57f80a4a8e4b19b39a158573ec86e28e"],"f592209545c71895260367152601e9200399776d":["9a02c4ae57f80a4a8e4b19b39a158573ec86e28e","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14654be3f7a82c9a3c52169e365baa55bfe64f66"],"9a02c4ae57f80a4a8e4b19b39a158573ec86e28e":["1d28f215464f76024caf026606f8ea51a5319c53"]},"commit2Childs":{"14654be3f7a82c9a3c52169e365baa55bfe64f66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d28f215464f76024caf026606f8ea51a5319c53"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"1d28f215464f76024caf026606f8ea51a5319c53":["9a02c4ae57f80a4a8e4b19b39a158573ec86e28e"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["14654be3f7a82c9a3c52169e365baa55bfe64f66","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"9a02c4ae57f80a4a8e4b19b39a158573ec86e28e":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}