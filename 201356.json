{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"229505c4feb8aa5ff851983b26d4e9874e6ea0c8","date":1339003839,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["229505c4feb8aa5ff851983b26d4e9874e6ea0c8","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["229505c4feb8aa5ff851983b26d4e9874e6ea0c8","02331260bb246364779cb6f04919ca47900d01bb"],"229505c4feb8aa5ff851983b26d4e9874e6ea0c8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["229505c4feb8aa5ff851983b26d4e9874e6ea0c8"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["229505c4feb8aa5ff851983b26d4e9874e6ea0c8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"229505c4feb8aa5ff851983b26d4e9874e6ea0c8":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}