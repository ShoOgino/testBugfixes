{"path":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    String field = null;\n    if (args.length == 1) {\n      reader = IndexReader.open(args[0]);\n    } else if (args.length == 2) {\n      reader = IndexReader.open(args[0]);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo) tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    String field = null;\n    if (args.length == 1) {\n      reader = IndexReader.open(args[0]);\n    } else if (args.length == 2) {\n      reader = IndexReader.open(args[0]);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo) tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo) tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    String field = null;\n    if (args.length == 1) {\n      reader = IndexReader.open(args[0]);\n    } else if (args.length == 2) {\n      reader = IndexReader.open(args[0]);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo) tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo) tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo) tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo) tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"4256bc1b3c94786287ccdfc751230374521843cf":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}