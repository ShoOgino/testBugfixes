{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#score(float,long).mjava","commits":[{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#score(float,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#score(int,float).mjava","sourceNew":"    /**\n     * Score a single document\n     * @param freq sloppy term frequency\n     * @param norm encoded normalization factor, as returned by {@link Similarity#computeNorm}, or {@code 1} if norms are disabled\n     * @return document's score\n     */\n    public abstract float score(float freq, long norm) throws IOException;\n\n","sourceOld":"    /**\n     * Score a single document\n     * @param doc document id within the inverted index segment\n     * @param freq sloppy term frequency\n     * @return document's score\n     */\n    public abstract float score(int doc, float freq) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c68bfb3354451a11c895b36484af94f27530b79","date":1515505336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#score(float,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#score(float,long).mjava","sourceNew":"    /**\n     * Score a single document. {@code freq} is the document-term sloppy\n     * frequency and must be finite and positive. {@code norm} is the\n     * encoded normalization factor as computed by\n     * {@link Similarity#computeNorm(FieldInvertState)} at index time, or\n     * {@code 1} if norms are disabled. {@code norm} is never {@code 0}.\n     * <p>\n     * Score must not decrease when {@code freq} increases, ie. if\n     * {@code freq1 &gt; freq2}, then {@code score(freq1, norm) &gt;=\n     * score(freq2, norm)} for any value of {@code norm} that may be produced\n     * by {@link Similarity#computeNorm(FieldInvertState)}.\n     * <p>\n     * Score must not increase when the unsigned {@code norm} increases, ie. if\n     * {@code Long.compareUnsigned(norm1, norm2) &gt; 0} then\n     * {@code score(freq, norm1) &lt;= score(freq, norm2)} for any legal\n     * {@code freq}.\n     * <p>\n     * As a consequence, the maximum score that this scorer can produce is bound\n     * by {@code score(Float.MAX_VALUE, 1)}.\n     * @param freq sloppy term frequency, must be finite and positive\n     * @param norm encoded normalization factor or {@code 1} if norms are disabled\n     * @return document's score\n     */\n    public abstract float score(float freq, long norm) throws IOException;\n\n","sourceOld":"    /**\n     * Score a single document\n     * @param freq sloppy term frequency\n     * @param norm encoded normalization factor, as returned by {@link Similarity#computeNorm}, or {@code 1} if norms are disabled\n     * @return document's score\n     */\n    public abstract float score(float freq, long norm) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb2fe416114ad548e5a8a3e4326e9ef51d2ef48","date":1515667776,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#score(float,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#score(float,long).mjava","sourceNew":"    /**\n     * Score a single document. {@code freq} is the document-term sloppy\n     * frequency and must be finite and positive. {@code norm} is the\n     * encoded normalization factor as computed by\n     * {@link Similarity#computeNorm(FieldInvertState)} at index time, or\n     * {@code 1} if norms are disabled. {@code norm} is never {@code 0}.\n     * <p>\n     * Score must not decrease when {@code freq} increases, ie. if\n     * {@code freq1 &gt; freq2}, then {@code score(freq1, norm) &gt;=\n     * score(freq2, norm)} for any value of {@code norm} that may be produced\n     * by {@link Similarity#computeNorm(FieldInvertState)}.\n     * <p>\n     * Score must not increase when the unsigned {@code norm} increases, ie. if\n     * {@code Long.compareUnsigned(norm1, norm2) &gt; 0} then\n     * {@code score(freq, norm1) &lt;= score(freq, norm2)} for any legal\n     * {@code freq}.\n     * <p>\n     * As a consequence, the maximum score that this scorer can produce is bound\n     * by {@code score(Float.MAX_VALUE, 1)}.\n     * @param freq sloppy term frequency, must be finite and positive\n     * @param norm encoded normalization factor or {@code 1} if norms are disabled\n     * @return document's score\n     */\n    public abstract float score(float freq, long norm);\n\n","sourceOld":"    /**\n     * Score a single document. {@code freq} is the document-term sloppy\n     * frequency and must be finite and positive. {@code norm} is the\n     * encoded normalization factor as computed by\n     * {@link Similarity#computeNorm(FieldInvertState)} at index time, or\n     * {@code 1} if norms are disabled. {@code norm} is never {@code 0}.\n     * <p>\n     * Score must not decrease when {@code freq} increases, ie. if\n     * {@code freq1 &gt; freq2}, then {@code score(freq1, norm) &gt;=\n     * score(freq2, norm)} for any value of {@code norm} that may be produced\n     * by {@link Similarity#computeNorm(FieldInvertState)}.\n     * <p>\n     * Score must not increase when the unsigned {@code norm} increases, ie. if\n     * {@code Long.compareUnsigned(norm1, norm2) &gt; 0} then\n     * {@code score(freq, norm1) &lt;= score(freq, norm2)} for any legal\n     * {@code freq}.\n     * <p>\n     * As a consequence, the maximum score that this scorer can produce is bound\n     * by {@code score(Float.MAX_VALUE, 1)}.\n     * @param freq sloppy term frequency, must be finite and positive\n     * @param norm encoded normalization factor or {@code 1} if norms are disabled\n     * @return document's score\n     */\n    public abstract float score(float freq, long norm) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#score(float,long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Score a single document. {@code freq} is the document-term sloppy\n     * frequency and must be finite and positive. {@code norm} is the\n     * encoded normalization factor as computed by\n     * {@link Similarity#computeNorm(FieldInvertState)} at index time, or\n     * {@code 1} if norms are disabled. {@code norm} is never {@code 0}.\n     * <p>\n     * Score must not decrease when {@code freq} increases, ie. if\n     * {@code freq1 &gt; freq2}, then {@code score(freq1, norm) &gt;=\n     * score(freq2, norm)} for any value of {@code norm} that may be produced\n     * by {@link Similarity#computeNorm(FieldInvertState)}.\n     * <p>\n     * Score must not increase when the unsigned {@code norm} increases, ie. if\n     * {@code Long.compareUnsigned(norm1, norm2) &gt; 0} then\n     * {@code score(freq, norm1) &lt;= score(freq, norm2)} for any legal\n     * {@code freq}.\n     * <p>\n     * As a consequence, the maximum score that this scorer can produce is bound\n     * by {@code score(Float.MAX_VALUE, 1)}.\n     * @param freq sloppy term frequency, must be finite and positive\n     * @param norm encoded normalization factor or {@code 1} if norms are disabled\n     * @return document's score\n     */\n    public abstract float score(float freq, long norm);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f94c392daa8f5708186bede16c84eafad4cdd2","date":1599578873,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#score(float,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#score(float,long).mjava","sourceNew":"    /**\n     * Score a single document. {@code freq} is the document-term sloppy\n     * frequency and must be finite and positive. {@code norm} is the\n     * encoded normalization factor as computed by\n     * {@link Similarity#computeNorm(FieldInvertState)} at index time, or\n     * {@code 1} if norms are disabled. {@code norm} is never {@code 0}.\n     * <p>\n     * Score must not decrease when {@code freq} increases, ie. if\n     * {@code freq1 > freq2}, then {@code score(freq1, norm) >=\n     * score(freq2, norm)} for any value of {@code norm} that may be produced\n     * by {@link Similarity#computeNorm(FieldInvertState)}.\n     * <p>\n     * Score must not increase when the unsigned {@code norm} increases, ie. if\n     * {@code Long.compareUnsigned(norm1, norm2) > 0} then\n     * {@code score(freq, norm1) <= score(freq, norm2)} for any legal\n     * {@code freq}.\n     * <p>\n     * As a consequence, the maximum score that this scorer can produce is bound\n     * by {@code score(Float.MAX_VALUE, 1)}.\n     * @param freq sloppy term frequency, must be finite and positive\n     * @param norm encoded normalization factor or {@code 1} if norms are disabled\n     * @return document's score\n     */\n    public abstract float score(float freq, long norm);\n\n","sourceOld":"    /**\n     * Score a single document. {@code freq} is the document-term sloppy\n     * frequency and must be finite and positive. {@code norm} is the\n     * encoded normalization factor as computed by\n     * {@link Similarity#computeNorm(FieldInvertState)} at index time, or\n     * {@code 1} if norms are disabled. {@code norm} is never {@code 0}.\n     * <p>\n     * Score must not decrease when {@code freq} increases, ie. if\n     * {@code freq1 &gt; freq2}, then {@code score(freq1, norm) &gt;=\n     * score(freq2, norm)} for any value of {@code norm} that may be produced\n     * by {@link Similarity#computeNorm(FieldInvertState)}.\n     * <p>\n     * Score must not increase when the unsigned {@code norm} increases, ie. if\n     * {@code Long.compareUnsigned(norm1, norm2) &gt; 0} then\n     * {@code score(freq, norm1) &lt;= score(freq, norm2)} for any legal\n     * {@code freq}.\n     * <p>\n     * As a consequence, the maximum score that this scorer can produce is bound\n     * by {@code score(Float.MAX_VALUE, 1)}.\n     * @param freq sloppy term frequency, must be finite and positive\n     * @param norm encoded normalization factor or {@code 1} if norms are disabled\n     * @return document's score\n     */\n    public abstract float score(float freq, long norm);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c68bfb3354451a11c895b36484af94f27530b79":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","edb2fe416114ad548e5a8a3e4326e9ef51d2ef48"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["b94236357aaa22b76c10629851fe4e376e0cea82"],"edb2fe416114ad548e5a8a3e4326e9ef51d2ef48":["0c68bfb3354451a11c895b36484af94f27530b79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f94c392daa8f5708186bede16c84eafad4cdd2"]},"commit2Childs":{"0c68bfb3354451a11c895b36484af94f27530b79":["edb2fe416114ad548e5a8a3e4326e9ef51d2ef48"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["0c68bfb3354451a11c895b36484af94f27530b79"],"b94236357aaa22b76c10629851fe4e376e0cea82":["c9f94c392daa8f5708186bede16c84eafad4cdd2"],"edb2fe416114ad548e5a8a3e4326e9ef51d2ef48":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}