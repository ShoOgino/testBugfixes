{"path":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode#testSortOrder().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode#testSortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode#testSortOrder().mjava","sourceNew":"  /**\n   * Test that AutomatonQuery interacts with lucene's sort order correctly.\n   * \n   * This expression matches something either starting with the arabic\n   * presentation forms block, or a supplementary character.\n   */\n  public void testSortOrder() throws IOException {\n    Automaton a = new RegExp(\"((\\uD866\\uDF05)|\\uFB94).*\").toAutomaton();\n    assertAutomatonHits(2, a);\n  }\n\n","sourceOld":"  /**\n   * Test that AutomatonQuery interacts with lucene's sort order correctly.\n   * \n   * This expression matches something either starting with the arabic\n   * presentation forms block, or a supplementary character.\n   */\n  public void testSortOrder() throws IOException {\n    Automaton a = new RegExp(\"((\\uD866\\uDF05)|\\uFB94).*\").toAutomaton();\n    assertAutomatonHits(2, a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode#testSortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode#testSortOrder().mjava","sourceNew":"  /**\n   * Test that AutomatonQuery interacts with lucene's sort order correctly.\n   * \n   * This expression matches something either starting with the arabic\n   * presentation forms block, or a supplementary character.\n   */\n  public void testSortOrder() throws IOException {\n    LightAutomaton a = new RegExp(\"((\\uD866\\uDF05)|\\uFB94).*\").toLightAutomaton();\n    assertAutomatonHits(2, a);\n  }\n\n","sourceOld":"  /**\n   * Test that AutomatonQuery interacts with lucene's sort order correctly.\n   * \n   * This expression matches something either starting with the arabic\n   * presentation forms block, or a supplementary character.\n   */\n  public void testSortOrder() throws IOException {\n    Automaton a = new RegExp(\"((\\uD866\\uDF05)|\\uFB94).*\").toAutomaton();\n    assertAutomatonHits(2, a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode#testSortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode#testSortOrder().mjava","sourceNew":"  /**\n   * Test that AutomatonQuery interacts with lucene's sort order correctly.\n   * \n   * This expression matches something either starting with the arabic\n   * presentation forms block, or a supplementary character.\n   */\n  public void testSortOrder() throws IOException {\n    Automaton a = new RegExp(\"((\\uD866\\uDF05)|\\uFB94).*\").toAutomaton();\n    assertAutomatonHits(2, a);\n  }\n\n","sourceOld":"  /**\n   * Test that AutomatonQuery interacts with lucene's sort order correctly.\n   * \n   * This expression matches something either starting with the arabic\n   * presentation forms block, or a supplementary character.\n   */\n  public void testSortOrder() throws IOException {\n    LightAutomaton a = new RegExp(\"((\\uD866\\uDF05)|\\uFB94).*\").toLightAutomaton();\n    assertAutomatonHits(2, a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}