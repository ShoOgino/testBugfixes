{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"/dev/null","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}