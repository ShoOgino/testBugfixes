{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#skipField(int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#skipField(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40StoredFieldsReader#skipField(int).mjava","sourceNew":"  private void skipField(int bits) throws IOException {\n    final int numeric = bits & Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          fieldsStream.readInt();\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          fieldsStream.readLong();\n          return;\n        default: \n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else {\n      final int length = fieldsStream.readVInt();\n      fieldsStream.seek(fieldsStream.getFilePointer() + length);\n    }\n  }\n\n","sourceOld":"  private void skipField(int bits) throws IOException {\n    final int numeric = bits & Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          fieldsStream.readInt();\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          fieldsStream.readLong();\n          return;\n        default: \n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else {\n      final int length = fieldsStream.readVInt();\n      fieldsStream.seek(fieldsStream.getFilePointer() + length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#skipField(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#skipField(int).mjava","sourceNew":"  private void skipField(int bits) throws IOException {\n    final int numeric = bits & Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          fieldsStream.readInt();\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          fieldsStream.readLong();\n          return;\n        default: \n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else {\n      final int length = fieldsStream.readVInt();\n      fieldsStream.seek(fieldsStream.getFilePointer() + length);\n    }\n  }\n\n","sourceOld":"  private void skipField(int bits) throws IOException {\n    final int numeric = bits & Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          fieldsStream.readInt();\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          fieldsStream.readLong();\n          return;\n        default: \n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else {\n      final int length = fieldsStream.readVInt();\n      fieldsStream.seek(fieldsStream.getFilePointer() + length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}