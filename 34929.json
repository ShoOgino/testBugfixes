{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n        if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n          bits |= OMIT_POSITIONS;\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        final byte b;\n\n        if (!fi.hasDocValues()) {\n          b = 0;\n        } else {\n          switch(fi.getDocValuesType()) {\n          case VAR_INTS:\n            b = 1;\n            break;\n          case FLOAT_32:\n            b = 2;\n            break;\n          case FLOAT_64:\n            b = 3;\n            break;\n          case BYTES_FIXED_STRAIGHT:\n            b = 4;\n            break;\n          case BYTES_FIXED_DEREF:\n            b = 5;\n            break;\n          case BYTES_VAR_STRAIGHT:\n            b = 6;\n            break;\n          case BYTES_VAR_DEREF:\n            b = 7;\n            break;\n          case FIXED_INTS_16:\n            b = 8;\n            break;\n          case FIXED_INTS_32:\n            b = 9;\n            break;\n          case FIXED_INTS_64:\n            b = 10;\n            break;\n          case FIXED_INTS_8:\n            b = 11;\n            break;\n          case BYTES_FIXED_SORTED:\n            b = 12;\n            break;\n          case BYTES_VAR_SORTED:\n            b = 13;\n            break;\n          default:\n            throw new IllegalStateException(\"unhandled indexValues type \" + fi.getDocValuesType());\n          }\n        }\n        output.writeByte(b);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n        if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n          bits |= OMIT_POSITIONS;\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        final byte b;\n\n        if (!fi.hasDocValues()) {\n          b = 0;\n        } else {\n          switch(fi.getDocValuesType()) {\n          case VAR_INTS:\n            b = 1;\n            break;\n          case FLOAT_32:\n            b = 2;\n            break;\n          case FLOAT_64:\n            b = 3;\n            break;\n          case BYTES_FIXED_STRAIGHT:\n            b = 4;\n            break;\n          case BYTES_FIXED_DEREF:\n            b = 5;\n            break;\n          case BYTES_VAR_STRAIGHT:\n            b = 6;\n            break;\n          case BYTES_VAR_DEREF:\n            b = 7;\n            break;\n          case FIXED_INTS_16:\n            b = 8;\n            break;\n          case FIXED_INTS_32:\n            b = 9;\n            break;\n          case FIXED_INTS_64:\n            b = 10;\n            break;\n          case FIXED_INTS_8:\n            b = 11;\n            break;\n          case BYTES_FIXED_SORTED:\n            b = 12;\n            break;\n          case BYTES_VAR_SORTED:\n            b = 13;\n            break;\n          default:\n            throw new IllegalStateException(\"unhandled indexValues type \" + fi.getDocValuesType());\n          }\n        }\n        output.writeByte(b);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        final byte b;\n\n        if (!fi.hasDocValues()) {\n          b = 0;\n        } else {\n          switch(fi.getDocValuesType()) {\n          case VAR_INTS:\n            b = 1;\n            break;\n          case FLOAT_32:\n            b = 2;\n            break;\n          case FLOAT_64:\n            b = 3;\n            break;\n          case BYTES_FIXED_STRAIGHT:\n            b = 4;\n            break;\n          case BYTES_FIXED_DEREF:\n            b = 5;\n            break;\n          case BYTES_VAR_STRAIGHT:\n            b = 6;\n            break;\n          case BYTES_VAR_DEREF:\n            b = 7;\n            break;\n          case FIXED_INTS_16:\n            b = 8;\n            break;\n          case FIXED_INTS_32:\n            b = 9;\n            break;\n          case FIXED_INTS_64:\n            b = 10;\n            break;\n          case FIXED_INTS_8:\n            b = 11;\n            break;\n          case BYTES_FIXED_SORTED:\n            b = 12;\n            break;\n          case BYTES_VAR_SORTED:\n            b = 13;\n            break;\n          default:\n            throw new IllegalStateException(\"unhandled indexValues type \" + fi.getDocValuesType());\n          }\n        }\n        output.writeByte(b);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n        if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n          bits |= OMIT_POSITIONS;\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        final byte b;\n\n        if (!fi.hasDocValues()) {\n          b = 0;\n        } else {\n          switch(fi.getDocValuesType()) {\n          case VAR_INTS:\n            b = 1;\n            break;\n          case FLOAT_32:\n            b = 2;\n            break;\n          case FLOAT_64:\n            b = 3;\n            break;\n          case BYTES_FIXED_STRAIGHT:\n            b = 4;\n            break;\n          case BYTES_FIXED_DEREF:\n            b = 5;\n            break;\n          case BYTES_VAR_STRAIGHT:\n            b = 6;\n            break;\n          case BYTES_VAR_DEREF:\n            b = 7;\n            break;\n          case FIXED_INTS_16:\n            b = 8;\n            break;\n          case FIXED_INTS_32:\n            b = 9;\n            break;\n          case FIXED_INTS_64:\n            b = 10;\n            break;\n          case FIXED_INTS_8:\n            b = 11;\n            break;\n          case BYTES_FIXED_SORTED:\n            b = 12;\n            break;\n          case BYTES_VAR_SORTED:\n            b = 13;\n            break;\n          default:\n            throw new IllegalStateException(\"unhandled indexValues type \" + fi.getDocValuesType());\n          }\n        }\n        output.writeByte(b);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        final byte b;\n\n        if (!fi.hasDocValues()) {\n          b = 0;\n        } else {\n          switch(fi.getDocValuesType()) {\n          case VAR_INTS:\n            b = 1;\n            break;\n          case FLOAT_32:\n            b = 2;\n            break;\n          case FLOAT_64:\n            b = 3;\n            break;\n          case BYTES_FIXED_STRAIGHT:\n            b = 4;\n            break;\n          case BYTES_FIXED_DEREF:\n            b = 5;\n            break;\n          case BYTES_VAR_STRAIGHT:\n            b = 6;\n            break;\n          case BYTES_VAR_DEREF:\n            b = 7;\n            break;\n          case FIXED_INTS_16:\n            b = 8;\n            break;\n          case FIXED_INTS_32:\n            b = 9;\n            break;\n          case FIXED_INTS_64:\n            b = 10;\n            break;\n          case FIXED_INTS_8:\n            b = 11;\n            break;\n          case BYTES_FIXED_SORTED:\n            b = 12;\n            break;\n          case BYTES_VAR_SORTED:\n            b = 13;\n            break;\n          default:\n            throw new IllegalStateException(\"unhandled indexValues type \" + fi.getDocValuesType());\n          }\n        }\n        output.writeByte(b);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        final byte b;\n\n        if (!fi.hasDocValues()) {\n          b = 0;\n        } else {\n          switch(fi.getDocValuesType()) {\n          case VAR_INTS:\n            b = 1;\n            break;\n          case FLOAT_32:\n            b = 2;\n            break;\n          case FLOAT_64:\n            b = 3;\n            break;\n          case BYTES_FIXED_STRAIGHT:\n            b = 4;\n            break;\n          case BYTES_FIXED_DEREF:\n            b = 5;\n            break;\n          case BYTES_VAR_STRAIGHT:\n            b = 6;\n            break;\n          case BYTES_VAR_DEREF:\n            b = 7;\n            break;\n          case FIXED_INTS_16:\n            b = 8;\n            break;\n          case FIXED_INTS_32:\n            b = 9;\n            break;\n          case FIXED_INTS_64:\n            b = 10;\n            break;\n          case FIXED_INTS_8:\n            b = 11;\n            break;\n          case BYTES_FIXED_SORTED:\n            b = 12;\n            break;\n          case BYTES_VAR_SORTED:\n            b = 13;\n            break;\n          default:\n            throw new IllegalStateException(\"unhandled indexValues type \" + fi.getDocValuesType());\n          }\n        }\n        output.writeByte(b);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        final byte b;\n\n        if (!fi.hasDocValues()) {\n          b = 0;\n        } else {\n          switch(fi.getDocValuesType()) {\n          case VAR_INTS:\n            b = 1;\n            break;\n          case FLOAT_32:\n            b = 2;\n            break;\n          case FLOAT_64:\n            b = 3;\n            break;\n          case BYTES_FIXED_STRAIGHT:\n            b = 4;\n            break;\n          case BYTES_FIXED_DEREF:\n            b = 5;\n            break;\n          case BYTES_VAR_STRAIGHT:\n            b = 6;\n            break;\n          case BYTES_VAR_DEREF:\n            b = 7;\n            break;\n          case FIXED_INTS_16:\n            b = 8;\n            break;\n          case FIXED_INTS_32:\n            b = 9;\n            break;\n          case FIXED_INTS_64:\n            b = 10;\n            break;\n          case FIXED_INTS_8:\n            b = 11;\n            break;\n          case BYTES_FIXED_SORTED:\n            b = 12;\n            break;\n          case BYTES_VAR_SORTED:\n            b = 13;\n            break;\n          default:\n            throw new IllegalStateException(\"unhandled indexValues type \" + fi.getDocValuesType());\n          }\n        }\n        output.writeByte(b);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a44b232879361a7ace3520b5b313094a9a35e044","date":1327356188,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          bits |= STORE_OFFSETS_IN_POSTINGS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["9e8d5a6ffbfa3405d234a87c833741eabed98d13","a44b232879361a7ace3520b5b313094a9a35e044"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a44b232879361a7ace3520b5b313094a9a35e044"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["9e8d5a6ffbfa3405d234a87c833741eabed98d13","a44b232879361a7ace3520b5b313094a9a35e044"],"a44b232879361a7ace3520b5b313094a9a35e044":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a44b232879361a7ace3520b5b313094a9a35e044"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a44b232879361a7ace3520b5b313094a9a35e044":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}