{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#copyGroups(OneGroup).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#copyGroups(OneGroup).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#copyGroups(OneGroup).mjava","sourceNew":"  // Pulls out child doc and scores for all join queries:\n  private void copyGroups(OneGroup og) {\n    // While rare, it's possible top arrays could be too\n    // short if join query had null scorer on first\n    // segment(s) but then became non-null on later segments\n    final int numSubScorers = joinScorers.length;\n    if (og.docs.length < numSubScorers) {\n      // While rare, this could happen if join query had\n      // null scorer on first segment(s) but then became\n      // non-null on later segments\n      og.docs = ArrayUtil.grow(og.docs);\n    }\n    if (og.counts.length < numSubScorers) {\n      og.counts = ArrayUtil.grow(og.counts);\n    }\n    if (trackScores && og.scores.length < numSubScorers) {\n      og.scores = ArrayUtil.grow(og.scores);\n    }\n\n    //System.out.println(\"copyGroups parentDoc=\" + og.doc);\n    for(int scorerIDX = 0;scorerIDX < numSubScorers;scorerIDX++) {\n      final ToParentBlockJoinQuery.BlockJoinScorer joinScorer = joinScorers[scorerIDX];\n      //System.out.println(\"  scorer=\" + joinScorer);\n      if (joinScorer != null) {\n        og.counts[scorerIDX] = joinScorer.getChildCount();\n        //System.out.println(\"    count=\" + og.counts[scorerIDX]);\n        og.docs[scorerIDX] = joinScorer.swapChildDocs(og.docs[scorerIDX]);\n        /*\n        for(int idx=0;idx<og.counts[scorerIDX];idx++) {\n          System.out.println(\"    docs[\" + idx + \"]=\" + og.docs[scorerIDX][idx]);\n        }\n        */\n        if (trackScores) {\n          og.scores[scorerIDX] = joinScorer.swapChildScores(og.scores[scorerIDX]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Pulls out child doc and scores for all join queries:\n  private void copyGroups(OneGroup og) {\n    // While rare, it's possible top arrays could be too\n    // short if join query had null scorer on first\n    // segment(s) but then became non-null on later segments\n    final int numSubScorers = joinScorers.length;\n    if (og.docs.length < numSubScorers) {\n      // While rare, this could happen if join query had\n      // null scorer on first segment(s) but then became\n      // non-null on later segments\n      og.docs = ArrayUtil.grow(og.docs);\n    }\n    if (og.counts.length < numSubScorers) {\n      og.counts = ArrayUtil.grow(og.counts);\n    }\n    if (trackScores && og.scores.length < numSubScorers) {\n      og.scores = ArrayUtil.grow(og.scores);\n    }\n\n    //System.out.println(\"copyGroups parentDoc=\" + og.doc);\n    for(int scorerIDX = 0;scorerIDX < numSubScorers;scorerIDX++) {\n      final ToParentBlockJoinQuery.BlockJoinScorer joinScorer = joinScorers[scorerIDX];\n      //System.out.println(\"  scorer=\" + joinScorer);\n      if (joinScorer != null) {\n        og.counts[scorerIDX] = joinScorer.getChildCount();\n        //System.out.println(\"    count=\" + og.counts[scorerIDX]);\n        og.docs[scorerIDX] = joinScorer.swapChildDocs(og.docs[scorerIDX]);\n        /*\n        for(int idx=0;idx<og.counts[scorerIDX];idx++) {\n          System.out.println(\"    docs[\" + idx + \"]=\" + og.docs[scorerIDX][idx]);\n        }\n        */\n        if (trackScores) {\n          og.scores[scorerIDX] = joinScorer.swapChildScores(og.scores[scorerIDX]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11","date":1367321736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#copyGroups(OneGroup).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#copyGroups(OneGroup).mjava","sourceNew":"  // Pulls out child doc and scores for all join queries:\n  private void copyGroups(OneGroup og) {\n    // While rare, it's possible top arrays could be too\n    // short if join query had null scorer on first\n    // segment(s) but then became non-null on later segments\n    final int numSubScorers = joinScorers.length;\n    if (og.docs.length < numSubScorers) {\n      // While rare, this could happen if join query had\n      // null scorer on first segment(s) but then became\n      // non-null on later segments\n      og.docs = ArrayUtil.grow(og.docs);\n    }\n    if (og.counts.length < numSubScorers) {\n      og.counts = ArrayUtil.grow(og.counts);\n    }\n    if (trackScores && og.scores.length < numSubScorers) {\n      og.scores = ArrayUtil.grow(og.scores);\n    }\n\n    //System.out.println(\"\\ncopyGroups parentDoc=\" + og.doc);\n    for(int scorerIDX = 0;scorerIDX < numSubScorers;scorerIDX++) {\n      final ToParentBlockJoinQuery.BlockJoinScorer joinScorer = joinScorers[scorerIDX];\n      //System.out.println(\"  scorer=\" + joinScorer);\n      if (joinScorer != null && docBase + joinScorer.getParentDoc() == og.doc) {\n        og.counts[scorerIDX] = joinScorer.getChildCount();\n        //System.out.println(\"    count=\" + og.counts[scorerIDX]);\n        og.docs[scorerIDX] = joinScorer.swapChildDocs(og.docs[scorerIDX]);\n        assert og.docs[scorerIDX].length >= og.counts[scorerIDX]: \"length=\" + og.docs[scorerIDX].length + \" vs count=\" + og.counts[scorerIDX];\n        //System.out.println(\"    len=\" + og.docs[scorerIDX].length);\n        /*\n          for(int idx=0;idx<og.counts[scorerIDX];idx++) {\n          System.out.println(\"    docs[\" + idx + \"]=\" + og.docs[scorerIDX][idx]);\n          }\n        */\n        if (trackScores) {\n          //System.out.println(\"    copy scores\");\n          og.scores[scorerIDX] = joinScorer.swapChildScores(og.scores[scorerIDX]);\n          assert og.scores[scorerIDX].length >= og.counts[scorerIDX]: \"length=\" + og.scores[scorerIDX].length + \" vs count=\" + og.counts[scorerIDX];\n        }\n      } else {\n        og.counts[scorerIDX] = 0;\n      }\n    }\n  }\n\n","sourceOld":"  // Pulls out child doc and scores for all join queries:\n  private void copyGroups(OneGroup og) {\n    // While rare, it's possible top arrays could be too\n    // short if join query had null scorer on first\n    // segment(s) but then became non-null on later segments\n    final int numSubScorers = joinScorers.length;\n    if (og.docs.length < numSubScorers) {\n      // While rare, this could happen if join query had\n      // null scorer on first segment(s) but then became\n      // non-null on later segments\n      og.docs = ArrayUtil.grow(og.docs);\n    }\n    if (og.counts.length < numSubScorers) {\n      og.counts = ArrayUtil.grow(og.counts);\n    }\n    if (trackScores && og.scores.length < numSubScorers) {\n      og.scores = ArrayUtil.grow(og.scores);\n    }\n\n    //System.out.println(\"copyGroups parentDoc=\" + og.doc);\n    for(int scorerIDX = 0;scorerIDX < numSubScorers;scorerIDX++) {\n      final ToParentBlockJoinQuery.BlockJoinScorer joinScorer = joinScorers[scorerIDX];\n      //System.out.println(\"  scorer=\" + joinScorer);\n      if (joinScorer != null) {\n        og.counts[scorerIDX] = joinScorer.getChildCount();\n        //System.out.println(\"    count=\" + og.counts[scorerIDX]);\n        og.docs[scorerIDX] = joinScorer.swapChildDocs(og.docs[scorerIDX]);\n        /*\n        for(int idx=0;idx<og.counts[scorerIDX];idx++) {\n          System.out.println(\"    docs[\" + idx + \"]=\" + og.docs[scorerIDX][idx]);\n        }\n        */\n        if (trackScores) {\n          og.scores[scorerIDX] = joinScorer.swapChildScores(og.scores[scorerIDX]);\n        }\n      }\n    }\n  }\n\n","bugFix":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#copyGroups(OneGroup).mjava","sourceNew":null,"sourceOld":"  // Pulls out child doc and scores for all join queries:\n  private void copyGroups(OneGroup og) {\n    // While rare, it's possible top arrays could be too\n    // short if join query had null scorer on first\n    // segment(s) but then became non-null on later segments\n    final int numSubScorers = joinScorers.length;\n    if (og.docs.length < numSubScorers) {\n      // While rare, this could happen if join query had\n      // null scorer on first segment(s) but then became\n      // non-null on later segments\n      og.docs = ArrayUtil.grow(og.docs);\n    }\n    if (og.counts.length < numSubScorers) {\n      og.counts = ArrayUtil.grow(og.counts);\n    }\n    if (trackScores && og.scores.length < numSubScorers) {\n      og.scores = ArrayUtil.grow(og.scores);\n    }\n\n    //System.out.println(\"\\ncopyGroups parentDoc=\" + og.doc);\n    for(int scorerIDX = 0;scorerIDX < numSubScorers;scorerIDX++) {\n      final ToParentBlockJoinQuery.BlockJoinScorer joinScorer = joinScorers[scorerIDX];\n      //System.out.println(\"  scorer=\" + joinScorer);\n      if (joinScorer != null && docBase + joinScorer.getParentDoc() == og.doc) {\n        og.counts[scorerIDX] = joinScorer.getChildCount();\n        //System.out.println(\"    count=\" + og.counts[scorerIDX]);\n        og.docs[scorerIDX] = joinScorer.swapChildDocs(og.docs[scorerIDX]);\n        assert og.docs[scorerIDX].length >= og.counts[scorerIDX]: \"length=\" + og.docs[scorerIDX].length + \" vs count=\" + og.counts[scorerIDX];\n        //System.out.println(\"    len=\" + og.docs[scorerIDX].length);\n        /*\n          for(int idx=0;idx<og.counts[scorerIDX];idx++) {\n          System.out.println(\"    docs[\" + idx + \"]=\" + og.docs[scorerIDX][idx]);\n          }\n        */\n        if (trackScores) {\n          //System.out.println(\"    copy scores\");\n          og.scores[scorerIDX] = joinScorer.swapChildScores(og.scores[scorerIDX]);\n          assert og.scores[scorerIDX].length >= og.counts[scorerIDX]: \"length=\" + og.scores[scorerIDX].length + \" vs count=\" + og.counts[scorerIDX];\n        }\n      } else {\n        og.counts[scorerIDX] = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["901e951cec2e6af4e503209a6721c8834db23279"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"901e951cec2e6af4e503209a6721c8834db23279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11":["901e951cec2e6af4e503209a6721c8834db23279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}