{"path":"solr/core/src/test/org/apache/solr/core/TestSimpleTextCodec#test().mjava","commits":[{"id":"92215807f25fb9a830f4ba0d2ae422fca917054c","date":1493408210,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSimpleTextCodec#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    SolrConfig config = h.getCore().getSolrConfig();\n    String codecFactory =  config.get(\"codecFactory/@class\");\n    assertEquals(\"Unexpected solrconfig codec factory\", \"solr.SimpleTextCodecFactory\", codecFactory);\n\n    assertEquals(\"Unexpected core codec\", \"SimpleText\", h.getCore().getCodec().getName());\n\n    RefCounted<IndexWriter> writerRef = h.getCore().getSolrCoreState().getIndexWriter(h.getCore());\n    try {\n      IndexWriter writer = writerRef.get();\n      assertEquals(\"Unexpected codec in IndexWriter config\", \n          \"SimpleText\", writer.getConfig().getCodec().getName()); \n    } finally {\n      writerRef.decref();\n    }\n\n    assertU(add(doc(\"id\",\"1\", \"text\",\"textual content goes here\")));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> searcherRef = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherRef.get();\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Unexpected segment codec\", \"SimpleText\", info.getCodec().getName());\n    } finally {\n      searcherRef.decref();\n    }\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"*[count(//doc)=1]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSimpleTextCodec#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    SolrConfig config = h.getCore().getSolrConfig();\n    String codecFactory =  config.get(\"codecFactory/@class\");\n    assertEquals(\"Unexpected solrconfig codec factory\", \"solr.SimpleTextCodecFactory\", codecFactory);\n\n    assertEquals(\"Unexpected core codec\", \"SimpleText\", h.getCore().getCodec().getName());\n\n    RefCounted<IndexWriter> writerRef = h.getCore().getSolrCoreState().getIndexWriter(h.getCore());\n    try {\n      IndexWriter writer = writerRef.get();\n      assertEquals(\"Unexpected codec in IndexWriter config\", \n          \"SimpleText\", writer.getConfig().getCodec().getName()); \n    } finally {\n      writerRef.decref();\n    }\n\n    assertU(add(doc(\"id\",\"1\", \"text\",\"textual content goes here\")));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> searcherRef = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherRef.get();\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Unexpected segment codec\", \"SimpleText\", info.getCodec().getName());\n    } finally {\n      searcherRef.decref();\n    }\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"*[count(//doc)=1]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSimpleTextCodec#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSimpleTextCodec#test().mjava","sourceNew":"  public void test() throws Exception {\n    SolrConfig config = h.getCore().getSolrConfig();\n    String codecFactory =  config.get(\"codecFactory/@class\");\n    assertEquals(\"Unexpected solrconfig codec factory\", \"solr.SimpleTextCodecFactory\", codecFactory);\n\n    assertEquals(\"Unexpected core codec\", \"SimpleText\", h.getCore().getCodec().getName());\n\n    RefCounted<IndexWriter> writerRef = h.getCore().getSolrCoreState().getIndexWriter(h.getCore());\n    try {\n      IndexWriter writer = writerRef.get();\n      assertEquals(\"Unexpected codec in IndexWriter config\", \n          \"SimpleText\", writer.getConfig().getCodec().getName()); \n    } finally {\n      writerRef.decref();\n    }\n\n    assertU(add(doc(\"id\",\"1\", \"text\",\"textual content goes here\")));\n    assertU(commit());\n\n    h.getCore().withSearcher(searcher -> {\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Unexpected segment codec\", \"SimpleText\", info.getCodec().getName());\n      return null;\n    });\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"*[count(//doc)=1]\");\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    SolrConfig config = h.getCore().getSolrConfig();\n    String codecFactory =  config.get(\"codecFactory/@class\");\n    assertEquals(\"Unexpected solrconfig codec factory\", \"solr.SimpleTextCodecFactory\", codecFactory);\n\n    assertEquals(\"Unexpected core codec\", \"SimpleText\", h.getCore().getCodec().getName());\n\n    RefCounted<IndexWriter> writerRef = h.getCore().getSolrCoreState().getIndexWriter(h.getCore());\n    try {\n      IndexWriter writer = writerRef.get();\n      assertEquals(\"Unexpected codec in IndexWriter config\", \n          \"SimpleText\", writer.getConfig().getCodec().getName()); \n    } finally {\n      writerRef.decref();\n    }\n\n    assertU(add(doc(\"id\",\"1\", \"text\",\"textual content goes here\")));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> searcherRef = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherRef.get();\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Unexpected segment codec\", \"SimpleText\", info.getCodec().getName());\n    } finally {\n      searcherRef.decref();\n    }\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"*[count(//doc)=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSimpleTextCodec#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSimpleTextCodec#test().mjava","sourceNew":"  public void test() throws Exception {\n    SolrConfig config = h.getCore().getSolrConfig();\n    String codecFactory =  config.get(\"codecFactory/@class\");\n    assertEquals(\"Unexpected solrconfig codec factory\", \"solr.SimpleTextCodecFactory\", codecFactory);\n\n    assertEquals(\"Unexpected core codec\", \"SimpleText\", h.getCore().getCodec().getName());\n\n    RefCounted<IndexWriter> writerRef = h.getCore().getSolrCoreState().getIndexWriter(h.getCore());\n    try {\n      IndexWriter writer = writerRef.get();\n      assertEquals(\"Unexpected codec in IndexWriter config\", \n          \"SimpleText\", writer.getConfig().getCodec().getName()); \n    } finally {\n      writerRef.decref();\n    }\n\n    assertU(add(doc(\"id\",\"1\", \"text\",\"textual content goes here\")));\n    assertU(commit());\n\n    h.getCore().withSearcher(searcher -> {\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Unexpected segment codec\", \"SimpleText\", info.getCodec().getName());\n      return null;\n    });\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"*[count(//doc)=1]\");\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    SolrConfig config = h.getCore().getSolrConfig();\n    String codecFactory =  config.get(\"codecFactory/@class\");\n    assertEquals(\"Unexpected solrconfig codec factory\", \"solr.SimpleTextCodecFactory\", codecFactory);\n\n    assertEquals(\"Unexpected core codec\", \"SimpleText\", h.getCore().getCodec().getName());\n\n    RefCounted<IndexWriter> writerRef = h.getCore().getSolrCoreState().getIndexWriter(h.getCore());\n    try {\n      IndexWriter writer = writerRef.get();\n      assertEquals(\"Unexpected codec in IndexWriter config\", \n          \"SimpleText\", writer.getConfig().getCodec().getName()); \n    } finally {\n      writerRef.decref();\n    }\n\n    assertU(add(doc(\"id\",\"1\", \"text\",\"textual content goes here\")));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> searcherRef = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherRef.get();\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Unexpected segment codec\", \"SimpleText\", info.getCodec().getName());\n    } finally {\n      searcherRef.decref();\n    }\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"*[count(//doc)=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92215807f25fb9a830f4ba0d2ae422fca917054c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92215807f25fb9a830f4ba0d2ae422fca917054c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ab833f2b623042c834458d4cbcad05073a93793":["92215807f25fb9a830f4ba0d2ae422fca917054c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["92215807f25fb9a830f4ba0d2ae422fca917054c","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","92215807f25fb9a830f4ba0d2ae422fca917054c"],"92215807f25fb9a830f4ba0d2ae422fca917054c":["e9017cf144952056066919f1ebc7897ff9bd71b1","4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}