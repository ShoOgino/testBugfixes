{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  java.io.IOException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned array.  */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  java.io.IOException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned array.  */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned array.  */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  java.io.IOException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned array.  */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","bugFix":["ac785906c92e4048ffc28f7c23a45541d3cca9bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9","date":1289510544,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned array.  */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned array.  */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned array.  */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd8cac059f4a5d4491e279aa2d07064392f9357","date":1323099195,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","sourceNew":null,"sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#listCommits(Directory).mjava","sourceNew":null,"sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return DirectoryReader.listCommits(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9"],"893d07555f01912f57b453a320e4d46363a31b50":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9","2dd8cac059f4a5d4491e279aa2d07064392f9357"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dd8cac059f4a5d4491e279aa2d07064392f9357":["188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9"]},"commit2Childs":{"188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","85a883878c0af761245ab048babc63d099f835f3","3615ce4a1f785ae1b779244de52c6a7d99227e60","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2dd8cac059f4a5d4491e279aa2d07064392f9357"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"893d07555f01912f57b453a320e4d46363a31b50":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","893d07555f01912f57b453a320e4d46363a31b50","5cab9a86bd67202d20b6adc463008c8e982b070a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"2dd8cac059f4a5d4491e279aa2d07064392f9357":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}