{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorRollback().mjava","commits":[{"id":"5ea6955c7bfffe05682ad0a667afb2a6fa85e9da","date":1408027865,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorRollback().mjava","pathOld":"/dev/null","sourceNew":"  /** If IW hits OOME during indexing, it should refuse to commit any further changes. */\n  public void testOutOfMemoryErrorRollback() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.contains(\"startFullFlush\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n    writer.addDocument(new Document());\n\n    try {\n      writer.commit();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    try {\n      writer.close();\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n\n    try {\n      writer.addDocument(new Document());\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n\n    // IW should have done rollback() during close, since it hit OOME, and so no index should exist:\n    assertFalse(DirectoryReader.indexExists(dir));\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorRollback().mjava","sourceNew":"  /** If IW hits OOME during indexing, it should refuse to commit any further changes. */\n  public void testOutOfMemoryErrorRollback() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.contains(\"startFullFlush\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n    writer.addDocument(new Document());\n\n    expectThrows(OutOfMemoryError.class, () -> {\n      writer.commit();\n    });\n\n    try {\n      writer.close();\n    } catch (IllegalArgumentException ok) {\n      // ok\n    }\n\n    expectThrows(AlreadyClosedException.class, () -> {\n      writer.addDocument(new Document());\n    });\n\n    // IW should have done rollback() during close, since it hit OOME, and so no index should exist:\n    assertFalse(DirectoryReader.indexExists(dir));\n\n    dir.close();\n  }\n\n","sourceOld":"  /** If IW hits OOME during indexing, it should refuse to commit any further changes. */\n  public void testOutOfMemoryErrorRollback() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.contains(\"startFullFlush\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n    writer.addDocument(new Document());\n\n    try {\n      writer.commit();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    try {\n      writer.close();\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n\n    try {\n      writer.addDocument(new Document());\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n\n    // IW should have done rollback() during close, since it hit OOME, and so no index should exist:\n    assertFalse(DirectoryReader.indexExists(dir));\n\n    dir.close();\n  }\n\n","bugFix":["5ea6955c7bfffe05682ad0a667afb2a6fa85e9da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ea6955c7bfffe05682ad0a667afb2a6fa85e9da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["5ea6955c7bfffe05682ad0a667afb2a6fa85e9da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"5ea6955c7bfffe05682ad0a667afb2a6fa85e9da":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ea6955c7bfffe05682ad0a667afb2a6fa85e9da"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}