{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","commits":[{"id":"82ed10ec58814cd9841195fb52bcbc1c2402e2cc","date":1390222136,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    Map m = (Map) ZkStateReader.fromJSON(zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true));\n    String s = (String) m.get(\"id\");\n//    log.info(\"leader-id {}\",s);\n    String nodeName = LeaderElector.getNodeName(s);\n//    log.info(\"Leader {}\", nodeName);\n    return nodeName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a2931a06059ca229064c033a760f6ae279295e3","date":1390292457,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","sourceNew":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    byte[] data = new byte[0];\n    try {\n      data = zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n//    log.info(\"leader-id {}\",s);\n    String nodeName = LeaderElector.getNodeName(s);\n//    log.info(\"Leader {}\", nodeName);\n    return nodeName;\n  }\n\n","sourceOld":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    Map m = (Map) ZkStateReader.fromJSON(zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true));\n    String s = (String) m.get(\"id\");\n//    log.info(\"leader-id {}\",s);\n    String nodeName = LeaderElector.getNodeName(s);\n//    log.info(\"Leader {}\", nodeName);\n    return nodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6225820ca5f401e2fe460f36e4a919a384cef6c","date":1393272577,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","sourceNew":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    byte[] data = new byte[0];\n    try {\n      data = zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String nodeName = LeaderElector.getNodeName(s);\n    return nodeName;\n  }\n\n","sourceOld":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    byte[] data = new byte[0];\n    try {\n      data = zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n//    log.info(\"leader-id {}\",s);\n    String nodeName = LeaderElector.getNodeName(s);\n//    log.info(\"Leader {}\", nodeName);\n    return nodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","sourceNew":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    byte[] data = new byte[0];\n    try {\n      data = zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String nodeName = LeaderElector.getNodeName(s);\n    return nodeName;\n  }\n\n","sourceOld":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    byte[] data = new byte[0];\n    try {\n      data = zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n//    log.info(\"leader-id {}\",s);\n    String nodeName = LeaderElector.getNodeName(s);\n//    log.info(\"Leader {}\", nodeName);\n    return nodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d996c36bf85996da326201b915c87d41449d7f5","date":1403084374,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","sourceNew":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    String id = getLeaderId(zkClient);\n    return id==null ?\n        null:\n        LeaderElector.getNodeName( id);\n  }\n\n","sourceOld":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    byte[] data = new byte[0];\n    try {\n      data = zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String nodeName = LeaderElector.getNodeName(s);\n    return nodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","sourceNew":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    String id = getLeaderId(zkClient);\n    return id==null ?\n        null:\n        LeaderElector.getNodeName( id);\n  }\n\n","sourceOld":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    byte[] data = new byte[0];\n    try {\n      data = zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String nodeName = LeaderElector.getNodeName(s);\n    return nodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerProcessor#getLeaderNode(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLeaderNode(SolrZkClient).mjava","sourceNew":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    String id = getLeaderId(zkClient);\n    return id==null ?\n        null:\n        LeaderElector.getNodeName( id);\n  }\n\n","sourceOld":"  public static String getLeaderNode(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    String id = getLeaderId(zkClient);\n    return id==null ?\n        null:\n        LeaderElector.getNodeName( id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["7d996c36bf85996da326201b915c87d41449d7f5"],"7d996c36bf85996da326201b915c87d41449d7f5":["e6225820ca5f401e2fe460f36e4a919a384cef6c"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["e6225820ca5f401e2fe460f36e4a919a384cef6c","7d996c36bf85996da326201b915c87d41449d7f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82ed10ec58814cd9841195fb52bcbc1c2402e2cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6225820ca5f401e2fe460f36e4a919a384cef6c":["6a2931a06059ca229064c033a760f6ae279295e3"],"6a2931a06059ca229064c033a760f6ae279295e3":["82ed10ec58814cd9841195fb52bcbc1c2402e2cc"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["6a2931a06059ca229064c033a760f6ae279295e3","e6225820ca5f401e2fe460f36e4a919a384cef6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d996c36bf85996da326201b915c87d41449d7f5":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82ed10ec58814cd9841195fb52bcbc1c2402e2cc"],"82ed10ec58814cd9841195fb52bcbc1c2402e2cc":["6a2931a06059ca229064c033a760f6ae279295e3"],"e6225820ca5f401e2fe460f36e4a919a384cef6c":["7d996c36bf85996da326201b915c87d41449d7f5","e57c73924f3b8c19defa62e96bfa34a4922d49c2","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"6a2931a06059ca229064c033a760f6ae279295e3":["e6225820ca5f401e2fe460f36e4a919a384cef6c","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}