{"path":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67","date":1348934182,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67"],"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}