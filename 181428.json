{"path":"solr/core/src/java/org/apache/solr/util/FileUtils#sync(File).mjava","commits":[{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FileUtils#sync(File).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc55aa51d3b786031f2cb93703b55d4885f48ffc","date":1343342731,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FileUtils#sync(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/FileUtils#sync(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/FileUtils#sync(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1071f88e3697a2eb3ed682c527f5c35859bad0","date":1565425271,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FileUtils#sync(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      try (RandomAccessFile file = new RandomAccessFile(fullFile, \"rw\")) {\n        file.getFD().sync();\n        success = true;\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e6a2315ba749856e5787b2ad962fa124bc3ed121","fc55aa51d3b786031f2cb93703b55d4885f48ffc"],"fc55aa51d3b786031f2cb93703b55d4885f48ffc":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e6a2315ba749856e5787b2ad962fa124bc3ed121","fc55aa51d3b786031f2cb93703b55d4885f48ffc"],"0d1071f88e3697a2eb3ed682c527f5c35859bad0":["fc55aa51d3b786031f2cb93703b55d4885f48ffc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d1071f88e3697a2eb3ed682c527f5c35859bad0"]},"commit2Childs":{"e6a2315ba749856e5787b2ad962fa124bc3ed121":["aba371508186796cc6151d8223a5b4e16d02e26e","fc55aa51d3b786031f2cb93703b55d4885f48ffc","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fc55aa51d3b786031f2cb93703b55d4885f48ffc":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","0d1071f88e3697a2eb3ed682c527f5c35859bad0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"0d1071f88e3697a2eb3ed682c527f5c35859bad0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}