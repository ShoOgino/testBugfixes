{"path":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/RBBIRuleCompiler#compile(File,File).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/RBBIRuleCompiler#compile(File,File).mjava","pathOld":"modules/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/RBBIRuleCompiler#compile(File,File).mjava","sourceNew":"  static void compile(File srcDir, File destDir) throws Exception {\n    File files[] = srcDir.listFiles(new FilenameFilter() {\n      public boolean accept(File dir, String name) {\n        return name.endsWith(\"rbbi\");\n      }});\n    if (files == null) throw new IOException(\"Path does not exist: \" + srcDir);\n    for (int i = 0; i < files.length; i++) {\n      File file = files[i];\n      File outputFile = new File(destDir, \n          file.getName().replaceAll(\"rbbi$\", \"brk\"));\n      String rules = getRules(file);\n      System.err.print(\"Compiling \" + file.getName() + \" to \"\n          + outputFile.getName() + \": \");\n      /*\n       * if there is a syntax error, compileRules() may succeed. the way to\n       * check is to try to instantiate from the string. additionally if the\n       * rules are invalid, you can get a useful syntax error.\n       */\n      try {\n        new RuleBasedBreakIterator(rules);\n      } catch (IllegalArgumentException e) {\n        /*\n         * do this intentionally, so you don't get a massive stack trace\n         * instead, get a useful syntax error!\n         */\n        System.err.println(e.getMessage());\n        System.exit(1);\n      }\n      FileOutputStream os = new FileOutputStream(outputFile);\n      RuleBasedBreakIterator.compileRules(rules, os);\n      os.close();\n      System.err.println(outputFile.length() + \" bytes.\");\n    }\n  }\n\n","sourceOld":"  static void compile(File srcDir, File destDir) throws Exception {\n    File files[] = srcDir.listFiles(new FilenameFilter() {\n      public boolean accept(File dir, String name) {\n        return name.endsWith(\"rbbi\");\n      }});\n    if (files == null) throw new IOException(\"Path does not exist: \" + srcDir);\n    for (int i = 0; i < files.length; i++) {\n      File file = files[i];\n      File outputFile = new File(destDir, \n          file.getName().replaceAll(\"rbbi$\", \"brk\"));\n      String rules = getRules(file);\n      System.err.print(\"Compiling \" + file.getName() + \" to \"\n          + outputFile.getName() + \": \");\n      /*\n       * if there is a syntax error, compileRules() may succeed. the way to\n       * check is to try to instantiate from the string. additionally if the\n       * rules are invalid, you can get a useful syntax error.\n       */\n      try {\n        new RuleBasedBreakIterator(rules);\n      } catch (IllegalArgumentException e) {\n        /*\n         * do this intentionally, so you don't get a massive stack trace\n         * instead, get a useful syntax error!\n         */\n        System.err.println(e.getMessage());\n        System.exit(1);\n      }\n      FileOutputStream os = new FileOutputStream(outputFile);\n      RuleBasedBreakIterator.compileRules(rules, os);\n      os.close();\n      System.err.println(outputFile.length() + \" bytes.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}