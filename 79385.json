{"path":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#writeNorms(SegmentWriteState,Sorter.DocMap).mjava","commits":[{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#writeNorms(SegmentWriteState,Sorter.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#writeNorms(SegmentWriteState,Sorter.DocMap).mjava","sourceNew":"  private void writeNorms(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    boolean success = false;\n    NormsConsumer normsConsumer = null;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        NormsFormat normsFormat = state.segmentInfo.getCodec().normsFormat();\n        assert normsFormat != null;\n        normsConsumer = normsFormat.normsConsumer(state);\n\n        for (FieldInfo fi : state.fieldInfos) {\n          PerField perField = getPerField(fi.name);\n          assert perField != null;\n\n          // we must check the final value of omitNorms for the fieldinfo: it could have \n          // changed for this field since the first time we added it.\n          if (fi.omitsNorms() == false && fi.getIndexOptions() != IndexOptions.NONE) {\n            assert perField.norms != null: \"field=\" + fi.name;\n            perField.norms.finish(state.segmentInfo.maxDoc());\n            perField.norms.flush(state, sortMap, normsConsumer);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(normsConsumer);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeNorms(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    boolean success = false;\n    NormsConsumer normsConsumer = null;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        NormsFormat normsFormat = state.segmentInfo.getCodec().normsFormat();\n        assert normsFormat != null;\n        normsConsumer = normsFormat.normsConsumer(state);\n\n        for (FieldInfo fi : state.fieldInfos) {\n          PerField perField = getPerField(fi.name);\n          assert perField != null;\n\n          // we must check the final value of omitNorms for the fieldinfo: it could have \n          // changed for this field since the first time we added it.\n          if (fi.omitsNorms() == false && fi.getIndexOptions() != IndexOptions.NONE) {\n            assert perField.norms != null: \"field=\" + fi.name;\n            perField.norms.finish(state.segmentInfo.maxDoc());\n            perField.norms.flush(state, sortMap, normsConsumer);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(normsConsumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":1,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#writeNorms(SegmentWriteState,Sorter.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#writeNorms(SegmentWriteState,Sorter.DocMap).mjava","sourceNew":"  private void writeNorms(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    boolean success = false;\n    NormsConsumer normsConsumer = null;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        NormsFormat normsFormat = state.segmentInfo.getCodec().normsFormat();\n        assert normsFormat != null;\n        normsConsumer = normsFormat.normsConsumer(state);\n\n        for (FieldInfo fi : state.fieldInfos) {\n          PerField perField = getPerField(fi.name);\n          assert perField != null;\n\n          // we must check the final value of omitNorms for the fieldinfo: it could have \n          // changed for this field since the first time we added it.\n          if (fi.omitsNorms() == false && fi.getIndexOptions() != IndexOptions.NONE) {\n            assert perField.norms != null: \"field=\" + fi.name;\n            perField.norms.finish(state.segmentInfo.maxDoc());\n            perField.norms.flush(state, sortMap, normsConsumer);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(normsConsumer);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeNorms(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    boolean success = false;\n    NormsConsumer normsConsumer = null;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        NormsFormat normsFormat = state.segmentInfo.getCodec().normsFormat();\n        assert normsFormat != null;\n        normsConsumer = normsFormat.normsConsumer(state);\n\n        for (FieldInfo fi : state.fieldInfos) {\n          PerField perField = getPerField(fi.name);\n          assert perField != null;\n\n          // we must check the final value of omitNorms for the fieldinfo: it could have \n          // changed for this field since the first time we added it.\n          if (fi.omitsNorms() == false && fi.getIndexOptions() != IndexOptions.NONE) {\n            assert perField.norms != null: \"field=\" + fi.name;\n            perField.norms.finish(state.segmentInfo.maxDoc());\n            perField.norms.flush(state, sortMap, normsConsumer);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(normsConsumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["680b6449f09827f58fe987aff279e014c311d966","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}