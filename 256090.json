{"path":"src/java/org/apache/solr/analysis/WordDelimiterIterator#next().mjava","commits":[{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterIterator#next().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Advance to the next subword in the string.\n   *\n   * @return index of the next subword, or {@link #DONE} if all subwords have been returned\n   */\n  int next() {\n    current = end;\n    if (current == DONE) {\n      return DONE;\n    }\n    \n    if (skipPossessive) {\n      current += 2;\n      skipPossessive = false;\n    }\n\n    int lastType = 0;\n    \n    while (current < endBounds && (isSubwordDelim(lastType = charType(text[current])))) {\n      current++;\n    }\n\n    if (current >= endBounds) {\n      return end = DONE;\n    }\n    \n    for (end = current + 1; end < endBounds; end++) {\n      int type = charType(text[end]);\n      if (isBreak(lastType, type)) {\n        break;\n      }\n      lastType = type;\n    }\n    \n    if (end < endBounds - 1 && endsWithPossessive(end + 2)) {\n      skipPossessive = true;\n    }\n    \n    return end;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterIterator#next().mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterIterator#next().mjava","sourceNew":"  /**\n   * Advance to the next subword in the string.\n   *\n   * @return index of the next subword, or {@link #DONE} if all subwords have been returned\n   */\n  int next() {\n    current = end;\n    if (current == DONE) {\n      return DONE;\n    }\n    \n    if (skipPossessive) {\n      current += 2;\n      skipPossessive = false;\n    }\n\n    int lastType = 0;\n    \n    while (current < endBounds && (isSubwordDelim(lastType = charType(text[current])))) {\n      current++;\n    }\n\n    if (current >= endBounds) {\n      return end = DONE;\n    }\n    \n    for (end = current + 1; end < endBounds; end++) {\n      int type = charType(text[end]);\n      if (isBreak(lastType, type)) {\n        break;\n      }\n      lastType = type;\n    }\n    \n    if (end < endBounds - 1 && endsWithPossessive(end + 2)) {\n      skipPossessive = true;\n    }\n    \n    return end;\n  }\n\n","sourceOld":"  /**\n   * Advance to the next subword in the string.\n   *\n   * @return index of the next subword, or {@link #DONE} if all subwords have been returned\n   */\n  int next() {\n    current = end;\n    if (current == DONE) {\n      return DONE;\n    }\n    \n    if (skipPossessive) {\n      current += 2;\n      skipPossessive = false;\n    }\n\n    int lastType = 0;\n    \n    while (current < endBounds && (isSubwordDelim(lastType = charType(text[current])))) {\n      current++;\n    }\n\n    if (current >= endBounds) {\n      return end = DONE;\n    }\n    \n    for (end = current + 1; end < endBounds; end++) {\n      int type = charType(text[end]);\n      if (isBreak(lastType, type)) {\n        break;\n      }\n      lastType = type;\n    }\n    \n    if (end < endBounds - 1 && endsWithPossessive(end + 2)) {\n      skipPossessive = true;\n    }\n    \n    return end;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}