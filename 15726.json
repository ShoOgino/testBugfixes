{"path":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","commits":[{"id":"828f199c76d70a5ea0ddc4d9605063f1d323a28d","date":1308738340,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#take().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\n  ShardResponse take() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#take().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\n  ShardResponse take() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","pathOld":"/dev/null","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"c26f00b574427b55127e869b935845554afde1fa":["828f199c76d70a5ea0ddc4d9605063f1d323a28d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","828f199c76d70a5ea0ddc4d9605063f1d323a28d","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}