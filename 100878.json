{"path":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random.nextInt(freq[j]) == 0) {\n          d.add(newField(\"f\", terms[j].text(), StringField.TYPE_UNSTORED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random.nextInt(freq[j]) == 0) {\n          d.add(newField(\"f\", terms[j].text(), StringField.TYPE_UNSTORED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newField(\"f\", terms[j].text(), StringField.TYPE_UNSTORED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random.nextInt(freq[j]) == 0) {\n          d.add(newField(\"f\", terms[j].text(), StringField.TYPE_UNSTORED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newField(\"f\", terms[j].text(), StringField.TYPE_UNSTORED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.shutdown();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.shutdown();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    Term[] terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (random().nextInt(freq[j]) == 0) {\n          d.add(newStringField(\"f\", terms[j].text(), Field.Store.NO));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.forceMerge(1);\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d77dafd89756a5161d244985903e3487ca109182":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d77dafd89756a5161d244985903e3487ca109182"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}