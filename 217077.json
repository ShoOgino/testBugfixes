{"path":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","commits":[{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n\n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childTarget != parentDoc;\n      if (childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      return childDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1406cbbd53036d2d3c80ccaef932a04212ab9ecd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f918f6e4bff7afea488f1928f7a7ec05338d479f","date":1331745861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n\n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childTarget != parentDoc;\n      if (childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      return childDoc;\n    }\n\n","bugFix":null,"bugIntro":["fb9daa7dac719c9778dc331ca8febcfaa2dc9faa","1406cbbd53036d2d3c80ccaef932a04212ab9ecd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f918f6e4bff7afea488f1928f7a7ec05338d479f"],"f918f6e4bff7afea488f1928f7a7ec05338d479f":["6bd4a7478aca8c3880512b730b28bf3239340635"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["f918f6e4bff7afea488f1928f7a7ec05338d479f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bd4a7478aca8c3880512b730b28bf3239340635"],"f918f6e4bff7afea488f1928f7a7ec05338d479f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}