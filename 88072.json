{"path":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8875499ee9d1fc8661d24ed789d81761b99af8a2","date":1315547181,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2db0d2e1a7a03e860ac801614585c13b76874388","date":1388853812,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, Integer.MAX_VALUE));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<String>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943562acd5eb31fa2fb7384927091158a85ce9fe","date":1428934087,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params))\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<>();\n\n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());\n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<>();\n     \n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());  \n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19be870dbbc5366138e3d1f4e6e038f2f5e167cd","date":1428973440,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FastVectorHighlighter fvh = null; // lazy\n    FieldQuery fvhFieldQuery = null; // lazy\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, preFetchFieldNames);\n\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        if (useFastVectorHighlighter(params, schema, fieldName)) {\n          if (fvhFieldQuery == null) {\n            fvh = new FastVectorHighlighter(\n                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n                // FVH cannot process hl.requireFieldMatch parameter per-field basis\n                params.getBool(HighlightParams.FIELD_MATCH, false));\n            fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n            fvhFieldQuery = fvh.getFieldQuery(query, searcher.getIndexReader());\n          }\n          doHighlightingByFastVectorHighlighter(fvh, fvhFieldQuery, req, docSummaries, docId, doc, fieldName);\n        } else {\n          doHighlightingByHighlighter(query, req, docSummaries, docId, doc, fieldName);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docSummaries);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params))\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    NamedList fragments = new SimpleOrderedMap();\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n    Set<String> fset = new HashSet<>();\n\n    {\n      // pre-fetch documents using the Searcher's doc cache\n      for(String f : fieldNames) { fset.add(f); }\n      // fetch unique key if one exists.\n      SchemaField keyField = schema.getUniqueKeyField();\n      if(null != keyField)\n        fset.add(keyField.getName());\n    }\n\n    // get FastVectorHighlighter instance out of the processing loop\n    FastVectorHighlighter fvh = new FastVectorHighlighter(\n        // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n        params.getBool( HighlightParams.USE_PHRASE_HIGHLIGHTER, true ),\n        // FVH cannot process hl.requireFieldMatch parameter per-field basis\n        params.getBool( HighlightParams.FIELD_MATCH, false ) );\n    fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n    FieldQuery fieldQuery = fvh.getFieldQuery( query, searcher.getIndexReader() );\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, fset);\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        fieldName = fieldName.trim();\n        if( useFastVectorHighlighter( params, schema, fieldName ) )\n          doHighlightingByFastVectorHighlighter( fvh, fieldQuery, req, docSummaries, docId, doc, fieldName );\n        else\n          doHighlightingByHighlighter( query, req, docSummaries, docId, doc, fieldName );\n      }\n      String printId = schema.printableUniqueKey(doc);\n      fragments.add(printId == null ? null : printId, docSummaries);\n    }\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ba83a7997a13459d756c436cc76ee2570d2128f","date":1432215022,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FastVectorHighlighter fvh = null; // lazy\n    FieldQuery fvhFieldQuery = null; // lazy\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        if (schemaField == null) {\n          fieldHighlights = null;\n        } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n          // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n          fieldHighlights = null;\n        } else if (useFastVectorHighlighter(params, schemaField)) {\n          if (fvhFieldQuery == null) {\n            fvh = new FastVectorHighlighter(\n                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n                // FVH cannot process hl.requireFieldMatch parameter per-field basis\n                params.getBool(HighlightParams.FIELD_MATCH, false));\n            fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n            fvhFieldQuery = fvh.getFieldQuery(query, reader);\n          }\n          fieldHighlights =\n              doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvh, fvhFieldQuery, reader, req);\n        } else { // standard/default highlighter\n          fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n        }\n\n        if (fieldHighlights == null) {\n          // no summaries made; copy text from alternate field\n          fieldHighlights = alternateField(doc, fieldName, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FastVectorHighlighter fvh = null; // lazy\n    FieldQuery fvhFieldQuery = null; // lazy\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, preFetchFieldNames);\n\n      NamedList docSummaries = new SimpleOrderedMap();\n      for (String fieldName : fieldNames) {\n        if (useFastVectorHighlighter(params, schema, fieldName)) {\n          if (fvhFieldQuery == null) {\n            fvh = new FastVectorHighlighter(\n                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n                // FVH cannot process hl.requireFieldMatch parameter per-field basis\n                params.getBool(HighlightParams.FIELD_MATCH, false));\n            fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n            fvhFieldQuery = fvh.getFieldQuery(query, searcher.getIndexReader());\n          }\n          doHighlightingByFastVectorHighlighter(fvh, fvhFieldQuery, req, docSummaries, docId, doc, fieldName);\n        } else {\n          doHighlightingByHighlighter(query, req, docSummaries, docId, doc, fieldName);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docSummaries);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FastVectorHighlighter fvh = null; // lazy\n    FieldQuery fvhFieldQuery = null; // lazy\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        if (schemaField == null) {\n          fieldHighlights = null;\n        } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n          // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n          fieldHighlights = null;\n        } else if (useFastVectorHighlighter(params, schemaField)) {\n          if (fvhFieldQuery == null) {\n            fvh = new FastVectorHighlighter(\n                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n                // FVH cannot process hl.requireFieldMatch parameter per-field basis\n                params.getBool(HighlightParams.FIELD_MATCH, false));\n            fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n            fvhFieldQuery = fvh.getFieldQuery(query, reader);\n          }\n          fieldHighlights =\n              doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvh, fvhFieldQuery, reader, req);\n        } else { // standard/default highlighter\n          fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n        }\n\n        if (fieldHighlights == null) {\n          // no summaries made; copy text from alternate field\n          fieldHighlights = alternateField(doc, fieldName, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FastVectorHighlighter fvh = null; // lazy\n    FieldQuery fvhFieldQuery = null; // lazy\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      StoredDocument doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        if (schemaField == null) {\n          fieldHighlights = null;\n        } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n          // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n          fieldHighlights = null;\n        } else if (useFastVectorHighlighter(params, schemaField)) {\n          if (fvhFieldQuery == null) {\n            fvh = new FastVectorHighlighter(\n                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n                // FVH cannot process hl.requireFieldMatch parameter per-field basis\n                params.getBool(HighlightParams.FIELD_MATCH, false));\n            fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n            fvhFieldQuery = fvh.getFieldQuery(query, reader);\n          }\n          fieldHighlights =\n              doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvh, fvhFieldQuery, reader, req);\n        } else { // standard/default highlighter\n          fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n        }\n\n        if (fieldHighlights == null) {\n          // no summaries made; copy text from alternate field\n          fieldHighlights = alternateField(doc, fieldName, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1807cf7ff48453a48bc28608f557e16b6a1f7fa8","date":1464474872,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FastVectorHighlighter fvh = null; // lazy\n    FieldQuery fvhFieldQuery = null; // lazy\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        if (schemaField == null) {\n          fieldHighlights = null;\n        } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n          // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n          fieldHighlights = null;\n        } else if (useFastVectorHighlighter(params, schemaField)) {\n          if (fvhFieldQuery == null) {\n            fvh = new FastVectorHighlighter(\n                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n                // FVH cannot process hl.requireFieldMatch parameter per-field basis\n                params.getBool(HighlightParams.FIELD_MATCH, false));\n            fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n            fvhFieldQuery = fvh.getFieldQuery(query, reader);\n          }\n          fieldHighlights =\n              doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvh, fvhFieldQuery, reader, req);\n        } else { // standard/default highlighter\n          fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n        }\n\n        if (fieldHighlights == null) {\n          // no summaries made; copy text from alternate field\n          fieldHighlights = alternateField(doc, fieldName, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FastVectorHighlighter fvh = null; // lazy\n    FieldQuery fvhFieldQuery = null; // lazy\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        if (schemaField == null) {\n          fieldHighlights = null;\n        } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n          // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n          fieldHighlights = null;\n        } else if (useFastVectorHighlighter(params, schemaField)) {\n          if (fvhFieldQuery == null) {\n            fvh = new FastVectorHighlighter(\n                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n                // FVH cannot process hl.requireFieldMatch parameter per-field basis\n                params.getBool(HighlightParams.FIELD_MATCH, false));\n            fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n            fvhFieldQuery = fvh.getFieldQuery(query, reader);\n          }\n          fieldHighlights =\n              doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvh, fvhFieldQuery, reader, req);\n        } else { // standard/default highlighter\n          fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n        }\n\n        if (fieldHighlights == null) {\n          // no summaries made; copy text from alternate field\n          fieldHighlights = alternateField(doc, fieldName, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FastVectorHighlighter fvh = null; // lazy\n    FieldQuery fvhFieldQuery = null; // lazy\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        if (schemaField == null) {\n          fieldHighlights = null;\n        } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n          // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n          fieldHighlights = null;\n        } else if (useFastVectorHighlighter(params, schemaField)) {\n          if (fvhFieldQuery == null) {\n            fvh = new FastVectorHighlighter(\n                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n                // FVH cannot process hl.requireFieldMatch parameter per-field basis\n                params.getBool(HighlightParams.FIELD_MATCH, false));\n            fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n            fvhFieldQuery = fvh.getFieldQuery(query, reader);\n          }\n          fieldHighlights =\n              doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvh, fvhFieldQuery, reader, req);\n        } else { // standard/default highlighter\n          fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n        }\n\n        if (fieldHighlights == null) {\n          // no summaries made; copy text from alternate field\n          fieldHighlights = alternateField(doc, fieldName, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0695a0898cc57ba42cb062e14789c61a3360d324","date":1466978399,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07c409cff8701e4dc3d45934b021a949a5a8822","date":1475694629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FastVectorHighlighter fvh = null; // lazy\n    FieldQuery fvhFieldQuery = null; // lazy\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getLeafReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        if (schemaField == null) {\n          fieldHighlights = null;\n        } else if (schemaField.getType() instanceof org.apache.solr.schema.TrieField) {\n          // TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!\n          fieldHighlights = null;\n        } else if (useFastVectorHighlighter(params, schemaField)) {\n          if (fvhFieldQuery == null) {\n            fvh = new FastVectorHighlighter(\n                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis\n                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),\n                // FVH cannot process hl.requireFieldMatch parameter per-field basis\n                params.getBool(HighlightParams.FIELD_MATCH, false));\n            fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n            fvhFieldQuery = fvh.getFieldQuery(query, reader);\n          }\n          fieldHighlights =\n              doHighlightingByFastVectorHighlighter(doc, docId, schemaField, fvh, fvhFieldQuery, reader, req);\n        } else { // standard/default highlighter\n          fieldHighlights = doHighlightingByHighlighter(doc, docId, schemaField, query, reader, req);\n        }\n\n        if (fieldHighlights == null) {\n          // no summaries made; copy text from alternate field\n          fieldHighlights = alternateField(doc, fieldName, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8868b7c4fbf215c41e7b4ea2cfc40d1970672910","date":1480034167,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    boolean rewrite = query != null && !(Boolean.valueOf(params.get(HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\")) &&\n        Boolean.valueOf(params.get(HighlightParams.HIGHLIGHT_MULTI_TERM, \"true\")));\n\n    if (rewrite) {\n      query = query.rewrite(req.getSearcher().getIndexReader());\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    boolean rewrite = query != null && !(Boolean.valueOf(params.get(HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\")) &&\n        Boolean.valueOf(params.get(HighlightParams.HIGHLIGHT_MULTI_TERM, \"true\")));\n\n    if (rewrite) {\n      query = query.rewrite(req.getSearcher().getIndexReader());\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    boolean rewrite = query != null && !(Boolean.valueOf(params.get(HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\")) &&\n        Boolean.valueOf(params.get(HighlightParams.HIGHLIGHT_MULTI_TERM, \"true\")));\n\n    if (rewrite) {\n      query = query.rewrite(req.getSearcher().getIndexReader());\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a9aeb4a98b03660f065aa31f6b3f2251a12b613","date":1581405488,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    boolean rewrite = query != null && !(Boolean.valueOf(params.get(HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\")) &&\n        Boolean.valueOf(params.get(HighlightParams.HIGHLIGHT_MULTI_TERM, \"true\")));\n\n    if (rewrite) {\n      query = query.rewrite(req.getSearcher().getIndexReader());\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    SolrReturnFields returnFields;\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n      returnFields = new SolrReturnFields(preFetchFieldNames.toArray(new String[0]), req);\n    } else {\n      returnFields = new SolrReturnFields(new String[0], req);\n    }\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      SolrDocument doc = searcher.getDocFetcher().solrDoc(docId, returnFields);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    boolean rewrite = query != null && !(Boolean.valueOf(params.get(HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\")) &&\n        Boolean.valueOf(params.get(HighlightParams.HIGHLIGHT_MULTI_TERM, \"true\")));\n\n    if (rewrite) {\n      query = query.rewrite(req.getSearcher().getIndexReader());\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n    }\n\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      Document doc = searcher.doc(docId, preFetchFieldNames);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    boolean rewrite = query != null && !(Boolean.valueOf(params.get(HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\")) &&\n        Boolean.valueOf(params.get(HighlightParams.HIGHLIGHT_MULTI_TERM, \"true\")));\n\n    if (rewrite) {\n      query = query.rewrite(req.getSearcher().getIndexReader());\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    SolrReturnFields returnFields;\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n      returnFields = new SolrReturnFields(preFetchFieldNames.toArray(new String[0]), req);\n    } else {\n      returnFields = new SolrReturnFields(new String[0], req);\n    }\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      SolrDocument doc = searcher.getDocFetcher().solrDoc(docId, returnFields);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    boolean rewrite = query != null && !(Boolean.valueOf(params.get(HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\")) &&\n        Boolean.valueOf(params.get(HighlightParams.HIGHLIGHT_MULTI_TERM, \"true\")));\n\n    if (rewrite) {\n      query = query.rewrite(req.getSearcher().getIndexReader());\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    SolrReturnFields returnFields;\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n      returnFields = new SolrReturnFields(preFetchFieldNames.toArray(new String[0]), req);\n    } else {\n      returnFields = new SolrReturnFields(new String[0], req);\n    }\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      SolrDocument doc = searcher.getDocFetcher().solrDoc(docId, returnFields);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs          query results\n   * @param query         the query\n   * @param req           the current request\n   * @param defaultFields default list of fields to summarize\n   * @return NamedList containing a NamedList for each document, which in\n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    boolean rewrite = query != null && !(Boolean.valueOf(params.get(HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\")) &&\n            Boolean.valueOf(params.get(HighlightParams.HIGHLIGHT_MULTI_TERM, \"true\")));\n\n    if (rewrite) {\n      query = query.rewrite(req.getSearcher().getIndexReader());\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    SolrReturnFields returnFields;\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n      returnFields = new SolrReturnFields(preFetchFieldNames.toArray(new String[0]), req);\n    } else {\n      returnFields = new SolrReturnFields(new String[0], req);\n    }\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      SolrDocument doc = searcher.getDocFetcher().solrDoc(docId, returnFields);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams();\n    if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n      return null;\n\n    boolean rewrite = query != null && !(Boolean.valueOf(params.get(HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\")) &&\n        Boolean.valueOf(params.get(HighlightParams.HIGHLIGHT_MULTI_TERM, \"true\")));\n\n    if (rewrite) {\n      query = query.rewrite(req.getSearcher().getIndexReader());\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    // fetch unique key if one exists.\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField == null) {\n      return null;//exit early; we need a unique key field to populate the response\n    }\n\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);\n    SolrReturnFields returnFields;\n    if (preFetchFieldNames != null) {\n      preFetchFieldNames.add(keyField.getName());\n      returnFields = new SolrReturnFields(preFetchFieldNames.toArray(new String[0]), req);\n    } else {\n      returnFields = new SolrReturnFields(new String[0], req);\n    }\n    FvhContainer fvhContainer = new FvhContainer(null, null); // Lazy container for fvh and fieldQuery\n\n    IndexReader reader = new TermVectorReusingLeafReader(req.getSearcher().getSlowAtomicReader()); // SOLR-5855\n\n    // Highlight each document\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList fragments = new SimpleOrderedMap();\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n      int docId = iterator.nextDoc();\n      SolrDocument doc = searcher.getDocFetcher().solrDoc(docId, returnFields);\n\n      @SuppressWarnings(\"rawtypes\")\n      NamedList docHighlights = new SimpleOrderedMap();\n      // Highlight per-field\n      for (String fieldName : fieldNames) {\n        SchemaField schemaField = schema.getFieldOrNull(fieldName);\n\n        Object fieldHighlights; // object type allows flexibility for subclassers\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n\n        if (fieldHighlights == null) {\n          fieldHighlights = alternateField(doc, docId, fieldName, fvhContainer, query, reader, req);\n        }\n\n        if (fieldHighlights != null) {\n          docHighlights.add(fieldName, fieldHighlights);\n        }\n      } // for each field\n      fragments.add(schema.printableUniqueKey(doc), docHighlights);\n    } // for each doc\n    return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8875499ee9d1fc8661d24ed789d81761b99af8a2":["c26f00b574427b55127e869b935845554afde1fa"],"1807cf7ff48453a48bc28608f557e16b6a1f7fa8":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"da8a02bef7458089240404614139b53c9f875ec7":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","1807cf7ff48453a48bc28608f557e16b6a1f7fa8"],"1d028314cced5858683a1bb4741423d0f934257b":["8875499ee9d1fc8661d24ed789d81761b99af8a2","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"1ba83a7997a13459d756c436cc76ee2570d2128f":["19be870dbbc5366138e3d1f4e6e038f2f5e167cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["1a9aeb4a98b03660f065aa31f6b3f2251a12b613"],"1a9aeb4a98b03660f065aa31f6b3f2251a12b613":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["8875499ee9d1fc8661d24ed789d81761b99af8a2"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1ba83a7997a13459d756c436cc76ee2570d2128f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2db0d2e1a7a03e860ac801614585c13b76874388"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["e07c409cff8701e4dc3d45934b021a949a5a8822","8868b7c4fbf215c41e7b4ea2cfc40d1970672910"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","1807cf7ff48453a48bc28608f557e16b6a1f7fa8"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["0695a0898cc57ba42cb062e14789c61a3360d324"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","e07c409cff8701e4dc3d45934b021a949a5a8822"],"19be870dbbc5366138e3d1f4e6e038f2f5e167cd":["943562acd5eb31fa2fb7384927091158a85ce9fe"],"943562acd5eb31fa2fb7384927091158a85ce9fe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2db0d2e1a7a03e860ac801614585c13b76874388":["1d028314cced5858683a1bb4741423d0f934257b"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","75babd1dfc2521603bfeb0968042e921d8c6c652"],"0695a0898cc57ba42cb062e14789c61a3360d324":["1807cf7ff48453a48bc28608f557e16b6a1f7fa8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"8875499ee9d1fc8661d24ed789d81761b99af8a2":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1807cf7ff48453a48bc28608f557e16b6a1f7fa8":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","0695a0898cc57ba42cb062e14789c61a3360d324"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"c26f00b574427b55127e869b935845554afde1fa":["8875499ee9d1fc8661d24ed789d81761b99af8a2"],"da8a02bef7458089240404614139b53c9f875ec7":[],"1d028314cced5858683a1bb4741423d0f934257b":["2db0d2e1a7a03e860ac801614585c13b76874388"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1ba83a7997a13459d756c436cc76ee2570d2128f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"1a9aeb4a98b03660f065aa31f6b3f2251a12b613":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1807cf7ff48453a48bc28608f557e16b6a1f7fa8","da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["943562acd5eb31fa2fb7384927091158a85ce9fe"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["1a9aeb4a98b03660f065aa31f6b3f2251a12b613","727bb765ff2542275f6d31f67be18d7104bae148"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"e07c409cff8701e4dc3d45934b021a949a5a8822":["8868b7c4fbf215c41e7b4ea2cfc40d1970672910","75babd1dfc2521603bfeb0968042e921d8c6c652","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"19be870dbbc5366138e3d1f4e6e038f2f5e167cd":["1ba83a7997a13459d756c436cc76ee2570d2128f"],"943562acd5eb31fa2fb7384927091158a85ce9fe":["19be870dbbc5366138e3d1f4e6e038f2f5e167cd"],"2db0d2e1a7a03e860ac801614585c13b76874388":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"0695a0898cc57ba42cb062e14789c61a3360d324":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","727bb765ff2542275f6d31f67be18d7104bae148","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}