{"path":"src/java/org/apache/solr/core/Config#getLines(String).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getLines(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a list of non-blank non-comment lines with whitespace trimmed from front and back.\n   * @param resource\n   * @return\n   * @throws IOException\n   */\n  public static List<String> getLines(String resource) throws IOException {\n    BufferedReader input = null;\n    try {\n      // todo - allow configurable charset?\n      input = new BufferedReader(new InputStreamReader(openResource(resource), \"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n    ArrayList<String> lines = new ArrayList<String>();\n    for (String word=null; (word=input.readLine())!=null;) {\n      // skip comments\n      if (word.startsWith(\"#\")) continue;\n      word=word.trim();\n      // skip blank lines\n      if (word.length()==0) continue;\n      lines.add(word);\n    }\n    return lines;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e96fd8a5ecee99fb518c16ceb03a6a11c01b5468","date":1148693744,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getLines(String).mjava","pathOld":"src/java/org/apache/solr/core/Config#getLines(String).mjava","sourceNew":"  /**\n   * Accesses a resource by name and returns the (non comment) lines\n   * containing data.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @param resource\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * from front and back.\n   * @throws IOException\n   */\n  public static List<String> getLines(String resource) throws IOException {\n    BufferedReader input = null;\n    try {\n      // todo - allow configurable charset?\n      input = new BufferedReader(new InputStreamReader(openResource(resource), \"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n    ArrayList<String> lines = new ArrayList<String>();\n    for (String word=null; (word=input.readLine())!=null;) {\n      // skip comments\n      if (word.startsWith(\"#\")) continue;\n      word=word.trim();\n      // skip blank lines\n      if (word.length()==0) continue;\n      lines.add(word);\n    }\n    return lines;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of non-blank non-comment lines with whitespace trimmed from front and back.\n   * @param resource\n   * @return\n   * @throws IOException\n   */\n  public static List<String> getLines(String resource) throws IOException {\n    BufferedReader input = null;\n    try {\n      // todo - allow configurable charset?\n      input = new BufferedReader(new InputStreamReader(openResource(resource), \"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n    ArrayList<String> lines = new ArrayList<String>();\n    for (String word=null; (word=input.readLine())!=null;) {\n      // skip comments\n      if (word.startsWith(\"#\")) continue;\n      word=word.trim();\n      // skip blank lines\n      if (word.length()==0) continue;\n      lines.add(word);\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getLines(String).mjava","pathOld":"src/java/org/apache/solr/core/Config#getLines(String).mjava","sourceNew":"  /**\n   * Accesses a resource by name and returns the (non comment) lines\n   * containing data.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @param resource\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * from front and back.\n   * @throws IOException\n   */\n  public List<String> getLines(String resource) throws IOException {\n    BufferedReader input = null;\n    try {\n      // todo - allow configurable charset?\n      input = new BufferedReader(new InputStreamReader(openResource(resource), \"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n    ArrayList<String> lines = new ArrayList<String>();\n    for (String word=null; (word=input.readLine())!=null;) {\n      // skip comments\n      if (word.startsWith(\"#\")) continue;\n      word=word.trim();\n      // skip blank lines\n      if (word.length()==0) continue;\n      lines.add(word);\n    }\n    return lines;\n  }\n\n","sourceOld":"  /**\n   * Accesses a resource by name and returns the (non comment) lines\n   * containing data.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @param resource\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * from front and back.\n   * @throws IOException\n   */\n  public static List<String> getLines(String resource) throws IOException {\n    BufferedReader input = null;\n    try {\n      // todo - allow configurable charset?\n      input = new BufferedReader(new InputStreamReader(openResource(resource), \"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n    ArrayList<String> lines = new ArrayList<String>();\n    for (String word=null; (word=input.readLine())!=null;) {\n      // skip comments\n      if (word.startsWith(\"#\")) continue;\n      word=word.trim();\n      // skip blank lines\n      if (word.length()==0) continue;\n      lines.add(word);\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getLines(String).mjava","pathOld":"src/java/org/apache/solr/core/Config#getLines(String).mjava","sourceNew":"  @Deprecated\n  public List<String> getLines(String resource) throws IOException {\n    return loader.getLines(resource);\n  }\n\n","sourceOld":"  /**\n   * Accesses a resource by name and returns the (non comment) lines\n   * containing data.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @param resource\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * from front and back.\n   * @throws IOException\n   */\n  public List<String> getLines(String resource) throws IOException {\n    BufferedReader input = null;\n    try {\n      // todo - allow configurable charset?\n      input = new BufferedReader(new InputStreamReader(openResource(resource), \"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n    ArrayList<String> lines = new ArrayList<String>();\n    for (String word=null; (word=input.readLine())!=null;) {\n      // skip comments\n      if (word.startsWith(\"#\")) continue;\n      word=word.trim();\n      // skip blank lines\n      if (word.length()==0) continue;\n      lines.add(word);\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"166e7267ee953339ce7ff2febc91aee7576425f5","date":1218487056,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getLines(String).mjava","pathOld":"src/java/org/apache/solr/core/Config#getLines(String).mjava","sourceNew":"  /**\n   * @deprecated Use {@link SolrResourceLoader#getLines(String)} instead.\n   */\n  @Deprecated\n  public List<String> getLines(String resource) throws IOException {\n    return loader.getLines(resource);\n  }\n\n","sourceOld":"  @Deprecated\n  public List<String> getLines(String resource) throws IOException {\n    return loader.getLines(resource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/Config#getLines(String).mjava","pathOld":"src/java/org/apache/solr/core/Config#getLines(String).mjava","sourceNew":"  /**\n   * @deprecated Use {@link SolrResourceLoader#getLines(String)} instead.\n   */\n  @Deprecated\n  public List<String> getLines(String resource) throws IOException {\n    return loader.getLines(resource);\n  }\n\n","sourceOld":"  /**\n   * @deprecated Use {@link SolrResourceLoader#getLines(String)} instead.\n   */\n  @Deprecated\n  public List<String> getLines(String resource) throws IOException {\n    return loader.getLines(resource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["e96fd8a5ecee99fb518c16ceb03a6a11c01b5468"],"166e7267ee953339ce7ff2febc91aee7576425f5":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["166e7267ee953339ce7ff2febc91aee7576425f5"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["6d6338c87060be5f66757a94945975f3bbd377a9"],"e96fd8a5ecee99fb518c16ceb03a6a11c01b5468":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"166e7267ee953339ce7ff2febc91aee7576425f5":["ad94625fb8d088209f46650c8097196fec67f00c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["e96fd8a5ecee99fb518c16ceb03a6a11c01b5468"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["166e7267ee953339ce7ff2febc91aee7576425f5"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"e96fd8a5ecee99fb518c16ceb03a6a11c01b5468":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}