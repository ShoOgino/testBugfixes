{"path":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","sourceNew":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n    \n    // We need to compute maxScore in order to set it in TopDocs. If start == 0,\n    // it means the largest element is already in results, use its score as\n    // maxScore. Otherwise pop everything else, until the largest element is\n    // extracted and use its score as maxScore.\n    float maxScore = Float.NaN;\n    if (start == 0) {\n      maxScore = results[0].score;\n    } else {\n      for (int i = pq.size(); i > 1; i--) { pq.pop(); }\n      maxScore = pq.pop().score;\n    }\n    \n    return new TopDocs(totalHits, results, maxScore);\n  }\n\n","sourceOld":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n    \n    // We need to compute maxScore in order to set it in TopDocs. If start == 0,\n    // it means the largest element is already in results, use its score as\n    // maxScore. Otherwise pop everything else, until the largest element is\n    // extracted and use its score as maxScore.\n    float maxScore = Float.NaN;\n    if (start == 0) {\n      maxScore = results[0].score;\n    } else {\n      for (int i = pq.size(); i > 1; i--) { pq.pop(); }\n      maxScore = pq.pop().score;\n    }\n    \n    return new TopDocs(totalHits, results, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","sourceNew":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n\n    // We need to compute maxScore in order to set it in TopDocs. If start == 0,\n    // it means the largest element is already in results, use its score as\n    // maxScore. Otherwise pop everything else, until the largest element is\n    // extracted and use its score as maxScore.\n    float maxScore = Float.NaN;\n    if (start == 0) {\n      maxScore = results[0].score;\n    } else {\n      for (int i = pq.size(); i > 1; i--) { pq.pop(); }\n      maxScore = pq.pop().score;\n    }\n\n    return new TopDocs(totalHits, results, maxScore);\n  }\n\n","sourceOld":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n    \n    // We need to compute maxScore in order to set it in TopDocs. If start == 0,\n    // it means the largest element is already in results, use its score as\n    // maxScore. Otherwise pop everything else, until the largest element is\n    // extracted and use its score as maxScore.\n    float maxScore = Float.NaN;\n    if (start == 0) {\n      maxScore = results[0].score;\n    } else {\n      for (int i = pq.size(); i > 1; i--) { pq.pop(); }\n      maxScore = pq.pop().score;\n    }\n    \n    return new TopDocs(totalHits, results, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","sourceNew":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n\n    return new TopDocs(totalHits, results);\n  }\n\n","sourceOld":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n\n    // We need to compute maxScore in order to set it in TopDocs. If start == 0,\n    // it means the largest element is already in results, use its score as\n    // maxScore. Otherwise pop everything else, until the largest element is\n    // extracted and use its score as maxScore.\n    float maxScore = Float.NaN;\n    if (start == 0) {\n      maxScore = results[0].score;\n    } else {\n      for (int i = pq.size(); i > 1; i--) { pq.pop(); }\n      maxScore = pq.pop().score;\n    }\n\n    return new TopDocs(totalHits, results, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","sourceNew":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n\n    return new TopDocs(totalHits, results);\n  }\n\n","sourceOld":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n\n    // We need to compute maxScore in order to set it in TopDocs. If start == 0,\n    // it means the largest element is already in results, use its score as\n    // maxScore. Otherwise pop everything else, until the largest element is\n    // extracted and use its score as maxScore.\n    float maxScore = Float.NaN;\n    if (start == 0) {\n      maxScore = results[0].score;\n    } else {\n      for (int i = pq.size(); i > 1; i--) { pq.pop(); }\n      maxScore = pq.pop().score;\n    }\n\n    return new TopDocs(totalHits, results, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","sourceNew":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n\n    return new TopDocs(new TotalHits(totalHits, totalHitsRelation), results);\n  }\n\n","sourceOld":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n\n    return new TopDocs(totalHits, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["901e951cec2e6af4e503209a6721c8834db23279","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["901e951cec2e6af4e503209a6721c8834db23279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"901e951cec2e6af4e503209a6721c8834db23279":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}