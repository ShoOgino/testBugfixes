{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","sourceNew":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = tokensToCompare[i].term();\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","sourceOld":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = tokensToCompare[i].term();\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f79c103683b18eae3b9f62a8c61e675d8984b092","date":1272893294,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","sourceNew":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = new String(tokensToCompare[i].buffer(),0, tokensToCompare[i].length());\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","sourceOld":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = tokensToCompare[i].term();\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","sourceNew":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = new String(tokensToCompare[i].buffer(),0, tokensToCompare[i].length());\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","sourceOld":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = new String(tokensToCompare[i].buffer(),0, tokensToCompare[i].length());\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"f79c103683b18eae3b9f62a8c61e675d8984b092":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f79c103683b18eae3b9f62a8c61e675d8984b092":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}