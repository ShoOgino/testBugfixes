{"path":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,IndexReader).mjava","sourceNew":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new DocValues() {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public float floatVal(int doc) {\n            return (float)hash(doc+seed);\n          }\n\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n\n          @Override\n          public long longVal(int doc) {\n            return (long)hash(doc+seed);\n          }\n\n          @Override\n          public double doubleVal(int doc) {\n            return (double)hash(doc+seed);\n          }\n\n          @Override\n          public String strVal(int doc) {\n            return Integer.toString(hash(doc+seed));\n          }\n\n          @Override\n          public String toString(int doc) {\n            return description() + '=' + intVal(doc);\n          }\n        };\n    }\n\n","sourceOld":"    @Override\n    public DocValues getValues(Map context, final IndexReader reader) throws IOException {\n      return new DocValues() {\n          private final int seed = getSeed(field, reader);\n          @Override\n          public float floatVal(int doc) {\n            return (float)hash(doc+seed);\n          }\n\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n\n          @Override\n          public long longVal(int doc) {\n            return (long)hash(doc+seed);\n          }\n\n          @Override\n          public double doubleVal(int doc) {\n            return (double)hash(doc+seed);\n          }\n\n          @Override\n          public String strVal(int doc) {\n            return Integer.toString(hash(doc+seed));\n          }\n\n          @Override\n          public String toString(int doc) {\n            return description() + '=' + intVal(doc);\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new DocValues() {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public float floatVal(int doc) {\n            return (float)hash(doc+seed);\n          }\n\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n\n          @Override\n          public long longVal(int doc) {\n            return (long)hash(doc+seed);\n          }\n\n          @Override\n          public double doubleVal(int doc) {\n            return (double)hash(doc+seed);\n          }\n\n          @Override\n          public String strVal(int doc) {\n            return Integer.toString(hash(doc+seed));\n          }\n\n          @Override\n          public String toString(int doc) {\n            return description() + '=' + intVal(doc);\n          }\n        };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new DocValues() {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public float floatVal(int doc) {\n            return (float)hash(doc+seed);\n          }\n\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n\n          @Override\n          public long longVal(int doc) {\n            return (long)hash(doc+seed);\n          }\n\n          @Override\n          public double doubleVal(int doc) {\n            return (double)hash(doc+seed);\n          }\n\n          @Override\n          public String strVal(int doc) {\n            return Integer.toString(hash(doc+seed));\n          }\n\n          @Override\n          public String toString(int doc) {\n            return description() + '=' + intVal(doc);\n          }\n        };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eeff6b8391d7b5e70e37193643d76c05a3abf75","date":1302902022,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new IntDocValues(this) {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n        };\n    }\n\n","sourceOld":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new DocValues() {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public float floatVal(int doc) {\n            return (float)hash(doc+seed);\n          }\n\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n\n          @Override\n          public long longVal(int doc) {\n            return (long)hash(doc+seed);\n          }\n\n          @Override\n          public double doubleVal(int doc) {\n            return (double)hash(doc+seed);\n          }\n\n          @Override\n          public String strVal(int doc) {\n            return Integer.toString(hash(doc+seed));\n          }\n\n          @Override\n          public String toString(int doc) {\n            return description() + '=' + intVal(doc);\n          }\n        };\n    }\n\n","bugFix":["9bdc73b2e66f54270d34ece8e96d569c7b2d11ad","8840160499b9caa7faa044ba4b0d02dc1326557f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new IntDocValues(this) {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n        };\n    }\n\n","sourceOld":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new DocValues() {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public float floatVal(int doc) {\n            return (float)hash(doc+seed);\n          }\n\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n\n          @Override\n          public long longVal(int doc) {\n            return (long)hash(doc+seed);\n          }\n\n          @Override\n          public double doubleVal(int doc) {\n            return (double)hash(doc+seed);\n          }\n\n          @Override\n          public String strVal(int doc) {\n            return Integer.toString(hash(doc+seed));\n          }\n\n          @Override\n          public String toString(int doc) {\n            return description() + '=' + intVal(doc);\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new IntDocValues(this) {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n        };\n    }\n\n","sourceOld":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new DocValues() {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public float floatVal(int doc) {\n            return (float)hash(doc+seed);\n          }\n\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n\n          @Override\n          public long longVal(int doc) {\n            return (long)hash(doc+seed);\n          }\n\n          @Override\n          public double doubleVal(int doc) {\n            return (double)hash(doc+seed);\n          }\n\n          @Override\n          public String strVal(int doc) {\n            return Integer.toString(hash(doc+seed));\n          }\n\n          @Override\n          public String toString(int doc) {\n            return description() + '=' + intVal(doc);\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new IntDocValues(this) {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n        };\n    }\n\n","sourceOld":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new DocValues() {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public float floatVal(int doc) {\n            return (float)hash(doc+seed);\n          }\n\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n\n          @Override\n          public long longVal(int doc) {\n            return (long)hash(doc+seed);\n          }\n\n          @Override\n          public double doubleVal(int doc) {\n            return (double)hash(doc+seed);\n          }\n\n          @Override\n          public String strVal(int doc) {\n            return Integer.toString(hash(doc+seed));\n          }\n\n          @Override\n          public String toString(int doc) {\n            return description() + '=' + intVal(doc);\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new IntDocValues(this) {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n        };\n    }\n\n","sourceOld":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new IntDocValues(this) {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new IntDocValues(this) {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n        };\n    }\n\n","sourceOld":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new IntDocValues(this) {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField.RandomValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new IntDocValues(this) {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n        };\n    }\n\n","sourceOld":"    @Override\n    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n      return new IntDocValues(this) {\n          private final int seed = getSeed(field, readerContext);\n          @Override\n          public int intVal(int doc) {\n            return hash(doc+seed);\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["c220849f876de24a79f756f65b3eb045db59f63f"],"c220849f876de24a79f756f65b3eb045db59f63f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"c26f00b574427b55127e869b935845554afde1fa":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c220849f876de24a79f756f65b3eb045db59f63f","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["868da859b43505d9d2a023bfeae6dd0c795f5295","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"c220849f876de24a79f756f65b3eb045db59f63f":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}