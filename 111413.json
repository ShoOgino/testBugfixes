{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","commits":[{"id":"9a7edeee192980cdc45735957606fc0dbf22d437","date":1459455891,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testShortestPathStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\");\n    indexr(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\");\n    indexr(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\");\n    indexr(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\");\n    indexr(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\");\n    indexr(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\");\n    indexr(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\");\n    indexr(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\");\n    indexr(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\");\n    indexr(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\");\n    indexr(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\");\n    indexr(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","sourceNew":"  @Test\n  public void testShortestPathStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\")\n        .add(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\")\n        .add(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .add(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\")\n        .add(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\")\n        .add(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\")\n        .add(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\")\n        .add(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testShortestPathStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\");\n    indexr(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\");\n    indexr(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\");\n    indexr(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\");\n    indexr(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\");\n    indexr(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\");\n    indexr(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\");\n    indexr(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\");\n    indexr(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\");\n    indexr(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\");\n    indexr(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\");\n    indexr(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","sourceNew":"  @Test\n  public void testShortestPathStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\")\n        .add(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\")\n        .add(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .add(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\")\n        .add(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\")\n        .add(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\")\n        .add(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\")\n        .add(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testShortestPathStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\");\n    indexr(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\");\n    indexr(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\");\n    indexr(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\");\n    indexr(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\");\n    indexr(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\");\n    indexr(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\");\n    indexr(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\");\n    indexr(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\");\n    indexr(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\");\n    indexr(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\");\n    indexr(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","sourceNew":"  @Test\n  public void testShortestPathStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\")\n        .add(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\")\n        .add(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .add(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\")\n        .add(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\")\n        .add(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\")\n        .add(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\")\n        .add(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testShortestPathStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\");\n    indexr(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\");\n    indexr(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\");\n    indexr(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\");\n    indexr(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\");\n    indexr(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\");\n    indexr(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\");\n    indexr(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\");\n    indexr(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\");\n    indexr(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\");\n    indexr(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\");\n    indexr(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","sourceNew":"  @Test\n  public void testShortestPathStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\")\n        .add(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\")\n        .add(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .add(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\")\n        .add(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\")\n        .add(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\")\n        .add(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\")\n        .add(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testShortestPathStream() throws Exception {\n\n    indexr(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\");\n    indexr(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\");\n    indexr(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\");\n    indexr(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\");\n    indexr(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\");\n    indexr(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\");\n    indexr(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\");\n    indexr(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\");\n    indexr(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\");\n    indexr(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\");\n    indexr(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\");\n    indexr(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\");\n    indexr(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testShortestPathStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\")\n        .add(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\")\n        .add(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .add(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\")\n        .add(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\")\n        .add(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\")\n        .add(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\")\n        .add(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testShortestPathStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\")\n        .add(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\")\n        .add(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .add(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\")\n        .add(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\")\n        .add(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\")\n        .add(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\")\n        .add(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testShortestPathStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\")\n        .add(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\")\n        .add(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .add(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\")\n        .add(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\")\n        .add(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\")\n        .add(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\")\n        .add(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testShortestPathStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\")\n        .add(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\")\n        .add(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .add(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\")\n        .add(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\")\n        .add(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\")\n        .add(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\")\n        .add(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testShortestPathStream().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @SuppressWarnings({\"unchecked\"})\n  public void testShortestPathStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\")\n        .add(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\")\n        .add(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .add(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\")\n        .add(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\")\n        .add(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\")\n        .add(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\")\n        .add(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet<>();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet<>();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet<>();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testShortestPathStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"jim\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"1\", \"from_s\", \"jim\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"2\", \"from_s\", \"jim\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"3\", \"from_s\", \"dave\", \"to_s\", \"stan\", \"predicate_s\", \"knows\")\n        .add(id, \"4\", \"from_s\", \"dave\", \"to_s\", \"bill\", \"predicate_s\", \"knows\")\n        .add(id, \"5\", \"from_s\", \"dave\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"20\", \"from_s\", \"dave\", \"to_s\", \"alex\", \"predicate_s\", \"knows\")\n        .add(id, \"21\", \"from_s\", \"alex\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .add(id, \"6\", \"from_s\", \"stan\", \"to_s\", \"alice\", \"predicate_s\", \"knows\")\n        .add(id, \"7\", \"from_s\", \"stan\", \"to_s\", \"mary\", \"predicate_s\", \"knows\")\n        .add(id, \"8\", \"from_s\", \"stan\", \"to_s\", \"dave\", \"predicate_s\", \"knows\")\n        .add(id, \"10\", \"from_s\", \"mary\", \"to_s\", \"mike\", \"predicate_s\", \"knows\")\n        .add(id, \"11\", \"from_s\", \"mary\", \"to_s\", \"max\", \"predicate_s\", \"knows\")\n        .add(id, \"12\", \"from_s\", \"mary\", \"to_s\", \"jim\", \"predicate_s\", \"knows\")\n        .add(id, \"13\", \"from_s\", \"mary\", \"to_s\", \"steve\", \"predicate_s\", \"knows\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    ShortestPathStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class);\n\n    Map params = new HashMap();\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with batch size of 1\n\n    params.put(\"fq\", \"predicate_s:knows\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"1\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 2);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, dave, alex, steve]\"));\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    //Test with bad predicate\n\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:crap\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Test with depth 2\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\"predicate_s:knows\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"2\\\")\");\n\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertTrue(tuples.size() == 0);\n\n    //Take out alex\n    params.put(\"fq\", \"predicate_s:knows NOT to_s:alex\");\n\n    stream = (ShortestPathStream)factory.constructStream(\"shortestPath(collection1, \" +\n        \"from=\\\"jim\\\", \" +\n        \"to=\\\"steve\\\",\" +\n        \"edge=\\\"from_s=to_s\\\",\" +\n        \"fq=\\\" predicate_s:knows NOT to_s:alex\\\",\"+\n        \"threads=\\\"3\\\",\"+\n        \"partitionSize=\\\"3\\\",\"+\n        \"maxDepth=\\\"6\\\")\");\n\n\n    stream.setStreamContext(context);\n    paths = new HashSet();\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 1);\n\n    for(Tuple tuple : tuples) {\n      paths.add(tuple.getStrings(\"path\").toString());\n    }\n\n    assertTrue(paths.contains(\"[jim, stan, mary, steve]\"));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["73450c0955930295d34703e7ddbfc6973b7a121a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["9a7edeee192980cdc45735957606fc0dbf22d437","b940572a59da1b42b6c20ab5278155b12816807a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["9a7edeee192980cdc45735957606fc0dbf22d437","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["9a7edeee192980cdc45735957606fc0dbf22d437","73450c0955930295d34703e7ddbfc6973b7a121a"],"9a7edeee192980cdc45735957606fc0dbf22d437":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"b940572a59da1b42b6c20ab5278155b12816807a":["9a7edeee192980cdc45735957606fc0dbf22d437"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"9a7edeee192980cdc45735957606fc0dbf22d437":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a7edeee192980cdc45735957606fc0dbf22d437"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["9ba1b632c041956c93c41aa1143d16a567014891"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}