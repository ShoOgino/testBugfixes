{"path":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates(Set[State]).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates(Set[State]).mjava","pathOld":"/dev/null","sourceNew":"  private Set<State> getLiveStates(Set<State> states) {\n    HashMap<State,Set<State>> map = new HashMap<State,Set<State>>();\n    for (State s : states)\n      map.put(s, new HashSet<State>());\n    for (State s : states)\n      for (Transition t : s.transitions)\n        map.get(t.to).add(s);\n    Set<State> live = new HashSet<State>(getAcceptStates());\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map.get(s))\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n    return live;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates(Set[State]).mjava","sourceNew":null,"sourceOld":"  private Set<State> getLiveStates(Set<State> states) {\n    HashMap<State,Set<State>> map = new HashMap<State,Set<State>>();\n    for (State s : states)\n      map.put(s, new HashSet<State>());\n    for (State s : states)\n      for (Transition t : s.transitions)\n        map.get(t.to).add(s);\n    Set<State> live = new HashSet<State>(getAcceptStates());\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map.get(s))\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"]},"commit2Childs":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}