{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","commits":[{"id":"1a9e81d464930e5664da049442e2630d4b9b00d5","date":1330726364,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"/dev/null","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      String fname2 = fname.substring(0, fname.length()-1) + (char)(fname.charAt(fname.length()-1)+1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab93989824d8169d9dc1f37c9915d1320b86edfe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"/dev/null","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      String fname2 = fname.substring(0, fname.length()-1) + (char)(fname.charAt(fname.length()-1)+1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab93989824d8169d9dc1f37c9915d1320b86edfe","date":1331117603,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ENGLISH, \n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      String fname2 = fname.substring(0, fname.length()-1) + (char)(fname.charAt(fname.length()-1)+1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":["1a9e81d464930e5664da049442e2630d4b9b00d5"],"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ENGLISH, \n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      String fname2 = fname.substring(0, fname.length()-1) + (char)(fname.charAt(fname.length()-1)+1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ENGLISH,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ENGLISH, \n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":["ab93989824d8169d9dc1f37c9915d1320b86edfe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ENGLISH,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ENGLISH,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ENGLISH,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ENGLISH, \n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1071f88e3697a2eb3ed682c527f5c35859bad0","date":1565425271,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      byte[] content;\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\")) {\n        raf.seek(raf.length());  // seek to end\n        raf.writeLong(0xffffffffffffffffL);\n        raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n\n        content = new byte[(int) raf.length()];\n        raf.seek(0);\n        raf.readFully(content);\n      }\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname2), \"rw\")) {\n        raf.write(content);\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\");\n      raf.seek(raf.length());  // seek to end\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      \n      byte[] content = new byte[(int)raf.length()];\n      raf.seek(0);\n      raf.readFully(content);\n\n      raf.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      raf = new RandomAccessFile(new File(logDir, fname2), \"rw\");\n      raf.write(content);\n      raf.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      byte[] content;\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\")) {\n        raf.seek(raf.length());  // seek to end\n        raf.writeLong(0xffffffffffffffffL);\n        raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n\n        content = new byte[(int) raf.length()];\n        raf.seek(0);\n        raf.readFully(content);\n      }\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname2), \"rw\")) {\n        raf.write(content);\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n      byte[] content;\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname), \"rw\")) {\n        raf.seek(raf.length());  // seek to end\n        raf.writeLong(0xffffffffffffffffL);\n        raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n\n        content = new byte[(int) raf.length()];\n        raf.seek(0);\n        raf.readFully(content);\n      }\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, fname2), \"rw\")) {\n        raf.write(content);\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["849494cf2f3a96af5c8c84995108ddd8456fcd04","9d3d365762604952e436b51980101dfc84cc1b3e"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ab93989824d8169d9dc1f37c9915d1320b86edfe"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["2acf500f78aa12b92e371fd89c719291986b6b90","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a9e81d464930e5664da049442e2630d4b9b00d5"],"1a9e81d464930e5664da049442e2630d4b9b00d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"2acf500f78aa12b92e371fd89c719291986b6b90":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["0d1071f88e3697a2eb3ed682c527f5c35859bad0"],"3a0c04b71951333291abc7f317109a6a5957bd28":["9d3d365762604952e436b51980101dfc84cc1b3e"],"46d8ada1fff8d18cb197c38c7983225162599948":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","2acf500f78aa12b92e371fd89c719291986b6b90"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["2acf500f78aa12b92e371fd89c719291986b6b90"],"ab93989824d8169d9dc1f37c9915d1320b86edfe":["1a9e81d464930e5664da049442e2630d4b9b00d5"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["ab93989824d8169d9dc1f37c9915d1320b86edfe","2acf500f78aa12b92e371fd89c719291986b6b90"],"9d3d365762604952e436b51980101dfc84cc1b3e":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["ab93989824d8169d9dc1f37c9915d1320b86edfe"],"0d1071f88e3697a2eb3ed682c527f5c35859bad0":["3a0c04b71951333291abc7f317109a6a5957bd28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"1a9e81d464930e5664da049442e2630d4b9b00d5":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ab93989824d8169d9dc1f37c9915d1320b86edfe"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["37a0f60745e53927c4c876cfe5b5a58170f0646c","46d8ada1fff8d18cb197c38c7983225162599948","849494cf2f3a96af5c8c84995108ddd8456fcd04","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a0c04b71951333291abc7f317109a6a5957bd28":["0d1071f88e3697a2eb3ed682c527f5c35859bad0"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","9d3d365762604952e436b51980101dfc84cc1b3e"],"ab93989824d8169d9dc1f37c9915d1320b86edfe":["38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","3a0c04b71951333291abc7f317109a6a5957bd28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1a9e81d464930e5664da049442e2630d4b9b00d5"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"0d1071f88e3697a2eb3ed682c527f5c35859bad0":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","38e3b736c7ca086d61b7dbb841c905ee115490da","37a0f60745e53927c4c876cfe5b5a58170f0646c","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}