{"path":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericDVSort(IndexSearcher).mjava","commits":[{"id":"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","date":1416999434,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericDVSort(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private static void testNumericDVSort(IndexSearcher s) throws IOException {\n    // Confirm we can sort by the new DV field:\n    TopDocs hits = s.search(new MatchAllDocsQuery(), 100, new Sort(new SortField(\"number\", SortField.Type.LONG)));\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    long last = Long.MIN_VALUE;\n    for(ScoreDoc scoreDoc : hits.scoreDocs) {\n      long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n      assertTrue(value >= last);\n      assertEquals(value, numbers.get(scoreDoc.doc));\n      last = value;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericDVSort(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericDVSort(IndexSearcher).mjava","sourceNew":"  private static void testNumericDVSort(IndexSearcher s) throws IOException {\n    // Confirm we can sort by the new DV field:\n    TopDocs hits = s.search(new MatchAllDocsQuery(), 100, new Sort(new SortField(\"number\", SortField.Type.LONG)));\n    long last = Long.MIN_VALUE;\n    for(ScoreDoc scoreDoc : hits.scoreDocs) {\n      long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n      assertTrue(value >= last);\n      assertEquals(value, ((Long) ((FieldDoc) scoreDoc).fields[0]).longValue());\n      last = value;\n    }\n  }\n\n","sourceOld":"  private static void testNumericDVSort(IndexSearcher s) throws IOException {\n    // Confirm we can sort by the new DV field:\n    TopDocs hits = s.search(new MatchAllDocsQuery(), 100, new Sort(new SortField(\"number\", SortField.Type.LONG)));\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    long last = Long.MIN_VALUE;\n    for(ScoreDoc scoreDoc : hits.scoreDocs) {\n      long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n      assertTrue(value >= last);\n      assertEquals(value, numbers.get(scoreDoc.doc));\n      last = value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericDVSort(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericDVSort(IndexSearcher).mjava","sourceNew":"  private static void testNumericDVSort(IndexSearcher s) throws IOException {\n    // Confirm we can sort by the new DV field:\n    TopDocs hits = s.search(new MatchAllDocsQuery(), 100, new Sort(new SortField(\"number\", SortField.Type.LONG)));\n    long last = Long.MIN_VALUE;\n    for(ScoreDoc scoreDoc : hits.scoreDocs) {\n      long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n      assertTrue(value >= last);\n      assertEquals(value, ((Long) ((FieldDoc) scoreDoc).fields[0]).longValue());\n      last = value;\n    }\n  }\n\n","sourceOld":"  private static void testNumericDVSort(IndexSearcher s) throws IOException {\n    // Confirm we can sort by the new DV field:\n    TopDocs hits = s.search(new MatchAllDocsQuery(), 100, new Sort(new SortField(\"number\", SortField.Type.LONG)));\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    long last = Long.MIN_VALUE;\n    for(ScoreDoc scoreDoc : hits.scoreDocs) {\n      long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n      assertTrue(value >= last);\n      assertEquals(value, numbers.get(scoreDoc.doc));\n      last = value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericDVSort(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericDVSort(IndexSearcher).mjava","sourceNew":"  private static void testNumericDVSort(IndexSearcher s) throws IOException {\n    // Confirm we can sort by the new DV field:\n    TopDocs hits = s.search(new MatchAllDocsQuery(), 100, new Sort(new SortField(\"number\", SortField.Type.LONG)));\n    long last = Long.MIN_VALUE;\n    for(ScoreDoc scoreDoc : hits.scoreDocs) {\n      long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n      assertTrue(value >= last);\n      assertEquals(value, ((Long) ((FieldDoc) scoreDoc).fields[0]).longValue());\n      last = value;\n    }\n  }\n\n","sourceOld":"  private static void testNumericDVSort(IndexSearcher s) throws IOException {\n    // Confirm we can sort by the new DV field:\n    TopDocs hits = s.search(new MatchAllDocsQuery(), 100, new Sort(new SortField(\"number\", SortField.Type.LONG)));\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    long last = Long.MIN_VALUE;\n    for(ScoreDoc scoreDoc : hits.scoreDocs) {\n      long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n      assertTrue(value >= last);\n      assertEquals(value, numbers.get(scoreDoc.doc));\n      last = value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}