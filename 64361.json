{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random);\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      IndexReader r = IndexReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random);\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      IndexReader r = IndexReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random);\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      DirectoryReader r = DirectoryReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random);\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      IndexReader r = IndexReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random);\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      DirectoryReader r = DirectoryReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random);\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      IndexReader r = IndexReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random());\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      DirectoryReader r = DirectoryReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random);\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      DirectoryReader r = DirectoryReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55d38708477d49511977195bad066d9ced001005","date":1353348143,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    //nocommit convert\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random());\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      DirectoryReader r = DirectoryReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random());\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      DirectoryReader r = DirectoryReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"841532e4eb1e16e53a6f7a438ec2079ff981b192","date":1358288582,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    //nocommit convert\n    /*\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random());\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      DirectoryReader r = DirectoryReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n    */\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    //nocommit convert\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random());\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      DirectoryReader r = DirectoryReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d048798bdb94f09ba6613d3956314a3ca151bcc3","date":1359417182,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    //nocommit convert\n    /*\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random());\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      DirectoryReader r = DirectoryReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestNumerics(IndexWriterConfig,boolean).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)\n      throws IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(numVariantList, random());\n    for (Type val : numVariantList) {\n      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,\n          withDeletions, 7);\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      DirectoryReader r = DirectoryReader.open(w, true);\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      // for FIXED_INTS_8 we use value mod 128 - to enable testing in \n      // one go we simply use numValues as the mod for all other INT types\n      int mod = numValues;\n      switch (val) {\n      case FIXED_INTS_8:\n        mod = 128;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case VAR_INTS: {\n        DocValues intsReader = getDocValues(r, val.name());\n        assertNotNull(intsReader);\n\n        Source ints = getSource(intsReader);\n\n        for (int i = 0; i < base; i++) {\n          long value = ints.getInt(i);\n          assertEquals(\"index \" + i, 0, value);\n        }\n\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(val + \" mod: \" + mod + \" index: \" +  i, expected%mod, ints.getInt(i));\n        }\n      }\n        break;\n      case FLOAT_32:\n      case FLOAT_64: {\n        DocValues floatReader = getDocValues(r, val.name());\n        assertNotNull(floatReader);\n        Source floats = getSource(floatReader);\n        for (int i = 0; i < base; i++) {\n          double value = floats.getFloat(i);\n          assertEquals(val + \" failed for doc: \" + i + \" base: \" + base,\n              0.0d, value, 0.0d);\n        }\n        int expected = 0;\n        for (int i = base; i < r.numDocs(); i++, expected++) {\n          while (deleted.get(expected)) {\n            expected++;\n          }\n          assertEquals(\"index \" + i, 2.0 * expected, floats.getFloat(i),\n              0.00001);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + val);\n      }\n\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","d048798bdb94f09ba6613d3956314a3ca151bcc3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d048798bdb94f09ba6613d3956314a3ca151bcc3":["841532e4eb1e16e53a6f7a438ec2079ff981b192"],"841532e4eb1e16e53a6f7a438ec2079ff981b192":["55d38708477d49511977195bad066d9ced001005"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"55d38708477d49511977195bad066d9ced001005":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"d048798bdb94f09ba6613d3956314a3ca151bcc3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"841532e4eb1e16e53a6f7a438ec2079ff981b192":["d048798bdb94f09ba6613d3956314a3ca151bcc3"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d4d69c535930b5cce125cff868d40f6373dc27d4","55d38708477d49511977195bad066d9ced001005"],"55d38708477d49511977195bad066d9ced001005":["841532e4eb1e16e53a6f7a438ec2079ff981b192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}