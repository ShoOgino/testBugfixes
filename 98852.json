{"path":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","commits":[{"id":"292ece8c0acfbfc6126153b17f0c3ca809add4f0","date":1300388028,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"c26f00b574427b55127e869b935845554afde1fa":["292ece8c0acfbfc6126153b17f0c3ca809add4f0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}