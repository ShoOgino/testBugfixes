{"path":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","commits":[{"id":"ccfb40e1834cac1619556a0becf198bb7bad5d63","date":1438887805,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","pathOld":"/dev/null","sourceNew":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    ConfigData securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.data.get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.version);\n    Map result = (Map) securityCfg.data.get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-user-role': { 'tom': ['admin','dev']},\\n\" +\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'\\n\" +\n        \"                  },\\n\" +\n        \"'set-permission':{'name':'some-permission',\\n\" +\n        \"                      'collection':'acoll',\\n\" +\n        \"                      'path':'/nonexistentpath',\\n\" +\n        \"                      'role':'guest',\\n\" +\n        \"                      'before':'security-edit'\\n\" +\n        \"                      }\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    Map permissions = (Map) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Object p : permissions.entrySet()) {\n      Map.Entry e = (Map.Entry) p;\n      assertEquals(\"some-permission\", e.getKey());\n      break;\n    }\n    command = \"{\\n\" +\n        \"'delete-permission': 'some-permission',\\n\" +\n        \"'set-user-role':{'tom':null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (Map) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n    assertNull(permissions.get(\"some-permission\"));\n    command = \"{\\n\" +\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609b959cb2dad7c9d9b3237fa2b806629e9206d","date":1439303330,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","sourceNew":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    ConfigData securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.data.get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.version);\n    Map result = (Map) securityCfg.data.get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-user-role': { 'tom': ['admin','dev']},\\n\" +\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'\\n\" +\n        \"                  },\\n\" +\n        \"'set-permission':{'name':'some-permission',\\n\" +\n        \"                      'collection':'acoll',\\n\" +\n        \"                      'path':'/nonexistentpath',\\n\" +\n        \"                      'role':'guest',\\n\" +\n        \"                      'before':'security-edit'\\n\" +\n        \"                      }\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"some-permission\", p.get(\"name\"));\n      break;\n    }\n\n\n    command = \"{\\n\" +\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'name': 'some-permission',\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"some-permission\", p.get(\"name\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"'delete-permission': 'some-permission',\\n\" +\n        \"'set-user-role':{'tom':null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","sourceOld":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    ConfigData securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.data.get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.version);\n    Map result = (Map) securityCfg.data.get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-user-role': { 'tom': ['admin','dev']},\\n\" +\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'\\n\" +\n        \"                  },\\n\" +\n        \"'set-permission':{'name':'some-permission',\\n\" +\n        \"                      'collection':'acoll',\\n\" +\n        \"                      'path':'/nonexistentpath',\\n\" +\n        \"                      'role':'guest',\\n\" +\n        \"                      'before':'security-edit'\\n\" +\n        \"                      }\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    Map permissions = (Map) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Object p : permissions.entrySet()) {\n      Map.Entry e = (Map.Entry) p;\n      assertEquals(\"some-permission\", e.getKey());\n      break;\n    }\n    command = \"{\\n\" +\n        \"'delete-permission': 'some-permission',\\n\" +\n        \"'set-user-role':{'tom':null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (Map) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n    assertNull(permissions.get(\"some-permission\"));\n    command = \"{\\n\" +\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85784a21c6101aadd8d5b3d9dfed51279fbd43d9","date":1458237890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","sourceNew":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    ConfigData securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.data.get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.version);\n    Map result = (Map) securityCfg.data.get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","sourceOld":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    ConfigData securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.data.get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.version);\n    Map result = (Map) securityCfg.data.get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-user-role': { 'tom': ['admin','dev']},\\n\" +\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'\\n\" +\n        \"                  },\\n\" +\n        \"'set-permission':{'name':'some-permission',\\n\" +\n        \"                      'collection':'acoll',\\n\" +\n        \"                      'path':'/nonexistentpath',\\n\" +\n        \"                      'role':'guest',\\n\" +\n        \"                      'before':'security-edit'\\n\" +\n        \"                      }\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"some-permission\", p.get(\"name\"));\n      break;\n    }\n\n\n    command = \"{\\n\" +\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'name': 'some-permission',\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"some-permission\", p.get(\"name\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"'delete-permission': 'some-permission',\\n\" +\n        \"'set-user-role':{'tom':null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"170ef9c82c0d27d4151feff316ba63fbedd91bbf","date":1477436680,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","sourceNew":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.getVersion());\n    Map result = (Map) securityCfg.getData().get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","sourceOld":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    ConfigData securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.data.get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.version);\n    Map result = (Map) securityCfg.data.get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","sourceNew":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.getVersion());\n    Map result = (Map) securityCfg.getData().get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","sourceOld":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    ConfigData securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.data.get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.version);\n    Map result = (Map) securityCfg.data.get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","sourceNew":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.getVersion());\n    Map result = (Map) securityCfg.getData().get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","sourceOld":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    ConfigData securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.data.get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = (ConfigData) handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.version);\n    Map result = (Map) securityCfg.data.get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) ((ConfigData) handler.m.get(\"/security.json\")).data.get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","sourceNew":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    try (BasicAuthPlugin basicAuth = new BasicAuthPlugin()) {\n      SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n      basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n      assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n          \"'delete-user': ['tom','harry']\\n\" +\n          \"}\";\n      o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8), \"\");\n      req.setContentStreams(Collections.singletonList(o));\n      handler.handleRequestBody(req, new SolrQueryResponse());\n      securityCfg = handler.m.get(\"/security.json\");\n      assertEquals(3, securityCfg.getVersion());\n      Map result = (Map) securityCfg.getData().get(\"authentication\");\n      result = (Map) result.get(\"credentials\");\n      assertTrue(result.isEmpty());\n    }\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","sourceOld":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    BasicAuthPlugin basicAuth = new BasicAuthPlugin();\n    SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n    basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n    assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n        \"'delete-user': ['tom','harry']\\n\" +\n        \"}\";\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n    securityCfg = handler.m.get(\"/security.json\");\n    assertEquals(3, securityCfg.getVersion());\n    Map result = (Map) securityCfg.getData().get(\"authentication\");\n    result = (Map) result.get(\"credentials\");\n    assertTrue(result.isEmpty());\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd","date":1567056470,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","sourceNew":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    try (BasicAuthPlugin basicAuth = new BasicAuthPlugin()) {\n      SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n      basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n      assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n          \"'delete-user': ['tom']\\n\" +\n          \"}\";\n      o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8), \"\");\n      req.setContentStreams(Collections.singletonList(o));\n      handler.handleRequestBody(req, new SolrQueryResponse());\n      securityCfg = handler.m.get(\"/security.json\");\n      assertEquals(3, securityCfg.getVersion());\n      Map result = (Map) securityCfg.getData().get(\"authentication\");\n      result = (Map) result.get(\"credentials\");\n      assertEquals(1,result.size());\n    }\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","sourceOld":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    try (BasicAuthPlugin basicAuth = new BasicAuthPlugin()) {\n      SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n      basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n      assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n          \"'delete-user': ['tom','harry']\\n\" +\n          \"}\";\n      o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8), \"\");\n      req.setContentStreams(Collections.singletonList(o));\n      handler.handleRequestBody(req, new SolrQueryResponse());\n      securityCfg = handler.m.get(\"/security.json\");\n      assertEquals(3, securityCfg.getVersion());\n      Map result = (Map) securityCfg.getData().get(\"authentication\");\n      result = (Map) result.get(\"credentials\");\n      assertTrue(result.isEmpty());\n    }\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","sourceNew":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    try (BasicAuthPlugin basicAuth = new BasicAuthPlugin()) {\n      SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n      basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n      assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n          \"'delete-user': ['tom']\\n\" +\n          \"}\";\n      o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8), \"\");\n      req.setContentStreams(Collections.singletonList(o));\n      handler.handleRequestBody(req, new SolrQueryResponse());\n      securityCfg = handler.m.get(\"/security.json\");\n      assertEquals(3, securityCfg.getVersion());\n      Map result = (Map) securityCfg.getData().get(\"authentication\");\n      result = (Map) result.get(\"credentials\");\n      assertEquals(1,result.size());\n    }\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n    handler.close();\n  }\n\n","sourceOld":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    try (BasicAuthPlugin basicAuth = new BasicAuthPlugin()) {\n      SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n      basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n      assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n          \"'delete-user': ['tom']\\n\" +\n          \"}\";\n      o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8), \"\");\n      req.setContentStreams(Collections.singletonList(o));\n      handler.handleRequestBody(req, new SolrQueryResponse());\n      securityCfg = handler.m.get(\"/security.json\");\n      assertEquals(3, securityCfg.getVersion());\n      Map result = (Map) securityCfg.getData().get(\"authentication\");\n      result = (Map) result.get(\"credentials\");\n      assertEquals(1,result.size());\n    }\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/SecurityConfHandlerTest#testEdit().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    try (BasicAuthPlugin basicAuth = new BasicAuthPlugin()) {\n      SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n      basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n      assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n          \"'delete-user': ['tom']\\n\" +\n          \"}\";\n      o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8), \"\");\n      req.setContentStreams(Collections.singletonList(o));\n      handler.handleRequestBody(req, new SolrQueryResponse());\n      securityCfg = handler.m.get(\"/security.json\");\n      assertEquals(3, securityCfg.getVersion());\n      Map result = (Map) securityCfg.getData().get(\"authentication\");\n      result = (Map) result.get(\"credentials\");\n      assertEquals(1,result.size());\n    }\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    @SuppressWarnings({\"rawtypes\"})\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n    handler.close();\n  }\n\n","sourceOld":"  public void testEdit() throws Exception {\n    MockSecurityHandler handler = new MockSecurityHandler();\n    String command = \"{\\n\" +\n        \"'set-user': {'tom':'TomIsCool'},\\n\" +\n        \"'set-user':{ 'tom':'TomIsUberCool'}\\n\" +\n        \"}\";\n    LocalSolrQueryRequest req =  new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authentication\");\n    ContentStreamBase.ByteArrayStream o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    handler.handleRequestBody(req,new SolrQueryResponse());\n\n    try (BasicAuthPlugin basicAuth = new BasicAuthPlugin()) {\n      SecurityConfig securityCfg = handler.m.get(\"/security.json\");\n      basicAuth.init((Map<String, Object>) securityCfg.getData().get(\"authentication\"));\n      assertTrue(basicAuth.authenticate(\"tom\", \"TomIsUberCool\"));\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'},\\n\" +\n          \"'delete-user': ['tom']\\n\" +\n          \"}\";\n      o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8), \"\");\n      req.setContentStreams(Collections.singletonList(o));\n      handler.handleRequestBody(req, new SolrQueryResponse());\n      securityCfg = handler.m.get(\"/security.json\");\n      assertEquals(3, securityCfg.getVersion());\n      Map result = (Map) securityCfg.getData().get(\"authentication\");\n      result = (Map) result.get(\"credentials\");\n      assertEquals(1,result.size());\n    }\n\n\n    \n    command = \"{'set-permission':{ collection : acoll ,\\n\" +\n        \"                      path : '/nonexistentpath',\\n\" +\n        \"                      role :guest },\\n\" +\n        \"'set-user-role': { 'tom': ['admin','dev']},\"+\n        \"'set-permission':{'name': 'security-edit',\\n\" +\n        \"                  'role': 'admin'}\\n\" +\n        \"}\";\n\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    Map authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    Map userRoles = (Map) authzconf.get(\"user-role\");\n    List tomRoles = (List) userRoles.get(\"tom\");\n    assertTrue(tomRoles.contains(\"admin\"));\n    assertTrue(tomRoles.contains(\"dev\"));\n    List<Map> permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(2, permissions.size());\n    for (Map p : permissions) {\n      assertEquals(\"acoll\", p.get(\"collection\"));\n      break;\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  name : security-edit,\\n\" +\n        \"                  'role': ['admin','dev']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    Map p = permissions.get(1);\n    assertEquals(\"security-edit\", p.get(\"name\"));\n    List rol = (List) p.get(\"role\");\n    assertEquals( \"admin\", rol.get(0));\n    assertEquals( \"dev\", rol.get(1));\n\n    command = \"{\\n\" +\n        \"'update-permission':{'index': 1,\\n\" +\n        \"                  'role': ['guest','admin']\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n\n    p = permissions.get(0);\n    assertEquals(\"acoll\", p.get(\"collection\"));\n    rol = (List) p.get(\"role\");\n    assertEquals( \"guest\", rol.get(0));\n    assertEquals( \"admin\", rol.get(1));\n\n\n\n    command = \"{\\n\" +\n        \"delete-permission: 1,\\n\" +\n        \" set-user-role : { tom :null}\\n\" +\n        \"}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));\n    authzconf = (Map) handler.m.get(\"/security.json\").getData().get(\"authorization\");\n    userRoles = (Map) authzconf.get(\"user-role\");\n    assertEquals(0, userRoles.size());\n    permissions = (List<Map>) authzconf.get(\"permissions\");\n    assertEquals(1, permissions.size());\n\n    for (Map permission : permissions) {\n      assertFalse(\"some-permission\".equals(permission.get(\"name\")));\n    }\n    command = \"{\\n\" +\n        \"'set-permission':{index : 2,  'name': 'security-edit',\\n\" +\n        \"                  'method':'POST',\"+ // -ve test security edit is a well-known permission , only role attribute should be provided\n        \"                  'role': 'admin'\\n\" +\n        \"                  }}\";\n    req = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n    req.getContext().put(\"httpMethod\",\"POST\");\n    req.getContext().put(\"path\",\"/admin/authorization\");\n    o = new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),\"\");\n    req.setContentStreams(Collections.singletonList(o));\n    rsp = new SolrQueryResponse();\n    handler.handleRequestBody(req, rsp);\n    List l = (List) ((Map) ((List)rsp.getValues().get(\"errorMessages\")).get(0)).get(\"errorMessages\");\n    assertEquals(1, l.size());\n    handler.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"ba055e19afc289adcb5bedaf68513793a7254012":["5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9","170ef9c82c0d27d4151feff316ba63fbedd91bbf"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["170ef9c82c0d27d4151feff316ba63fbedd91bbf","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd":["ba055e19afc289adcb5bedaf68513793a7254012"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"ba055e19afc289adcb5bedaf68513793a7254012":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}