{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399ef3ff6c22f0627c82ac65f32726f3587a2aa1","date":1379005174,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    in.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && (noDeleteOpenFile || assertNoDeleteOpenFile)) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n\n        if (!assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        } else {\n          throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    in.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    in.deleteFile(name);\n  }\n\n","bugFix":["2a186ae8733084223c22044e935e4ef848a143d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && (noDeleteOpenFile || assertNoDeleteOpenFile)) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n\n        if (!assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        } else {\n          throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    if (!forced && enableVirusScanner && (randomState.nextInt(4) == 0)) {\n      triedToDelete.add(name);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MDW: now refuse to delete file: \" + name);\n      }\n      throw new IOException(\"cannot delete file: \" + name + \", a virus scanner has it open\");\n    }\n    triedToDelete.remove(name);\n    in.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && (noDeleteOpenFile || assertNoDeleteOpenFile)) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n\n        if (!assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        } else {\n          throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    in.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && (noDeleteOpenFile || assertNoDeleteOpenFile)) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n\n        if (!assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        } else {\n          throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    if (!forced && enableVirusScanner && (randomState.nextInt(4) == 0)) {\n      triedToDelete.add(name);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now refuse to delete file: \" + name + \" this=\" + this);\n      }\n      throw new IOException(\"cannot delete file: \" + name + \", a virus scanner has it open (exists?=\" + LuceneTestCase.slowFileExists(in, name));\n    }\n    triedToDelete.remove(name);\n    in.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && (noDeleteOpenFile || assertNoDeleteOpenFile)) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n\n        if (!assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        } else {\n          throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    if (!forced && enableVirusScanner && (randomState.nextInt(4) == 0)) {\n      triedToDelete.add(name);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MDW: now refuse to delete file: \" + name);\n      }\n      throw new IOException(\"cannot delete file: \" + name + \", a virus scanner has it open\");\n    }\n    triedToDelete.remove(name);\n    in.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFiles(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  @Override\n  public synchronized void deleteFiles(Collection<String> names) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    for(String name : names) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        if (assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n\n    unSyncedFiles.removeAll(names);\n    in.deleteFiles(names);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && (noDeleteOpenFile || assertNoDeleteOpenFile)) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n\n        if (!assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        } else {\n          throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    if (!forced && enableVirusScanner && (randomState.nextInt(4) == 0)) {\n      triedToDelete.add(name);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MDW: now refuse to delete file: \" + name);\n      }\n      throw new IOException(\"cannot delete file: \" + name + \", a virus scanner has it open\");\n    }\n    triedToDelete.remove(name);\n    in.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":null,"sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && (noDeleteOpenFile || assertNoDeleteOpenFile)) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n\n        if (!assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        } else {\n          throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    if (!forced && enableVirusScanner && (randomState.nextInt(4) == 0)) {\n      triedToDelete.add(name);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MDW: now refuse to delete file: \" + name);\n      }\n      throw new IOException(\"cannot delete file: \" + name + \", a virus scanner has it open\");\n    }\n    triedToDelete.remove(name);\n    in.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":null,"sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && (noDeleteOpenFile || assertNoDeleteOpenFile)) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n\n        if (!assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        } else {\n          throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    if (!forced && enableVirusScanner && (randomState.nextInt(4) == 0)) {\n      triedToDelete.add(name);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now refuse to delete file: \" + name + \" this=\" + this);\n      }\n      throw new IOException(\"cannot delete file: \" + name + \", a virus scanner has it open (exists?=\" + LuceneTestCase.slowFileExists(in, name));\n    }\n    triedToDelete.remove(name);\n    in.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":4,"author":"Erick Erickson","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":null,"sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && (noDeleteOpenFile || assertNoDeleteOpenFile)) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n\n        if (!assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        } else {\n          throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    if (!forced && enableVirusScanner && (randomState.nextInt(4) == 0)) {\n      triedToDelete.add(name);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MDW: now refuse to delete file: \" + name);\n      }\n      throw new IOException(\"cannot delete file: \" + name + \", a virus scanner has it open\");\n    }\n    triedToDelete.remove(name);\n    in.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527cc14542789f47d75da436cb4287d1ab887e34":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["0d49a158012a8ff48f328a4558e4bfcffbaed16f","b470f36a9372c97283360b1304eacbde22df6c0d"],"399ef3ff6c22f0627c82ac65f32726f3587a2aa1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["527cc14542789f47d75da436cb4287d1ab887e34"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"]},"commit2Childs":{"527cc14542789f47d75da436cb4287d1ab887e34":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"399ef3ff6c22f0627c82ac65f32726f3587a2aa1":["527cc14542789f47d75da436cb4287d1ab887e34"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}