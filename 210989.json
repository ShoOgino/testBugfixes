{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#getConfigsetPath(String,String,String).mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#getConfigsetPath(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // This method is used by configSetUploadTool and CreateTool to resolve the configset directory.\n  // Check several possibilities:\n  // 1> configSetDirParam + confname is defined in configsets, thus has a conf/solrconfig.xml\n  // 2> configSet is a path that contains conf/solrconfig.xml\n  // 3> configSet is t \n  public static Path getConfigsetPath(String confname, String configSet, String configSetDirParam) throws IOException {\n\n    // one of the canned configsets.\n    Path ret = Paths.get(configSetDirParam, configSet, \"conf\", \"solrconfig.xml\").normalize();\n    if (Files.exists(ret)) {\n      return Paths.get(configSetDirParam, configSet, \"conf\").normalize();\n    }\n\n    // a local path to the parent of a \"conf\" directory \n    ret = Paths.get(configSet, \"conf\", \"solrconfig.xml\").normalize();\n    if (Files.exists(ret)) {\n      return Paths.get(configSet, \"conf\").normalize();\n    }\n\n    // A local path to the source, probably already includes \"conf\".\n    ret = Paths.get(configSet, \"solrconfig.xml\").normalize();\n    if (Files.exists(ret)) {\n      return Paths.get(configSet).normalize();\n    }\n\n    throw new IllegalArgumentException(String.format(Locale.ROOT,\n        \"Could not find solrconfig.xml at %s, %s or %s\",\n        Paths.get(configSetDirParam, configSet, \"conf\", \"solrconfig.xml\").normalize().toAbsolutePath().toString(),\n        Paths.get(configSet, \"conf\", \"solrconfig.xml\").normalize().toAbsolutePath().toString(),\n        Paths.get(configSet, \"solrconfig.xml\").normalize().toAbsolutePath().toString()\n    ));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3100fa57deee363537557f82c2b38812a2576acc","date":1467500858,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#getConfigsetPath(String,String,String).mjava","sourceNew":null,"sourceOld":"  // This method is used by configSetUploadTool and CreateTool to resolve the configset directory.\n  // Check several possibilities:\n  // 1> configSetDirParam + confname is defined in configsets, thus has a conf/solrconfig.xml\n  // 2> configSet is a path that contains conf/solrconfig.xml\n  // 3> configSet is t \n  public static Path getConfigsetPath(String confname, String configSet, String configSetDirParam) throws IOException {\n\n    // one of the canned configsets.\n    Path ret = Paths.get(configSetDirParam, configSet, \"conf\", \"solrconfig.xml\").normalize();\n    if (Files.exists(ret)) {\n      return Paths.get(configSetDirParam, configSet, \"conf\").normalize();\n    }\n\n    // a local path to the parent of a \"conf\" directory \n    ret = Paths.get(configSet, \"conf\", \"solrconfig.xml\").normalize();\n    if (Files.exists(ret)) {\n      return Paths.get(configSet, \"conf\").normalize();\n    }\n\n    // A local path to the source, probably already includes \"conf\".\n    ret = Paths.get(configSet, \"solrconfig.xml\").normalize();\n    if (Files.exists(ret)) {\n      return Paths.get(configSet).normalize();\n    }\n\n    throw new IllegalArgumentException(String.format(Locale.ROOT,\n        \"Could not find solrconfig.xml at %s, %s or %s\",\n        Paths.get(configSetDirParam, configSet, \"conf\", \"solrconfig.xml\").normalize().toAbsolutePath().toString(),\n        Paths.get(configSet, \"conf\", \"solrconfig.xml\").normalize().toAbsolutePath().toString(),\n        Paths.get(configSet, \"solrconfig.xml\").normalize().toAbsolutePath().toString()\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3100fa57deee363537557f82c2b38812a2576acc":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3100fa57deee363537557f82c2b38812a2576acc"]},"commit2Childs":{"3100fa57deee363537557f82c2b38812a2576acc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["3100fa57deee363537557f82c2b38812a2576acc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}