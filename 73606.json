{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","pathOld":"/dev/null","sourceNew":"  private void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ?  '/':' ');\n      if (parts.get(0).isEmpty()) parts.remove(0);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if(err != null){\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","pathOld":"/dev/null","sourceNew":"  private void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ?  '/':' ');\n      if (parts.get(0).isEmpty()) parts.remove(0);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if(err != null){\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f90164e4baf99ca8e0d459a85e1c359ccad769","date":1558579809,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","sourceNew":"  private void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ?  '/':' ', true);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if(err != null){\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ?  '/':' ');\n      if (parts.get(0).isEmpty()) parts.remove(0);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if(err != null){\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1","date":1566871283,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","sourceNew":"  private void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ? '/' : ' ', true);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if (err != null) {\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ?  '/':' ', true);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if(err != null){\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ba409fa7dec3437c7631ef2582c2ad91a8368b1","date":1570400397,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","sourceNew":"  public static void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ? '/' : ' ', true);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if (err != null) {\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ? '/' : ' ', true);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if (err != null) {\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","sourceNew":"  public static void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ? '/' : ' ', true);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if (err != null) {\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ? '/' : ' ', true);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if (err != null) {\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#assertConditions(Map,Map).mjava","sourceNew":"  public static void assertConditions(@SuppressWarnings({\"rawtypes\"})Map root,\n                                      @SuppressWarnings({\"rawtypes\"})Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      @SuppressWarnings({\"rawtypes\"})\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ? '/' : ' ', true);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        @SuppressWarnings({\"rawtypes\"})\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        @SuppressWarnings({\"unchecked\"})\n        String err = value.test(val);\n        if (err != null) {\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","sourceOld":"  public static void assertConditions(Map root, Map conditions) {\n    for (Object o : conditions.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      String path = (String) e.getKey();\n      List<String> parts = StrUtils.splitSmart(path, path.charAt(0) == '/' ? '/' : ' ', true);\n      Object val = Utils.getObjectByPath(root, false, parts);\n      if (e.getValue() instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg value = (ValidatingJsonMap.PredicateWithErrMsg) e.getValue();\n        String err = value.test(val);\n        if (err != null) {\n          assertEquals(err + \" for \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n        }\n\n      } else {\n        assertEquals(\"incorrect value for path \" + e.getKey() + \" in :\" + Utils.toJSONString(root), e.getValue(), val);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51f90164e4baf99ca8e0d459a85e1c359ccad769":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1"],"86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1":["51f90164e4baf99ca8e0d459a85e1c359ccad769"],"b0b597c65628ca9e73913a07e81691f8229bae35":["86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1","6ba409fa7dec3437c7631ef2582c2ad91a8368b1"]},"commit2Childs":{"51f90164e4baf99ca8e0d459a85e1c359ccad769":["86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["51f90164e4baf99ca8e0d459a85e1c359ccad769","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["e98520789adb1d5ad05afb4956eca0944a929688","b0b597c65628ca9e73913a07e81691f8229bae35"],"86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}