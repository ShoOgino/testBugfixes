{"path":"lucene/core/src/java/org/apache/lucene/document/XYShapePolygonQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/XYShapePolygonQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapePolygonQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","sourceNew":"  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = decode(scratchTriangle.aY);\n    double alon = decode(scratchTriangle.aX);\n    double blat = decode(scratchTriangle.bY);\n    double blon = decode(scratchTriangle.bX);\n    double clat = decode(scratchTriangle.cY);\n    double clon = decode(scratchTriangle.cX);\n\n    switch (queryRelation) {\n      case INTERSECTS: return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n      case WITHIN: return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n      case DISJOINT: return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_OUTSIDE_QUERY;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = decode(scratchTriangle.aY);\n    double alon = decode(scratchTriangle.aX);\n    double blat = decode(scratchTriangle.bY);\n    double blon = decode(scratchTriangle.bX);\n    double clat = decode(scratchTriangle.cY);\n    double clon = decode(scratchTriangle.cX);\n\n    switch (queryRelation) {\n      case INTERSECTS: return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n      case WITHIN: return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n      case DISJOINT: return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_OUTSIDE_QUERY;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/XYShapeQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/XYShapePolygonQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","sourceNew":"  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = decode(scratchTriangle.aY);\n    double alon = decode(scratchTriangle.aX);\n    double blat = decode(scratchTriangle.bY);\n    double blon = decode(scratchTriangle.bX);\n    double clat = decode(scratchTriangle.cY);\n    double clon = decode(scratchTriangle.cX);\n\n    switch (queryRelation) {\n      case INTERSECTS: return component2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n      case WITHIN: return component2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n      case DISJOINT: return component2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_OUTSIDE_QUERY;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = decode(scratchTriangle.aY);\n    double alon = decode(scratchTriangle.aX);\n    double blat = decode(scratchTriangle.bY);\n    double blon = decode(scratchTriangle.bX);\n    double clat = decode(scratchTriangle.cY);\n    double clon = decode(scratchTriangle.cX);\n\n    switch (queryRelation) {\n      case INTERSECTS: return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n      case WITHIN: return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n      case DISJOINT: return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_OUTSIDE_QUERY;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a923e28c9d079048c6993884ec89c44f0380b923":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a923e28c9d079048c6993884ec89c44f0380b923"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a923e28c9d079048c6993884ec89c44f0380b923"],"a923e28c9d079048c6993884ec89c44f0380b923":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}