{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","commits":[{"id":"cd3516be4c270c1512f646de290f0f67b7fd5aa5","date":1379235210,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","pathOld":"/dev/null","sourceNew":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    Loader child = new Loader(this.getClass().getClassLoader());\n    Class<?> thisInDifferentLoader = child.loadFromParentResource(getClass().getName());\n    Map<String,Method> functions = Collections.singletonMap(\"zeroArgMethod\", thisInDifferentLoader.getMethod(\"zeroArgMethod\"));\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"zeroArgMethod()\", functions, getClass().getClassLoader());\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n    \n    // this should pass:\n    JavascriptCompiler.compile(\"zeroArgMethod()\", functions, child);\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    JavascriptCompiler.compile(\"zeroArgMethod()\", mixedFunctions, child);\n    JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, child);\n    try {\n      JavascriptCompiler.compile(\"zeroArgMethod()\", functions, getClass().getClassLoader());\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f043e8455dcfb3d33b0a365c0e86ad2b4ef50b8","date":1379235960,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","sourceNew":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    Loader child = new Loader(this.getClass().getClassLoader());\n    Class<?> thisInDifferentLoader = child.loadFromParentResource(getClass().getName());\n    Map<String,Method> functions = Collections.singletonMap(\"zeroArgMethod\", thisInDifferentLoader.getMethod(\"zeroArgMethod\"));\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"zeroArgMethod()\", functions, getClass().getClassLoader());\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"zeroArgMethod()\", functions, child);\n    assertEquals(5, expr.evaluate(0, null), DELTA);\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"zeroArgMethod()\", mixedFunctions, child);\n    assertEquals(5, expr.evaluate(0, null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, child);\n    assertEquals(Math.sqrt(20), expr.evaluate(0, null), DELTA);\n    try {\n      JavascriptCompiler.compile(\"zeroArgMethod()\", functions, getClass().getClassLoader());\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n  }\n\n","sourceOld":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    Loader child = new Loader(this.getClass().getClassLoader());\n    Class<?> thisInDifferentLoader = child.loadFromParentResource(getClass().getName());\n    Map<String,Method> functions = Collections.singletonMap(\"zeroArgMethod\", thisInDifferentLoader.getMethod(\"zeroArgMethod\"));\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"zeroArgMethod()\", functions, getClass().getClassLoader());\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n    \n    // this should pass:\n    JavascriptCompiler.compile(\"zeroArgMethod()\", functions, child);\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    JavascriptCompiler.compile(\"zeroArgMethod()\", mixedFunctions, child);\n    JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, child);\n    try {\n      JavascriptCompiler.compile(\"zeroArgMethod()\", functions, getClass().getClassLoader());\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0aa1146400d5a0c1c485e05b3bf808d94edc4d8","date":1379241550,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","sourceNew":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    ClassLoader thisLoader = getClass().getClassLoader();\n    Loader childLoader = new Loader(thisLoader);\n    Class<?> fooClass = childLoader.createFakeClass();\n    \n    Method barMethod = fooClass.getMethod(\"bar\");\n    Map<String,Method> functions = Collections.singletonMap(\"bar\", barMethod);\n    assertNotSame(thisLoader, fooClass.getClassLoader());\n    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"bar()\", functions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"bar()\", mixedFunctions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, childLoader);\n    assertEquals(Math.sqrt(20), expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n  }\n\n","sourceOld":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    Loader child = new Loader(this.getClass().getClassLoader());\n    Class<?> thisInDifferentLoader = child.loadFromParentResource(getClass().getName());\n    Map<String,Method> functions = Collections.singletonMap(\"zeroArgMethod\", thisInDifferentLoader.getMethod(\"zeroArgMethod\"));\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"zeroArgMethod()\", functions, getClass().getClassLoader());\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"zeroArgMethod()\", functions, child);\n    assertEquals(5, expr.evaluate(0, null), DELTA);\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"zeroArgMethod()\", mixedFunctions, child);\n    assertEquals(5, expr.evaluate(0, null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, child);\n    assertEquals(Math.sqrt(20), expr.evaluate(0, null), DELTA);\n    try {\n      JavascriptCompiler.compile(\"zeroArgMethod()\", functions, getClass().getClassLoader());\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","pathOld":"/dev/null","sourceNew":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    ClassLoader thisLoader = getClass().getClassLoader();\n    Loader childLoader = new Loader(thisLoader);\n    Class<?> fooClass = childLoader.createFakeClass();\n    \n    Method barMethod = fooClass.getMethod(\"bar\");\n    Map<String,Method> functions = Collections.singletonMap(\"bar\", barMethod);\n    assertNotSame(thisLoader, fooClass.getClassLoader());\n    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"bar()\", functions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"bar()\", mixedFunctions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, childLoader);\n    assertEquals(Math.sqrt(20), expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48ba728ed08882bf39596cb9fcdb145d6f96f81c","date":1379265845,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","sourceNew":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    ClassLoader thisLoader = getClass().getClassLoader();\n    Loader childLoader = new Loader(thisLoader);\n    Class<?> fooClass = childLoader.createFakeClass();\n    \n    Method barMethod = fooClass.getMethod(\"bar\");\n    Map<String,Method> functions = Collections.singletonMap(\"bar\", barMethod);\n    assertNotSame(thisLoader, fooClass.getClassLoader());\n    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"bar()\", functions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"bar()\", mixedFunctions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, childLoader);\n    assertEquals(Math.sqrt(20), expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"bar()\", mixedFunctions, thisLoader);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n  }\n\n","sourceOld":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    ClassLoader thisLoader = getClass().getClassLoader();\n    Loader childLoader = new Loader(thisLoader);\n    Class<?> fooClass = childLoader.createFakeClass();\n    \n    Method barMethod = fooClass.getMethod(\"bar\");\n    Map<String,Method> functions = Collections.singletonMap(\"bar\", barMethod);\n    assertNotSame(thisLoader, fooClass.getClassLoader());\n    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"bar()\", functions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"bar()\", mixedFunctions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, childLoader);\n    assertEquals(Math.sqrt(20), expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","sourceNew":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    ClassLoader thisLoader = getClass().getClassLoader();\n    Loader childLoader = new Loader(thisLoader);\n    Class<?> fooClass = childLoader.createFakeClass();\n    \n    Method barMethod = fooClass.getMethod(\"bar\");\n    Map<String,Method> functions = Collections.singletonMap(\"bar\", barMethod);\n    assertNotSame(thisLoader, fooClass.getClassLoader());\n    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"bar()\", functions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n    });\n    assertTrue(expected.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"bar()\", mixedFunctions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, childLoader);\n    assertEquals(Math.sqrt(20), expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      JavascriptCompiler.compile(\"bar()\", mixedFunctions, thisLoader);\n    });\n    assertTrue(expected.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n  }\n\n","sourceOld":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    ClassLoader thisLoader = getClass().getClassLoader();\n    Loader childLoader = new Loader(thisLoader);\n    Class<?> fooClass = childLoader.createFakeClass();\n    \n    Method barMethod = fooClass.getMethod(\"bar\");\n    Map<String,Method> functions = Collections.singletonMap(\"bar\", barMethod);\n    assertNotSame(thisLoader, fooClass.getClassLoader());\n    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"bar()\", functions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"bar()\", mixedFunctions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, childLoader);\n    assertEquals(Math.sqrt(20), expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    try {\n      JavascriptCompiler.compile(\"bar()\", mixedFunctions, thisLoader);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    }\n  }\n\n","bugFix":["cd3516be4c270c1512f646de290f0f67b7fd5aa5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae1ad302fc92a61505409a38838f2b1a4a2b092","date":1483787106,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","sourceNew":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    ClassLoader thisLoader = getClass().getClassLoader();\n    Loader childLoader = new Loader(thisLoader);\n    Class<?> fooClass = childLoader.createFakeClass();\n    \n    Method barMethod = fooClass.getMethod(\"bar\");\n    Map<String,Method> functions = Collections.singletonMap(\"bar\", barMethod);\n    assertNotSame(thisLoader, fooClass.getClassLoader());\n    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"bar()\", functions, childLoader);\n    assertEquals(2.0, expr.evaluate(null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n    });\n    assertTrue(expected.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"bar()\", mixedFunctions, childLoader);\n    assertEquals(2.0, expr.evaluate(null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, childLoader);\n    assertEquals(Math.sqrt(20), expr.evaluate(null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      JavascriptCompiler.compile(\"bar()\", mixedFunctions, thisLoader);\n    });\n    assertTrue(expected.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n  }\n\n","sourceOld":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    ClassLoader thisLoader = getClass().getClassLoader();\n    Loader childLoader = new Loader(thisLoader);\n    Class<?> fooClass = childLoader.createFakeClass();\n    \n    Method barMethod = fooClass.getMethod(\"bar\");\n    Map<String,Method> functions = Collections.singletonMap(\"bar\", barMethod);\n    assertNotSame(thisLoader, fooClass.getClassLoader());\n    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"bar()\", functions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n    });\n    assertTrue(expected.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"bar()\", mixedFunctions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, childLoader);\n    assertEquals(Math.sqrt(20), expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      JavascriptCompiler.compile(\"bar()\", mixedFunctions, thisLoader);\n    });\n    assertTrue(expected.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testClassLoader().mjava","sourceNew":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    ClassLoader thisLoader = getClass().getClassLoader();\n    Loader childLoader = new Loader(thisLoader);\n    Class<?> fooClass = childLoader.createFakeClass();\n    \n    Method barMethod = fooClass.getMethod(\"bar\");\n    Map<String,Method> functions = Collections.singletonMap(\"bar\", barMethod);\n    assertNotSame(thisLoader, fooClass.getClassLoader());\n    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"bar()\", functions, childLoader);\n    assertEquals(2.0, expr.evaluate(null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n    });\n    assertTrue(expected.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"bar()\", mixedFunctions, childLoader);\n    assertEquals(2.0, expr.evaluate(null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, childLoader);\n    assertEquals(Math.sqrt(20), expr.evaluate(null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      JavascriptCompiler.compile(\"bar()\", mixedFunctions, thisLoader);\n    });\n    assertTrue(expected.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n  }\n\n","sourceOld":"  /** uses this test with a different classloader and tries to\n   * register it using the default classloader, which should fail */\n  public void testClassLoader() throws Exception {\n    ClassLoader thisLoader = getClass().getClassLoader();\n    Loader childLoader = new Loader(thisLoader);\n    Class<?> fooClass = childLoader.createFakeClass();\n    \n    Method barMethod = fooClass.getMethod(\"bar\");\n    Map<String,Method> functions = Collections.singletonMap(\"bar\", barMethod);\n    assertNotSame(thisLoader, fooClass.getClassLoader());\n    assertNotSame(thisLoader, barMethod.getDeclaringClass().getClassLoader());\n    \n    // this should pass:\n    Expression expr = JavascriptCompiler.compile(\"bar()\", functions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      JavascriptCompiler.compile(\"bar()\", functions, thisLoader);\n    });\n    assertTrue(expected.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n    \n    // mix foreign and default functions\n    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);\n    mixedFunctions.putAll(functions);\n    expr = JavascriptCompiler.compile(\"bar()\", mixedFunctions, childLoader);\n    assertEquals(2.0, expr.evaluate(0, null), DELTA);\n    expr = JavascriptCompiler.compile(\"sqrt(20)\", mixedFunctions, childLoader);\n    assertEquals(Math.sqrt(20), expr.evaluate(0, null), DELTA);\n    \n    // use our classloader, not the foreign one, which should fail!\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      JavascriptCompiler.compile(\"bar()\", mixedFunctions, thisLoader);\n    });\n    assertTrue(expected.getMessage().contains(\"is not declared by a class which is accessible by the given parent ClassLoader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48ba728ed08882bf39596cb9fcdb145d6f96f81c":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"f0aa1146400d5a0c1c485e05b3bf808d94edc4d8":["5f043e8455dcfb3d33b0a365c0e86ad2b4ef50b8"],"5f043e8455dcfb3d33b0a365c0e86ad2b4ef50b8":["cd3516be4c270c1512f646de290f0f67b7fd5aa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["48ba728ed08882bf39596cb9fcdb145d6f96f81c"],"cd3516be4c270c1512f646de290f0f67b7fd5aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["05fe562aa248790944d43cdd478f512572835ba0","7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0aa1146400d5a0c1c485e05b3bf808d94edc4d8"]},"commit2Childs":{"48ba728ed08882bf39596cb9fcdb145d6f96f81c":["05fe562aa248790944d43cdd478f512572835ba0"],"f0aa1146400d5a0c1c485e05b3bf808d94edc4d8":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5f043e8455dcfb3d33b0a365c0e86ad2b4ef50b8":["f0aa1146400d5a0c1c485e05b3bf808d94edc4d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd3516be4c270c1512f646de290f0f67b7fd5aa5","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"cd3516be4c270c1512f646de290f0f67b7fd5aa5":["5f043e8455dcfb3d33b0a365c0e86ad2b4ef50b8"],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05fe562aa248790944d43cdd478f512572835ba0":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["48ba728ed08882bf39596cb9fcdb145d6f96f81c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}