{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      // we don't assert freqs, they are allowed to be different\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      // we don't assert freqs, they are allowed to be different\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      // we don't assert freqs, they are allowed to be different\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      // we don't assert freqs, they are allowed to be different\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","sourceNew":null,"sourceOld":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      // we don't assert freqs, they are allowed to be different\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}