{"path":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86365ce8db75e42ebe10805e99e92c463fef63b6","date":1330370408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6550af40a4977993323e8fd3b3222a2402084800","date":1334548895,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":null,"sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":null,"sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","86365ce8db75e42ebe10805e99e92c463fef63b6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6550af40a4977993323e8fd3b3222a2402084800":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["6550af40a4977993323e8fd3b3222a2402084800"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","0837ab0472feecb3a54260729d845f839e1cbd72"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["86365ce8db75e42ebe10805e99e92c463fef63b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","86365ce8db75e42ebe10805e99e92c463fef63b6"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6550af40a4977993323e8fd3b3222a2402084800":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6550af40a4977993323e8fd3b3222a2402084800"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}