{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollectionsByPolicy().mjava","commits":[{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollectionsByPolicy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollectionsByPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setSearchPolicyCommand = \"{\" +\n            \" 'set-policy': {\" +\n            \"   'search': [\" +\n            \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n            \"    ]\" +\n            \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setSearchPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionsFilter = \"{'policy': 'search'}\";\n    Map<String, String> createCollectionParameters = new HashMap<>();\n    createCollectionParameters.put(\"testSelected1\", \"search\");\n    createCollectionParameters.put(\"testSelected2\", \"search\");\n    testCollectionsPredicate(collectionsFilter, createCollectionParameters);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollectionsByPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollectionsByPolicy().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollectionsByPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setSearchPolicyCommand = \"{\" +\n            \" 'set-policy': {\" +\n            \"   'search': [\" +\n            \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n            \"    ]\" +\n            \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setSearchPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionsFilter = \"{'policy': 'search'}\";\n    Map<String, String> createCollectionParameters = new HashMap<>();\n    createCollectionParameters.put(\"testSelected1\", \"search\");\n    createCollectionParameters.put(\"testSelected2\", \"search\");\n    testCollectionsPredicate(collectionsFilter, createCollectionParameters);\n  }\n\n","sourceOld":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollectionsByPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setSearchPolicyCommand = \"{\" +\n            \" 'set-policy': {\" +\n            \"   'search': [\" +\n            \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n            \"    ]\" +\n            \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setSearchPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionsFilter = \"{'policy': 'search'}\";\n    Map<String, String> createCollectionParameters = new HashMap<>();\n    createCollectionParameters.put(\"testSelected1\", \"search\");\n    createCollectionParameters.put(\"testSelected2\", \"search\");\n    testCollectionsPredicate(collectionsFilter, createCollectionParameters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollectionsByPolicy().mjava","sourceNew":null,"sourceOld":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollectionsByPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setSearchPolicyCommand = \"{\" +\n            \" 'set-policy': {\" +\n            \"   'search': [\" +\n            \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n            \"    ]\" +\n            \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setSearchPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionsFilter = \"{'policy': 'search'}\";\n    Map<String, String> createCollectionParameters = new HashMap<>();\n    createCollectionParameters.put(\"testSelected1\", \"search\");\n    createCollectionParameters.put(\"testSelected2\", \"search\");\n    testCollectionsPredicate(collectionsFilter, createCollectionParameters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}