{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotClusterStateProvider#getSnapshot().mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotClusterStateProvider#getSnapshot().mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new HashMap<>();\n    snapshot.put(\"liveNodes\", liveNodes);\n    if (clusterProperties != null) {\n      snapshot.put(\"clusterProperties\", clusterProperties);\n    }\n    Map<String, Object> stateMap = new HashMap<>();\n    snapshot.put(\"clusterState\", stateMap);\n    stateMap.put(\"version\", clusterState.getZNodeVersion());\n    clusterState.forEachCollection(coll -> {\n      CharArr out = new CharArr();\n      JSONWriter writer = new JSONWriter(out, 2);\n      coll.write(writer);\n      String json = out.toString();\n      try {\n        stateMap.put(coll.getName(), Utils.fromJSON(json.getBytes(\"UTF-8\")));\n      } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"should not happen!\", e);\n      }\n    });\n    return snapshot;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a","date":1589907167,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotClusterStateProvider#getSnapshot().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotClusterStateProvider#getSnapshot().mjava","sourceNew":"  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new HashMap<>();\n    snapshot.put(\"liveNodes\", liveNodes);\n    if (clusterProperties != null) {\n      snapshot.put(\"clusterProperties\", clusterProperties);\n    }\n    Map<String, Object> stateMap = new HashMap<>();\n    snapshot.put(\"clusterState\", stateMap);\n    clusterState.forEachCollection(coll -> {\n      CharArr out = new CharArr();\n      JSONWriter writer = new JSONWriter(out, 2);\n      coll.write(writer);\n      String json = out.toString();\n      try {\n        Map<String, Object> collMap = new LinkedHashMap<>((Map<String, Object>)Utils.fromJSON(json.getBytes(\"UTF-8\")));\n        collMap.put(\"zNodeVersion\", coll.getZNodeVersion());\n        collMap.put(\"zNode\", coll.getZNode());\n        // format compatible with the real /state.json, which uses a mini-ClusterState\n        // consisting of a single collection\n        stateMap.put(coll.getName(), Collections.singletonMap(coll.getName(), collMap));\n      } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"should not happen!\", e);\n      }\n    });\n    return snapshot;\n  }\n\n","sourceOld":"  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new HashMap<>();\n    snapshot.put(\"liveNodes\", liveNodes);\n    if (clusterProperties != null) {\n      snapshot.put(\"clusterProperties\", clusterProperties);\n    }\n    Map<String, Object> stateMap = new HashMap<>();\n    snapshot.put(\"clusterState\", stateMap);\n    stateMap.put(\"version\", clusterState.getZNodeVersion());\n    clusterState.forEachCollection(coll -> {\n      CharArr out = new CharArr();\n      JSONWriter writer = new JSONWriter(out, 2);\n      coll.write(writer);\n      String json = out.toString();\n      try {\n        stateMap.put(coll.getName(), Utils.fromJSON(json.getBytes(\"UTF-8\")));\n      } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"should not happen!\", e);\n      }\n    });\n    return snapshot;\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotClusterStateProvider#getSnapshot().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotClusterStateProvider#getSnapshot().mjava","sourceNew":"  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new HashMap<>();\n    snapshot.put(\"liveNodes\", liveNodes);\n    if (clusterProperties != null) {\n      snapshot.put(\"clusterProperties\", clusterProperties);\n    }\n    Map<String, Object> stateMap = new HashMap<>();\n    snapshot.put(\"clusterState\", stateMap);\n    clusterState.forEachCollection(coll -> {\n      CharArr out = new CharArr();\n      JSONWriter writer = new JSONWriter(out, 2);\n      coll.write(writer);\n      String json = out.toString();\n      try {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> collMap = new LinkedHashMap<>((Map<String, Object>)Utils.fromJSON(json.getBytes(\"UTF-8\")));\n        collMap.put(\"zNodeVersion\", coll.getZNodeVersion());\n        collMap.put(\"zNode\", coll.getZNode());\n        // format compatible with the real /state.json, which uses a mini-ClusterState\n        // consisting of a single collection\n        stateMap.put(coll.getName(), Collections.singletonMap(coll.getName(), collMap));\n      } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"should not happen!\", e);\n      }\n    });\n    return snapshot;\n  }\n\n","sourceOld":"  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new HashMap<>();\n    snapshot.put(\"liveNodes\", liveNodes);\n    if (clusterProperties != null) {\n      snapshot.put(\"clusterProperties\", clusterProperties);\n    }\n    Map<String, Object> stateMap = new HashMap<>();\n    snapshot.put(\"clusterState\", stateMap);\n    clusterState.forEachCollection(coll -> {\n      CharArr out = new CharArr();\n      JSONWriter writer = new JSONWriter(out, 2);\n      coll.write(writer);\n      String json = out.toString();\n      try {\n        Map<String, Object> collMap = new LinkedHashMap<>((Map<String, Object>)Utils.fromJSON(json.getBytes(\"UTF-8\")));\n        collMap.put(\"zNodeVersion\", coll.getZNodeVersion());\n        collMap.put(\"zNode\", coll.getZNode());\n        // format compatible with the real /state.json, which uses a mini-ClusterState\n        // consisting of a single collection\n        stateMap.put(coll.getName(), Collections.singletonMap(coll.getName(), collMap));\n      } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"should not happen!\", e);\n      }\n    });\n    return snapshot;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotClusterStateProvider#getSnapshot().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotClusterStateProvider#getSnapshot().mjava","sourceNew":"  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new HashMap<>();\n    snapshot.put(\"liveNodes\", liveNodes);\n    if (clusterProperties != null) {\n      snapshot.put(\"clusterProperties\", clusterProperties);\n    }\n    Map<String, Object> stateMap = new HashMap<>();\n    snapshot.put(\"clusterState\", stateMap);\n    clusterState.forEachCollection(coll -> {\n      CharArr out = new CharArr();\n      JSONWriter writer = new JSONWriter(out, 2);\n      coll.write(writer);\n      String json = out.toString();\n      try {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> collMap = new LinkedHashMap<>((Map<String, Object>)Utils.fromJSON(json.getBytes(\"UTF-8\")));\n        collMap.put(\"zNodeVersion\", coll.getZNodeVersion());\n        // format compatible with the real /state.json, which uses a mini-ClusterState\n        // consisting of a single collection\n        stateMap.put(coll.getName(), Collections.singletonMap(coll.getName(), collMap));\n      } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"should not happen!\", e);\n      }\n    });\n    return snapshot;\n  }\n\n","sourceOld":"  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new HashMap<>();\n    snapshot.put(\"liveNodes\", liveNodes);\n    if (clusterProperties != null) {\n      snapshot.put(\"clusterProperties\", clusterProperties);\n    }\n    Map<String, Object> stateMap = new HashMap<>();\n    snapshot.put(\"clusterState\", stateMap);\n    clusterState.forEachCollection(coll -> {\n      CharArr out = new CharArr();\n      JSONWriter writer = new JSONWriter(out, 2);\n      coll.write(writer);\n      String json = out.toString();\n      try {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> collMap = new LinkedHashMap<>((Map<String, Object>)Utils.fromJSON(json.getBytes(\"UTF-8\")));\n        collMap.put(\"zNodeVersion\", coll.getZNodeVersion());\n        collMap.put(\"zNode\", coll.getZNode());\n        // format compatible with the real /state.json, which uses a mini-ClusterState\n        // consisting of a single collection\n        stateMap.put(coll.getName(), Collections.singletonMap(coll.getName(), collMap));\n      } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"should not happen!\", e);\n      }\n    });\n    return snapshot;\n  }\n\n","bugFix":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotClusterStateProvider#getSnapshot().mjava","sourceNew":null,"sourceOld":"  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new HashMap<>();\n    snapshot.put(\"liveNodes\", liveNodes);\n    if (clusterProperties != null) {\n      snapshot.put(\"clusterProperties\", clusterProperties);\n    }\n    Map<String, Object> stateMap = new HashMap<>();\n    snapshot.put(\"clusterState\", stateMap);\n    clusterState.forEachCollection(coll -> {\n      CharArr out = new CharArr();\n      JSONWriter writer = new JSONWriter(out, 2);\n      coll.write(writer);\n      String json = out.toString();\n      try {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> collMap = new LinkedHashMap<>((Map<String, Object>)Utils.fromJSON(json.getBytes(\"UTF-8\")));\n        collMap.put(\"zNodeVersion\", coll.getZNodeVersion());\n        // format compatible with the real /state.json, which uses a mini-ClusterState\n        // consisting of a single collection\n        stateMap.put(coll.getName(), Collections.singletonMap(coll.getName(), collMap));\n      } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"should not happen!\", e);\n      }\n    });\n    return snapshot;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}