{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","pathOld":"/dev/null","sourceNew":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = new Integer(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","sourceNew":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = Integer.valueOf(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","sourceOld":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = new Integer(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","sourceNew":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = new Integer(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","sourceOld":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = new Integer(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","sourceNew":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = Integer.valueOf(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","sourceOld":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = Integer.valueOf(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","sourceNew":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = Integer.valueOf(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","sourceOld":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = new Integer(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#promptForInt(Scanner,String,String,Integer,Integer,Integer).mjava","sourceNew":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = Integer.valueOf(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","sourceOld":"    protected Integer promptForInt(Scanner s, String prompt, String label, Integer defVal, Integer min, Integer max) {\n      Integer inputAsInt = null;\n\n      String value = prompt(s, prompt, null /* default is null since we handle that here */);\n      if (value != null) {\n        int attempts = 3;\n        while (value != null && --attempts > 0) {\n          try {\n            inputAsInt = new Integer(value);\n\n            if (min != null) {\n              if (inputAsInt < min) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_SMALL, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n            if (max != null) {\n              if (inputAsInt > max) {\n                value = prompt(s, String.format(Locale.ROOT, PROMPT_NUMBER_TOO_LARGE, inputAsInt, label, min, max, defVal));\n                inputAsInt = null;\n                continue;\n              }\n            }\n\n          } catch (NumberFormatException nfe) {\n            if (verbose)\n              echo(value+\" is not a number!\");\n\n            if (min != null && max != null) {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER_IN_RANGE, label, min, max, defVal));\n            } else {\n              value = prompt(s, String.format(Locale.ROOT, PROMPT_FOR_NUMBER, label, defVal));\n            }\n          }\n        }\n        if (attempts == 0 && value != null && inputAsInt == null)\n          echo(\"Too many failed attempts! Going with default value \"+defVal);\n      }\n\n      return (inputAsInt != null) ? inputAsInt : defVal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["4ca20be81c9284c840498143264e583ccbb8525a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4ca20be81c9284c840498143264e583ccbb8525a","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["4ca20be81c9284c840498143264e583ccbb8525a"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["628903f37b6c442da0d390db1c6af9a0e74d41a7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}