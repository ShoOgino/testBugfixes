{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRangeOptimizer().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRangeOptimizer().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRangeOptimizer().mjava","sourceNew":"  public void testShapeRangeOptimizer() throws ParseException {\n    assertEquals(\"[2014-08 TO 2014-09]\", tree.parseShape(\"[2014-08-01 TO 2014-09-30]\").toString());\n\n    assertEquals(\"2014\", tree.parseShape(\"[2014-01-01 TO 2014-12-31]\").toString());\n\n    assertEquals(\"2014\",    tree.parseShape(\"[2014-01 TO 2014]\").toString());\n    assertEquals(\"2014-01\", tree.parseShape(\"[2014 TO 2014-01]\").toString());\n    assertEquals(\"2014-12\", tree.parseShape(\"[2014-12 TO 2014]\").toString());\n\n    assertEquals(\"[2014 TO 2014-04-06]\", tree.parseShape(\"[2014-01 TO 2014-04-06]\").toString());\n\n    assertEquals(\"*\", tree.parseShape(\"[* TO *]\").toString());\n\n    assertEquals(\"2014-08-01\", tree.parseShape(\"[2014-08-01 TO 2014-08-01]\").toString());\n\n    assertEquals(\"[2014 TO 2014-09-15]\", tree.parseShape(\"[2014 TO 2014-09-15]\").toString());\n\n    assertEquals(\"[* TO 2014-09-15]\", tree.parseShape(\"[* TO 2014-09-15]\").toString());\n  }\n\n","sourceOld":"  public void testShapeRangeOptimizer() throws ParseException {\n    assertEquals(\"[2014-08 TO 2014-09]\", tree.parseShape(\"[2014-08-01 TO 2014-09-30]\").toString());\n\n    assertEquals(\"2014\", tree.parseShape(\"[2014-01-01 TO 2014-12-31]\").toString());\n\n    assertEquals(\"2014\",    tree.parseShape(\"[2014-01 TO 2014]\").toString());\n    assertEquals(\"2014-01\", tree.parseShape(\"[2014 TO 2014-01]\").toString());\n    assertEquals(\"2014-12\", tree.parseShape(\"[2014-12 TO 2014]\").toString());\n\n    assertEquals(\"[2014 TO 2014-04-06]\", tree.parseShape(\"[2014-01 TO 2014-04-06]\").toString());\n\n    assertEquals(\"*\", tree.parseShape(\"[* TO *]\").toString());\n\n    assertEquals(\"2014-08-01\", tree.parseShape(\"[2014-08-01 TO 2014-08-01]\").toString());\n\n    assertEquals(\"[2014 TO 2014-09-15]\", tree.parseShape(\"[2014 TO 2014-09-15]\").toString());\n\n    assertEquals(\"[* TO 2014-09-15]\", tree.parseShape(\"[* TO 2014-09-15]\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRangeOptimizer().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRangeOptimizer().mjava","sourceNew":"  public void testShapeRangeOptimizer() throws ParseException {\n    assertEquals(\"[2014-08 TO 2014-09]\", tree.parseShape(\"[2014-08-01 TO 2014-09-30]\").toString());\n\n    assertEquals(\"2014\", tree.parseShape(\"[2014-01-01 TO 2014-12-31]\").toString());\n\n    assertEquals(\"2014\",    tree.parseShape(\"[2014-01 TO 2014]\").toString());\n    assertEquals(\"2014-01\", tree.parseShape(\"[2014 TO 2014-01]\").toString());\n    assertEquals(\"2014-12\", tree.parseShape(\"[2014-12 TO 2014]\").toString());\n\n    assertEquals(\"[2014 TO 2014-04-06]\", tree.parseShape(\"[2014-01 TO 2014-04-06]\").toString());\n\n    assertEquals(\"*\", tree.parseShape(\"[* TO *]\").toString());\n\n    assertEquals(\"2014-08-01\", tree.parseShape(\"[2014-08-01 TO 2014-08-01]\").toString());\n\n    assertEquals(\"[2014 TO 2014-09-15]\", tree.parseShape(\"[2014 TO 2014-09-15]\").toString());\n\n    assertEquals(\"[* TO 2014-09-15]\", tree.parseShape(\"[* TO 2014-09-15]\").toString());\n  }\n\n","sourceOld":"  public void testShapeRangeOptimizer() throws ParseException {\n    assertEquals(\"[2014-08 TO 2014-09]\", tree.parseShape(\"[2014-08-01 TO 2014-09-30]\").toString());\n\n    assertEquals(\"2014\", tree.parseShape(\"[2014-01-01 TO 2014-12-31]\").toString());\n\n    assertEquals(\"2014\",    tree.parseShape(\"[2014-01 TO 2014]\").toString());\n    assertEquals(\"2014-01\", tree.parseShape(\"[2014 TO 2014-01]\").toString());\n    assertEquals(\"2014-12\", tree.parseShape(\"[2014-12 TO 2014]\").toString());\n\n    assertEquals(\"[2014 TO 2014-04-06]\", tree.parseShape(\"[2014-01 TO 2014-04-06]\").toString());\n\n    assertEquals(\"*\", tree.parseShape(\"[* TO *]\").toString());\n\n    assertEquals(\"2014-08-01\", tree.parseShape(\"[2014-08-01 TO 2014-08-01]\").toString());\n\n    assertEquals(\"[2014 TO 2014-09-15]\", tree.parseShape(\"[2014 TO 2014-09-15]\").toString());\n\n    assertEquals(\"[* TO 2014-09-15]\", tree.parseShape(\"[* TO 2014-09-15]\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}