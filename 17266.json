{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#saveStream(InputStream,File,boolean).mjava","commits":[{"id":"226abb667f503323e0d9473af1883fa03ef3a3fd","date":1163596173,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#saveStream(InputStream,File,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Save a stream to a file.\n     *\n     * @param is         input stream\n     * @param out        output file\n     * @param closeInput if true, close the input stream when done.\n     * @throws Exception\n     */\n    protected void saveStream(InputStream is, File out, boolean closeInput) throws Exception\n    {\n        byte[] buf = new byte[4096];\n        FileOutputStream fos = new FileOutputStream(out);\n        int len = 0;\n        long total = 0L;\n        long time = System.currentTimeMillis();\n        long delta = time;\n        while ((len = is.read(buf)) > 0)\n        {\n            fos.write(buf, 0, len);\n            total += len;\n            time = System.currentTimeMillis();\n            if (time - delta > 5000)\n            {\n                System.err.println(\" - copied \" + total / 1024 + \" kB...\");\n                delta = time;\n            }\n        }\n        fos.flush();\n        fos.close();\n        if (closeInput)\n        {\n            is.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f55f56ccbdfcad354e67291558fdec36be2341c8","date":1244730392,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#saveStream(InputStream,File,boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     * Save a stream to a file.\n     *\n     * @param is         input stream\n     * @param out        output file\n     * @param closeInput if true, close the input stream when done.\n     * @throws Exception\n     */\n    protected void saveStream(InputStream is, File out, boolean closeInput) throws Exception\n    {\n        byte[] buf = new byte[4096];\n        FileOutputStream fos = new FileOutputStream(out);\n        int len = 0;\n        long total = 0L;\n        long time = System.currentTimeMillis();\n        long delta = time;\n        while ((len = is.read(buf)) > 0)\n        {\n            fos.write(buf, 0, len);\n            total += len;\n            time = System.currentTimeMillis();\n            if (time - delta > 5000)\n            {\n                System.err.println(\" - copied \" + total / 1024 + \" kB...\");\n                delta = time;\n            }\n        }\n        fos.flush();\n        fos.close();\n        if (closeInput)\n        {\n            is.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f55f56ccbdfcad354e67291558fdec36be2341c8":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f55f56ccbdfcad354e67291558fdec36be2341c8"]},"commit2Childs":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["f55f56ccbdfcad354e67291558fdec36be2341c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"f55f56ccbdfcad354e67291558fdec36be2341c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}