{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, PrefixCodedTermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.omitTermFreqAndPositions) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        postings = new PulsingDocsAndPositionsEnum(field);\n      }\n\n      return postings.reset(skipDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, TermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.omitTermFreqAndPositions) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        postings = new PulsingDocsAndPositionsEnum(field);\n      }\n\n      return postings.reset(skipDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, PrefixCodedTermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.omitTermFreqAndPositions) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        postings = new PulsingDocsAndPositionsEnum(field);\n      }\n\n      return postings.reset(skipDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.omitTermFreqAndPositions) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        postings = new PulsingDocsAndPositionsEnum(field);\n      }\n\n      return postings.reset(skipDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, PrefixCodedTermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.omitTermFreqAndPositions) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        postings = new PulsingDocsAndPositionsEnum(field);\n      }\n\n      return postings.reset(skipDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.omitTermFreqAndPositions) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        postings = new PulsingDocsAndPositionsEnum(field);\n      }\n\n      return postings.reset(skipDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, PrefixCodedTermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.omitTermFreqAndPositions) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        postings = new PulsingDocsAndPositionsEnum(field);\n      }\n\n      return postings.reset(skipDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}