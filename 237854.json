{"path":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","commits":[{"id":"2baf1cdf7061808d4fe0dadc6f327893cf9024e8","date":1388433703,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(\"UTF-8\");\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(TEMP_DIR,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(\"UTF-8\");\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = TestUtil.createTempFile(\"solrtest-getfile\", \"\");\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(\"UTF-8\");\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(TEMP_DIR,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(\"UTF-8\");\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(dataDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(\"UTF-8\");\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(TEMP_DIR,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(\"UTF-8\");\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(\"UTF-8\");\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = TestUtil.createTempFile(\"solrtest-getfile\", \"\");\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(dataDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(\"UTF-8\");\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(dataDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(\"UTF-8\");\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(dataDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7","date":1490708104,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = \"getFileNode-data\".getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57df4f31144a04dc0e8382aed10ebfa82ef71a4d","date":1490873945,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = \"getFileNode-data\".getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = new String(\"getFileNode-data\").getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testGetFile().mjava","sourceNew":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir().toFile();\n\n    String getNode = \"/getFileNode\";\n    byte [] data = \"getFileNode-data\".getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","sourceOld":"  @Test\n  public void testGetFile() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    String getNode = \"/getFileNode\";\n    byte [] data = \"getFileNode-data\".getBytes(StandardCharsets.UTF_8);\n    this.zkClient.create(getNode, data, CreateMode.PERSISTENT, true);\n\n    File file = new File(tmpDir,\n        \"solrtest-getfile-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"getfile\", getNode, file.getAbsolutePath()};\n    ZkCLI.main(args);\n\n    byte [] readData = FileUtils.readFileToByteArray(file);\n    assertArrayEquals(data, readData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","9d3d365762604952e436b51980101dfc84cc1b3e"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9d3d365762604952e436b51980101dfc84cc1b3e","5eb2511ababf862ea11e10761c70ee560cd84510"],"57df4f31144a04dc0e8382aed10ebfa82ef71a4d":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["2baf1cdf7061808d4fe0dadc6f327893cf9024e8"],"2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2baf1cdf7061808d4fe0dadc6f327893cf9024e8"],"9d3d365762604952e436b51980101dfc84cc1b3e":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2baf1cdf7061808d4fe0dadc6f327893cf9024e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["f4abec28b874149a7223e32cc7a01704c27790de"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["5eb2511ababf862ea11e10761c70ee560cd84510"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"57df4f31144a04dc0e8382aed10ebfa82ef71a4d":[],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2baf1cdf7061808d4fe0dadc6f327893cf9024e8"],"2baf1cdf7061808d4fe0dadc6f327893cf9024e8":["d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["57df4f31144a04dc0e8382aed10ebfa82ef71a4d","2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["57df4f31144a04dc0e8382aed10ebfa82ef71a4d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}