{"path":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#fetchAssociations(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#fetchAssociations(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#fetchAssociations(int).mjava","sourceNew":"  /**\n   * Skips to the given docId, getting the values in pairs of (ordinal, value)\n   * and populating the map\n   * \n   * @param docId\n   *            document id owning the associations\n   * @return true if associations were fetched successfully, false otherwise\n   * @throws IOException\n   *             on error\n   */\n  private boolean fetchAssociations(int docId) throws IOException {\n    // No associations at all? don't bother trying to seek the docID in the\n    // posting\n    if (!hasAssociations) {\n      return false;\n    }\n\n    // No associations for this document? well, nothing to decode than,\n    // return false\n    if (!associationPayloadIter.skipTo(docId)) {\n      return false;\n    }\n\n    // loop over all the values decoded from the payload in pairs.\n    for (;;) {\n      // Get the ordinal\n      long ordinal = associationPayloadIter.nextCategory();\n\n      // if no ordinal - it's the end of data, break the loop\n      if (ordinal > Integer.MAX_VALUE) {\n        break;\n      }\n\n      // get the associated value\n      long association = associationPayloadIter.nextCategory();\n      // If we're at this step - it means we have an ordinal, do we have\n      // an association for it?\n      if (association > Integer.MAX_VALUE) {\n        // No association!!! A Broken Pair!! PANIC!\n        throw new IOException(\n            \"ERROR! Associations should come in pairs of (ordinal, value), yet this payload has an odd number of values! (docId=\"\n                + docId + \")\");\n      }\n      // Populate the map with the given ordinal and association pair\n      ordinalToAssociationMap.put((int) ordinal, (int) association);\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Skips to the given docId, getting the values in pairs of (ordinal, value)\n   * and populating the map\n   * \n   * @param docId\n   *            document id owning the associations\n   * @return true if associations were fetched successfully, false otherwise\n   * @throws IOException\n   *             on error\n   */\n  private boolean fetchAssociations(int docId) throws IOException {\n    // No associations at all? don't bother trying to seek the docID in the\n    // posting\n    if (!hasAssociations) {\n      return false;\n    }\n\n    // No associations for this document? well, nothing to decode than,\n    // return false\n    if (!associationPayloadIter.skipTo(docId)) {\n      return false;\n    }\n\n    // loop over all the values decoded from the payload in pairs.\n    for (;;) {\n      // Get the ordinal\n      long ordinal = associationPayloadIter.nextCategory();\n\n      // if no ordinal - it's the end of data, break the loop\n      if (ordinal > Integer.MAX_VALUE) {\n        break;\n      }\n\n      // get the associated value\n      long association = associationPayloadIter.nextCategory();\n      // If we're at this step - it means we have an ordinal, do we have\n      // an association for it?\n      if (association > Integer.MAX_VALUE) {\n        // No association!!! A Broken Pair!! PANIC!\n        throw new IOException(\n            \"ERROR! Associations should come in pairs of (ordinal, value), yet this payload has an odd number of values! (docId=\"\n                + docId + \")\");\n      }\n      // Populate the map with the given ordinal and association pair\n      ordinalToAssociationMap.put((int) ordinal, (int) association);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#fetchAssociations(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Skips to the given docId, getting the values in pairs of (ordinal, value)\n   * and populating the map\n   * \n   * @param docId\n   *            document id owning the associations\n   * @return true if associations were fetched successfully, false otherwise\n   * @throws IOException\n   *             on error\n   */\n  private boolean fetchAssociations(int docId) throws IOException {\n    // No associations at all? don't bother trying to seek the docID in the\n    // posting\n    if (!hasAssociations) {\n      return false;\n    }\n\n    // No associations for this document? well, nothing to decode than,\n    // return false\n    if (!associationPayloadIter.skipTo(docId)) {\n      return false;\n    }\n\n    // loop over all the values decoded from the payload in pairs.\n    for (;;) {\n      // Get the ordinal\n      long ordinal = associationPayloadIter.nextCategory();\n\n      // if no ordinal - it's the end of data, break the loop\n      if (ordinal > Integer.MAX_VALUE) {\n        break;\n      }\n\n      // get the associated value\n      long association = associationPayloadIter.nextCategory();\n      // If we're at this step - it means we have an ordinal, do we have\n      // an association for it?\n      if (association > Integer.MAX_VALUE) {\n        // No association!!! A Broken Pair!! PANIC!\n        throw new IOException(\n            \"ERROR! Associations should come in pairs of (ordinal, value), yet this payload has an odd number of values! (docId=\"\n                + docId + \")\");\n      }\n      // Populate the map with the given ordinal and association pair\n      ordinalToAssociationMap.put((int) ordinal, (int) association);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#fetchAssociations(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Skips to the given docId, getting the values in pairs of (ordinal, value)\n   * and populating the map\n   * \n   * @param docId\n   *            document id owning the associations\n   * @return true if associations were fetched successfully, false otherwise\n   * @throws IOException\n   *             on error\n   */\n  private boolean fetchAssociations(int docId) throws IOException {\n    // No associations at all? don't bother trying to seek the docID in the\n    // posting\n    if (!hasAssociations) {\n      return false;\n    }\n\n    // No associations for this document? well, nothing to decode than,\n    // return false\n    if (!associationPayloadIter.skipTo(docId)) {\n      return false;\n    }\n\n    // loop over all the values decoded from the payload in pairs.\n    for (;;) {\n      // Get the ordinal\n      long ordinal = associationPayloadIter.nextCategory();\n\n      // if no ordinal - it's the end of data, break the loop\n      if (ordinal > Integer.MAX_VALUE) {\n        break;\n      }\n\n      // get the associated value\n      long association = associationPayloadIter.nextCategory();\n      // If we're at this step - it means we have an ordinal, do we have\n      // an association for it?\n      if (association > Integer.MAX_VALUE) {\n        // No association!!! A Broken Pair!! PANIC!\n        throw new IOException(\n            \"ERROR! Associations should come in pairs of (ordinal, value), yet this payload has an odd number of values! (docId=\"\n                + docId + \")\");\n      }\n      // Populate the map with the given ordinal and association pair\n      ordinalToAssociationMap.put((int) ordinal, (int) association);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}