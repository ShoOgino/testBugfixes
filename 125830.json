{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/params/FacetRequestTest#testGetFacetResultHandlerDifferentTaxonomy().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/FacetRequestTest#testGetFacetResultHandlerDifferentTaxonomy().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/params/FacetRequestTest#testGetFacetResultHandlerDifferentTaxonomy().mjava","sourceNew":"  @Test\n  public void testGetFacetResultHandlerDifferentTaxonomy() throws Exception {\n    FacetRequest fr = new CountFacetRequest(new CategoryPath(\"a\"), 10);\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // create empty indexes, so that LTR ctor won't complain about a missing index.\n    new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, null)).close();\n    new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, null)).close();\n    TaxonomyReader tr1 = new DirectoryTaxonomyReader(dir1);\n    TaxonomyReader tr2 = new DirectoryTaxonomyReader(dir2);\n    FacetResultsHandler frh1 = fr.createFacetResultsHandler(tr1);\n    FacetResultsHandler frh2 = fr.createFacetResultsHandler(tr2);\n    assertTrue(\"should not return the same FacetResultHandler instance for different TaxonomyReader instances\", frh1 != frh2);\n    tr1.close();\n    tr2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetFacetResultHandlerDifferentTaxonomy() throws Exception {\n    FacetRequest fr = new CountFacetRequest(new CategoryPath(\"a\"), 10);\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // create empty indexes, so that LTR ctor won't complain about a missing index.\n    new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, null)).close();\n    new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, null)).close();\n    TaxonomyReader tr1 = new DirectoryTaxonomyReader(dir1);\n    TaxonomyReader tr2 = new DirectoryTaxonomyReader(dir2);\n    FacetResultsHandler frh1 = fr.createFacetResultsHandler(tr1);\n    FacetResultsHandler frh2 = fr.createFacetResultsHandler(tr2);\n    assertTrue(\"should not return the same FacetResultHandler instance for different TaxonomyReader instances\", frh1 != frh2);\n    tr1.close();\n    tr2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/FacetRequestTest#testGetFacetResultHandlerDifferentTaxonomy().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testGetFacetResultHandlerDifferentTaxonomy() throws Exception {\n    FacetRequest fr = new CountFacetRequest(new CategoryPath(\"a\"), 10);\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // create empty indexes, so that LTR ctor won't complain about a missing index.\n    new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, null)).close();\n    new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, null)).close();\n    TaxonomyReader tr1 = new DirectoryTaxonomyReader(dir1);\n    TaxonomyReader tr2 = new DirectoryTaxonomyReader(dir2);\n    FacetResultsHandler frh1 = fr.createFacetResultsHandler(tr1);\n    FacetResultsHandler frh2 = fr.createFacetResultsHandler(tr2);\n    assertTrue(\"should not return the same FacetResultHandler instance for different TaxonomyReader instances\", frh1 != frh2);\n    tr1.close();\n    tr2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}