{"path":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","commits":[{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eae7c5ddae4b9692a6691d2d252ab6a4229457b","date":1325870827,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","sourceNew":"    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","sourceOld":"    @Override\n    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","sourceNew":"    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","sourceOld":"    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}