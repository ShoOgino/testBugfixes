{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,HitsThresholdChecker,BottomValueChecker).mjava","commits":[{"id":"32dc2e73f68d239029f9fe76729eda505b75bb6e","date":1569593453,"type":1,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,HitsThresholdChecker,BottomValueChecker).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,HitsThresholdChecker).mjava","sourceNew":"  /**\n   * Same as above with additional parameters to allow passing in the threshold checker and the bottom value checker.\n   */\n  static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n                                         HitsThresholdChecker hitsThresholdChecker, BottomValueChecker bottomValueChecker) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (hitsThresholdChecker == null) {\n      throw new IllegalArgumentException(\"hitsThresholdChecker should not be null\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, hitsThresholdChecker, bottomValueChecker);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, hitsThresholdChecker, bottomValueChecker);\n    }\n  }\n\n","sourceOld":"  /**\n   * Same as above with an additional parameter to allow passing in the threshold checker\n   */\n  static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n                                         HitsThresholdChecker hitsThresholdChecker) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (hitsThresholdChecker == null) {\n      throw new IllegalArgumentException(\"hitsThresholdChecker should not be null\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, hitsThresholdChecker);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, hitsThresholdChecker);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"807314aa41c10866aec273a0e54fd0d24d8971de","date":1570435832,"type":5,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,HitsThresholdChecker,MaxScoreAccumulator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,HitsThresholdChecker,BottomValueChecker).mjava","sourceNew":"  /**\n   * Same as above with additional parameters to allow passing in the threshold checker and the max score accumulator.\n   */\n  static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n                                         HitsThresholdChecker hitsThresholdChecker, MaxScoreAccumulator minScoreAcc) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (hitsThresholdChecker == null) {\n      throw new IllegalArgumentException(\"hitsThresholdChecker should not be null\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, hitsThresholdChecker, minScoreAcc);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, hitsThresholdChecker, minScoreAcc);\n    }\n  }\n\n","sourceOld":"  /**\n   * Same as above with additional parameters to allow passing in the threshold checker and the bottom value checker.\n   */\n  static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n                                         HitsThresholdChecker hitsThresholdChecker, BottomValueChecker bottomValueChecker) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (hitsThresholdChecker == null) {\n      throw new IllegalArgumentException(\"hitsThresholdChecker should not be null\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, hitsThresholdChecker, bottomValueChecker);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, hitsThresholdChecker, bottomValueChecker);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"807314aa41c10866aec273a0e54fd0d24d8971de":["32dc2e73f68d239029f9fe76729eda505b75bb6e"],"32dc2e73f68d239029f9fe76729eda505b75bb6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"807314aa41c10866aec273a0e54fd0d24d8971de":[],"32dc2e73f68d239029f9fe76729eda505b75bb6e":["807314aa41c10866aec273a0e54fd0d24d8971de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32dc2e73f68d239029f9fe76729eda505b75bb6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["807314aa41c10866aec273a0e54fd0d24d8971de","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}