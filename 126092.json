{"path":"src/java/org/apache/solr/util/SolrPluginUtils#setMinShouldMatch(BooleanQuery,String).mjava","commits":[{"id":"e4b5867a57b32674ce740e66e6a7da8db3d4dd33","date":1148163441,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#setMinShouldMatch(BooleanQuery,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks the number of optional clauses in the query, and compares it\n   * with the specification string to determine the proper value to use.\n   *\n   * <p>\n   * Details about the specification format can be found\n   * <a href=\"doc-files/min-should-match.html\">here</a>\n   * </p>\n   *\n   * <p>A few important notes...</p>\n   * <ul>\n   * <li>\n   * If the calculations based on the specification determine that no\n   * optional clauses are needed, BooleanQuerysetMinMumberShouldMatch\n   * will never be called, but the usual rules about BooleanQueries\n   * still apply at search time (a BooleanQuery containing no required\n   * clauses must still match at least one optional clause)\n   * <li>\n   * <li>\n   * No matter what number the calculation arrives at,\n   * BooleanQuery.setMinShouldMatch() will never be called with a\n   * value greater then the number of optional clauses (or less then 1)\n   * </li>\n   * </ul>\n   *\n   * <p>:TODO: should optimize the case where number is same\n   * as clauses to just make them all \"required\"\n   * </p>\n   */\n  public static void setMinShouldMatch(BooleanQuery q, String spec) {\n\n    int optionalClauses = 0;\n    for (BooleanClause c : q.getClauses()) {\n      if (c.getOccur() == Occur.SHOULD) {\n        optionalClauses++;\n      }\n    }\n\n    int msm = calculateMinShouldMatch(optionalClauses, spec);\n    if (0 < msm) {\n      q.setMinimumNumberShouldMatch(msm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7","3ca415055c1401a2359adfb8f5d3fbf3887f95d7","3ca415055c1401a2359adfb8f5d3fbf3887f95d7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27adc06684d74d32d4d07537a81903ffbf816d27","date":1178648148,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#setMinShouldMatch(BooleanQuery,String).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#setMinShouldMatch(BooleanQuery,String).mjava","sourceNew":"  /**\n   * Checks the number of optional clauses in the query, and compares it\n   * with the specification string to determine the proper value to use.\n   *\n   * <p>\n   * Details about the specification format can be found\n   * <a href=\"doc-files/min-should-match.html\">here</a>\n   * </p>\n   *\n   * <p>A few important notes...</p>\n   * <ul>\n   * <li>\n   * If the calculations based on the specification determine that no\n   * optional clauses are needed, BooleanQuerysetMinMumberShouldMatch\n   * will never be called, but the usual rules about BooleanQueries\n   * still apply at search time (a BooleanQuery containing no required\n   * clauses must still match at least one optional clause)\n   * <li>\n   * <li>\n   * No matter what number the calculation arrives at,\n   * BooleanQuery.setMinShouldMatch() will never be called with a\n   * value greater then the number of optional clauses (or less then 1)\n   * </li>\n   * </ul>\n   *\n   * <p>:TODO: should optimize the case where number is same\n   * as clauses to just make them all \"required\"\n   * </p>\n   */\n  public static void setMinShouldMatch(BooleanQuery q, String spec) {\n\n    int optionalClauses = 0;\n    for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n      if (c.getOccur() == Occur.SHOULD) {\n        optionalClauses++;\n      }\n    }\n\n    int msm = calculateMinShouldMatch(optionalClauses, spec);\n    if (0 < msm) {\n      q.setMinimumNumberShouldMatch(msm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks the number of optional clauses in the query, and compares it\n   * with the specification string to determine the proper value to use.\n   *\n   * <p>\n   * Details about the specification format can be found\n   * <a href=\"doc-files/min-should-match.html\">here</a>\n   * </p>\n   *\n   * <p>A few important notes...</p>\n   * <ul>\n   * <li>\n   * If the calculations based on the specification determine that no\n   * optional clauses are needed, BooleanQuerysetMinMumberShouldMatch\n   * will never be called, but the usual rules about BooleanQueries\n   * still apply at search time (a BooleanQuery containing no required\n   * clauses must still match at least one optional clause)\n   * <li>\n   * <li>\n   * No matter what number the calculation arrives at,\n   * BooleanQuery.setMinShouldMatch() will never be called with a\n   * value greater then the number of optional clauses (or less then 1)\n   * </li>\n   * </ul>\n   *\n   * <p>:TODO: should optimize the case where number is same\n   * as clauses to just make them all \"required\"\n   * </p>\n   */\n  public static void setMinShouldMatch(BooleanQuery q, String spec) {\n\n    int optionalClauses = 0;\n    for (BooleanClause c : q.getClauses()) {\n      if (c.getOccur() == Occur.SHOULD) {\n        optionalClauses++;\n      }\n    }\n\n    int msm = calculateMinShouldMatch(optionalClauses, spec);\n    if (0 < msm) {\n      q.setMinimumNumberShouldMatch(msm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#setMinShouldMatch(BooleanQuery,String).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#setMinShouldMatch(BooleanQuery,String).mjava","sourceNew":"  /**\n   * Checks the number of optional clauses in the query, and compares it\n   * with the specification string to determine the proper value to use.\n   *\n   * <p>\n   * Details about the specification format can be found\n   * <a href=\"doc-files/min-should-match.html\">here</a>\n   * </p>\n   *\n   * <p>A few important notes...</p>\n   * <ul>\n   * <li>\n   * If the calculations based on the specification determine that no\n   * optional clauses are needed, BooleanQuerysetMinMumberShouldMatch\n   * will never be called, but the usual rules about BooleanQueries\n   * still apply at search time (a BooleanQuery containing no required\n   * clauses must still match at least one optional clause)\n   * <li>\n   * <li>\n   * No matter what number the calculation arrives at,\n   * BooleanQuery.setMinShouldMatch() will never be called with a\n   * value greater then the number of optional clauses (or less then 1)\n   * </li>\n   * </ul>\n   *\n   * <p>:TODO: should optimize the case where number is same\n   * as clauses to just make them all \"required\"\n   * </p>\n   */\n  public static void setMinShouldMatch(BooleanQuery q, String spec) {\n\n    int optionalClauses = 0;\n    for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n      if (c.getOccur() == Occur.SHOULD) {\n        optionalClauses++;\n      }\n    }\n\n    int msm = calculateMinShouldMatch(optionalClauses, spec);\n    if (0 < msm) {\n      q.setMinimumNumberShouldMatch(msm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks the number of optional clauses in the query, and compares it\n   * with the specification string to determine the proper value to use.\n   *\n   * <p>\n   * Details about the specification format can be found\n   * <a href=\"doc-files/min-should-match.html\">here</a>\n   * </p>\n   *\n   * <p>A few important notes...</p>\n   * <ul>\n   * <li>\n   * If the calculations based on the specification determine that no\n   * optional clauses are needed, BooleanQuerysetMinMumberShouldMatch\n   * will never be called, but the usual rules about BooleanQueries\n   * still apply at search time (a BooleanQuery containing no required\n   * clauses must still match at least one optional clause)\n   * <li>\n   * <li>\n   * No matter what number the calculation arrives at,\n   * BooleanQuery.setMinShouldMatch() will never be called with a\n   * value greater then the number of optional clauses (or less then 1)\n   * </li>\n   * </ul>\n   *\n   * <p>:TODO: should optimize the case where number is same\n   * as clauses to just make them all \"required\"\n   * </p>\n   */\n  public static void setMinShouldMatch(BooleanQuery q, String spec) {\n\n    int optionalClauses = 0;\n    for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n      if (c.getOccur() == Occur.SHOULD) {\n        optionalClauses++;\n      }\n    }\n\n    int msm = calculateMinShouldMatch(optionalClauses, spec);\n    if (0 < msm) {\n      q.setMinimumNumberShouldMatch(msm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["27adc06684d74d32d4d07537a81903ffbf816d27"],"27adc06684d74d32d4d07537a81903ffbf816d27":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["27adc06684d74d32d4d07537a81903ffbf816d27"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"27adc06684d74d32d4d07537a81903ffbf816d27":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}