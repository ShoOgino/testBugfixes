{"path":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = ZkStateReader.toJSON(zkProps);\n    \n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = ZkStateReader.toJSON(zkProps);\n    \n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = ZkStateReader.toJSON(zkProps);\n    \n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = ZkStateReader.toJSON(zkProps);\n    \n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n    assertEquals(\"value1\", props2.getStr(\"prop1\"));\n    assertEquals(\"value2\", props2.getStr(\"prop2\"));\n    assertEquals(\"value3\", props2.getStr(\"prop3\"));\n    assertEquals(\"value4\", props2.getStr(\"prop4\"));\n    assertEquals(\"value5\", props2.getStr(\"prop5\"));\n    assertEquals(\"value6\", props2.getStr(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = ZkStateReader.toJSON(zkProps);\n    \n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = ZkStateReader.toJSON(zkProps);\n    \n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n    assertEquals(\"value1\", props2.getStr(\"prop1\"));\n    assertEquals(\"value2\", props2.getStr(\"prop2\"));\n    assertEquals(\"value3\", props2.getStr(\"prop3\"));\n    assertEquals(\"value4\", props2.getStr(\"prop4\"));\n    assertEquals(\"value5\", props2.getStr(\"prop5\"));\n    assertEquals(\"value6\", props2.getStr(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = ZkStateReader.toJSON(zkProps);\n    \n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n    assertEquals(\"value1\", props2.getStr(\"prop1\"));\n    assertEquals(\"value2\", props2.getStr(\"prop2\"));\n    assertEquals(\"value3\", props2.getStr(\"prop3\"));\n    assertEquals(\"value4\", props2.getStr(\"prop4\"));\n    assertEquals(\"value5\", props2.getStr(\"prop5\"));\n    assertEquals(\"value6\", props2.getStr(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = Utils.toJSON(zkProps);\n    \n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n    assertEquals(\"value1\", props2.getStr(\"prop1\"));\n    assertEquals(\"value2\", props2.getStr(\"prop2\"));\n    assertEquals(\"value3\", props2.getStr(\"prop3\"));\n    assertEquals(\"value4\", props2.getStr(\"prop4\"));\n    assertEquals(\"value5\", props2.getStr(\"prop5\"));\n    assertEquals(\"value6\", props2.getStr(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = ZkStateReader.toJSON(zkProps);\n    \n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n    assertEquals(\"value1\", props2.getStr(\"prop1\"));\n    assertEquals(\"value2\", props2.getStr(\"prop2\"));\n    assertEquals(\"value3\", props2.getStr(\"prop3\"));\n    assertEquals(\"value4\", props2.getStr(\"prop4\"));\n    assertEquals(\"value5\", props2.getStr(\"prop5\"));\n    assertEquals(\"value6\", props2.getStr(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf","date":1542784803,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = Utils.toJSON(zkProps);\n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n\n    props.forEach((s, o) -> assertEquals(o, props2.get(s)));\n    SimplePostTool.BAOS baos = new SimplePostTool.BAOS();\n    new JavaBinCodec().marshal(zkProps.getProperties(), baos);\n    bytes = baos.toByteArray();\n    System.out.println(\"BIN size : \" + bytes.length);\n    ZkNodeProps props3 = ZkNodeProps.load(bytes);\n    props.forEach((s, o) -> assertEquals(o, props3.get(s)));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = Utils.toJSON(zkProps);\n    \n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n    assertEquals(\"value1\", props2.getStr(\"prop1\"));\n    assertEquals(\"value2\", props2.getStr(\"prop2\"));\n    assertEquals(\"value3\", props2.getStr(\"prop3\"));\n    assertEquals(\"value4\", props2.getStr(\"prop4\"));\n    assertEquals(\"value5\", props2.getStr(\"prop5\"));\n    assertEquals(\"value6\", props2.getStr(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e01fcbda8c04bde654f99836a2f8813f9444f3","date":1589564391,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = Utils.toJSON(zkProps);\n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n\n    props.forEach((s, o) -> assertEquals(o, props2.get(s)));\n    SimplePostTool.BAOS baos = new SimplePostTool.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(zkProps.getProperties(), baos);\n    }\n    bytes = baos.toByteArray();\n    System.out.println(\"BIN size : \" + bytes.length);\n    ZkNodeProps props3 = ZkNodeProps.load(bytes);\n    props.forEach((s, o) -> assertEquals(o, props3.get(s)));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    \n    ZkNodeProps zkProps = new ZkNodeProps(props);\n    byte[] bytes = Utils.toJSON(zkProps);\n    ZkNodeProps props2 = ZkNodeProps.load(bytes);\n\n    props.forEach((s, o) -> assertEquals(o, props2.get(s)));\n    SimplePostTool.BAOS baos = new SimplePostTool.BAOS();\n    new JavaBinCodec().marshal(zkProps.getProperties(), baos);\n    bytes = baos.toByteArray();\n    System.out.println(\"BIN size : \" + bytes.length);\n    ZkNodeProps props3 = ZkNodeProps.load(bytes);\n    props.forEach((s, o) -> assertEquals(o, props3.get(s)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fa64435b5902ce266c23755a4a00691a3285dab8"],"e6e01fcbda8c04bde654f99836a2f8813f9444f3":["668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf"],"fa64435b5902ce266c23755a4a00691a3285dab8":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6e01fcbda8c04bde654f99836a2f8813f9444f3"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"e6e01fcbda8c04bde654f99836a2f8813f9444f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa64435b5902ce266c23755a4a00691a3285dab8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["fa64435b5902ce266c23755a4a00691a3285dab8","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf":["e6e01fcbda8c04bde654f99836a2f8813f9444f3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}