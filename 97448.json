{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9abf8f0376991d8b97ef287f53f330a54bdbdb66","date":1475480039,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    if (entry.format == SPARSE_COMPRESSED) {\n      final SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) ordinals).values;\n      return new SortedDocValues() {\n\n        @Override\n        public int ordValue() {\n          return (int) sparseValues.longValue();\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          return binary.get(ord);\n        }\n\n        @Override\n        public int getValueCount() {\n          return valueCount;\n        }\n\n        @Override\n        public int docID() {\n          return sparseValues.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return sparseValues.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return sparseValues.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return sparseValues.cost();\n        }\n\n      };\n    }\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3607fe579ac3eb5d35b8dc39dffa376491f417f0","date":1475480207,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    if (entry.format == SPARSE_COMPRESSED) {\n      final SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) ordinals).values;\n      return new SortedDocValues() {\n\n        @Override\n        public int ordValue() {\n          return (int) sparseValues.longValue();\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          return binary.get(ord);\n        }\n\n        @Override\n        public int getValueCount() {\n          return valueCount;\n        }\n\n        @Override\n        public int docID() {\n          return sparseValues.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return sparseValues.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return sparseValues.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return sparseValues.cost();\n        }\n\n      };\n    }\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    if (entry.format == SPARSE_COMPRESSED) {\n      final SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) ordinals).values;\n      return new SortedDocValues() {\n\n        @Override\n        public int ordValue() {\n          return (int) sparseValues.longValue();\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          return binary.get(ord);\n        }\n\n        @Override\n        public int getValueCount() {\n          return valueCount;\n        }\n\n        @Override\n        public int docID() {\n          return sparseValues.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return sparseValues.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return sparseValues.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return sparseValues.cost();\n        }\n\n      };\n    }\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    if (entry.format == SPARSE_COMPRESSED) {\n      final SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) ordinals).values;\n      return new SortedDocValues() {\n\n        @Override\n        public int ordValue() {\n          return (int) sparseValues.longValue();\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          return binary.get(ord);\n        }\n\n        @Override\n        public int getValueCount() {\n          return valueCount;\n        }\n\n        @Override\n        public int docID() {\n          return sparseValues.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return sparseValues.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return sparseValues.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return sparseValues.cost();\n        }\n\n      };\n    }\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a870f9917149dc600c4ad4417d615c1795de5864","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a870f9917149dc600c4ad4417d615c1795de5864"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","9abf8f0376991d8b97ef287f53f330a54bdbdb66"],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9abf8f0376991d8b97ef287f53f330a54bdbdb66","3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a870f9917149dc600c4ad4417d615c1795de5864":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}