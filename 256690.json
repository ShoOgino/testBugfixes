{"path":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    for (String fieldTypeName : request.getFieldTypes()) {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    for (String fieldName : request.getFieldNames()) {\n      FieldType fieldType = schema.getFieldType(fieldName);\n      fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99704b4caa3a3ad9eafb2b6e37979551773ece6","date":1241376470,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    for (String fieldTypeName : request.getFieldTypes()) {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    for (String fieldName : request.getFieldNames()) {\n      FieldType fieldType = schema.getFieldType(fieldName);\n      fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e99704b4caa3a3ad9eafb2b6e37979551773ece6":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e99704b4caa3a3ad9eafb2b6e37979551773ece6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e99704b4caa3a3ad9eafb2b6e37979551773ece6":["ad94625fb8d088209f46650c8097196fec67f00c"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["e99704b4caa3a3ad9eafb2b6e37979551773ece6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}