{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","commits":[{"id":"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1","date":1482864726,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      for (String line : mock.lines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9799ebcab48102552d92f7807965a91fb6e116f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a212ea42cce3c5d136142c538cc9a06294c3695","date":1483213592,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      for (String line : mock.lines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4062c48c67245d14e4c4d776cb7b290822ddbcb","date":1483428214,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      for (String line : mock.lines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    int jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1: 0;\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1 + jmxReporter, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    int jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1: 0;\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1 + jmxReporter, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9799ebcab48102552d92f7807965a91fb6e116f7","date":1564676118,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    int jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1: 0;\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                             (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                              \"solrconfig.xml\", \"schema.xml\"));\n                                             \n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1 + jmxReporter, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    int jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1: 0;\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1 + jmxReporter, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","bugFix":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    int jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1: 0;\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                             (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                              \"solrconfig.xml\", \"schema.xml\"));\n                                             \n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1 + jmxReporter, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    int jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1: 0;\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg,\n          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1 + jmxReporter, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    int jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1: 0;\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(home, solrXml);\n      CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                             (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                              \"solrconfig.xml\", \"schema.xml\"));\n                                             \n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1 + jmxReporter, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    int jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1: 0;\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n      CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                             (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                              \"solrconfig.xml\", \"schema.xml\"));\n                                             \n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1 + jmxReporter, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGraphiteReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    int jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1: 0;\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(home, solrXml);\n      CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                             (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                              \"solrconfig.xml\", \"schema.xml\"));\n                                             \n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1 + jmxReporter, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    int jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1: 0;\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    MockGraphite mock = new MockGraphite();\n    try {\n      mock.start();\n      Thread.sleep(1000);\n      // define the port where MockGraphite is running\n      System.setProperty(\"mock-graphite-port\", String.valueOf(mock.port));\n      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-graphitereporter.xml\").toFile(), \"UTF-8\");\n      NodeConfig cfg = SolrXmlConfig.fromString(home, solrXml);\n      CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                             (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                              \"solrconfig.xml\", \"schema.xml\"));\n                                             \n      h.coreName = DEFAULT_TEST_CORENAME;\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n      assertEquals(1 + jmxReporter, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter instanceof SolrGraphiteReporter);\n      Thread.sleep(5000);\n      assertTrue(mock.lines.size() >= 3);\n      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);\n      for (String line : frozenLines) {\n        assertTrue(line, line.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n      }\n    } finally {\n      mock.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"b4062c48c67245d14e4c4d776cb7b290822ddbcb":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1","8a212ea42cce3c5d136142c538cc9a06294c3695"],"8a212ea42cce3c5d136142c538cc9a06294c3695":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["f03e4bed5023ec3ef93a771b8888cae991cf448d","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"816521ebaad5add9cb96bb88c577394e2938c40b":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"f8061ddd97f3352007d927dae445884a6f3d857b":["816521ebaad5add9cb96bb88c577394e2938c40b","9799ebcab48102552d92f7807965a91fb6e116f7"],"e98520789adb1d5ad05afb4956eca0944a929688":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["9799ebcab48102552d92f7807965a91fb6e116f7"],"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9799ebcab48102552d92f7807965a91fb6e116f7":["816521ebaad5add9cb96bb88c577394e2938c40b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","816521ebaad5add9cb96bb88c577394e2938c40b"],"b4062c48c67245d14e4c4d776cb7b290822ddbcb":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"8a212ea42cce3c5d136142c538cc9a06294c3695":["b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["f8061ddd97f3352007d927dae445884a6f3d857b","9799ebcab48102552d92f7807965a91fb6e116f7"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["e98520789adb1d5ad05afb4956eca0944a929688"],"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1":["b4062c48c67245d14e4c4d776cb7b290822ddbcb","8a212ea42cce3c5d136142c538cc9a06294c3695"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f03e4bed5023ec3ef93a771b8888cae991cf448d","6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"9799ebcab48102552d92f7807965a91fb6e116f7":["f8061ddd97f3352007d927dae445884a6f3d857b","ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}