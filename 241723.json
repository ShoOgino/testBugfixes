{"path":"solr/core/src/test/org/apache/solr/schema/ResolveAnalyzerByNameTest#testSchemaLoadingComplexAnalyzer().mjava","commits":[{"id":"2c24804758d67429e3055070a9fe970d4f159954","date":1565508925,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ResolveAnalyzerByNameTest#testSchemaLoadingComplexAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSchemaLoadingComplexAnalyzer() {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertTrue( schema.getFieldTypes().containsKey(\"text\") );\n\n    SimpleOrderedMap<Object> indexAnalyzerProps =\n        (SimpleOrderedMap<Object>)schema.getFieldTypeByName(\"text\")\n            .getNamedPropertyValues(true).get(\"indexAnalyzer\");\n    checkTokenizerName(indexAnalyzerProps, \"whitespace\");\n    checkTokenFilterNames(indexAnalyzerProps, new String[]{\"stop\", \"wordDelimiterGraph\", \"lowercase\", \"keywordMarker\", \"porterStem\", \"removeDuplicates\", \"flattenGraph\"});\n\n    SimpleOrderedMap<Object> queryAnalyzerProps =\n        (SimpleOrderedMap<Object>)schema.getFieldTypeByName(\"text\")\n            .getNamedPropertyValues(true).get(\"queryAnalyzer\");\n    checkTokenizerName(queryAnalyzerProps, \"whitespace\");\n    checkTokenFilterNames(queryAnalyzerProps, new String[]{\"synonymGraph\", \"stop\", \"wordDelimiterGraph\", \"lowercase\", \"keywordMarker\", \"porterStem\", \"removeDuplicates\"});\n\n    assertNotNull(schema.getFieldTypeByName(\"text\").getIndexAnalyzer());\n    assertNotNull(schema.getFieldTypeByName(\"text\").getQueryAnalyzer());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ResolveAnalyzerByNameTest#testSchemaLoadingComplexAnalyzer().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ResolveAnalyzerByNameTest#testSchemaLoadingComplexAnalyzer().mjava","sourceNew":"  @Test\n  public void testSchemaLoadingComplexAnalyzer() {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertTrue( schema.getFieldTypes().containsKey(\"text\") );\n\n    @SuppressWarnings({\"unchecked\"})\n    SimpleOrderedMap<Object> indexAnalyzerProps =\n        (SimpleOrderedMap<Object>)schema.getFieldTypeByName(\"text\")\n            .getNamedPropertyValues(true).get(\"indexAnalyzer\");\n    checkTokenizerName(indexAnalyzerProps, \"whitespace\");\n    checkTokenFilterNames(indexAnalyzerProps, new String[]{\"stop\", \"wordDelimiterGraph\", \"lowercase\", \"keywordMarker\", \"porterStem\", \"removeDuplicates\", \"flattenGraph\"});\n\n    @SuppressWarnings({\"unchecked\"})\n    SimpleOrderedMap<Object> queryAnalyzerProps =\n        (SimpleOrderedMap<Object>)schema.getFieldTypeByName(\"text\")\n            .getNamedPropertyValues(true).get(\"queryAnalyzer\");\n    checkTokenizerName(queryAnalyzerProps, \"whitespace\");\n    checkTokenFilterNames(queryAnalyzerProps, new String[]{\"synonymGraph\", \"stop\", \"wordDelimiterGraph\", \"lowercase\", \"keywordMarker\", \"porterStem\", \"removeDuplicates\"});\n\n    assertNotNull(schema.getFieldTypeByName(\"text\").getIndexAnalyzer());\n    assertNotNull(schema.getFieldTypeByName(\"text\").getQueryAnalyzer());\n  }\n\n","sourceOld":"  @Test\n  public void testSchemaLoadingComplexAnalyzer() {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertTrue( schema.getFieldTypes().containsKey(\"text\") );\n\n    SimpleOrderedMap<Object> indexAnalyzerProps =\n        (SimpleOrderedMap<Object>)schema.getFieldTypeByName(\"text\")\n            .getNamedPropertyValues(true).get(\"indexAnalyzer\");\n    checkTokenizerName(indexAnalyzerProps, \"whitespace\");\n    checkTokenFilterNames(indexAnalyzerProps, new String[]{\"stop\", \"wordDelimiterGraph\", \"lowercase\", \"keywordMarker\", \"porterStem\", \"removeDuplicates\", \"flattenGraph\"});\n\n    SimpleOrderedMap<Object> queryAnalyzerProps =\n        (SimpleOrderedMap<Object>)schema.getFieldTypeByName(\"text\")\n            .getNamedPropertyValues(true).get(\"queryAnalyzer\");\n    checkTokenizerName(queryAnalyzerProps, \"whitespace\");\n    checkTokenFilterNames(queryAnalyzerProps, new String[]{\"synonymGraph\", \"stop\", \"wordDelimiterGraph\", \"lowercase\", \"keywordMarker\", \"porterStem\", \"removeDuplicates\"});\n\n    assertNotNull(schema.getFieldTypeByName(\"text\").getIndexAnalyzer());\n    assertNotNull(schema.getFieldTypeByName(\"text\").getQueryAnalyzer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c24804758d67429e3055070a9fe970d4f159954":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["2c24804758d67429e3055070a9fe970d4f159954"]},"commit2Childs":{"2c24804758d67429e3055070a9fe970d4f159954":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c24804758d67429e3055070a9fe970d4f159954"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}