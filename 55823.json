{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(Polygon2D,Line).mjava","commits":[{"id":"6345300cb90308ddf9579f7a7396a32d98795311","date":1533248257,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(Polygon2D,Line).mjava","pathOld":"/dev/null","sourceNew":"    private boolean testLine(Polygon2D queryPoly, Line line) {\n      double ax, ay, bx, by, temp;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ay = decodeLatitude(encodeLatitude(line.getLat(i)));\n        ax = decodeLongitude(encodeLongitude(line.getLon(i)));\n        by = decodeLatitude(encodeLatitude(line.getLat(j)));\n        bx = decodeLongitude(encodeLongitude(line.getLon(j)));\n        if (ay > by) {\n          temp = ay;\n          ay = by;\n          by = temp;\n          temp = ax;\n          ax = bx;\n          bx = temp;\n        } else if (ay == by) {\n          if (ax > bx) {\n            temp = ay;\n            ay = by;\n            by = temp;\n            temp = ax;\n            ax = bx;\n            bx = temp;\n          }\n        }\n        if (queryPoly.relateTriangle(ax, ay, bx, by, ax, ay) != Relation.CELL_OUTSIDE_QUERY) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(Polygon2D,Line).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(Polygon2D,Line).mjava","sourceNew":"    private boolean testLine(Polygon2D queryPoly, Line line) {\n      double ax, ay, bx, by, temp;\n      Relation r;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ay = quantizeLat(line.getLat(i));\n        ax = quantizeLon(line.getLon(i));\n        by = quantizeLat(line.getLat(j));\n        bx = quantizeLon(line.getLon(j));\n        if (ay > by) {\n          temp = ay;\n          ay = by;\n          by = temp;\n          temp = ax;\n          ax = bx;\n          bx = temp;\n        } else if (ay == by) {\n          if (ax > bx) {\n            temp = ay;\n            ay = by;\n            by = temp;\n            temp = ax;\n            ax = bx;\n            bx = temp;\n          }\n        }\n        r = queryPoly.relateTriangle(ax, ay, bx, by, ax, ay);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    private boolean testLine(Polygon2D queryPoly, Line line) {\n      double ax, ay, bx, by, temp;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ay = decodeLatitude(encodeLatitude(line.getLat(i)));\n        ax = decodeLongitude(encodeLongitude(line.getLon(i)));\n        by = decodeLatitude(encodeLatitude(line.getLat(j)));\n        bx = decodeLongitude(encodeLongitude(line.getLon(j)));\n        if (ay > by) {\n          temp = ay;\n          ay = by;\n          by = temp;\n          temp = ax;\n          ax = bx;\n          bx = temp;\n        } else if (ay == by) {\n          if (ax > bx) {\n            temp = ay;\n            ay = by;\n            by = temp;\n            temp = ax;\n            ax = bx;\n            bx = temp;\n          }\n        }\n        if (queryPoly.relateTriangle(ax, ay, bx, by, ax, ay) != Relation.CELL_OUTSIDE_QUERY) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(Polygon2D,Line).mjava","sourceNew":"    private boolean testLine(EdgeTree queryPoly, Line line) {\n      double ax, ay, bx, by, temp;\n      Relation r;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ay = quantizeLat(line.getLat(i));\n        ax = quantizeLon(line.getLon(i));\n        by = quantizeLat(line.getLat(j));\n        bx = quantizeLon(line.getLon(j));\n        if (ay > by) {\n          temp = ay;\n          ay = by;\n          by = temp;\n          temp = ax;\n          ax = bx;\n          bx = temp;\n        } else if (ay == by) {\n          if (ax > bx) {\n            temp = ay;\n            ay = by;\n            by = temp;\n            temp = ax;\n            ax = bx;\n            bx = temp;\n          }\n        }\n        r = queryPoly.relateTriangle(ax, ay, bx, by, ax, ay);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    private boolean testLine(Polygon2D queryPoly, Line line) {\n      double ax, ay, bx, by, temp;\n      Relation r;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ay = quantizeLat(line.getLat(i));\n        ax = quantizeLon(line.getLon(i));\n        by = quantizeLat(line.getLat(j));\n        bx = quantizeLon(line.getLon(j));\n        if (ay > by) {\n          temp = ay;\n          ay = by;\n          by = temp;\n          temp = ax;\n          ax = bx;\n          bx = temp;\n        } else if (ay == by) {\n          if (ax > bx) {\n            temp = ay;\n            ay = by;\n            by = temp;\n            temp = ax;\n            ax = bx;\n            bx = temp;\n          }\n        }\n        r = queryPoly.relateTriangle(ax, ay, bx, by, ax, ay);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97f74f84954e9fefbac4cb38b9bf339e1757600d":["6345300cb90308ddf9579f7a7396a32d98795311"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6345300cb90308ddf9579f7a7396a32d98795311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4fccad460342b1af30cb328cc8297751a218d78":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e4fccad460342b1af30cb328cc8297751a218d78"]},"commit2Childs":{"97f74f84954e9fefbac4cb38b9bf339e1757600d":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6345300cb90308ddf9579f7a7396a32d98795311"],"6345300cb90308ddf9579f7a7396a32d98795311":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"e4fccad460342b1af30cb328cc8297751a218d78":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}