{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRect#GeoRect(double,double,double,double).mjava","sourceNew":"  public GeoRect(double minLon, double maxLon, double minLat, double maxLat) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","sourceOld":"  public GeoRect(double minLon, double maxLon, double minLat, double maxLat) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRect#GeoRect(double,double,double,double).mjava","sourceNew":"  public GeoRect(double minLon, double maxLon, double minLat, double maxLat) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","sourceOld":"  public GeoRect(double minLon, double maxLon, double minLat, double maxLat) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a bounding box by first validating the provided latitude and longitude coordinates\n   */\n  public GeoRect(double minLon, double maxLon, double minLat, double maxLat) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","sourceOld":"  public GeoRect(double minLon, double maxLon, double minLat, double maxLat) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a bounding box by first validating the provided latitude and longitude coordinates\n   */\n  public GeoRect(double minLon, double maxLon, double minLat, double maxLat) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","sourceOld":"  public GeoRect(double minLon, double maxLon, double minLat, double maxLat) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a bounding box by first validating the provided latitude and longitude coordinates\n   */\n  public GeoRect(double minLat, double maxLat, double minLon, double maxLon) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","sourceOld":"  /**\n   * Constructs a bounding box by first validating the provided latitude and longitude coordinates\n   */\n  public GeoRect(double minLon, double maxLon, double minLat, double maxLat) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0da288484d638cec72e8fc33363e4c0532d35ff0","date":1459115234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a bounding box by first validating the provided latitude and longitude coordinates\n   */\n  public GeoRect(double minLat, double maxLat, double minLon, double maxLon) {\n    GeoUtils.checkLatitude(minLat);\n    GeoUtils.checkLatitude(maxLat);\n    GeoUtils.checkLongitude(minLon);\n    GeoUtils.checkLongitude(maxLon);\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","sourceOld":"  /**\n   * Constructs a bounding box by first validating the provided latitude and longitude coordinates\n   */\n  public GeoRect(double minLat, double maxLat, double minLon, double maxLon) {\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Rectangle#Rectangle(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#GeoRect(double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a bounding box by first validating the provided latitude and longitude coordinates\n   */\n  public Rectangle(double minLat, double maxLat, double minLon, double maxLon) {\n    GeoUtils.checkLatitude(minLat);\n    GeoUtils.checkLatitude(maxLat);\n    GeoUtils.checkLongitude(minLon);\n    GeoUtils.checkLongitude(maxLon);\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","sourceOld":"  /**\n   * Constructs a bounding box by first validating the provided latitude and longitude coordinates\n   */\n  public GeoRect(double minLat, double maxLat, double minLon, double maxLon) {\n    GeoUtils.checkLatitude(minLat);\n    GeoUtils.checkLatitude(maxLat);\n    GeoUtils.checkLongitude(minLon);\n    GeoUtils.checkLongitude(maxLon);\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    assert maxLat >= minLat;\n\n    // NOTE: cannot assert maxLon >= minLon since this rect could cross the dateline\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["937923083e4d137932336fc80f3d78758ff698a6","112d77ac8d3e10a362516ad834c9a11d35c94234"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["af2638813028b254a88b418ebeafb541afb49653"],"0da288484d638cec72e8fc33363e4c0532d35ff0":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["937923083e4d137932336fc80f3d78758ff698a6"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["0da288484d638cec72e8fc33363e4c0532d35ff0"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["0da288484d638cec72e8fc33363e4c0532d35ff0"],"0da288484d638cec72e8fc33363e4c0532d35ff0":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["af2638813028b254a88b418ebeafb541afb49653","1e6acbaae7af722f17204ceccf0f7db5753eccf3","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}