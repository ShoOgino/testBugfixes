{"path":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","pathOld":"src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","sourceNew":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = StringHelper.intern(field);\n    }\n  }\n\n","sourceOld":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = StringHelper.intern(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff1421d1974cfd5072e195bbb63592657da2f66e","date":1285733489,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","sourceNew":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = StringHelper.intern(field);\n    }\n    \n    if( creator != null ) {\n      throw new IllegalStateException( \"creator already exists: \"+creator );\n    }\n    switch( type ) {\n    case BYTE:   creator = new ByteValuesCreator( field, null ); break;\n    case SHORT:  creator = new ShortValuesCreator( field, null ); break;\n    case INT:    creator = new IntValuesCreator( field, null ); break;\n    case LONG:   creator = new LongValuesCreator( field, null ); break;\n    case FLOAT:  creator = new FloatValuesCreator( field, null ); break;\n    case DOUBLE: creator = new DoubleValuesCreator( field, null ); break;\n    }\n  }\n\n","sourceOld":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = StringHelper.intern(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","sourceNew":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = StringHelper.intern(field);\n    }\n    \n    if( creator != null ) {\n      throw new IllegalStateException( \"creator already exists: \"+creator );\n    }\n    switch( type ) {\n    case BYTE:   creator = new ByteValuesCreator( field, null ); break;\n    case SHORT:  creator = new ShortValuesCreator( field, null ); break;\n    case INT:    creator = new IntValuesCreator( field, null ); break;\n    case LONG:   creator = new LongValuesCreator( field, null ); break;\n    case FLOAT:  creator = new FloatValuesCreator( field, null ); break;\n    case DOUBLE: creator = new DoubleValuesCreator( field, null ); break;\n    }\n  }\n\n","sourceOld":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = StringHelper.intern(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","sourceNew":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = field;\n    }\n    \n    if( creator != null ) {\n      throw new IllegalStateException( \"creator already exists: \"+creator );\n    }\n    switch( type ) {\n    case BYTE:   creator = new ByteValuesCreator( field, null ); break;\n    case SHORT:  creator = new ShortValuesCreator( field, null ); break;\n    case INT:    creator = new IntValuesCreator( field, null ); break;\n    case LONG:   creator = new LongValuesCreator( field, null ); break;\n    case FLOAT:  creator = new FloatValuesCreator( field, null ); break;\n    case DOUBLE: creator = new DoubleValuesCreator( field, null ); break;\n    }\n  }\n\n","sourceOld":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = StringHelper.intern(field);\n    }\n    \n    if( creator != null ) {\n      throw new IllegalStateException( \"creator already exists: \"+creator );\n    }\n    switch( type ) {\n    case BYTE:   creator = new ByteValuesCreator( field, null ); break;\n    case SHORT:  creator = new ShortValuesCreator( field, null ); break;\n    case INT:    creator = new IntValuesCreator( field, null ); break;\n    case LONG:   creator = new LongValuesCreator( field, null ); break;\n    case FLOAT:  creator = new FloatValuesCreator( field, null ); break;\n    case DOUBLE: creator = new DoubleValuesCreator( field, null ); break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","sourceNew":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, Type type) {\n    this.type = type;\n    if (field == null) {\n      if (type != Type.SCORE && type != Type.DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = field;\n    }\n    \n    if( creator != null ) {\n      throw new IllegalStateException( \"creator already exists: \"+creator );\n    }\n    switch( type ) {\n    case BYTE:   creator = new ByteValuesCreator( field, null ); break;\n    case SHORT:  creator = new ShortValuesCreator( field, null ); break;\n    case INT:    creator = new IntValuesCreator( field, null ); break;\n    case LONG:   creator = new LongValuesCreator( field, null ); break;\n    case FLOAT:  creator = new FloatValuesCreator( field, null ); break;\n    case DOUBLE: creator = new DoubleValuesCreator( field, null ); break;\n    }\n  }\n\n","sourceOld":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = field;\n    }\n    \n    if( creator != null ) {\n      throw new IllegalStateException( \"creator already exists: \"+creator );\n    }\n    switch( type ) {\n    case BYTE:   creator = new ByteValuesCreator( field, null ); break;\n    case SHORT:  creator = new ShortValuesCreator( field, null ); break;\n    case INT:    creator = new IntValuesCreator( field, null ); break;\n    case LONG:   creator = new LongValuesCreator( field, null ); break;\n    case FLOAT:  creator = new FloatValuesCreator( field, null ); break;\n    case DOUBLE: creator = new DoubleValuesCreator( field, null ); break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","sourceNew":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, Type type) {\n    this.type = type;\n    if (field == null) {\n      if (type != Type.SCORE && type != Type.DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = field;\n    }\n    \n    if( creator != null ) {\n      throw new IllegalStateException( \"creator already exists: \"+creator );\n    }\n    switch( type ) {\n    case BYTE:   creator = new ByteValuesCreator( field, null ); break;\n    case SHORT:  creator = new ShortValuesCreator( field, null ); break;\n    case INT:    creator = new IntValuesCreator( field, null ); break;\n    case LONG:   creator = new LongValuesCreator( field, null ); break;\n    case FLOAT:  creator = new FloatValuesCreator( field, null ); break;\n    case DOUBLE: creator = new DoubleValuesCreator( field, null ); break;\n    }\n  }\n\n","sourceOld":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = StringHelper.intern(field);\n    }\n    \n    if( creator != null ) {\n      throw new IllegalStateException( \"creator already exists: \"+creator );\n    }\n    switch( type ) {\n    case BYTE:   creator = new ByteValuesCreator( field, null ); break;\n    case SHORT:  creator = new ShortValuesCreator( field, null ); break;\n    case INT:    creator = new IntValuesCreator( field, null ); break;\n    case LONG:   creator = new LongValuesCreator( field, null ); break;\n    case FLOAT:  creator = new FloatValuesCreator( field, null ); break;\n    case DOUBLE: creator = new DoubleValuesCreator( field, null ); break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#initFieldType(String,int).mjava","sourceNew":null,"sourceOld":"  // Sets field & type, and ensures field is not NULL unless\n  // type is SCORE or DOC\n  private void initFieldType(String field, int type) {\n    this.type = type;\n    if (field == null) {\n      if (type != SCORE && type != DOC)\n        throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } else {\n      this.field = StringHelper.intern(field);\n    }\n    \n    if( creator != null ) {\n      throw new IllegalStateException( \"creator already exists: \"+creator );\n    }\n    switch( type ) {\n    case BYTE:   creator = new ByteValuesCreator( field, null ); break;\n    case SHORT:  creator = new ShortValuesCreator( field, null ); break;\n    case INT:    creator = new IntValuesCreator( field, null ); break;\n    case LONG:   creator = new LongValuesCreator( field, null ); break;\n    case FLOAT:  creator = new FloatValuesCreator( field, null ); break;\n    case DOUBLE: creator = new DoubleValuesCreator( field, null ); break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["ff1421d1974cfd5072e195bbb63592657da2f66e","090a0320e4de4a3674376aef96b9701f47564f86"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ff1421d1974cfd5072e195bbb63592657da2f66e"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ff1421d1974cfd5072e195bbb63592657da2f66e","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["090a0320e4de4a3674376aef96b9701f47564f86"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["090a0320e4de4a3674376aef96b9701f47564f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ff1421d1974cfd5072e195bbb63592657da2f66e":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ff1421d1974cfd5072e195bbb63592657da2f66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}