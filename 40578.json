{"path":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","commits":[{"id":"81a4a1810b619aea1d002a09c1878b498e20bf33","date":1361142322,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fcc27cf76d4c264e9cd303640fa607a075c0aa","date":1361395784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ba328f7d453c70b167d21f2e69104ea53703f0e","date":1363530959,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"296ac2d6d480817914176a02e7473994fa816eda","date":1363966311,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c3e46d3417c353d7be14509cfab11b315927fe","date":1382292560,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9f516bc5a22bae67c6e431644ffb4bdbaacbcf5","date":1385304530,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard2 in collection \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b753f4bd40fd8ec5276ceae15e867d2dceeb5552","date":1387799061,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    server.shutdown();\n    server = null;\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = createTempDir().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    server.shutdown();\n    server = null;\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    server.shutdown();\n    server = null;\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = createTempDir().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    server.shutdown();\n    server = null;\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    server.shutdown();\n    server = null;\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    server.shutdown();\n    server = null;\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = createTempDir().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    server.shutdown();\n    server = null;\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrClient adminClient = new HttpSolrClient(url1);\n    adminClient.setConnectionTimeout(15000);\n    adminClient.setSoTimeout(60000);\n    adminClient.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    adminClient.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    adminClient.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    adminClient.request(unloadCmd);\n    adminClient.shutdown();\n    adminClient = null;\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    server.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    server.shutdown();\n    server = null;\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n      collection = \"test_unload_shard_and_collection\";\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n      adminClient.request(unloadCmd);\n\n      // there should be only one shard\n      int slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n      long timeoutAt = System.currentTimeMillis() + 45000;\n      while (slices != 1) {\n        if (System.currentTimeMillis() > timeoutAt) {\n          printLayout();\n          fail(\"Expected to find only one slice in \" + collection);\n        }\n\n        Thread.sleep(1000);\n        slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n      }\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n      adminClient.request(unloadCmd);\n    }\n\n    //printLayout();\n    // the collection should be gone\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrClient adminClient = new HttpSolrClient(url1);\n    adminClient.setConnectionTimeout(15000);\n    adminClient.setSoTimeout(60000);\n    adminClient.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    \n    adminClient.request(createCmd);\n    \n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    adminClient.request(unloadCmd);\n    \n    // there should be only one shard\n    int slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    while (slices != 1) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Expected to find only one slice in \" + collection);\n      }\n      \n      Thread.sleep(1000);\n      slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n    }\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    adminClient.request(unloadCmd);\n    adminClient.shutdown();\n    adminClient = null;\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n      collection = \"test_unload_shard_and_collection\";\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n      adminClient.request(unloadCmd);\n\n      // there should be only one shard\n      int slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n      final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS);\n      while (slices != 1) {\n        if (timeout.hasTimedOut()) {\n          printLayout();\n          fail(\"Expected to find only one slice in \" + collection);\n        }\n\n        Thread.sleep(1000);\n        slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n      }\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n      adminClient.request(unloadCmd);\n    }\n\n    //printLayout();\n    // the collection should be gone\n    final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n      collection = \"test_unload_shard_and_collection\";\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n      adminClient.request(unloadCmd);\n\n      // there should be only one shard\n      int slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n      long timeoutAt = System.currentTimeMillis() + 45000;\n      while (slices != 1) {\n        if (System.currentTimeMillis() > timeoutAt) {\n          printLayout();\n          fail(\"Expected to find only one slice in \" + collection);\n        }\n\n        Thread.sleep(1000);\n        slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n      }\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n      adminClient.request(unloadCmd);\n    }\n\n    //printLayout();\n    // the collection should be gone\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7275084e1d7b0abe30ec663515a101fdf56648b8","date":1450100130,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(coreName1);\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(numShards);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(coreName2);\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      final boolean unloadInOrder = random().nextBoolean();\n      final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n      final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should be only one shard\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards-1 /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards-2 /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should be gone\n    final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(2);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n      collection = \"test_unload_shard_and_collection\";\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n      adminClient.request(unloadCmd);\n\n      // there should be only one shard\n      int slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n      final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS);\n      while (slices != 1) {\n        if (timeout.hasTimedOut()) {\n          printLayout();\n          fail(\"Expected to find only one slice in \" + collection);\n        }\n\n        Thread.sleep(1000);\n        slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();\n      }\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n      adminClient.request(unloadCmd);\n    }\n\n    //printLayout();\n    // the collection should be gone\n    final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["175a04d27a2b736171e7e51ca46a03b2aec094d4","add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"175a04d27a2b736171e7e51ca46a03b2aec094d4","date":1452534768,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(coreName1);\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(numShards);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(coreName2);\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      final boolean unloadInOrder = random().nextBoolean();\n      final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n      final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(coreName1);\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(numShards);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(coreName2);\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      final boolean unloadInOrder = random().nextBoolean();\n      final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n      final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should be only one shard\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards-1 /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards-2 /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should be gone\n    final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":["7275084e1d7b0abe30ec663515a101fdf56648b8","bafca15d8e408346a67f4282ad1143b88023893b","cc3b13b430571c2e169f98fe38e1e7666f88522d","8c7cbf6b69f2a4acc536536fe1a152a8ad572d05","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(coreName1);\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(numShards);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(coreName2);\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      final boolean unloadInOrder = random().nextBoolean();\n      final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n      final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(coreName1);\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(numShards);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(coreName2);\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      final boolean unloadInOrder = random().nextBoolean();\n      final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n      final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(coreName1);\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(numShards);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(coreName2);\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      final boolean unloadInOrder = random().nextBoolean();\n      final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n      final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(coreName1);\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(numShards);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(coreName2);\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      final boolean unloadInOrder = random().nextBoolean();\n      final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n      final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    assertEquals(0, CollectionAdminRequest.createCollection(collection, numShards, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setCoreName(coreName1)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard2\")\n        .setCoreName(coreName2)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n\n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    final boolean unloadInOrder = random().nextBoolean();\n    final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n    final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(buildUrl(jettys.get(0).getLocalPort()))) {\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(coreName1);\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(numShards);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(coreName2);\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      final boolean unloadInOrder = random().nextBoolean();\n      final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n      final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    assertEquals(0, CollectionAdminRequest.createCollection(collection, numShards, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setCoreName(coreName1)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard2\")\n        .setCoreName(coreName2)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n\n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    final boolean unloadInOrder = random().nextBoolean();\n    final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n    final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(buildUrl(jettys.get(0).getLocalPort()))) {\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(coreName1);\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(numShards);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(coreName2);\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      final boolean unloadInOrder = random().nextBoolean();\n      final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n      final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setCoreName(coreName1)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard2\")\n        .setCoreName(coreName2)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n\n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    final boolean unloadInOrder = random().nextBoolean();\n    final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n    final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(buildUrl(jettys.get(0).getLocalPort()))) {\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    assertEquals(0, CollectionAdminRequest.createCollection(collection, numShards, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setCoreName(coreName1)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard2\")\n        .setCoreName(coreName2)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n\n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    final boolean unloadInOrder = random().nextBoolean();\n    final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n    final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(buildUrl(jettys.get(0).getLocalPort()))) {\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setCoreName(coreName1)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard2\")\n        .setCoreName(coreName2)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n\n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    final boolean unloadInOrder = random().nextBoolean();\n    final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n    final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(buildUrl(jettys.get(0).getLocalPort()))) {\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    assertEquals(0, CollectionAdminRequest.createCollection(collection, numShards, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setCoreName(coreName1)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard2\")\n        .setCoreName(coreName2)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n\n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    final boolean unloadInOrder = random().nextBoolean();\n    final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n    final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(buildUrl(jettys.get(0).getLocalPort()))) {\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setCoreName(coreName1)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard2\")\n        .setCoreName(coreName2)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n\n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    final boolean unloadInOrder = random().nextBoolean();\n    final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n    final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(buildUrl(jettys.get(0).getLocalPort()))) {\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    // create one leader and one replica\n    Create createCmd = new Create();\n    createCmd.setCoreName(coreName1);\n    createCmd.setCollection(collection);\n    String coreDataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(getDataDir(coreDataDir));\n    createCmd.setNumShards(numShards);\n    \n    SolrClient client = clients.get(0);\n    String url1 = getBaseUrl(client);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(url1)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      adminClient.request(createCmd);\n\n      createCmd = new Create();\n      createCmd.setCoreName(coreName2);\n      createCmd.setCollection(collection);\n      coreDataDir = createTempDir().toFile().getAbsolutePath();\n      createCmd.setDataDir(getDataDir(coreDataDir));\n\n      adminClient.request(createCmd);\n\n      // does not mean they are active and up yet :*\n      waitForRecoveriesToFinish(collection, false);\n\n      final boolean unloadInOrder = random().nextBoolean();\n      final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n      final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add53de9835b2cd1a7a80b4e0036afee171c9fdf","date":1552937136,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setCoreName(coreName1)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard2\")\n        .setCoreName(coreName2)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n\n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    final boolean unloadInOrder = random().nextBoolean();\n    final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n    final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(buildUrl(jettys.get(0).getLocalPort()))) {\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n\n    final int numShards = 2;\n\n    final String collection = \"test_unload_shard_and_collection\";\n\n    final String coreName1 = collection+\"_1\";\n    final String coreName2 = collection+\"_2\";\n\n    assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setCoreName(coreName1)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n    assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard2\")\n        .setCoreName(coreName2)\n        .setNode(jettys.get(0).getNodeName())\n        .process(cloudClient).isSuccess());\n\n\n    // does not mean they are active and up yet :*\n    waitForRecoveriesToFinish(collection, false);\n\n    final boolean unloadInOrder = random().nextBoolean();\n    final String unloadCmdCoreName1 = (unloadInOrder ? coreName1 : coreName2);\n    final String unloadCmdCoreName2 = (unloadInOrder ? coreName2 : coreName1);\n\n    try (HttpSolrClient adminClient = getHttpSolrClient(buildUrl(jettys.get(0).getLocalPort()))) {\n      // now unload one of the two\n      Unload unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName1);\n      adminClient.request(unloadCmd);\n\n      // there should still be two shards (as of SOLR-5209)\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName1, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n\n      // now unload one of the other\n      unloadCmd = new Unload(false);\n      unloadCmd.setCoreName(unloadCmdCoreName2);\n      adminClient.request(unloadCmd);\n      checkCoreNamePresenceAndSliceCount(collection, unloadCmdCoreName2, false /* shouldBePresent */, numShards /* expectedSliceCount */);\n    }\n\n    //printLayout();\n    // the collection should still be present (as of SOLR-5209 replica removal does not cascade to remove the slice and collection)\n    assertTrue(\"No longer found collection \"+collection, getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection));\n  }\n\n","bugFix":["7275084e1d7b0abe30ec663515a101fdf56648b8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9fcc27cf76d4c264e9cd303640fa607a075c0aa":["81a4a1810b619aea1d002a09c1878b498e20bf33"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"197bbedf08450ade98a11f4a0001448059666bec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"b753f4bd40fd8ec5276ceae15e867d2dceeb5552":["e9f516bc5a22bae67c6e431644ffb4bdbaacbcf5"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["4c7856260bc28f285ae7bfefa99b28db4dca6daf","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["296ac2d6d480817914176a02e7473994fa816eda","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4abec28b874149a7223e32cc7a01704c27790de"],"296ac2d6d480817914176a02e7473994fa816eda":["2ba328f7d453c70b167d21f2e69104ea53703f0e"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","81a4a1810b619aea1d002a09c1878b498e20bf33"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","197bbedf08450ade98a11f4a0001448059666bec"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"e9f516bc5a22bae67c6e431644ffb4bdbaacbcf5":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["7275084e1d7b0abe30ec663515a101fdf56648b8"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"28288370235ed02234a64753cdbf0c6ec096304a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","197bbedf08450ade98a11f4a0001448059666bec"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["296ac2d6d480817914176a02e7473994fa816eda"],"7275084e1d7b0abe30ec663515a101fdf56648b8":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["b753f4bd40fd8ec5276ceae15e867d2dceeb5552"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["175a04d27a2b736171e7e51ca46a03b2aec094d4","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a3c3e46d3417c353d7be14509cfab11b315927fe","e9f516bc5a22bae67c6e431644ffb4bdbaacbcf5"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"2ba328f7d453c70b167d21f2e69104ea53703f0e":["c9fcc27cf76d4c264e9cd303640fa607a075c0aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"]},"commit2Childs":{"c9fcc27cf76d4c264e9cd303640fa607a075c0aa":["2ba328f7d453c70b167d21f2e69104ea53703f0e"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["c9fcc27cf76d4c264e9cd303640fa607a075c0aa","09c8567c25c02eeeb3e719841606a1269f3538ca"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"b753f4bd40fd8ec5276ceae15e867d2dceeb5552":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"296ac2d6d480817914176a02e7473994fa816eda":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81a4a1810b619aea1d002a09c1878b498e20bf33","09c8567c25c02eeeb3e719841606a1269f3538ca"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"e9f516bc5a22bae67c6e431644ffb4bdbaacbcf5":["b753f4bd40fd8ec5276ceae15e867d2dceeb5552","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["197bbedf08450ade98a11f4a0001448059666bec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"f4abec28b874149a7223e32cc7a01704c27790de":["bafca15d8e408346a67f4282ad1143b88023893b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"28288370235ed02234a64753cdbf0c6ec096304a":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["e9f516bc5a22bae67c6e431644ffb4bdbaacbcf5","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c3e46d3417c353d7be14509cfab11b315927fe"],"7275084e1d7b0abe30ec663515a101fdf56648b8":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["7275084e1d7b0abe30ec663515a101fdf56648b8"],"2ba328f7d453c70b167d21f2e69104ea53703f0e":["296ac2d6d480817914176a02e7473994fa816eda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","09c8567c25c02eeeb3e719841606a1269f3538ca","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}