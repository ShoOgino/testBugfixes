{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","commits":[{"id":"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7","date":1369910219,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    FacetsAccumulator[] accumulators = new FacetsAccumulator[] {\n      new FacetsAccumulator(fsp, indexReader, taxoReader),\n      new StandardFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new StandardFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (FacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(fsp, new SortedSetDocValuesReaderState(indexReader)));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    fsp = new FacetSearchParams(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    RangeAccumulator ra = new RangeAccumulator(fsp, indexReader);\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","sourceNew":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    TaxonomyFacetsAccumulator[] accumulators = new TaxonomyFacetsAccumulator[] {\n      new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader),\n      new StandardFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new StandardFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (TaxonomyFacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(new SortedSetDocValuesReaderState(indexReader), fsp));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    RangeAccumulator ra = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", new CategoryPath(\"f\"), facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    FacetsAccumulator[] accumulators = new FacetsAccumulator[] {\n      new FacetsAccumulator(fsp, indexReader, taxoReader),\n      new StandardFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new StandardFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (FacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(fsp, new SortedSetDocValuesReaderState(indexReader)));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    fsp = new FacetSearchParams(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    RangeAccumulator ra = new RangeAccumulator(fsp, indexReader);\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","sourceNew":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    TaxonomyFacetsAccumulator[] accumulators = new TaxonomyFacetsAccumulator[] {\n      new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader),\n      new OldFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new OldFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (TaxonomyFacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(new SortedSetDocValuesReaderState(indexReader), fsp));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    RangeAccumulator ra = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", new CategoryPath(\"f\"), facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    TaxonomyFacetsAccumulator[] accumulators = new TaxonomyFacetsAccumulator[] {\n      new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader),\n      new StandardFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new StandardFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (TaxonomyFacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(new SortedSetDocValuesReaderState(indexReader), fsp));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    RangeAccumulator ra = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", new CategoryPath(\"f\"), facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","sourceNew":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    TaxonomyFacetsAccumulator[] accumulators = new TaxonomyFacetsAccumulator[] {\n      new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader),\n      new OldFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new OldFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (TaxonomyFacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(new SortedSetDocValuesReaderState(indexReader), fsp));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    RangeAccumulator ra = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", new CategoryPath(\"f\"), facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    FacetsAccumulator[] accumulators = new FacetsAccumulator[] {\n      new FacetsAccumulator(fsp, indexReader, taxoReader),\n      new StandardFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new StandardFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (FacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(fsp, new SortedSetDocValuesReaderState(indexReader)));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    fsp = new FacetSearchParams(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    RangeAccumulator ra = new RangeAccumulator(fsp, indexReader);\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","sourceNew":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new FacetLabel(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new FacetLabel(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    TaxonomyFacetsAccumulator[] accumulators = new TaxonomyFacetsAccumulator[] {\n      new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader),\n      new OldFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new OldFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (TaxonomyFacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(new SortedSetDocValuesReaderState(indexReader), fsp));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    RangeAccumulator ra = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", new FacetLabel(\"f\"), facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    TaxonomyFacetsAccumulator[] accumulators = new TaxonomyFacetsAccumulator[] {\n      new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader),\n      new OldFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new OldFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (TaxonomyFacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(new SortedSetDocValuesReaderState(indexReader), fsp));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    RangeAccumulator ra = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", new CategoryPath(\"f\"), facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new FacetLabel(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new FacetLabel(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    TaxonomyFacetsAccumulator[] accumulators = new TaxonomyFacetsAccumulator[] {\n      new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader),\n      new OldFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new OldFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (TaxonomyFacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(new SortedSetDocValuesReaderState(indexReader), fsp));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    RangeAccumulator ra = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", new FacetLabel(\"f\"), facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testLabeling().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testLabeling() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n\n    // create the index\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A/1\", '/')));\n    indexWriter.addDocument(doc);\n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    // ask to count a non-existing category to test labeling\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"B\"), 5));\n    \n    final SamplingParams sampleParams = new SamplingParams();\n    sampleParams.setMaxSampleSize(100);\n    sampleParams.setMinSampleSize(100);\n    sampleParams.setSamplingThreshold(100);\n    sampleParams.setOversampleFactor(1.0d);\n    if (random().nextBoolean()) {\n      sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, fsp));\n    }\n    final Sampler sampler = new RandomSampler(sampleParams, random());\n    \n    TaxonomyFacetsAccumulator[] accumulators = new TaxonomyFacetsAccumulator[] {\n      new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader),\n      new OldFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingAccumulator(sampler, fsp, indexReader, taxoReader),\n      new AdaptiveFacetsAccumulator(fsp, indexReader, taxoReader),\n      new SamplingWrapper(new OldFacetsAccumulator(fsp, indexReader, taxoReader), sampler)\n    };\n    \n    for (TaxonomyFacetsAccumulator fa : accumulators) {\n      FacetsCollector fc = FacetsCollector.create(fa);\n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertNotNull(facetResults);\n      assertEquals(\"incorrect label returned for \" + fa, fsp.facetRequests.get(0).categoryPath, facetResults.get(0).getFacetResultNode().label);\n    }\n    \n    try {\n      // SortedSetDocValuesAccumulator cannot even be created in such state\n      assertNull(new SortedSetDocValuesAccumulator(new SortedSetDocValuesReaderState(indexReader), fsp));\n      // if this ever changes, make sure FacetResultNode is labeled correctly \n      fail(\"should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    RangeAccumulator ra = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"f\", new LongRange(\"grr\", 0, true, 1, true)));\n    FacetsCollector fc = FacetsCollector.create(ra);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertNotNull(facetResults);\n    assertEquals(\"incorrect label returned for RangeAccumulator\", new CategoryPath(\"f\"), facetResults.get(0).getFacetResultNode().label);\n\n    IOUtils.close(indexReader, taxoReader);\n\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","ae75def1e2525383b6e1397ed97c44387da9941c"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae75def1e2525383b6e1397ed97c44387da9941c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"ae75def1e2525383b6e1397ed97c44387da9941c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ae75def1e2525383b6e1397ed97c44387da9941c"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}