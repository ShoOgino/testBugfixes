{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eae7c5ddae4b9692a6691d2d252ab6a4229457b","date":1325870827,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.mergedDocCount);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.mergedDocCount);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.mergedDocCount);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}