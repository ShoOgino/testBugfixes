{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#flushAndRefresh().mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#flushAndRefresh().mjava","pathOld":"/dev/null","sourceNew":"  /** Flush all index operations to disk and opens a new near-real-time reader.\n   *  new NRT point, to make the changes visible to searching.  Returns true if there were changes. */\n  public boolean flushAndRefresh() throws IOException {\n    message(\"top: now flushAndRefresh\");\n    Set<String> completedMergeFiles;\n    synchronized(finishedMergedFiles) {\n      completedMergeFiles = Collections.unmodifiableSet(new HashSet<>(finishedMergedFiles));\n    }\n    mgr.maybeRefreshBlocking();\n    boolean result = setCurrentInfos(completedMergeFiles);\n    if (result) {\n      message(\"top: opened NRT reader version=\" + curInfos.getVersion());\n      finishedMergedFiles.removeAll(completedMergeFiles);\n      message(\"flushAndRefresh:  version=\" + curInfos.getVersion() + \" completedMergeFiles=\" + completedMergeFiles + \" finishedMergedFiles=\" + finishedMergedFiles);\n    } else {\n      message(\"top: no changes in flushAndRefresh; still version=\" + curInfos.getVersion());\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec317d5d3de749e12abcc9e6f976d765638fe9e2","date":1454411397,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#flushAndRefresh().mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#flushAndRefresh().mjava","sourceNew":"  /** Flush all index operations to disk and opens a new near-real-time reader.\n   *  new NRT point, to make the changes visible to searching.  Returns true if there were changes. */\n  public boolean flushAndRefresh() throws IOException {\n    message(\"top: now flushAndRefresh\");\n    Set<String> completedMergeFiles;\n    synchronized(finishedMergedFiles) {\n      completedMergeFiles = Collections.unmodifiableSet(new HashSet<>(finishedMergedFiles));\n    }\n    mgr.maybeRefreshBlocking();\n    boolean result = setCurrentInfos(completedMergeFiles);\n    if (result) {\n      message(\"top: opened NRT reader version=\" + curInfos.getVersion());\n      finishedMergedFiles.removeAll(completedMergeFiles);\n      message(\"flushAndRefresh: version=\" + curInfos.getVersion() + \" completedMergeFiles=\" + completedMergeFiles + \" finishedMergedFiles=\" + finishedMergedFiles);\n    } else {\n      message(\"top: no changes in flushAndRefresh; still version=\" + curInfos.getVersion());\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Flush all index operations to disk and opens a new near-real-time reader.\n   *  new NRT point, to make the changes visible to searching.  Returns true if there were changes. */\n  public boolean flushAndRefresh() throws IOException {\n    message(\"top: now flushAndRefresh\");\n    Set<String> completedMergeFiles;\n    synchronized(finishedMergedFiles) {\n      completedMergeFiles = Collections.unmodifiableSet(new HashSet<>(finishedMergedFiles));\n    }\n    mgr.maybeRefreshBlocking();\n    boolean result = setCurrentInfos(completedMergeFiles);\n    if (result) {\n      message(\"top: opened NRT reader version=\" + curInfos.getVersion());\n      finishedMergedFiles.removeAll(completedMergeFiles);\n      message(\"flushAndRefresh:  version=\" + curInfos.getVersion() + \" completedMergeFiles=\" + completedMergeFiles + \" finishedMergedFiles=\" + finishedMergedFiles);\n    } else {\n      message(\"top: no changes in flushAndRefresh; still version=\" + curInfos.getVersion());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#flushAndRefresh().mjava","pathOld":"/dev/null","sourceNew":"  /** Flush all index operations to disk and opens a new near-real-time reader.\n   *  new NRT point, to make the changes visible to searching.  Returns true if there were changes. */\n  public boolean flushAndRefresh() throws IOException {\n    message(\"top: now flushAndRefresh\");\n    Set<String> completedMergeFiles;\n    synchronized(finishedMergedFiles) {\n      completedMergeFiles = Collections.unmodifiableSet(new HashSet<>(finishedMergedFiles));\n    }\n    mgr.maybeRefreshBlocking();\n    boolean result = setCurrentInfos(completedMergeFiles);\n    if (result) {\n      message(\"top: opened NRT reader version=\" + curInfos.getVersion());\n      finishedMergedFiles.removeAll(completedMergeFiles);\n      message(\"flushAndRefresh: version=\" + curInfos.getVersion() + \" completedMergeFiles=\" + completedMergeFiles + \" finishedMergedFiles=\" + finishedMergedFiles);\n    } else {\n      message(\"top: no changes in flushAndRefresh; still version=\" + curInfos.getVersion());\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada8aa544433af9213ef6f19fbb2667729badf9d","date":1564078529,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#flushAndRefresh().mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#flushAndRefresh().mjava","sourceNew":"  /** Flush all index operations to disk and opens a new near-real-time reader.\n   *  new NRT point, to make the changes visible to searching.  Returns true if there were changes. */\n  public boolean flushAndRefresh() throws IOException {\n    message(\"top: now flushAndRefresh\");\n    Set<String> completedMergeFiles;\n    synchronized(finishedMergedFiles) {\n      completedMergeFiles = Set.copyOf(finishedMergedFiles);\n    }\n    mgr.maybeRefreshBlocking();\n    boolean result = setCurrentInfos(completedMergeFiles);\n    if (result) {\n      message(\"top: opened NRT reader version=\" + curInfos.getVersion());\n      finishedMergedFiles.removeAll(completedMergeFiles);\n      message(\"flushAndRefresh: version=\" + curInfos.getVersion() + \" completedMergeFiles=\" + completedMergeFiles + \" finishedMergedFiles=\" + finishedMergedFiles);\n    } else {\n      message(\"top: no changes in flushAndRefresh; still version=\" + curInfos.getVersion());\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Flush all index operations to disk and opens a new near-real-time reader.\n   *  new NRT point, to make the changes visible to searching.  Returns true if there were changes. */\n  public boolean flushAndRefresh() throws IOException {\n    message(\"top: now flushAndRefresh\");\n    Set<String> completedMergeFiles;\n    synchronized(finishedMergedFiles) {\n      completedMergeFiles = Collections.unmodifiableSet(new HashSet<>(finishedMergedFiles));\n    }\n    mgr.maybeRefreshBlocking();\n    boolean result = setCurrentInfos(completedMergeFiles);\n    if (result) {\n      message(\"top: opened NRT reader version=\" + curInfos.getVersion());\n      finishedMergedFiles.removeAll(completedMergeFiles);\n      message(\"flushAndRefresh: version=\" + curInfos.getVersion() + \" completedMergeFiles=\" + completedMergeFiles + \" finishedMergedFiles=\" + finishedMergedFiles);\n    } else {\n      message(\"top: no changes in flushAndRefresh; still version=\" + curInfos.getVersion());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ada8aa544433af9213ef6f19fbb2667729badf9d":["68496c2200e559fb7802f7575427b7a482659afb"],"ec317d5d3de749e12abcc9e6f976d765638fe9e2":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec317d5d3de749e12abcc9e6f976d765638fe9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ada8aa544433af9213ef6f19fbb2667729badf9d"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ada8aa544433af9213ef6f19fbb2667729badf9d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec317d5d3de749e12abcc9e6f976d765638fe9e2":["68496c2200e559fb7802f7575427b7a482659afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["ada8aa544433af9213ef6f19fbb2667729badf9d"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["ec317d5d3de749e12abcc9e6f976d765638fe9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}