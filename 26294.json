{"path":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","commits":[{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List getAllDecendentReaderKeys(Object seed) {\n    List all = new ArrayList(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f63c5771d883c45d43e7d5ac11344582906f7d17","date":1256132259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","pathOld":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List getAllDecendentReaderKeys(Object seed) {\n    List all = new ArrayList(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","pathOld":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","pathOld":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e69f59b863731d864bf3047235e718f0f88f8841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f63c5771d883c45d43e7d5ac11344582906f7d17":["e69f59b863731d864bf3047235e718f0f88f8841"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"e69f59b863731d864bf3047235e718f0f88f8841":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e69f59b863731d864bf3047235e718f0f88f8841"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}