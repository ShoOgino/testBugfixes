{"path":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","sourceNew":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          doc.add(newRangeField(ranges[id][n]));\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public boolean needsScores() { return false; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          doc.add(newRangeField(ranges[id][n]));\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public boolean needsScores() { return false; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdda3f3b5e7c93c42e41bc22701a84c26ddf125a","date":1505850304,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","sourceNew":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          addRange(doc, ranges[id][n]);\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public boolean needsScores() { return false; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          doc.add(newRangeField(ranges[id][n]));\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public boolean needsScores() { return false; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","sourceNew":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          addRange(doc, ranges[id][n]);\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public boolean needsScores() { return false; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          doc.add(newRangeField(ranges[id][n]));\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public boolean needsScores() { return false; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","sourceNew":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          addRange(doc, ranges[id][n]);\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          addRange(doc, ranges[id][n]);\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public boolean needsScores() { return false; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","sourceNew":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          addRange(doc, ranges[id][n]);\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          addRange(doc, ranges[id][n]);\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public boolean needsScores() { return false; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","sourceNew":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          addRange(doc, ranges[id][n]);\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          addRange(doc, ranges[id][n]);\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#verify(Range[][]).mjava","sourceNew":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          addRange(doc, ranges[id][n]);\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \").append(iter).append(\"): \");\n          if (expected == true) {\n            b.append(\"id=\").append(id).append(ranges[id].length > 1 ? \" (MultiValue) \" : \" \").append(\"should match but did not\\n\");\n          } else {\n            b.append(\"id=\").append(id).append(\" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\").append(queryRange).append(\"\\n\");\n          b.append(\" box\").append((ranges[id].length > 1) ? \"es=\" : \"=\").append(ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\").append(queryType).append(\"\\n\");\n          b.append(\" deleted?=\").append(liveDocs != null && liveDocs.get(docID) == false);\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private void verify(Range[][] ranges) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < ranges.length/100) {\n      iwc.setMaxBufferedDocs(ranges.length/100);\n    }\n    Directory dir;\n    if (ranges.length > 50000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id=0; id < ranges.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (ranges[id][0].isMissing == false) {\n        for (int n=0; n<ranges[id].length; ++n) {\n          addRange(doc, ranges[id][n]);\n        }\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 1) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    int dimensions = ranges[0][0].numDimensions();\n    int iters = atLeast(25);\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0; iter<iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n\n      // occasionally test open ended bounding ranges\n      Range queryRange = nextRange(dimensions);\n      int rv = random().nextInt(4);\n      Query query;\n      Range.QueryType queryType;\n      if (rv == 0) {\n        queryType = Range.QueryType.INTERSECTS;\n        query = newIntersectsQuery(queryRange);\n      } else if (rv == 1)  {\n        queryType = Range.QueryType.CONTAINS;\n        query = newContainsQuery(queryRange);\n      } else if (rv == 2) {\n        queryType = Range.QueryType.WITHIN;\n        query = newWithinQuery(queryRange);\n      } else {\n        queryType = Range.QueryType.CROSSES;\n        query = newCrossesQuery(queryRange);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n        private int docBase;\n\n        @Override\n        public void collect(int doc) {\n          hits.set(docBase + doc);\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n      });\n\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID=0; docID<maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (ranges[id][0].isMissing) {\n          expected = false;\n        } else {\n          expected = expectedResult(queryRange, ranges[id], queryType);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"FAIL (iter \" + iter + \"): \");\n          if (expected == true) {\n            b.append(\"id=\" + id + (ranges[id].length > 1 ? \" (MultiValue) \" : \" \") + \"should match but did not\\n\");\n          } else {\n            b.append(\"id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\" queryRange=\" + queryRange + \"\\n\");\n          b.append(\" box\" + ((ranges[id].length > 1) ? \"es=\" : \"=\" ) + ranges[id][0]);\n          for (int n=1; n<ranges[id].length; ++n) {\n            b.append(\", \");\n            b.append(ranges[id][n]);\n          }\n          b.append(\"\\n queryType=\" + queryType + \"\\n\");\n          b.append(\" deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n        }\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ffe681f212e5073c69955b4ad22946794c84940":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["4a52b01a73cacbd2d360240e72d64c0ba353618f","bdda3f3b5e7c93c42e41bc22701a84c26ddf125a"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bdda3f3b5e7c93c42e41bc22701a84c26ddf125a":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["bdda3f3b5e7c93c42e41bc22701a84c26ddf125a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"],"417142ff08fda9cf0b72d5133e63097a166c6458":["bdda3f3b5e7c93c42e41bc22701a84c26ddf125a","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["6240b74b884c5587f2a4062dd27d6c32bf228889","bdda3f3b5e7c93c42e41bc22701a84c26ddf125a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"bdda3f3b5e7c93c42e41bc22701a84c26ddf125a":["6240b74b884c5587f2a4062dd27d6c32bf228889","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["2ffe681f212e5073c69955b4ad22946794c84940"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}