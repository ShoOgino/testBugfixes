{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","commits":[{"id":"19902de501347481fdd1e781868986601e2a7c7b","date":1263326777,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermAttribute termAtt1 = ts1.addAttribute(TermAttribute.class);\n    TermAttribute termAtt2 = ts2.addAttribute(TermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.term(), termAtt2.term());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermAttribute termAtt1 = ts1.addAttribute(TermAttribute.class);\n    TermAttribute termAtt2 = ts2.addAttribute(TermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.term(), termAtt2.term());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermAttribute termAtt1 = ts1.addAttribute(TermAttribute.class);\n    TermAttribute termAtt2 = ts2.addAttribute(TermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.term(), termAtt2.term());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19902de501347481fdd1e781868986601e2a7c7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["19902de501347481fdd1e781868986601e2a7c7b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19902de501347481fdd1e781868986601e2a7c7b"],"19902de501347481fdd1e781868986601e2a7c7b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}