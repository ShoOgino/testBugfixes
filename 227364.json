{"path":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","commits":[{"id":"2e5d36d3b999ce76a1e80788e5d243f513c69d50","date":1359044508,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new Iterator<BytesRef>() {\n                                     BytesRef value = new BytesRef();\n                                     int upto;\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public BytesRef next() {\n                                       if (upto < bytesRefArray.size()) {\n                                         bytesRefArray.get(value, upto);\n                                       } else {\n                                         value.length = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n\n    // nocommit\n    //reset();\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new Iterator<BytesRef>() {\n                                     BytesRef value = new BytesRef();\n                                     int upto;\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public BytesRef next() {\n                                       // nocommit make\n                                       // mutable Number:\n                                       if (upto < bytesRefArray.size()) {\n                                         bytesRefArray.get(value, upto);\n                                       } else {\n                                         value.length = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217deea97c6f9889ae5841798ceb2d62a98bee16","date":1359314941,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new Iterator<BytesRef>() {\n                                     BytesRef value = new BytesRef();\n                                     int upto;\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public BytesRef next() {\n                                       if (upto < bytesRefArray.size()) {\n                                         bytesRefArray.get(value, upto);\n                                       } else {\n                                         value.length = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new Iterator<BytesRef>() {\n                                     BytesRef value = new BytesRef();\n                                     int upto;\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public BytesRef next() {\n                                       if (upto < bytesRefArray.size()) {\n                                         bytesRefArray.get(value, upto);\n                                       } else {\n                                         value.length = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n\n    // nocommit\n    //reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final int size = addedValues;\n\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new Iterator<BytesRef>() {\n                                     RAMInputStream bytesReader;\n                                     AppendingLongBuffer.Iterator iter = lengths.iterator();\n                                     BytesRef value = new BytesRef();\n                                     int upto;\n                                     \n                                     {\n                                       try {\n                                         bytesReader = new RAMInputStream(\"bogus\", bytes);\n                                       } catch (IOException e) {\n                                         throw new RuntimeException(e);\n                                       }\n                                     }\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public BytesRef next() {\n                                       if (upto < size) {\n                                         int length = (int) iter.next();\n                                         value.grow(length);\n                                         try {\n                                           bytesReader.readBytes(value.bytes, 0, length);\n                                         } catch (IOException e) {\n                                           throw new RuntimeException(e);\n                                         }\n                                         value.length = length;\n                                       } else {\n                                         value.length = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new Iterator<BytesRef>() {\n                                     BytesRef value = new BytesRef();\n                                     int upto;\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public BytesRef next() {\n                                       if (upto < bytesRefArray.size()) {\n                                         bytesRefArray.get(value, upto);\n                                       } else {\n                                         value.length = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75a2078fb7a7fce496e15f7a7ea829a778def1a5","date":1359508846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc);                                 \n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final int size = addedValues;\n\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new Iterator<BytesRef>() {\n                                     RAMInputStream bytesReader;\n                                     AppendingLongBuffer.Iterator iter = lengths.iterator();\n                                     BytesRef value = new BytesRef();\n                                     int upto;\n                                     \n                                     {\n                                       try {\n                                         bytesReader = new RAMInputStream(\"bogus\", bytes);\n                                       } catch (IOException e) {\n                                         throw new RuntimeException(e);\n                                       }\n                                     }\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public BytesRef next() {\n                                       if (upto < size) {\n                                         int length = (int) iter.next();\n                                         value.grow(length);\n                                         try {\n                                           bytesReader.readBytes(value.bytes, 0, length);\n                                         } catch (IOException e) {\n                                           throw new RuntimeException(e);\n                                         }\n                                         value.length = length;\n                                       } else {\n                                         value.length = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc);                                 \n                                }\n                              });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c024a3e8fec0a081cbf9539845db12f0dc84d029","date":1376654698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    bytes.freeze(false);\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc);                                 \n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc);                                 \n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ceca04c06658aeb20e0a319ade784ad9a0576dd","date":1376662287,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    bytes.freeze(false);\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc);                                 \n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc);                                 \n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    bytes.freeze(false);\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc);                                 \n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc);                                 \n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    bytes.freeze(false);\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc);                                 \n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5844844466689b1121b12ccb467623f894eb269d","date":1475600453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(lengths, maxLength, bytes.getDataInput(), docsWithField);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(lengths, maxLength, bytes.getDataInput(), docsWithField);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new BytesIterator(maxDoc, lengths);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceec64003e8cc400e862d44c8589a41570432ab9","date":1478783055,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(lengths, maxLength, bytes.getDataInput(), docsWithField.iterator());\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(lengths, maxLength, bytes.getDataInput(), docsWithField);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(lengths, maxLength, bytes.getDataInput(), docsWithField.iterator());\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(lengths, maxLength, bytes.getDataInput(), docsWithField);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    final SortingLeafReader.CachedBinaryDVs sorted;\n    if (sortMap != null) {\n      sorted = sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedBinaryDocValues(lengths, maxLength, bytes.getDataInput(), docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  if (sorted == null) {\n                                    return new BufferedBinaryDocValues(lengths, maxLength, bytes.getDataInput(), docsWithField.iterator());\n                                  } else {\n                                    return new SortingLeafReader.SortingBinaryDocValues(sorted);\n                                  }\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(lengths, maxLength, bytes.getDataInput(), docsWithField.iterator());\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    bytes.freeze(false);\n    final PackedLongValues lengths = this.lengths.build();\n    dvConsumer.addBinaryField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public BinaryDocValues getBinary(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedBinaryDocValues(lengths, maxLength, bytes.getDataInput(), docsWithField.iterator());\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"5844844466689b1121b12ccb467623f894eb269d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b0267c69e2456a3477a1ad785723f2135da3117e":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0267c69e2456a3477a1ad785723f2135da3117e","5844844466689b1121b12ccb467623f894eb269d"],"2ceca04c06658aeb20e0a319ade784ad9a0576dd":["d4d69c535930b5cce125cff868d40f6373dc27d4","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","b0267c69e2456a3477a1ad785723f2135da3117e"],"217deea97c6f9889ae5841798ceb2d62a98bee16":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75a2078fb7a7fce496e15f7a7ea829a778def1a5"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b06445ae1731e049327712db0454e5643ca9b7fe":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b0267c69e2456a3477a1ad785723f2135da3117e","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["b0267c69e2456a3477a1ad785723f2135da3117e"],"ceec64003e8cc400e862d44c8589a41570432ab9":["5844844466689b1121b12ccb467623f894eb269d"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["217deea97c6f9889ae5841798ceb2d62a98bee16"],"c024a3e8fec0a081cbf9539845db12f0dc84d029":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["ceec64003e8cc400e862d44c8589a41570432ab9"],"75a2078fb7a7fce496e15f7a7ea829a778def1a5":["847d1294c8ff2f0172af20892ef98a1c6a952e09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["c024a3e8fec0a081cbf9539845db12f0dc84d029"]},"commit2Childs":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"5844844466689b1121b12ccb467623f894eb269d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"b0267c69e2456a3477a1ad785723f2135da3117e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"2ceca04c06658aeb20e0a319ade784ad9a0576dd":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"217deea97c6f9889ae5841798ceb2d62a98bee16":["847d1294c8ff2f0172af20892ef98a1c6a952e09"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","2ceca04c06658aeb20e0a319ade784ad9a0576dd","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["217deea97c6f9889ae5841798ceb2d62a98bee16"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5844844466689b1121b12ccb467623f894eb269d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ceec64003e8cc400e862d44c8589a41570432ab9":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["75a2078fb7a7fce496e15f7a7ea829a778def1a5"],"c024a3e8fec0a081cbf9539845db12f0dc84d029":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","2ceca04c06658aeb20e0a319ade784ad9a0576dd","aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"75a2078fb7a7fce496e15f7a7ea829a778def1a5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","2ceca04c06658aeb20e0a319ade784ad9a0576dd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}