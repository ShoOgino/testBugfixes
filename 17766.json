{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","commits":[{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"/dev/null","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        final Bits delDocs = MultiFields.getLiveDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"06584e6e98d592b34e1329b384182f368d2025e8":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"efb7a19703a037c29e30440260d393500febc1f4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["efb7a19703a037c29e30440260d393500febc1f4"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84b590669deb3d3a471cec6cb13b104b2ee94418"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["06584e6e98d592b34e1329b384182f368d2025e8"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["efb7a19703a037c29e30440260d393500febc1f4","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["84b590669deb3d3a471cec6cb13b104b2ee94418"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3cc749c053615f5871f3b95715fe292f34e70a53"],"efb7a19703a037c29e30440260d393500febc1f4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["06584e6e98d592b34e1329b384182f368d2025e8","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","84b590669deb3d3a471cec6cb13b104b2ee94418"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}