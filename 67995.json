{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","sourceNew":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","sourceOld":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","sourceNew":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().bytes[0]);\n    }\n  }\n\n","sourceOld":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","sourceNew":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    ts.reset();\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().bytes[0]);\n    }\n  }\n\n","sourceOld":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().bytes[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","sourceNew":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    ts.reset();\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().bytes[0]);\n    }\n  }\n\n","sourceOld":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().bytes[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["76fa9933adb0556e752e8af9734c4d0ae14622ff","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c1b87b155748a27fbed84a0ffb3f8799177451e"]},"commit2Childs":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["4c1b87b155748a27fbed84a0ffb3f8799177451e","05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}