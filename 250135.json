{"path":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n\n    try (HttpSolrClient client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n\n    try (HttpSolrClient client = getHttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n\n    try (HttpSolrClient client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n\n    try (HttpSolrClient client = getHttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n\n    try (HttpSolrClient client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n\n    try (HttpSolrClient client = getHttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n\n    try (HttpSolrClient client = getHttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(port) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n\n    try (HttpSolrClient client = getHttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\")) {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af87133b5bdb246b06c4321f36cd76d947357ab6","date":1482195253,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias\"));\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias\"));\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 5);\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 2);\n\n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 5);\n\n    // alias pointing to alias (one level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 3);\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias\"));\n\n    // search for alias\n    QueryResponse res = cluster.getSolrClient().query(\"testalias\", new SolrQuery(\"*:*\"));\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(new SolrQuery(\"*:*\"));\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    // search with new cloud client\n    try (CloudSolrClient cloudSolrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean())) {\n      cloudSolrClient.setParallelUpdates(random().nextBoolean());\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // Try with setDefaultCollection\n      query = new SolrQuery(\"*:*\");\n      cloudSolrClient.setDefaultCollection(\"testalias\");\n      res = cloudSolrClient.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // search for alias with random non cloud client\n    jetty = cluster.getRandomJetty(random());\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"testalias\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n\n      // now without collections param\n      query = new SolrQuery(\"*:*\");\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    \n    // a second alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/testalias\")) {\n      new UpdateRequest()\n          .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias\");\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    }\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cluster.getSolrClient().query(query);\n    assertEquals(6, res.getResults().getNumFound());\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"26da72979d4068fce4939aeb5c8e16773874f38c","date":1510957208,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias6\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias6\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    // create alias, collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 5);\n\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 2);\n\n    // set alias to two collections\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection1,collection2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 5);\n\n    // alias pointing to alias (one level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 3);\n\n    CollectionAdminRequest.createAlias(\"testalias\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias\"));\n  }\n\n","bugFix":null,"bugIntro":["f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc","date":1512662150,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias6\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias6\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias6\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","bugFix":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","26da72979d4068fce4939aeb5c8e16773874f38c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias6\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias6\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias6\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db3a95645baea7e03cf8ae62147cba606639004e","date":1525745850,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias6\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias6\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"collection1\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2\", 1, 1);\n    \n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    Thread.sleep(100);\n    \n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias6\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias6\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","bugFix":["5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"813335f324f8bd40ae4d83d8391674b42b536cc0","date":1555591986,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"collection1\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2\", 1, 1);\n    \n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    Thread.sleep(100);\n    \n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6. this should fail because it's a multi-collection non-routed alias\n    try {\n      new UpdateRequest()\n          .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias6\");\n      fail(\"Update to a multi-collection non-routed alias should fail\");\n    } catch (SolrException e) {\n      // expected\n      assertEquals(e.toString(), SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"collection1\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2\", 1, 1);\n    \n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    Thread.sleep(100);\n    \n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6, which will route to collection2 because it's the first\n    new UpdateRequest()\n        .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias6\"); // thus gets added to collection2\n    searchSeveralWays(\"collection2\", new SolrQuery(\"*:*\"), 4);\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6e5eb1137994855cee975febe08850fcb7726d3","date":1558358375,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"collection1\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2\", 1, 1);\n    \n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    // make sure there's only one level of alias\n    CollectionAdminRequest.deleteAlias(\"collection1\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // verify proper resolution on the server-side\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.aliasesManager.update();\n    Aliases aliases = zkStateReader.getAliases();\n    List<String> collections = aliases.resolveAliases(\"testalias1\");\n    assertEquals(collections.toString(), 1, collections.size());\n    assertTrue(collections.contains(\"collection1\"));\n\n    // ensure that the alias is visible in the API\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    Thread.sleep(100);\n    \n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6. this should fail because it's a multi-collection non-routed alias\n    try {\n      new UpdateRequest()\n          .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias6\");\n      fail(\"Update to a multi-collection non-routed alias should fail\");\n    } catch (SolrException e) {\n      // expected\n      assertEquals(e.toString(), SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"collection1\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2\", 1, 1);\n    \n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // ensure that the alias has been registered\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    Thread.sleep(100);\n    \n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6. this should fail because it's a multi-collection non-routed alias\n    try {\n      new UpdateRequest()\n          .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias6\");\n      fail(\"Update to a multi-collection non-routed alias should fail\");\n    } catch (SolrException e) {\n      // expected\n      assertEquals(e.toString(), SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc21266829f9cffb210032f5808ce3a630780ab3","date":1560248034,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"collection1\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2\", 1, 1);\n    \n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    // make sure there's only one level of alias\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    int lastVersion = zkStateReader.aliasesManager.getAliases().getZNodeVersion();\n\n    CollectionAdminRequest.deleteAlias(\"collection1\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // verify proper resolution on the server-side\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n\n    Aliases aliases = zkStateReader.getAliases();\n    List<String> collections = aliases.resolveAliases(\"testalias1\");\n    assertEquals(collections.toString(), 1, collections.size());\n    assertTrue(collections.contains(\"collection1\"));\n\n    // ensure that the alias is visible in the API\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    \n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6. this should fail because it's a multi-collection non-routed alias\n    try {\n      new UpdateRequest()\n          .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias6\");\n      fail(\"Update to a multi-collection non-routed alias should fail\");\n    } catch (SolrException e) {\n      // expected\n      assertEquals(e.toString(), SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n      lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    }\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"collection1\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2\", 1, 1);\n    \n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    // make sure there's only one level of alias\n    CollectionAdminRequest.deleteAlias(\"collection1\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // verify proper resolution on the server-side\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.aliasesManager.update();\n    Aliases aliases = zkStateReader.getAliases();\n    List<String> collections = aliases.resolveAliases(\"testalias1\");\n    assertEquals(collections.toString(), 1, collections.size());\n    assertTrue(collections.contains(\"collection1\"));\n\n    // ensure that the alias is visible in the API\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    Thread.sleep(100);\n    \n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    sleepToAllowZkPropagation();\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6. this should fail because it's a multi-collection non-routed alias\n    try {\n      new UpdateRequest()\n          .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias6\");\n      fail(\"Update to a multi-collection non-routed alias should fail\");\n    } catch (SolrException e) {\n      // expected\n      assertEquals(e.toString(), SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n    }\n    sleepToAllowZkPropagation();\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(\"collection1\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2\", 1, 1);\n\n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    // make sure there's only one level of alias\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    int lastVersion = zkStateReader.aliasesManager.getAliases().getZNodeVersion();\n\n    CollectionAdminRequest.deleteAlias(\"collection1\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // verify proper resolution on the server-side\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n\n    Aliases aliases = zkStateReader.getAliases();\n    List<String> collections = aliases.resolveAliases(\"testalias1\");\n    assertEquals(collections.toString(), 1, collections.size());\n    assertTrue(collections.contains(\"collection1\"));\n\n    // ensure that the alias is visible in the API\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6. this should fail because it's a multi-collection non-routed alias\n    try {\n      new UpdateRequest()\n          .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias6\");\n      fail(\"Update to a multi-collection non-routed alias should fail\");\n    } catch (SolrException e) {\n      // expected\n      assertEquals(e.toString(), SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n      lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    }\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest.createCollection(\"collection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"collection2\", \"conf\", 1, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"collection1\", 2, 2);\n    cluster.waitForActiveCollection(\"collection2\", 1, 1);\n    \n    waitForState(\"Expected collection1 to be created with 2 shards and 1 replica\", \"collection1\", clusterShape(2, 2));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", \"collection2\", clusterShape(1, 1));\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"7\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .add(\"id\", \"8\", \"a_t\", \"humpty dumpy2 sat on a walled\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    new UpdateRequest()\n        .add(\"id\", \"9\", \"a_t\", \"humpty dumpy sat on a wall\")\n        .add(\"id\", \"10\", \"a_t\", \"humpty dumpy3 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"collection2\");\n\n    ///////////////\n    // make sure there's only one level of alias\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    int lastVersion = zkStateReader.aliasesManager.getAliases().getZNodeVersion();\n\n    CollectionAdminRequest.deleteAlias(\"collection1\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias1\", \"collection1\").process(cluster.getSolrClient());\n\n    // verify proper resolution on the server-side\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n\n    Aliases aliases = zkStateReader.getAliases();\n    List<String> collections = aliases.resolveAliases(\"testalias1\");\n    assertEquals(collections.toString(), 1, collections.size());\n    assertTrue(collections.contains(\"collection1\"));\n\n    // ensure that the alias is visible in the API\n    assertEquals(\"collection1\",\n        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get(\"testalias1\"));\n\n    // search for alias\n    searchSeveralWays(\"testalias1\", new SolrQuery(\"*:*\"), 3);\n\n    // Use a comma delimited list, one of which is an alias\n    searchSeveralWays(\"testalias1,collection2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // test alias pointing to two collections.  collection2 first because it's not on every node\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2,collection1\").process(cluster.getSolrClient());\n\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    \n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 5);\n\n    ///////////////\n    // update alias\n    CollectionAdminRequest.createAlias(\"testalias2\", \"collection2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n\n    searchSeveralWays(\"testalias2\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // alias pointing to alias.  One level of indirection is supported; more than that is not (may or may not work)\n    CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    searchSeveralWays(\"testalias3\", new SolrQuery(\"*:*\"), 2);\n\n    ///////////////\n    // Test 2 aliases pointing to the same collection\n    CollectionAdminRequest.createAlias(\"testalias4\", \"collection2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    CollectionAdminRequest.createAlias(\"testalias5\", \"collection2\").process(cluster.getSolrClient());\n    lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n\n    // add one document to testalias4, thus to collection2\n    new UpdateRequest()\n        .add(\"id\", \"11\", \"a_t\", \"humpty dumpy4 sat on a walls\")\n        .commit(cluster.getSolrClient(), \"testalias4\"); // thus gets added to collection2\n\n    searchSeveralWays(\"testalias4\", new SolrQuery(\"*:*\"), 3);\n    //searchSeveralWays(\"testalias4,testalias5\", new SolrQuery(\"*:*\"), 3);\n\n    ///////////////\n    // use v2 API\n    new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\\\"create-alias\\\": {\\\"name\\\": \\\"testalias6\\\", collections:[\\\"collection2\\\",\\\"collection1\\\"]}}\")\n        .build().process(cluster.getSolrClient());\n\n    searchSeveralWays(\"testalias6\", new SolrQuery(\"*:*\"), 6);\n\n    // add one document to testalias6. this should fail because it's a multi-collection non-routed alias\n    try {\n      new UpdateRequest()\n          .add(\"id\", \"12\", \"a_t\", \"humpty dumpy5 sat on a walls\")\n          .commit(cluster.getSolrClient(), \"testalias6\");\n      fail(\"Update to a multi-collection non-routed alias should fail\");\n    } catch (SolrException e) {\n      // expected\n      assertEquals(e.toString(), SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    ///////////////\n    for (int i = 1; i <= 6 ; i++) {\n      CollectionAdminRequest.deleteAlias(\"testalias\" + i).process(cluster.getSolrClient());\n      lastVersion = waitForAliasesUpdate(lastVersion, zkStateReader);\n    }\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      q.set(\"collection\", \"testalias1\");\n      cluster.getSolrClient().query(q);\n    });\n    assertTrue(\"Unexpected exception message: \" + e.getMessage(), e.getMessage().contains(\"Collection not found: testalias1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"26da72979d4068fce4939aeb5c8e16773874f38c":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["a64b273d51a6540272668680ece9f8b686ff0004"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["db3a95645baea7e03cf8ae62147cba606639004e"],"a64b273d51a6540272668680ece9f8b686ff0004":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc":["26da72979d4068fce4939aeb5c8e16773874f38c"],"fc21266829f9cffb210032f5808ce3a630780ab3":["b6e5eb1137994855cee975febe08850fcb7726d3"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","1967bed916cc89da82a1c2085f27976da6d08cbd"],"417142ff08fda9cf0b72d5133e63097a166c6458":["26da72979d4068fce4939aeb5c8e16773874f38c","f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","af87133b5bdb246b06c4321f36cd76d947357ab6"],"b6e5eb1137994855cee975febe08850fcb7726d3":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db3a95645baea7e03cf8ae62147cba606639004e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["fc21266829f9cffb210032f5808ce3a630780ab3"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["abb23fcc2461782ab204e61213240feb77d355aa"],"813335f324f8bd40ae4d83d8391674b42b536cc0":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"26da72979d4068fce4939aeb5c8e16773874f38c":["f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc","417142ff08fda9cf0b72d5133e63097a166c6458"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["26da72979d4068fce4939aeb5c8e16773874f38c"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["af87133b5bdb246b06c4321f36cd76d947357ab6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a64b273d51a6540272668680ece9f8b686ff0004":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"abb23fcc2461782ab204e61213240feb77d355aa":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc":["417142ff08fda9cf0b72d5133e63097a166c6458"],"fc21266829f9cffb210032f5808ce3a630780ab3":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"417142ff08fda9cf0b72d5133e63097a166c6458":["db3a95645baea7e03cf8ae62147cba606639004e"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"b6e5eb1137994855cee975febe08850fcb7726d3":["fc21266829f9cffb210032f5808ce3a630780ab3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"db3a95645baea7e03cf8ae62147cba606639004e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["1967bed916cc89da82a1c2085f27976da6d08cbd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"813335f324f8bd40ae4d83d8391674b42b536cc0":["b6e5eb1137994855cee975febe08850fcb7726d3"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}