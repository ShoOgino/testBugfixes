{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","sourceNew":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","sourceNew":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","sourceNew":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}