{"path":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","sourceNew":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery.clone();\n      if (boostFields.size() > 0) {\n        List clauses = boostedQuery.clauses();\n        for( Object o : clauses ) {\n          TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n          Float b = this.boostFields.get(q.getTerm().field());\n          if (b != null) {\n            q.setBoost(b*q.getBoost());\n          }\n        }\n      }\n      return boostedQuery;\n    }\n\n","sourceOld":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery.clone();\n      if (boostFields.size() > 0) {\n        List clauses = boostedQuery.clauses();\n        for( Object o : clauses ) {\n          TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n          Float b = this.boostFields.get(q.getTerm().field());\n          if (b != null) {\n            q.setBoost(b*q.getBoost());\n          }\n        }\n      }\n      return boostedQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","sourceNew":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery.clone();\n      if (boostFields.size() > 0) {\n        List clauses = boostedQuery.clauses();\n        for( Object o : clauses ) {\n          TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n          Float b = this.boostFields.get(q.getTerm().field());\n          if (b != null) {\n            q.setBoost(b*q.getBoost());\n          }\n        }\n      }\n      return boostedQuery;\n    }\n\n","sourceOld":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery.clone();\n      if (boostFields.size() > 0) {\n        List clauses = boostedQuery.clauses();\n        for( Object o : clauses ) {\n          TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n          Float b = this.boostFields.get(q.getTerm().field());\n          if (b != null) {\n            q.setBoost(b*q.getBoost());\n          }\n        }\n      }\n      return boostedQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","sourceNew":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery.clone();\n      if (boostFields.size() > 0) {\n        List clauses = boostedQuery.clauses();\n        for( Object o : clauses ) {\n          TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n          Float b = this.boostFields.get(q.getTerm().field());\n          if (b != null) {\n            q.setBoost(b*q.getBoost());\n          }\n        }\n      }\n      return boostedQuery;\n    }\n\n","sourceOld":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery.clone();\n      if (boostFields.size() > 0) {\n        List clauses = boostedQuery.clauses();\n        for( Object o : clauses ) {\n          TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n          Float b = this.boostFields.get(q.getTerm().field());\n          if (b != null) {\n            q.setBoost(b*q.getBoost());\n          }\n        }\n      }\n      return boostedQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","sourceNew":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery.clone();\n      if (boostFields.size() > 0) {\n        BooleanQuery.Builder newQ = new BooleanQuery.Builder();\n        newQ.setDisableCoord(boostedQuery.isCoordDisabled());\n        newQ.setMinimumNumberShouldMatch(boostedQuery.getMinimumNumberShouldMatch());\n        for (BooleanClause clause : boostedQuery) {\n          TermQuery q = (TermQuery) clause.getQuery();\n          Float b = this.boostFields.get(q.getTerm().field());\n          if (b != null) {\n            q = (TermQuery) q.clone();\n            q.setBoost(b*q.getBoost());\n          }\n          newQ.add(q, clause.getOccur());\n        }\n        boostedQuery = newQ.build();\n      }\n      return boostedQuery;\n    }\n\n","sourceOld":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery.clone();\n      if (boostFields.size() > 0) {\n        List clauses = boostedQuery.clauses();\n        for( Object o : clauses ) {\n          TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n          Float b = this.boostFields.get(q.getTerm().field());\n          if (b != null) {\n            q.setBoost(b*q.getBoost());\n          }\n        }\n      }\n      return boostedQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","sourceNew":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery;\n      if (boostFields.size() > 0) {\n        BooleanQuery.Builder newQ = new BooleanQuery.Builder();\n        newQ.setDisableCoord(boostedQuery.isCoordDisabled());\n        newQ.setMinimumNumberShouldMatch(boostedQuery.getMinimumNumberShouldMatch());\n        for (BooleanClause clause : boostedQuery) {\n          Query q = clause.getQuery();\n          Float b = this.boostFields.get(((TermQuery) q).getTerm().field());\n          if (b != null) {\n            q = new BoostQuery(q, b);\n          }\n          newQ.add(q, clause.getOccur());\n        }\n        boostedQuery = newQ.build();\n      }\n      return boostedQuery;\n    }\n\n","sourceOld":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery.clone();\n      if (boostFields.size() > 0) {\n        BooleanQuery.Builder newQ = new BooleanQuery.Builder();\n        newQ.setDisableCoord(boostedQuery.isCoordDisabled());\n        newQ.setMinimumNumberShouldMatch(boostedQuery.getMinimumNumberShouldMatch());\n        for (BooleanClause clause : boostedQuery) {\n          TermQuery q = (TermQuery) clause.getQuery();\n          Float b = this.boostFields.get(q.getTerm().field());\n          if (b != null) {\n            q = (TermQuery) q.clone();\n            q.setBoost(b*q.getBoost());\n          }\n          newQ.add(q, clause.getOccur());\n        }\n        boostedQuery = newQ.build();\n      }\n      return boostedQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1","date":1451604685,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","sourceNew":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery;\n      if (boostFields.size() > 0) {\n        BooleanQuery.Builder newQ = new BooleanQuery.Builder();\n        newQ.setDisableCoord(boostedQuery.isCoordDisabled());\n        newQ.setMinimumNumberShouldMatch(boostedQuery.getMinimumNumberShouldMatch());\n        for (BooleanClause clause : boostedQuery) {\n          Query q = clause.getQuery();\n          float originalBoost = 1f;\n          if (q instanceof BoostQuery) {\n            BoostQuery bq = (BoostQuery) q;\n            q = bq.getQuery();\n            originalBoost = bq.getBoost();\n          }\n          Float fieldBoost = boostFields.get(((TermQuery) q).getTerm().field());\n          q = ((fieldBoost != null) ? new BoostQuery(q, fieldBoost * originalBoost) : clause.getQuery());\n          newQ.add(q, clause.getOccur());\n        }\n        boostedQuery = newQ.build();\n      }\n      return boostedQuery;\n    }\n\n","sourceOld":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery;\n      if (boostFields.size() > 0) {\n        BooleanQuery.Builder newQ = new BooleanQuery.Builder();\n        newQ.setDisableCoord(boostedQuery.isCoordDisabled());\n        newQ.setMinimumNumberShouldMatch(boostedQuery.getMinimumNumberShouldMatch());\n        for (BooleanClause clause : boostedQuery) {\n          Query q = clause.getQuery();\n          Float b = this.boostFields.get(((TermQuery) q).getTerm().field());\n          if (b != null) {\n            q = new BoostQuery(q, b);\n          }\n          newQ.add(q, clause.getOccur());\n        }\n        boostedQuery = newQ.build();\n      }\n      return boostedQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","sourceNew":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery;\n      if (boostFields.size() > 0) {\n        BooleanQuery.Builder newQ = new BooleanQuery.Builder();\n        newQ.setMinimumNumberShouldMatch(boostedQuery.getMinimumNumberShouldMatch());\n        for (BooleanClause clause : boostedQuery) {\n          Query q = clause.getQuery();\n          float originalBoost = 1f;\n          if (q instanceof BoostQuery) {\n            BoostQuery bq = (BoostQuery) q;\n            q = bq.getQuery();\n            originalBoost = bq.getBoost();\n          }\n          Float fieldBoost = boostFields.get(((TermQuery) q).getTerm().field());\n          q = ((fieldBoost != null) ? new BoostQuery(q, fieldBoost * originalBoost) : clause.getQuery());\n          newQ.add(q, clause.getOccur());\n        }\n        boostedQuery = newQ.build();\n      }\n      return boostedQuery;\n    }\n\n","sourceOld":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery;\n      if (boostFields.size() > 0) {\n        BooleanQuery.Builder newQ = new BooleanQuery.Builder();\n        newQ.setDisableCoord(boostedQuery.isCoordDisabled());\n        newQ.setMinimumNumberShouldMatch(boostedQuery.getMinimumNumberShouldMatch());\n        for (BooleanClause clause : boostedQuery) {\n          Query q = clause.getQuery();\n          float originalBoost = 1f;\n          if (q instanceof BoostQuery) {\n            BoostQuery bq = (BoostQuery) q;\n            q = bq.getQuery();\n            originalBoost = bq.getBoost();\n          }\n          Float fieldBoost = boostFields.get(((TermQuery) q).getTerm().field());\n          q = ((fieldBoost != null) ? new BoostQuery(q, fieldBoost * originalBoost) : clause.getQuery());\n          newQ.add(q, clause.getOccur());\n        }\n        boostedQuery = newQ.build();\n      }\n      return boostedQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getBoostedQuery(Query).mjava","sourceNew":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery;\n      if (boostFields.size() > 0) {\n        BooleanQuery.Builder newQ = new BooleanQuery.Builder();\n        newQ.setMinimumNumberShouldMatch(boostedQuery.getMinimumNumberShouldMatch());\n        for (BooleanClause clause : boostedQuery) {\n          Query q = clause.getQuery();\n          float originalBoost = 1f;\n          if (q instanceof BoostQuery) {\n            BoostQuery bq = (BoostQuery) q;\n            q = bq.getQuery();\n            originalBoost = bq.getBoost();\n          }\n          Float fieldBoost = boostFields.get(((TermQuery) q).getTerm().field());\n          q = ((fieldBoost != null) ? new BoostQuery(q, fieldBoost * originalBoost) : clause.getQuery());\n          newQ.add(q, clause.getOccur());\n        }\n        boostedQuery = newQ.build();\n      }\n      return boostedQuery;\n    }\n\n","sourceOld":"    private Query getBoostedQuery(Query mltquery) {\n      BooleanQuery boostedQuery = (BooleanQuery)mltquery;\n      if (boostFields.size() > 0) {\n        BooleanQuery.Builder newQ = new BooleanQuery.Builder();\n        newQ.setDisableCoord(boostedQuery.isCoordDisabled());\n        newQ.setMinimumNumberShouldMatch(boostedQuery.getMinimumNumberShouldMatch());\n        for (BooleanClause clause : boostedQuery) {\n          Query q = clause.getQuery();\n          float originalBoost = 1f;\n          if (q instanceof BoostQuery) {\n            BoostQuery bq = (BoostQuery) q;\n            q = bq.getQuery();\n            originalBoost = bq.getBoost();\n          }\n          Float fieldBoost = boostFields.get(((TermQuery) q).getTerm().field());\n          q = ((fieldBoost != null) ? new BoostQuery(q, fieldBoost * originalBoost) : clause.getQuery());\n          newQ.add(q, clause.getOccur());\n        }\n        boostedQuery = newQ.build();\n      }\n      return boostedQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c8a0e442f7b61f811680273b25da95994a724466":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}