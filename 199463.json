{"path":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Loads the actual values. You may call this more than once, eg if you\n     * already previously loaded but then discarded the Source.\n     */\n    @Override\n    public Source load() throws IOException {\n      ByteBuffer buffer = ByteBuffer.allocate(precisionBytes * maxDoc);\n      IndexInput indexInput = (IndexInput) datIn.clone();\n      indexInput.seek(CodecUtil.headerLength(CODEC_NAME));\n      // skip precision:\n      indexInput.readByte();\n      assert buffer.hasArray() : \"Buffer must support Array\";\n      final byte[] arr = buffer.array();\n      indexInput.readBytes(arr, 0, arr.length);\n      return precisionBytes == 4 ? new Source4(buffer) : new Source8(buffer);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d51e9acac1e629cffe47855e85dc6dedc4754d","date":1305711497,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","sourceNew":"    /**\n     * Loads the actual values. You may call this more than once, eg if you\n     * already previously loaded but then discarded the Source.\n     */\n    @Override\n    public Source load() throws IOException {\n      /*\n       *  the allocated byteBuffer always uses BIG_ENDIAN here\n       *  and since the writer uses DataOutput#writeInt() / writeLong()\n       *  we can allways assume BIGE_ENDIAN\n       */\n      final ByteBuffer buffer = ByteBuffer.allocate(precisionBytes * maxDoc);\n      IndexInput indexInput = (IndexInput) datIn.clone();\n      indexInput.seek(CodecUtil.headerLength(CODEC_NAME));\n      // skip precision:\n      indexInput.readByte();\n      assert buffer.hasArray() : \"Buffer must support Array\";\n      final byte[] arr = buffer.array();\n      indexInput.readBytes(arr, 0, arr.length);\n      return precisionBytes == 4 ? new Source4(buffer) : new Source8(buffer);\n    }\n\n","sourceOld":"    /**\n     * Loads the actual values. You may call this more than once, eg if you\n     * already previously loaded but then discarded the Source.\n     */\n    @Override\n    public Source load() throws IOException {\n      ByteBuffer buffer = ByteBuffer.allocate(precisionBytes * maxDoc);\n      IndexInput indexInput = (IndexInput) datIn.clone();\n      indexInput.seek(CodecUtil.headerLength(CODEC_NAME));\n      // skip precision:\n      indexInput.readByte();\n      assert buffer.hasArray() : \"Buffer must support Array\";\n      final byte[] arr = buffer.array();\n      indexInput.readBytes(arr, 0, arr.length);\n      return precisionBytes == 4 ? new Source4(buffer) : new Source8(buffer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"874088165d9cc50370b30219daa24a1946758ee6","date":1306148325,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","sourceNew":"    /**\n     * Loads the actual values. You may call this more than once, eg if you\n     * already previously loaded but then discarded the Source.\n     */\n    @Override\n    public Source load() throws IOException {\n      /* we always read BIG_ENDIAN here since the writer uses\n       * DataOutput#writeInt() / writeLong() we can simply read the ints / longs\n       * back in using readInt / readLong */\n      final IndexInput indexInput = (IndexInput) datIn.clone();\n      indexInput.seek(CodecUtil.headerLength(CODEC_NAME));\n      // skip precision:\n      indexInput.readByte();\n      if (precisionBytes == 4) {\n        final float[] values = new float[(4 * maxDoc) >> 2];\n        assert values.length == maxDoc;\n        for (int i = 0; i < values.length; i++) {\n          values[i] = Float.intBitsToFloat(indexInput.readInt());\n        }\n        return new Source4(values);\n      } else {\n        final double[] values = new double[(8 * maxDoc) >> 3];\n        assert values.length == maxDoc;\n        for (int i = 0; i < values.length; i++) {\n          values[i] = Double.longBitsToDouble(indexInput.readLong());\n        }\n        return new Source8(values);\n      }\n    }\n\n","sourceOld":"    /**\n     * Loads the actual values. You may call this more than once, eg if you\n     * already previously loaded but then discarded the Source.\n     */\n    @Override\n    public Source load() throws IOException {\n      /*\n       *  the allocated byteBuffer always uses BIG_ENDIAN here\n       *  and since the writer uses DataOutput#writeInt() / writeLong()\n       *  we can allways assume BIGE_ENDIAN\n       */\n      final ByteBuffer buffer = ByteBuffer.allocate(precisionBytes * maxDoc);\n      IndexInput indexInput = (IndexInput) datIn.clone();\n      indexInput.seek(CodecUtil.headerLength(CODEC_NAME));\n      // skip precision:\n      indexInput.readByte();\n      assert buffer.hasArray() : \"Buffer must support Array\";\n      final byte[] arr = buffer.array();\n      indexInput.readBytes(arr, 0, arr.length);\n      return precisionBytes == 4 ? new Source4(buffer) : new Source8(buffer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Loads the actual values. You may call this more than once, eg if you\n     * already previously loaded but then discarded the Source.\n     */\n    @Override\n    public Source load() throws IOException {\n      /* we always read BIG_ENDIAN here since the writer uses\n       * DataOutput#writeInt() / writeLong() we can simply read the ints / longs\n       * back in using readInt / readLong */\n      final IndexInput indexInput = (IndexInput) datIn.clone();\n      indexInput.seek(CodecUtil.headerLength(CODEC_NAME));\n      // skip precision:\n      indexInput.readByte();\n      if (precisionBytes == 4) {\n        final float[] values = new float[(4 * maxDoc) >> 2];\n        assert values.length == maxDoc;\n        for (int i = 0; i < values.length; i++) {\n          values[i] = Float.intBitsToFloat(indexInput.readInt());\n        }\n        return new Source4(values);\n      } else {\n        final double[] values = new double[(8 * maxDoc) >> 3];\n        assert values.length == maxDoc;\n        for (int i = 0; i < values.length; i++) {\n          values[i] = Double.longBitsToDouble(indexInput.readLong());\n        }\n        return new Source8(values);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Loads the actual values. You may call this more than once, eg if you\n     * already previously loaded but then discarded the Source.\n     */\n    @Override\n    public Source load() throws IOException {\n      /* we always read BIG_ENDIAN here since the writer uses\n       * DataOutput#writeInt() / writeLong() we can simply read the ints / longs\n       * back in using readInt / readLong */\n      final IndexInput indexInput = (IndexInput) datIn.clone();\n      indexInput.seek(CodecUtil.headerLength(CODEC_NAME));\n      // skip precision:\n      indexInput.readByte();\n      if (precisionBytes == 4) {\n        final float[] values = new float[(4 * maxDoc) >> 2];\n        assert values.length == maxDoc;\n        for (int i = 0; i < values.length; i++) {\n          values[i] = Float.intBitsToFloat(indexInput.readInt());\n        }\n        return new Source4(values);\n      } else {\n        final double[] values = new double[(8 * maxDoc) >> 3];\n        assert values.length == maxDoc;\n        for (int i = 0; i < values.length; i++) {\n          values[i] = Double.longBitsToDouble(indexInput.readLong());\n        }\n        return new Source8(values);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","sourceNew":"    @Override\n    public Source load() throws IOException {\n      final IndexInput indexInput = cloneData();\n      try {\n        return arrayTemplate.newFromInput(indexInput, maxDoc);\n      } finally {\n        indexInput.close();\n      }\n    }\n\n","sourceOld":"    /**\n     * Loads the actual values. You may call this more than once, eg if you\n     * already previously loaded but then discarded the Source.\n     */\n    @Override\n    public Source load() throws IOException {\n      /* we always read BIG_ENDIAN here since the writer uses\n       * DataOutput#writeInt() / writeLong() we can simply read the ints / longs\n       * back in using readInt / readLong */\n      final IndexInput indexInput = (IndexInput) datIn.clone();\n      indexInput.seek(CodecUtil.headerLength(CODEC_NAME));\n      // skip precision:\n      indexInput.readByte();\n      if (precisionBytes == 4) {\n        final float[] values = new float[(4 * maxDoc) >> 2];\n        assert values.length == maxDoc;\n        for (int i = 0; i < values.length; i++) {\n          values[i] = Float.intBitsToFloat(indexInput.readInt());\n        }\n        return new Source4(values);\n      } else {\n        final double[] values = new double[(8 * maxDoc) >> 3];\n        assert values.length == maxDoc;\n        for (int i = 0; i < values.length; i++) {\n          values[i] = Double.longBitsToDouble(indexInput.readLong());\n        }\n        return new Source8(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","sourceNew":"    @Override\n    public Source load() throws IOException {\n      final IndexInput indexInput = cloneData();\n      try {\n        return arrayTemplate.newFromInput(indexInput, maxDoc);\n      } finally {\n        IOUtils.close(indexInput);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Source load() throws IOException {\n      final IndexInput indexInput = cloneData();\n      try {\n        return arrayTemplate.newFromInput(indexInput, maxDoc);\n      } finally {\n        indexInput.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Floats.FloatsReader#load().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","sourceNew":"    @Override\n    public Source load() throws IOException {\n      final IndexInput indexInput = cloneData();\n      try {\n        return arrayTemplate.newFromInput(indexInput, maxDoc);\n      } finally {\n        IOUtils.close(indexInput);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Source load() throws IOException {\n      final IndexInput indexInput = cloneData();\n      try {\n        return arrayTemplate.newFromInput(indexInput, maxDoc);\n      } finally {\n        IOUtils.close(indexInput);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Floats.FloatsReader#load().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsReader#load().mjava","sourceNew":"    @Override\n    public Source load() throws IOException {\n      final IndexInput indexInput = cloneData();\n      try {\n        return arrayTemplate.newFromInput(indexInput, maxDoc);\n      } finally {\n        IOUtils.close(indexInput);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Source load() throws IOException {\n      final IndexInput indexInput = cloneData();\n      try {\n        return arrayTemplate.newFromInput(indexInput, maxDoc);\n      } finally {\n        IOUtils.close(indexInput);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","874088165d9cc50370b30219daa24a1946758ee6"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"874088165d9cc50370b30219daa24a1946758ee6":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","85eb75e0c0203e44dcf686f35876cf6080f3a671"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["874088165d9cc50370b30219daa24a1946758ee6"],"874088165d9cc50370b30219daa24a1946758ee6":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["e128967bca58657bc0039d4bfe631e63e81f1977"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}