{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(Analyzer,String,String).mjava","commits":[{"id":"6521c44a9d5d28a09041959f70607985717c47c3","date":1108842664,"type":1,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(Analyzer,String,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(Analyzer,String).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragment(TokenStream, String)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks  \n\t * @param text text to highlight terms in\n\t * @param fieldName Name of field used to influence analyzer's tokenization policy \n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t */\n\tpublic final String getBestFragment(Analyzer analyzer, String fieldName,String text)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragment(tokenStream, text);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragment(TokenStream, String)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks  \n\t * @param text text to highlight terms in\n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t */\n\tpublic final String getBestFragment(Analyzer analyzer, String text)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(text));\n\t\treturn getBestFragment(tokenStream, text);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f","date":1153001991,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(Analyzer,String,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(Analyzer,String,String).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragment(TokenStream, String)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param text text to highlight terms in\n\t * @param fieldName Name of field used to influence analyzer's tokenization policy\n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t */\n\tpublic final String getBestFragment(Analyzer analyzer, String fieldName,String text)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragment(tokenStream, text);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragment(TokenStream, String)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks  \n\t * @param text text to highlight terms in\n\t * @param fieldName Name of field used to influence analyzer's tokenization policy \n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t */\n\tpublic final String getBestFragment(Analyzer analyzer, String fieldName,String text)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragment(tokenStream, text);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf4dbfaec317df80ca6f412ce1b94b337b581e17","date":1238022314,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(Analyzer,String,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(Analyzer,String,String).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragment(TokenStream, String)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param text text to highlight terms in\n\t * @param fieldName Name of field used to influence analyzer's tokenization policy\n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragment(Analyzer analyzer, String fieldName,String text)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragment(tokenStream, text);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragment(TokenStream, String)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param text text to highlight terms in\n\t * @param fieldName Name of field used to influence analyzer's tokenization policy\n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t */\n\tpublic final String getBestFragment(Analyzer analyzer, String fieldName,String text)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragment(tokenStream, text);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(Analyzer,String,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(Analyzer,String,String).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragment(TokenStream, String)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param text text to highlight terms in\n\t * @param fieldName Name of field used to influence analyzer's tokenization policy\n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragment(Analyzer analyzer, String fieldName,String text)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragment(tokenStream, text);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragment(TokenStream, String)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param text text to highlight terms in\n\t * @param fieldName Name of field used to influence analyzer's tokenization policy\n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragment(Analyzer analyzer, String fieldName,String text)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragment(tokenStream, text);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6521c44a9d5d28a09041959f70607985717c47c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f":["6521c44a9d5d28a09041959f70607985717c47c3"],"bf4dbfaec317df80ca6f412ce1b94b337b581e17":["f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["bf4dbfaec317df80ca6f412ce1b94b337b581e17"]},"commit2Childs":{"6521c44a9d5d28a09041959f70607985717c47c3":["f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6521c44a9d5d28a09041959f70607985717c47c3"],"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f":["bf4dbfaec317df80ca6f412ce1b94b337b581e17"],"bf4dbfaec317df80ca6f412ce1b94b337b581e17":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}