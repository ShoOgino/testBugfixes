{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createDomainQuery(FacetContext).mjava","commits":[{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createDomainQuery(FacetContext).mjava","pathOld":"/dev/null","sourceNew":"      /**\n       * Creates a Query that can be used to recompute the new \"base\" for this domain, realtive to the \n       * current base of the FacetContext.\n       */\n      public Query createDomainQuery(FacetContext fcontext) throws IOException {\n        // NOTE: this code lives here, instead of in FacetProcessor.handleJoin, in order to minimize\n        // the number of classes that have to know about the number of possible settings on the join\n        // (ie: if we add a score mode, or some other modifier to how the joins are done)\n        \n        final SolrConstantScoreQuery fromQuery = new SolrConstantScoreQuery(fcontext.base.getTopFilter());\n        // this shouldn't matter once we're wrapped in a join query, but just in case it ever does...\n        fromQuery.setCache(false); \n\n        return JoinQParserPlugin.createJoinQuery(fromQuery, this.from, this.to);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createDomainQuery(FacetContext).mjava","pathOld":"/dev/null","sourceNew":"      /**\n       * Creates a Query that can be used to recompute the new \"base\" for this domain, realtive to the \n       * current base of the FacetContext.\n       */\n      public Query createDomainQuery(FacetContext fcontext) throws IOException {\n        // NOTE: this code lives here, instead of in FacetProcessor.handleJoin, in order to minimize\n        // the number of classes that have to know about the number of possible settings on the join\n        // (ie: if we add a score mode, or some other modifier to how the joins are done)\n        \n        final SolrConstantScoreQuery fromQuery = new SolrConstantScoreQuery(fcontext.base.getTopFilter());\n        // this shouldn't matter once we're wrapped in a join query, but just in case it ever does...\n        fromQuery.setCache(false); \n\n        return JoinQParserPlugin.createJoinQuery(fromQuery, this.from, this.to);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bcd6a2cefce164763af175ff1accaf232439e8e","date":1527469335,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createDomainQuery(FacetContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createDomainQuery(FacetContext).mjava","sourceNew":"      /**\n       * Creates a Query that can be used to recompute the new \"base\" for this domain, relative to the\n       * current base of the FacetContext.\n       */\n      public Query createDomainQuery(FacetContext fcontext) throws IOException {\n        // NOTE: this code lives here, instead of in FacetProcessor.handleJoin, in order to minimize\n        // the number of classes that have to know about the number of possible settings on the join\n        // (ie: if we add a score mode, or some other modifier to how the joins are done)\n\n        final SolrConstantScoreQuery fromQuery = new SolrConstantScoreQuery(fcontext.base.getTopFilter());\n        // this shouldn't matter once we're wrapped in a join query, but just in case it ever does...\n        fromQuery.setCache(false);\n\n        return JoinQParserPlugin.createJoinQuery(fromQuery, this.from, this.to);\n      }\n\n","sourceOld":"      /**\n       * Creates a Query that can be used to recompute the new \"base\" for this domain, realtive to the \n       * current base of the FacetContext.\n       */\n      public Query createDomainQuery(FacetContext fcontext) throws IOException {\n        // NOTE: this code lives here, instead of in FacetProcessor.handleJoin, in order to minimize\n        // the number of classes that have to know about the number of possible settings on the join\n        // (ie: if we add a score mode, or some other modifier to how the joins are done)\n        \n        final SolrConstantScoreQuery fromQuery = new SolrConstantScoreQuery(fcontext.base.getTopFilter());\n        // this shouldn't matter once we're wrapped in a join query, but just in case it ever does...\n        fromQuery.setCache(false); \n\n        return JoinQParserPlugin.createJoinQuery(fromQuery, this.from, this.to);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f827e37672b604f6c8ea8457b0c6ce14528cf3","date":1597148467,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createDomainQuery(FacetContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createDomainQuery(FacetContext).mjava","sourceNew":"      /**\n       * Creates a Query that can be used to recompute the new \"base\" for this domain, relative to the\n       * current base of the FacetContext.\n       */\n      public Query createDomainQuery(FacetContext fcontext) throws IOException {\n        // NOTE: this code lives here, instead of in FacetProcessor.handleJoin, in order to minimize\n        // the number of classes that have to know about the number of possible settings on the join\n        // (ie: if we add a score mode, or some other modifier to how the joins are done)\n\n        final SolrConstantScoreQuery fromQuery = new SolrConstantScoreQuery(fcontext.base.getTopFilter());\n        // this shouldn't matter once we're wrapped in a join query, but just in case it ever does...\n        fromQuery.setCache(false);\n\n        return JoinQParserPlugin.createJoinQuery(fromQuery, this.from, this.to, this.method);\n      }\n\n","sourceOld":"      /**\n       * Creates a Query that can be used to recompute the new \"base\" for this domain, relative to the\n       * current base of the FacetContext.\n       */\n      public Query createDomainQuery(FacetContext fcontext) throws IOException {\n        // NOTE: this code lives here, instead of in FacetProcessor.handleJoin, in order to minimize\n        // the number of classes that have to know about the number of possible settings on the join\n        // (ie: if we add a score mode, or some other modifier to how the joins are done)\n\n        final SolrConstantScoreQuery fromQuery = new SolrConstantScoreQuery(fcontext.base.getTopFilter());\n        // this shouldn't matter once we're wrapped in a join query, but just in case it ever does...\n        fromQuery.setCache(false);\n\n        return JoinQParserPlugin.createJoinQuery(fromQuery, this.from, this.to);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3f827e37672b604f6c8ea8457b0c6ce14528cf3":["2bcd6a2cefce164763af175ff1accaf232439e8e"],"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"2bcd6a2cefce164763af175ff1accaf232439e8e":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c3f827e37672b604f6c8ea8457b0c6ce14528cf3"]},"commit2Childs":{"c3f827e37672b604f6c8ea8457b0c6ce14528cf3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["e9017cf144952056066919f1ebc7897ff9bd71b1","2bcd6a2cefce164763af175ff1accaf232439e8e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2bcd6a2cefce164763af175ff1accaf232439e8e":["c3f827e37672b604f6c8ea8457b0c6ce14528cf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}