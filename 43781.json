{"path":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleBinaryValues(IndexReader,String).mjava","commits":[{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleBinaryValues(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n    int maxLength = -1;\n\n    for(AtomicReaderContext ctx : leaves) {\n      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);\n\n      if (values == null) {\n        values = new BinaryDocValues.EMPTY(ctx.reader().maxDoc());\n      } else {\n        anyReal = true;\n      }\n      \n      maxLength = Math.max(maxLength, values.maxLength());\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      final int finalMaxLength = maxLength;\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          BinaryDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getBinaryDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values != null) {\n            values.get(docID - leaves.get(subIndex).docBase, result);\n          } else {\n            result.length = 0;\n            result.bytes = BinaryDocValues.MISSING;\n          }\n        }\n\n        @Override\n        public int size() {\n          return r.maxDoc();\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          // Harmless lie?\n          return false;\n        }\n\n        @Override\n        public int maxLength() {\n          return finalMaxLength;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleBinaryValues(IndexReader,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleBinaryValues(IndexReader,String).mjava","sourceNew":"  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n\n    for(AtomicReaderContext ctx : leaves) {\n      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);\n\n      if (values == null) {\n        values = new BinaryDocValues.EMPTY(ctx.reader().maxDoc());\n      } else {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          BinaryDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getBinaryDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values != null) {\n            values.get(docID - leaves.get(subIndex).docBase, result);\n          } else {\n            result.length = 0;\n            result.bytes = BinaryDocValues.MISSING;\n          }\n        }\n\n        @Override\n        public int size() {\n          return r.maxDoc();\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n    int maxLength = -1;\n\n    for(AtomicReaderContext ctx : leaves) {\n      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);\n\n      if (values == null) {\n        values = new BinaryDocValues.EMPTY(ctx.reader().maxDoc());\n      } else {\n        anyReal = true;\n      }\n      \n      maxLength = Math.max(maxLength, values.maxLength());\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      final int finalMaxLength = maxLength;\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          BinaryDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getBinaryDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values != null) {\n            values.get(docID - leaves.get(subIndex).docBase, result);\n          } else {\n            result.length = 0;\n            result.bytes = BinaryDocValues.MISSING;\n          }\n        }\n\n        @Override\n        public int size() {\n          return r.maxDoc();\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          // Harmless lie?\n          return false;\n        }\n\n        @Override\n        public int maxLength() {\n          return finalMaxLength;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleBinaryValues(IndexReader,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleBinaryValues(IndexReader,String).mjava","sourceNew":"  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n\n    for(AtomicReaderContext ctx : leaves) {\n      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);\n\n      if (values == null) {\n        values = BinaryDocValues.EMPTY;\n      } else {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          BinaryDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getBinaryDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values != null) {\n            values.get(docID - leaves.get(subIndex).docBase, result);\n          } else {\n            result.length = 0;\n            result.bytes = BinaryDocValues.MISSING;\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n\n    for(AtomicReaderContext ctx : leaves) {\n      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);\n\n      if (values == null) {\n        values = new BinaryDocValues.EMPTY(ctx.reader().maxDoc());\n      } else {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          BinaryDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getBinaryDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values != null) {\n            values.get(docID - leaves.get(subIndex).docBase, result);\n          } else {\n            result.length = 0;\n            result.bytes = BinaryDocValues.MISSING;\n          }\n        }\n\n        @Override\n        public int size() {\n          return r.maxDoc();\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8bcc8a3dc0f439d38bb5cca141e4674eab17245","date":1357919773,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleBinaryValues(IndexReader,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleBinaryValues(IndexReader,String).mjava","sourceNew":"  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getBinaryDocValues(field);\n    }\n    boolean anyReal = false;\n\n    for(AtomicReaderContext ctx : leaves) {\n      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);\n\n      if (values != null) {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          BinaryDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getBinaryDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values != null) {\n            values.get(docID - leaves.get(subIndex).docBase, result);\n          } else {\n            result.length = 0;\n            result.bytes = BinaryDocValues.MISSING;\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n\n    for(AtomicReaderContext ctx : leaves) {\n      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);\n\n      if (values == null) {\n        values = BinaryDocValues.EMPTY;\n      } else {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          BinaryDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getBinaryDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values != null) {\n            values.get(docID - leaves.get(subIndex).docBase, result);\n          } else {\n            result.length = 0;\n            result.bytes = BinaryDocValues.MISSING;\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94a2758d07e0d83d524af25cee0d8a04b6394f47","date":1357921039,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleBinaryValues(IndexReader,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleBinaryValues(IndexReader,String).mjava","sourceNew":"  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getBinaryDocValues(field);\n    }\n    boolean anyReal = false;\n\n    for(AtomicReaderContext ctx : leaves) {\n      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);\n\n      if (values != null) {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          BinaryDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getBinaryDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values != null) {\n            values.get(docID - leaves.get(subIndex).docBase, result);\n          } else {\n            result.length = 0;\n            result.bytes = BinaryDocValues.MISSING;\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getBinaryDocValues(field);\n    }\n    boolean anyReal = false;\n\n    for(AtomicReaderContext ctx : leaves) {\n      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);\n\n      if (values != null) {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          BinaryDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getBinaryDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values != null) {\n            values.get(docID - leaves.get(subIndex).docBase, result);\n          } else {\n            result.length = 0;\n            result.bytes = BinaryDocValues.MISSING;\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94a2758d07e0d83d524af25cee0d8a04b6394f47":["f8bcc8a3dc0f439d38bb5cca141e4674eab17245"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8bcc8a3dc0f439d38bb5cca141e4674eab17245":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"94a2758d07e0d83d524af25cee0d8a04b6394f47":[],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad7de846867bd14c63f9dd19df082f72c5ea9c54","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8bcc8a3dc0f439d38bb5cca141e4674eab17245":["94a2758d07e0d83d524af25cee0d8a04b6394f47"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["f8bcc8a3dc0f439d38bb5cca141e4674eab17245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94a2758d07e0d83d524af25cee0d8a04b6394f47","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}