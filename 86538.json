{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerInterface.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizer.ACRONYM_DEP) {\n          if (replaceInvalidAcronym) {\n            typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);\n            termAtt.setLength(termAtt.length() - 1); // remove extra '.'\n          } else {\n            typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.ACRONYM]);\n          }\n        } else {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerInterface.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizer.ACRONYM_DEP) {\n          if (replaceInvalidAcronym) {\n            typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);\n            termAtt.setLength(termAtt.length() - 1); // remove extra '.'\n          } else {\n            typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.ACRONYM]);\n          }\n        } else {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerInterface.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizer.ACRONYM_DEP) {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);\n          termAtt.setLength(termAtt.length() - 1); // remove extra '.'\n        } else {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerInterface.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizer.ACRONYM_DEP) {\n          if (replaceInvalidAcronym) {\n            typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);\n            termAtt.setLength(termAtt.length() - 1); // remove extra '.'\n          } else {\n            typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.ACRONYM]);\n          }\n        } else {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerInterface.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizer.ACRONYM_DEP) {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);\n          termAtt.setLength(termAtt.length() - 1); // remove extra '.'\n        } else {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerInterface.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizer.ACRONYM_DEP) {\n          if (replaceInvalidAcronym) {\n            typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);\n            termAtt.setLength(termAtt.length() - 1); // remove extra '.'\n          } else {\n            typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.ACRONYM]);\n          }\n        } else {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerInterface.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizer.ACRONYM_DEP) {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);\n          termAtt.setLength(termAtt.length() - 1); // remove extra '.'\n        } else {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerInterface.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizer.ACRONYM_DEP) {\n          if (replaceInvalidAcronym) {\n            typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);\n            termAtt.setLength(termAtt.length() - 1); // remove extra '.'\n          } else {\n            typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.ACRONYM]);\n          }\n        } else {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#incrementToken().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerInterface.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizer.ACRONYM_DEP) {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);\n          termAtt.setLength(termAtt.length() - 1); // remove extra '.'\n        } else {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int posIncr = 1;\n\n    while(true) {\n      int tokenType = scanner.getNextToken();\n\n      if (tokenType == StandardTokenizerInterface.YYEOF) {\n        return false;\n      }\n\n      if (scanner.yylength() <= maxTokenLength) {\n        posIncrAtt.setPositionIncrement(posIncr);\n        scanner.getText(termAtt);\n        final int start = scanner.yychar();\n        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));\n        // This 'if' should be removed in the next release. For now, it converts\n        // invalid acronyms to HOST. When removed, only the 'else' part should\n        // remain.\n        if (tokenType == StandardTokenizer.ACRONYM_DEP) {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);\n          termAtt.setLength(termAtt.length() - 1); // remove extra '.'\n        } else {\n          typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);\n        }\n        return true;\n      } else\n        // When we skip a too-long term, we still increment the\n        // position increment\n        posIncr++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}