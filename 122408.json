{"path":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testEmptyEnums().mjava","commits":[{"id":"00b6a487c9be41aff201a3530e6fb1f3f02a76b3","date":1321144129,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testEmptyEnums().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(NumericRangeQuery.newLongRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(NumericRangeQuery.newLongRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2L * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(NumericRangeQuery.newLongRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testEmptyEnums().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testEmptyEnums().mjava","sourceNew":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(NumericRangeQuery.newLongRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(NumericRangeQuery.newLongRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2L * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(NumericRangeQuery.newLongRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(NumericRangeQuery.newLongRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(NumericRangeQuery.newLongRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2L * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(NumericRangeQuery.newLongRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00b6a487c9be41aff201a3530e6fb1f3f02a76b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["00b6a487c9be41aff201a3530e6fb1f3f02a76b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"00b6a487c9be41aff201a3530e6fb1f3f02a76b3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00b6a487c9be41aff201a3530e6fb1f3f02a76b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}