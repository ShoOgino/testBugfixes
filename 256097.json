{"path":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"172df63033c2189512184145d4d45c79b230d45e","date":1311519908,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"172df63033c2189512184145d4d45c79b230d45e":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["172df63033c2189512184145d4d45c79b230d45e"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["172df63033c2189512184145d4d45c79b230d45e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"172df63033c2189512184145d4d45c79b230d45e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}