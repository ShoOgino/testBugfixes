{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#close().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":null,"sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}