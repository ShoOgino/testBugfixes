{"path":"src/java/org/apache/lucene/search/Collector#acceptsDocsOutOfOrder().mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Collector#acceptsDocsOutOfOrder().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true iff this {@link Collector} can accept documents given to\n   * {@link #collect(int)} out of order.\n   * <p>\n   * NOTE: some collectors can work in either mode, with a more efficient\n   * implementation for in-order docs collection. If your collector can work in\n   * either mode, it is recommended that you create two variants of it, since\n   * some queries work much faster if out-of-order collection is supported by a\n   * {@link Collector}.\n   */\n  public abstract boolean acceptsDocsOutOfOrder();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6e17b10be05460ca8d041537cbe2a284eff4a1e","date":1259328982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Collector#acceptsDocsOutOfOrder().mjava","pathOld":"src/java/org/apache/lucene/search/Collector#acceptsDocsOutOfOrder().mjava","sourceNew":"  /**\n   * Return <code>true</code> if this collector does not\n   * require the matching docIDs to be delivered in int sort\n   * order (smallest to largest) to {@link #collect}.\n   *\n   * <p> Most Lucene Query implementations will visit\n   * matching docIDs in order.  However, some queries\n   * (currently limited to certain cases of {@link\n   * BooleanQuery}) can achieve faster searching if the\n   * <code>Collector</code> allows them to deliver the\n   * docIDs out of order.</p>\n   *\n   * <p> Many collectors don't mind getting docIDs out of\n   * order, so it's important to return <code>true</code>\n   * here.\n   */\n  public abstract boolean acceptsDocsOutOfOrder();\n\n","sourceOld":"  /**\n   * Returns true iff this {@link Collector} can accept documents given to\n   * {@link #collect(int)} out of order.\n   * <p>\n   * NOTE: some collectors can work in either mode, with a more efficient\n   * implementation for in-order docs collection. If your collector can work in\n   * either mode, it is recommended that you create two variants of it, since\n   * some queries work much faster if out-of-order collection is supported by a\n   * {@link Collector}.\n   */\n  public abstract boolean acceptsDocsOutOfOrder();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Collector#acceptsDocsOutOfOrder().mjava","pathOld":"src/java/org/apache/lucene/search/Collector#acceptsDocsOutOfOrder().mjava","sourceNew":"  /**\n   * Return <code>true</code> if this collector does not\n   * require the matching docIDs to be delivered in int sort\n   * order (smallest to largest) to {@link #collect}.\n   *\n   * <p> Most Lucene Query implementations will visit\n   * matching docIDs in order.  However, some queries\n   * (currently limited to certain cases of {@link\n   * BooleanQuery}) can achieve faster searching if the\n   * <code>Collector</code> allows them to deliver the\n   * docIDs out of order.</p>\n   *\n   * <p> Many collectors don't mind getting docIDs out of\n   * order, so it's important to return <code>true</code>\n   * here.\n   */\n  public abstract boolean acceptsDocsOutOfOrder();\n\n","sourceOld":"  /**\n   * Return <code>true</code> if this collector does not\n   * require the matching docIDs to be delivered in int sort\n   * order (smallest to largest) to {@link #collect}.\n   *\n   * <p> Most Lucene Query implementations will visit\n   * matching docIDs in order.  However, some queries\n   * (currently limited to certain cases of {@link\n   * BooleanQuery}) can achieve faster searching if the\n   * <code>Collector</code> allows them to deliver the\n   * docIDs out of order.</p>\n   *\n   * <p> Many collectors don't mind getting docIDs out of\n   * order, so it's important to return <code>true</code>\n   * here.\n   */\n  public abstract boolean acceptsDocsOutOfOrder();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6e17b10be05460ca8d041537cbe2a284eff4a1e":["052fac7830290bd38a04cddee1a121ee07656b56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b6e17b10be05460ca8d041537cbe2a284eff4a1e"]},"commit2Childs":{"b6e17b10be05460ca8d041537cbe2a284eff4a1e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["b6e17b10be05460ca8d041537cbe2a284eff4a1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}