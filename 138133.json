{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String).mjava","commits":[{"id":"74fe755c1cb9c998d933b455c573e86e9ef5d2aa","date":1401724046,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = null;\n    try {\n      childNames = zookeeper.getChildren(dir, null, true);\n    } catch (KeeperException.NoNodeException e) {\n      throw e;\n    }\n\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          ZkNodeProps message = ZkNodeProps.load(zookeeper.getData(dir + \"/\" + childName, null, null, true));\n          if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {\n            LOG.info(\">>>> {}\", message.get(OverseerCollectionProcessor.ASYNC));\n            if(message.get(OverseerCollectionProcessor.ASYNC).equals(requestId)) return true;\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1275856c84e2d39350c6d0f98681e2c6ba1e18aa","aa7843ca6910809c5d95c44205d1b78ebee893da","126c57a664803edd5e4b30ce5c287e90823e606a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa7843ca6910809c5d95c44205d1b78ebee893da","date":1407507547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          ZkNodeProps message = ZkNodeProps.load(zookeeper.getData(dir + \"/\" + childName, null, null, true));\n          if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {\n            LOG.info(\">>>> {}\", message.get(OverseerCollectionProcessor.ASYNC));\n            if(message.get(OverseerCollectionProcessor.ASYNC).equals(requestId)) return true;\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = null;\n    try {\n      childNames = zookeeper.getChildren(dir, null, true);\n    } catch (KeeperException.NoNodeException e) {\n      throw e;\n    }\n\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          ZkNodeProps message = ZkNodeProps.load(zookeeper.getData(dir + \"/\" + childName, null, null, true));\n          if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {\n            LOG.info(\">>>> {}\", message.get(OverseerCollectionProcessor.ASYNC));\n            if(message.get(OverseerCollectionProcessor.ASYNC).equals(requestId)) return true;\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":["74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfb6f3c8c119796b6a4ca83753599e3064b65305","date":1416760830,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          ZkNodeProps message = ZkNodeProps.load(zookeeper.getData(dir + \"/\" + childName, null, null, true));\n          if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {\n            LOG.info(\">>>> {}\", message.get(OverseerCollectionProcessor.ASYNC));\n            if(message.get(OverseerCollectionProcessor.ASYNC).equals(requestId)) return true;\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          ZkNodeProps message = ZkNodeProps.load(zookeeper.getData(dir + \"/\" + childName, null, null, true));\n          if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {\n            LOG.info(\">>>> {}\", message.get(OverseerCollectionProcessor.ASYNC));\n            if(message.get(OverseerCollectionProcessor.ASYNC).equals(requestId)) return true;\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"126c57a664803edd5e4b30ce5c287e90823e606a","date":1421162756,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {\n              LOG.debug(\">>>> {}\", message.get(OverseerCollectionProcessor.ASYNC));\n              if(message.get(OverseerCollectionProcessor.ASYNC).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          ZkNodeProps message = ZkNodeProps.load(zookeeper.getData(dir + \"/\" + childName, null, null, true));\n          if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {\n            LOG.info(\">>>> {}\", message.get(OverseerCollectionProcessor.ASYNC));\n            if(message.get(OverseerCollectionProcessor.ASYNC).equals(requestId)) return true;\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":["74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31","date":1435517625,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {\n              LOG.debug(\">>>> {}\", message.get(OverseerCollectionProcessor.ASYNC));\n              if(message.get(OverseerCollectionProcessor.ASYNC).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31":["126c57a664803edd5e4b30ce5c287e90823e606a"],"aa7843ca6910809c5d95c44205d1b78ebee893da":["74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74fe755c1cb9c998d933b455c573e86e9ef5d2aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f222f4f2bda21ffd6b39b3362b2412e98e4d5e31"],"126c57a664803edd5e4b30ce5c287e90823e606a":["bfb6f3c8c119796b6a4ca83753599e3064b65305"]},"commit2Childs":{"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa7843ca6910809c5d95c44205d1b78ebee893da":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["126c57a664803edd5e4b30ce5c287e90823e606a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"74fe755c1cb9c998d933b455c573e86e9ef5d2aa":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"126c57a664803edd5e4b30ce5c287e90823e606a":["f222f4f2bda21ffd6b39b3362b2412e98e4d5e31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}