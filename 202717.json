{"path":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","sourceNew":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copyChars(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","sourceOld":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copyChars(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","sourceNew":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copyChars(string);\n      int key  =  hash.add(ref.get()); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","sourceOld":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copyChars(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","bugFix":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}