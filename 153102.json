{"path":"src/java/org/apache/lucene/search/SortField#toString().mjava","commits":[{"id":"3c77a770ae2a20110a601707ecf83f0bda628563","date":1081092494,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"/dev/null","sourceNew":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      default: buffer.append(\"\\\"\" + field + \"\\\"\");\n               break;\n    }\n    \n    buffer.append(reverse ? \" DESC\" : \" ASC\");\n\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c8a24ce00e86de3fd7206fb01f9aabcab3316a","date":1081093651,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      default: buffer.append(\"\\\"\" + field + \"\\\"\");\n               break;\n    }\n\n    if (reverse)\n      buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      default: buffer.append(\"\\\"\" + field + \"\\\"\");\n               break;\n    }\n    \n    buffer.append(reverse ? \" DESC\" : \" ASC\");\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35c39157e8b6bc585e3a07e703d75db0f2ad56b2","date":1082672595,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      case CUSTOM: buffer.append (\"<custom:\\\"\"+\"\\\">\");\n                break;\n\n      default: buffer.append(\"\\\"\" + field + \"\\\"\");\n               break;\n    }\n\n    if (reverse)\n      buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      default: buffer.append(\"\\\"\" + field + \"\\\"\");\n               break;\n    }\n\n    if (reverse)\n      buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2b841e080a22d1d71123ba3ccd9874c159130c2","date":1084046052,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      case CUSTOM: buffer.append (\"<custom:\\\"\" + field + \"\\\": \"\n                                               + factory + \">\");\n                break;\n\n      default: buffer.append(\"\\\"\" + field + \"\\\"\");\n               break;\n    }\n\n    if (reverse)\n      buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      case CUSTOM: buffer.append (\"<custom:\\\"\"+\"\\\">\");\n                break;\n\n      default: buffer.append(\"\\\"\" + field + \"\\\"\");\n               break;\n    }\n\n    if (reverse)\n      buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba534479820dee396d07f520ba2a55400a1b6e7d","date":1085439102,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      case CUSTOM: buffer.append (\"<custom:\\\"\" + field + \"\\\": \"\n                                               + factory + \">\");\n                break;\n\n      default: buffer.append(\"\\\"\" + field + \"\\\"\");\n               break;\n    }\n\n    if (locale != null) buffer.append (\"(\"+locale+\")\");\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      case CUSTOM: buffer.append (\"<custom:\\\"\" + field + \"\\\": \"\n                                               + factory + \">\");\n                break;\n\n      default: buffer.append(\"\\\"\" + field + \"\\\"\");\n               break;\n    }\n\n    if (reverse)\n      buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b97548d27406e9f33187836e1de98d473a63f5d","date":1196088721,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      case CUSTOM:\n                buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(factory).append('>');\n                break;\n\n      default:\n               buffer.append('\\\"').append(field).append('\\\"');\n               break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      case CUSTOM: buffer.append (\"<custom:\\\"\" + field + \"\\\": \"\n                                               + factory + \">\");\n                break;\n\n      default: buffer.append(\"\\\"\" + field + \"\\\"\");\n               break;\n    }\n\n    if (locale != null) buffer.append (\"(\"+locale+\")\");\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3766097c9c41a30d67e9b548c62d017abf8e07ac","date":1228770465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      case CUSTOM:\n                buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(factory).append('>');\n                break;\n\n      default:\n               buffer.append('\\\"').append(field).append('\\\"');\n               break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      case CUSTOM:\n                buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(factory).append('>');\n                break;\n\n      default:\n               buffer.append('\\\"').append(field).append('\\\"');\n               break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case AUTO:\n        buffer.append(\"<auto: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(factory).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE: buffer.append(\"<score>\");\n                  break;\n\n      case DOC: buffer.append(\"<doc>\");\n                break;\n\n      case CUSTOM:\n                buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(factory).append('>');\n                break;\n\n      default:\n               buffer.append('\\\"').append(field).append('\\\"');\n               break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case AUTO:\n        buffer.append(\"<auto: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(factory).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case AUTO:\n        buffer.append(\"<auto: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(factory).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case AUTO:\n        buffer.append(\"<auto: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(factory).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c77a770ae2a20110a601707ecf83f0bda628563":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2b841e080a22d1d71123ba3ccd9874c159130c2":["35c39157e8b6bc585e3a07e703d75db0f2ad56b2"],"8a9e385641d717e641408d8fbbc62be8fc766357":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"63bc3238545c6012bd44f5d294077997f236bc4e":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["f2b841e080a22d1d71123ba3ccd9874c159130c2"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["8b97548d27406e9f33187836e1de98d473a63f5d"],"35c39157e8b6bc585e3a07e703d75db0f2ad56b2":["09c8a24ce00e86de3fd7206fb01f9aabcab3316a"],"09c8a24ce00e86de3fd7206fb01f9aabcab3316a":["3c77a770ae2a20110a601707ecf83f0bda628563"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["63bc3238545c6012bd44f5d294077997f236bc4e"],"8b97548d27406e9f33187836e1de98d473a63f5d":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"3c77a770ae2a20110a601707ecf83f0bda628563":["09c8a24ce00e86de3fd7206fb01f9aabcab3316a"],"f2b841e080a22d1d71123ba3ccd9874c159130c2":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["8a9e385641d717e641408d8fbbc62be8fc766357"],"63bc3238545c6012bd44f5d294077997f236bc4e":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["8b97548d27406e9f33187836e1de98d473a63f5d"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["63bc3238545c6012bd44f5d294077997f236bc4e"],"35c39157e8b6bc585e3a07e703d75db0f2ad56b2":["f2b841e080a22d1d71123ba3ccd9874c159130c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c77a770ae2a20110a601707ecf83f0bda628563"],"09c8a24ce00e86de3fd7206fb01f9aabcab3316a":["35c39157e8b6bc585e3a07e703d75db0f2ad56b2"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"8b97548d27406e9f33187836e1de98d473a63f5d":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}