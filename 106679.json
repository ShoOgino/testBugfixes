{"path":"src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  // @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.LONG_BUF_SIZE);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC_64 : TOKEN_TYPE_LOWER_PREC_64);\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.INT_BUF_SIZE);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC_32 : TOKEN_TYPE_LOWER_PREC_32);\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426","date":1247563064,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","pathOld":"src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","sourceNew":"  // @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","sourceOld":"  // @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.LONG_BUF_SIZE);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC_64 : TOKEN_TYPE_LOWER_PREC_64);\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.INT_BUF_SIZE);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC_32 : TOKEN_TYPE_LOWER_PREC_32);\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d0e16ae1a83f5658ad4d16453fb88650460140","date":1250287302,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","pathOld":"src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","sourceNew":"  // @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    clearAttributes();\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","sourceOld":"  // @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","pathOld":"src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    clearAttributes();\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","sourceOld":"  // @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    clearAttributes();\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    clearAttributes();\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91d0e16ae1a83f5658ad4d16453fb88650460140":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["53b6c192847de8643a5da505cc433cbf8476a175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70a9e462a51fd525218b83cdc33329f5ee00ca20"]},"commit2Childs":{"91d0e16ae1a83f5658ad4d16453fb88650460140":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}