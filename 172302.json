{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readSortedSetEntry(IndexInput).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readSortedSetEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readSortedSetEntry(IndexInput).mjava","sourceNew":"  SortedSetEntry readSortedSetEntry(IndexInput meta) throws IOException {\n    SortedSetEntry entry = new SortedSetEntry();\n    entry.format = meta.readVInt();\n    if (entry.format == SORTED_SET_TABLE) {\n      final int totalTableLength = meta.readInt();\n      if (totalTableLength > 256) {\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more than 256 values in its dictionary, got=\" + totalTableLength, meta);\n      }\n      entry.table = new long[totalTableLength];\n      for (int i = 0; i < totalTableLength; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n      final int tableSize = meta.readInt();\n      if (tableSize > totalTableLength + 1) { // +1 because of the empty set\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more set ids than ords in its dictionary, got \" + totalTableLength + \" ords and \" + tableSize + \" sets\", meta);\n      }\n      entry.tableOffsets = new int[tableSize + 1];\n      for (int i = 1; i < entry.tableOffsets.length; ++i) {\n        entry.tableOffsets[i] = entry.tableOffsets[i - 1] + meta.readInt();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.tableOffsets));\n    } else if (entry.format != SORTED_SINGLE_VALUED && entry.format != SORTED_WITH_ADDRESSES) {\n      throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  SortedSetEntry readSortedSetEntry(IndexInput meta) throws IOException {\n    SortedSetEntry entry = new SortedSetEntry();\n    entry.format = meta.readVInt();\n    if (entry.format == SORTED_SET_TABLE) {\n      final int totalTableLength = meta.readInt();\n      if (totalTableLength > 256) {\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more than 256 values in its dictionary, got=\" + totalTableLength, meta);\n      }\n      entry.table = new long[totalTableLength];\n      for (int i = 0; i < totalTableLength; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n      final int tableSize = meta.readInt();\n      if (tableSize > totalTableLength + 1) { // +1 because of the empty set\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more set ids than ords in its dictionary, got \" + totalTableLength + \" ords and \" + tableSize + \" sets\", meta);\n      }\n      entry.tableOffsets = new int[tableSize + 1];\n      for (int i = 1; i < entry.tableOffsets.length; ++i) {\n        entry.tableOffsets[i] = entry.tableOffsets[i - 1] + meta.readInt();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.tableOffsets));\n    } else if (entry.format != SORTED_SINGLE_VALUED && entry.format != SORTED_WITH_ADDRESSES) {\n      throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readSortedSetEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readSortedSetEntry(IndexInput).mjava","sourceNew":"  SortedSetEntry readSortedSetEntry(IndexInput meta) throws IOException {\n    SortedSetEntry entry = new SortedSetEntry();\n    entry.format = meta.readVInt();\n    if (entry.format == SORTED_SET_TABLE) {\n      final int totalTableLength = meta.readInt();\n      if (totalTableLength > 256) {\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more than 256 values in its dictionary, got=\" + totalTableLength, meta);\n      }\n      entry.table = new long[totalTableLength];\n      for (int i = 0; i < totalTableLength; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n      final int tableSize = meta.readInt();\n      if (tableSize > totalTableLength + 1) { // +1 because of the empty set\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more set ids than ords in its dictionary, got \" + totalTableLength + \" ords and \" + tableSize + \" sets\", meta);\n      }\n      entry.tableOffsets = new int[tableSize + 1];\n      for (int i = 1; i < entry.tableOffsets.length; ++i) {\n        entry.tableOffsets[i] = entry.tableOffsets[i - 1] + meta.readInt();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.tableOffsets));\n    } else if (entry.format != SORTED_SINGLE_VALUED && entry.format != SORTED_WITH_ADDRESSES) {\n      throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  SortedSetEntry readSortedSetEntry(IndexInput meta) throws IOException {\n    SortedSetEntry entry = new SortedSetEntry();\n    entry.format = meta.readVInt();\n    if (entry.format == SORTED_SET_TABLE) {\n      final int totalTableLength = meta.readInt();\n      if (totalTableLength > 256) {\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more than 256 values in its dictionary, got=\" + totalTableLength, meta);\n      }\n      entry.table = new long[totalTableLength];\n      for (int i = 0; i < totalTableLength; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n      final int tableSize = meta.readInt();\n      if (tableSize > totalTableLength + 1) { // +1 because of the empty set\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more set ids than ords in its dictionary, got \" + totalTableLength + \" ords and \" + tableSize + \" sets\", meta);\n      }\n      entry.tableOffsets = new int[tableSize + 1];\n      for (int i = 1; i < entry.tableOffsets.length; ++i) {\n        entry.tableOffsets[i] = entry.tableOffsets[i - 1] + meta.readInt();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.tableOffsets));\n    } else if (entry.format != SORTED_SINGLE_VALUED && entry.format != SORTED_WITH_ADDRESSES) {\n      throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readSortedSetEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readSortedSetEntry(IndexInput).mjava","sourceNew":"  SortedSetEntry readSortedSetEntry(IndexInput meta) throws IOException {\n    SortedSetEntry entry = new SortedSetEntry();\n    entry.format = meta.readVInt();\n    if (entry.format == SORTED_SET_TABLE) {\n      final int totalTableLength = meta.readInt();\n      if (totalTableLength > 256) {\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more than 256 values in its dictionary, got=\" + totalTableLength, meta);\n      }\n      entry.table = new long[totalTableLength];\n      for (int i = 0; i < totalTableLength; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n      final int tableSize = meta.readInt();\n      if (tableSize > totalTableLength + 1) { // +1 because of the empty set\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more set ids than ords in its dictionary, got \" + totalTableLength + \" ords and \" + tableSize + \" sets\", meta);\n      }\n      entry.tableOffsets = new int[tableSize + 1];\n      for (int i = 1; i < entry.tableOffsets.length; ++i) {\n        entry.tableOffsets[i] = entry.tableOffsets[i - 1] + meta.readInt();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.tableOffsets));\n    } else if (entry.format != SORTED_SINGLE_VALUED && entry.format != SORTED_WITH_ADDRESSES) {\n      throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  SortedSetEntry readSortedSetEntry(IndexInput meta) throws IOException {\n    SortedSetEntry entry = new SortedSetEntry();\n    entry.format = meta.readVInt();\n    if (entry.format == SORTED_SET_TABLE) {\n      final int totalTableLength = meta.readInt();\n      if (totalTableLength > 256) {\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more than 256 values in its dictionary, got=\" + totalTableLength, meta);\n      }\n      entry.table = new long[totalTableLength];\n      for (int i = 0; i < totalTableLength; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n      final int tableSize = meta.readInt();\n      if (tableSize > totalTableLength + 1) { // +1 because of the empty set\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more set ids than ords in its dictionary, got \" + totalTableLength + \" ords and \" + tableSize + \" sets\", meta);\n      }\n      entry.tableOffsets = new int[tableSize + 1];\n      for (int i = 1; i < entry.tableOffsets.length; ++i) {\n        entry.tableOffsets[i] = entry.tableOffsets[i - 1] + meta.readInt();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.tableOffsets));\n    } else if (entry.format != SORTED_SINGLE_VALUED && entry.format != SORTED_WITH_ADDRESSES) {\n      throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}