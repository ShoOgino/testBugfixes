{"path":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#doTestSameTargetReindexing(boolean,boolean).mjava","commits":[{"id":"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","date":1562161956,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#doTestSameTargetReindexing(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSameTargetReindexing(boolean sourceRemove, boolean followAliases) throws Exception {\n    final String sourceCollection = \"sameTargetReindexing_\" + sourceRemove + \"_\" + followAliases;\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.setRemoveSource(sourceRemove);\n    req.setFollowAliases(followAliases);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    solrClient.getZkStateReader().aliasesManager.update();\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testSameTargetReindex_\" + sourceRemove, false);\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n    ClusterState state = solrClient.getClusterStateProvider().getClusterState();\n    if (sourceRemove) {\n      assertFalse(\"source collection still present\", state.hasCollection(sourceCollection));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3821108e77348b1cdb6baf5422727f926ba7af61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3821108e77348b1cdb6baf5422727f926ba7af61","date":1582300636,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#doTestSameTargetReindexing(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#doTestSameTargetReindexing(boolean,boolean).mjava","sourceNew":"  private void doTestSameTargetReindexing(boolean sourceRemove, boolean followAliases) throws Exception {\n    final String sourceCollection = \"sameTargetReindexing_\" + sourceRemove + \"_\" + followAliases;\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.setRemoveSource(sourceRemove);\n    req.setFollowAliases(followAliases);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    solrClient.getZkStateReader().aliasesManager.update();\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n    ClusterState state = solrClient.getClusterStateProvider().getClusterState();\n    if (sourceRemove) {\n      assertFalse(\"source collection still present\", state.hasCollection(sourceCollection));\n    }\n  }\n\n","sourceOld":"  private void doTestSameTargetReindexing(boolean sourceRemove, boolean followAliases) throws Exception {\n    final String sourceCollection = \"sameTargetReindexing_\" + sourceRemove + \"_\" + followAliases;\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.setRemoveSource(sourceRemove);\n    req.setFollowAliases(followAliases);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    solrClient.getZkStateReader().aliasesManager.update();\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testSameTargetReindex_\" + sourceRemove, false);\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n    ClusterState state = solrClient.getClusterStateProvider().getClusterState();\n    if (sourceRemove) {\n      assertFalse(\"source collection still present\", state.hasCollection(sourceCollection));\n    }\n  }\n\n","bugFix":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3821108e77348b1cdb6baf5422727f926ba7af61":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3821108e77348b1cdb6baf5422727f926ba7af61"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3821108e77348b1cdb6baf5422727f926ba7af61":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["3821108e77348b1cdb6baf5422727f926ba7af61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}