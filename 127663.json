{"path":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeQueryCollating(Analyzer,String,String,String,String).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeQueryCollating(Analyzer,String,String,String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeQueryCollating(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiRangeQueryCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n\n    Query query = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", secondBeg, secondEnd, true, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeQueryCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n\n    Query query = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", secondBeg, secondEnd, true, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeQueryCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeQueryCollating(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiRangeQueryCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n\n    Query query = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", secondBeg, secondEnd, true, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeQueryCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n\n    Query query = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", secondBeg, secondEnd, true, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeQueryCollating(Analyzer,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  public void testFarsiRangeQueryCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n\n    Query query = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", secondBeg, secondEnd, true, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeQueryCollating(Analyzer,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  public void testFarsiRangeQueryCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n\n    Query query = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", secondBeg, secondEnd, true, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}