{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","sourceNew":"  public void testPayloadNear() throws IOException {\n    SpanNearQuery q1, q2;\n    PayloadNearQuery query;\n    //SpanNearQuery(clauses, 10000, false)\n    q1 = spanNearQuery(\"field2\", \"twenty two\");\n    q2 = spanNearQuery(\"field2\", \"twenty three\");\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = q1;\n    clauses[1] = q2;\n    query = new PayloadNearQuery(clauses, 10, false); \n    //System.out.println(query.toString());\n    assertEquals(12, searcher.search(query, null, 100).totalHits);\n    /*\n    System.out.println(hits.totalHits);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      System.out.println(\"doc: \"+doc.doc+\", score: \"+doc.score);\n    }\n    */\n  }\n\n","sourceOld":"  public void testPayloadNear() throws IOException {\n    SpanNearQuery q1, q2;\n    PayloadNearQuery query;\n    //SpanNearQuery(clauses, 10000, false)\n    q1 = spanNearQuery(\"field2\", \"twenty two\");\n    q2 = spanNearQuery(\"field2\", \"twenty three\");\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = q1;\n    clauses[1] = q2;\n    query = new PayloadNearQuery(clauses, 10, false); \n    //System.out.println(query.toString());\n    assertEquals(12, searcher.search(query, null, 100).totalHits);\n    /*\n    System.out.println(hits.totalHits);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      System.out.println(\"doc: \"+doc.doc+\", score: \"+doc.score);\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","sourceNew":"  public void testPayloadNear() throws IOException {\n    SpanNearQuery q1, q2;\n    PayloadNearQuery query;\n    //SpanNearQuery(clauses, 10000, false)\n    q1 = spanNearQuery(\"field2\", \"twenty two\");\n    q2 = spanNearQuery(\"field2\", \"twenty three\");\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = q1;\n    clauses[1] = q2;\n    query = new PayloadNearQuery(clauses, 10, false); \n    //System.out.println(query.toString());\n    assertEquals(12, searcher.search(query, 100).totalHits);\n    /*\n    System.out.println(hits.totalHits);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      System.out.println(\"doc: \"+doc.doc+\", score: \"+doc.score);\n    }\n    */\n  }\n\n","sourceOld":"  public void testPayloadNear() throws IOException {\n    SpanNearQuery q1, q2;\n    PayloadNearQuery query;\n    //SpanNearQuery(clauses, 10000, false)\n    q1 = spanNearQuery(\"field2\", \"twenty two\");\n    q2 = spanNearQuery(\"field2\", \"twenty three\");\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = q1;\n    clauses[1] = q2;\n    query = new PayloadNearQuery(clauses, 10, false); \n    //System.out.println(query.toString());\n    assertEquals(12, searcher.search(query, null, 100).totalHits);\n    /*\n    System.out.println(hits.totalHits);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      System.out.println(\"doc: \"+doc.doc+\", score: \"+doc.score);\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73561ba4c64c1aea2ba4b3873f80b9b2a2946816","date":1438618499,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","sourceNew":null,"sourceOld":"  public void testPayloadNear() throws IOException {\n    SpanNearQuery q1, q2;\n    PayloadNearQuery query;\n    //SpanNearQuery(clauses, 10000, false)\n    q1 = spanNearQuery(\"field2\", \"twenty two\");\n    q2 = spanNearQuery(\"field2\", \"twenty three\");\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = q1;\n    clauses[1] = q2;\n    query = new PayloadNearQuery(clauses, 10, false); \n    //System.out.println(query.toString());\n    assertEquals(12, searcher.search(query, 100).totalHits);\n    /*\n    System.out.println(hits.totalHits);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      System.out.println(\"doc: \"+doc.doc+\", score: \"+doc.score);\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73561ba4c64c1aea2ba4b3873f80b9b2a2946816":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73561ba4c64c1aea2ba4b3873f80b9b2a2946816"]},"commit2Childs":{"73561ba4c64c1aea2ba4b3873f80b9b2a2946816":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["73561ba4c64c1aea2ba4b3873f80b9b2a2946816"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}