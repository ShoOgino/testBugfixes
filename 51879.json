{"path":"lucene/src/java/org/apache/lucene/search/FieldCache#getShorts(IndexReader,String,boolean).mjava","commits":[{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getShorts(IndexReader,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getShorts(IndexReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public short[] getShorts (IndexReader reader, String field, boolean setDocsWithField)\n  throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public short[] getShorts (IndexReader reader, String field)\n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicIndexReader,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getShorts(IndexReader,String,boolean).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public short[] getShorts (AtomicIndexReader reader, String field, boolean setDocsWithField)\n  throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public short[] getShorts (IndexReader reader, String field, boolean setDocsWithField)\n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicReader,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getShorts(IndexReader,String,boolean).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public short[] getShorts (AtomicReader reader, String field, boolean setDocsWithField)\n  throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public short[] getShorts (IndexReader reader, String field, boolean setDocsWithField)\n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["382fe3a6ca9745891afebda9b9a57cc158305545","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["382fe3a6ca9745891afebda9b9a57cc158305545"],"382fe3a6ca9745891afebda9b9a57cc158305545":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}