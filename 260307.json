{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    String lastMod = DataImporter.DATE_TIME_FORMAT.get().format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    String lastMod = DataImporter.DATE_TIME_FORMAT.get().format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    String lastMod = DataImporter.DATE_TIME_FORMAT.get().format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    String lastMod = DataImporter.DATE_TIME_FORMAT.get().format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    String lastMod = DataImporter.DATE_TIME_FORMAT.get().format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d85d6f9087bbc2d7d39ee8e3574182d63c54745","date":1353440332,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":["2b23c1453febc85f31827ff5d92bb4b8d895d82b","4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2","date":1353944206,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    String lastMod = DataImporter.DATE_TIME_FORMAT.get().format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set last modified time\")\n  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set last modified time\")\n  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    @SuppressWarnings({\"rawtypes\"})\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set last modified time\")\n  @Test\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":null,"sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set last modified time\")\n  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testNTOT() throws IOException {\n    File tmpdir = createTempDir().toFile();\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    @SuppressWarnings({\"rawtypes\"})\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolver resolver = new VariableResolver();\n    String lastMod = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    fList = getFiles(resolver, attrs);\n    assertEquals(1, fList.size());\n    assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","9d3d365762604952e436b51980101dfc84cc1b3e"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9d3d365762604952e436b51980101dfc84cc1b3e","5eb2511ababf862ea11e10761c70ee560cd84510"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"6d85d6f9087bbc2d7d39ee8e3574182d63c54745":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2"],"9d3d365762604952e436b51980101dfc84cc1b3e":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["5eb2511ababf862ea11e10761c70ee560cd84510"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2":["407687e67faf6e1f02a211ca078d8e3eed631027","d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"6d85d6f9087bbc2d7d39ee8e3574182d63c54745":["ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}