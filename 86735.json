{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type],boolean).mjava","commits":[{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":1,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type],boolean).mjava","sourceNew":"  private List<SolrCmdDistributor.Node> getCollectionUrls(String collection, EnumSet<Replica.Type> types, boolean onlyLeaders) {\n    ClusterState clusterState = zkController.getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<SolrCmdDistributor.Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      if (onlyLeaders) {\n        Replica replica = docCollection.getLeader(replicas.getName());\n        if (replica != null) {\n          ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(replica);\n          urls.add(new SolrCmdDistributor.StdNode(nodeProps, collection, replicas.getName()));\n        }\n        continue;\n      }\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n\n      for (Map.Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new SolrCmdDistributor.StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(String collection, EnumSet<Replica.Type> types, boolean onlyLeaders) {\n    ClusterState clusterState = zkController.getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      if (onlyLeaders) {\n        Replica replica = docCollection.getLeader(replicas.getName());\n        if (replica != null) {\n          ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(replica);\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n        continue;\n      }\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88922bf68f0b509aba218f1b9e7ef5981b4d13bc","date":1570820823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type],boolean).mjava","sourceNew":"  private List<SolrCmdDistributor.Node> getCollectionUrls(String collection, EnumSet<Replica.Type> types, boolean onlyLeaders) {\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<SolrCmdDistributor.Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      if (onlyLeaders) {\n        Replica replica = docCollection.getLeader(replicas.getName());\n        if (replica != null) {\n          ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(replica);\n          urls.add(new SolrCmdDistributor.StdNode(nodeProps, collection, replicas.getName()));\n        }\n        continue;\n      }\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n\n      for (Map.Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new SolrCmdDistributor.StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<SolrCmdDistributor.Node> getCollectionUrls(String collection, EnumSet<Replica.Type> types, boolean onlyLeaders) {\n    ClusterState clusterState = zkController.getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<SolrCmdDistributor.Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      if (onlyLeaders) {\n        Replica replica = docCollection.getLeader(replicas.getName());\n        if (replica != null) {\n          ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(replica);\n          urls.add(new SolrCmdDistributor.StdNode(nodeProps, collection, replicas.getName()));\n        }\n        continue;\n      }\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n\n      for (Map.Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new SolrCmdDistributor.StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type],boolean).mjava","sourceNew":"  private List<SolrCmdDistributor.Node> getCollectionUrls(String collection, EnumSet<Replica.Type> types, boolean onlyLeaders) {\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<SolrCmdDistributor.Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      if (onlyLeaders) {\n        Replica replica = docCollection.getLeader(replicas.getName());\n        if (replica != null) {\n          ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(replica);\n          urls.add(new SolrCmdDistributor.StdNode(nodeProps, collection, replicas.getName()));\n        }\n        continue;\n      }\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n\n      for (Map.Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new SolrCmdDistributor.StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<SolrCmdDistributor.Node> getCollectionUrls(String collection, EnumSet<Replica.Type> types, boolean onlyLeaders) {\n    ClusterState clusterState = zkController.getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<SolrCmdDistributor.Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      if (onlyLeaders) {\n        Replica replica = docCollection.getLeader(replicas.getName());\n        if (replica != null) {\n          ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(replica);\n          urls.add(new SolrCmdDistributor.StdNode(nodeProps, collection, replicas.getName()));\n        }\n        continue;\n      }\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n\n      for (Map.Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new SolrCmdDistributor.StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87","88922bf68f0b509aba218f1b9e7ef5981b4d13bc"]},"commit2Childs":{"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}