{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","commits":[{"id":"e99275efa2c9c9ae3bdba986218af82f2bf3dc30","date":1354658499,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(SegmentInfoPerCommit,FieldInfos,SegmentReader).mjava","sourceNew":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n          checkSimpleDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  private Status.DocValuesStatus testDocValues(SegmentInfoPerCommit info,\n                                               FieldInfos fieldInfos,\n                                               SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n          // nocommit hack hack hack\n          if (reader.core.simpleDVProducer != null) {\n            checkSimpleDocValues(fieldInfo, reader);\n          } else {\n            // hack hack hack\n            if (info.info.getCodec().getName().equals(\"SimpleText\")) {\n              throw new RuntimeException(\"docvalues lost for field: \" + fieldInfo + \"!!!!\");\n            }\n          }\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkSimpleDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n          checkSimpleDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e13bf6998389e201ae22c6e84079b9d6b5da0af","date":1358809420,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkSimpleDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":["7f351d299ea258483e82449dc6e79878d4b21185"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06ed528f8e32fa9a39305cc663599848779b2828","date":1359175649,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea3c18d8f37008425940502c58fd80ba4b5397c1","date":1361154566,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f351d299ea258483e82449dc6e79878d4b21185","date":1374759612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":["e99275efa2c9c9ae3bdba986218af82f2bf3dc30","1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"ea3c18d8f37008425940502c58fd80ba4b5397c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["7f351d299ea258483e82449dc6e79878d4b21185"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"06ed528f8e32fa9a39305cc663599848779b2828":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["0837ab0472feecb3a54260729d845f839e1cbd72"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["7f351d299ea258483e82449dc6e79878d4b21185","9faa42f41b6adb98daf009cf99a4ee239189e469"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","ea3c18d8f37008425940502c58fd80ba4b5397c1"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"7f351d299ea258483e82449dc6e79878d4b21185":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06ed528f8e32fa9a39305cc663599848779b2828"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"0837ab0472feecb3a54260729d845f839e1cbd72":["e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea3c18d8f37008425940502c58fd80ba4b5397c1":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["0837ab0472feecb3a54260729d845f839e1cbd72"],"06ed528f8e32fa9a39305cc663599848779b2828":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["06ed528f8e32fa9a39305cc663599848779b2828"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["7f351d299ea258483e82449dc6e79878d4b21185","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"7f351d299ea258483e82449dc6e79878d4b21185":["9faa42f41b6adb98daf009cf99a4ee239189e469","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ea3c18d8f37008425940502c58fd80ba4b5397c1","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e99275efa2c9c9ae3bdba986218af82f2bf3dc30","d4d69c535930b5cce125cff868d40f6373dc27d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"0837ab0472feecb3a54260729d845f839e1cbd72":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}