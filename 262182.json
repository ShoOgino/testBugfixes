{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","commits":[{"id":"74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9","date":1395396517,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = newSearcher(r);\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"wizard\"));\n    pq.add(new Term(\"field\", \"oz\"));\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4502af35901463492a41aacdd17abc1eddf7b1","date":1395476302,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","sourceNew":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"wizard\"));\n    pq.add(new Term(\"field\", \"oz\"));\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = newSearcher(r);\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"wizard\"));\n    pq.add(new Term(\"field\", \"oz\"));\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","sourceNew":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"wizard\"));\n    pq.add(new Term(\"field\", \"oz\"));\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"wizard\"));\n    pq.add(new Term(\"field\", \"oz\"));\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","sourceNew":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"wizard\"));\n    pq.add(new Term(\"field\", \"oz\"));\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"wizard\"));\n    pq.add(new Term(\"field\", \"oz\"));\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","sourceNew":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery(\"field\", \"wizard\", \"oz\");\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"wizard\"));\n    pq.add(new Term(\"field\", \"oz\"));\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","sourceNew":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery(\"field\", \"wizard\", \"oz\");\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery(\"field\", \"wizard\", \"oz\");\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","sourceNew":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery(\"field\", \"wizard\", \"oz\");\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery(\"field\", \"wizard\", \"oz\");\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","sourceNew":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery(\"field\", \"wizard\", \"oz\");\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery(\"field\", \"wizard\", \"oz\");\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testMissingSecondPassScore().mjava","sourceNew":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits.value);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery(\"field\", \"wizard\", \"oz\");\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits.value);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits.value);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingSecondPassScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using PhraseQuery, no slop:\n    PhraseQuery pq = new PhraseQuery(\"field\", \"wizard\", \"oz\");\n\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, pq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits2.totalHits);\n    assertEquals(\"1\", searcher.doc(hits2.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits2.scoreDocs[1].doc).get(\"id\"));\n\n    // Resort using SpanNearQuery:\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"wizard\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"oz\"));\n    SpanNearQuery snq = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0, true);\n\n    TopDocs hits3 = QueryRescorer.rescore(searcher, hits, snq, 2.0, 10);\n\n    // Resorting changed the order:\n    assertEquals(2, hits3.totalHits);\n    assertEquals(\"1\", searcher.doc(hits3.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits3.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"e9e1499c5d26c936238506df90a3c02c76707722":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["1e4502af35901463492a41aacdd17abc1eddf7b1"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["615370d2b876c3435773b5174df2e2242ad7981a"],"74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"1e4502af35901463492a41aacdd17abc1eddf7b1":["74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e9e1499c5d26c936238506df90a3c02c76707722"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9":["1e4502af35901463492a41aacdd17abc1eddf7b1"],"1e4502af35901463492a41aacdd17abc1eddf7b1":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}