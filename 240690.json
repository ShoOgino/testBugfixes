{"path":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates.Container#newUpdates(String,FieldInfo.DocValuesType,int).mjava","commits":[{"id":"70285ef5917fa2c8feec026d4be4d9c20fa89162","date":1401366288,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates.Container#newUpdates(String,FieldInfo.DocValuesType,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates.Container#newUpdates(String,Type,int).mjava","sourceNew":"    DocValuesFieldUpdates newUpdates(String field, FieldInfo.DocValuesType type, int maxDoc) {\n      switch (type) {\n        case NUMERIC:\n          assert numericDVUpdates.get(field) == null;\n          NumericDocValuesFieldUpdates numericUpdates = new NumericDocValuesFieldUpdates(field, maxDoc);\n          numericDVUpdates.put(field, numericUpdates);\n          return numericUpdates;\n        case BINARY:\n          assert binaryDVUpdates.get(field) == null;\n          BinaryDocValuesFieldUpdates binaryUpdates = new BinaryDocValuesFieldUpdates(field, maxDoc);\n          binaryDVUpdates.put(field, binaryUpdates);\n          return binaryUpdates;\n        default:\n          throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    }\n\n","sourceOld":"    DocValuesFieldUpdates newUpdates(String field, Type type, int maxDoc) {\n      switch (type) {\n        case NUMERIC:\n          assert numericDVUpdates.get(field) == null;\n          NumericDocValuesFieldUpdates numericUpdates = new NumericDocValuesFieldUpdates(field, maxDoc);\n          numericDVUpdates.put(field, numericUpdates);\n          return numericUpdates;\n        case BINARY:\n          assert binaryDVUpdates.get(field) == null;\n          BinaryDocValuesFieldUpdates binaryUpdates = new BinaryDocValuesFieldUpdates(field, maxDoc);\n          binaryDVUpdates.put(field, binaryUpdates);\n          return binaryUpdates;\n        default:\n          throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates.Container#newUpdates(String,DocValuesType,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates.Container#newUpdates(String,FieldInfo.DocValuesType,int).mjava","sourceNew":"    DocValuesFieldUpdates newUpdates(String field, DocValuesType type, int maxDoc) {\n      switch (type) {\n        case NUMERIC:\n          assert numericDVUpdates.get(field) == null;\n          NumericDocValuesFieldUpdates numericUpdates = new NumericDocValuesFieldUpdates(field, maxDoc);\n          numericDVUpdates.put(field, numericUpdates);\n          return numericUpdates;\n        case BINARY:\n          assert binaryDVUpdates.get(field) == null;\n          BinaryDocValuesFieldUpdates binaryUpdates = new BinaryDocValuesFieldUpdates(field, maxDoc);\n          binaryDVUpdates.put(field, binaryUpdates);\n          return binaryUpdates;\n        default:\n          throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    }\n\n","sourceOld":"    DocValuesFieldUpdates newUpdates(String field, FieldInfo.DocValuesType type, int maxDoc) {\n      switch (type) {\n        case NUMERIC:\n          assert numericDVUpdates.get(field) == null;\n          NumericDocValuesFieldUpdates numericUpdates = new NumericDocValuesFieldUpdates(field, maxDoc);\n          numericDVUpdates.put(field, numericUpdates);\n          return numericUpdates;\n        case BINARY:\n          assert binaryDVUpdates.get(field) == null;\n          BinaryDocValuesFieldUpdates binaryUpdates = new BinaryDocValuesFieldUpdates(field, maxDoc);\n          binaryDVUpdates.put(field, binaryUpdates);\n          return binaryUpdates;\n        default:\n          throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["70285ef5917fa2c8feec026d4be4d9c20fa89162"],"70285ef5917fa2c8feec026d4be4d9c20fa89162":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bb2842e561df4e8e9ad89010605fc86ac265465"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70285ef5917fa2c8feec026d4be4d9c20fa89162"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70285ef5917fa2c8feec026d4be4d9c20fa89162":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}