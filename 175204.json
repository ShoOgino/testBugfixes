{"path":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","commits":[{"id":"65c941e8dcb3bb0ee6b785e349a931111c65e8ff","date":1268850890,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n      new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try{\n      if( propFile == null )\n        engine.init();\n      else{\n        InputStream is = null;\n        try{\n          is = resourceLoader.getResourceStream( propFile );\n          Properties props = new Properties();\n          props.load( is );\n          engine.init( props );\n        }\n        finally{\n          if( is != null ) is.close();\n        }\n      }\n    }\n    catch( Exception e ){\n      throw new RuntimeException( e );\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0c840fcaa8a53dc8e038a0f7776c84283637f9","date":1268855982,"type":1,"author":"Yonik Seeley","isMerge":true,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n      new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try{\n      if( propFile == null )\n        engine.init();\n      else{\n        InputStream is = null;\n        try{\n          is = resourceLoader.getResourceStream( propFile );\n          Properties props = new Properties();\n          props.load( is );\n          engine.init( props );\n        }\n        finally{\n          if( is != null ) is.close();\n        }\n      }\n    }\n    catch( Exception e ){\n      throw new RuntimeException( e );\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"65c941e8dcb3bb0ee6b785e349a931111c65e8ff":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"fb0c840fcaa8a53dc8e038a0f7776c84283637f9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","65c941e8dcb3bb0ee6b785e349a931111c65e8ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"65c941e8dcb3bb0ee6b785e349a931111c65e8ff":["fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["65c941e8dcb3bb0ee6b785e349a931111c65e8ff","fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fb0c840fcaa8a53dc8e038a0f7776c84283637f9":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}