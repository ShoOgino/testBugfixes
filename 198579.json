{"path":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","commits":[{"id":"d76ab9983349b199b0e6f65776c0087b0c08a10d","date":1282230089,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"documemt\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_DICT, \"perDict\");\n\n    params.add(SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\");\n    params.add(SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertNotNull(\"suggestions\", suggestions);\n    NamedList suggestion;\n    Collection<String> theSuggestion;\n    suggestion = (NamedList) suggestions.get(\"foo\");\n    assertEquals(1, suggestion.get(\"numFound\"));\n    assertEquals(0, suggestion.get(\"startOffset\"));\n    assertEquals(suggestion.get(\"endOffset\"), 1);\n    theSuggestion = (Collection<String>) suggestion.get(\"suggestion\");\n    assertEquals(1, theSuggestion.size());\n    assertEquals(\"bar\", theSuggestion.iterator().next());\n\n    suggestion = (NamedList) suggestions.get(\"bar\");\n    assertEquals(1, suggestion.get(\"numFound\"));\n    assertEquals(2, suggestion.get(\"startOffset\"));\n    assertEquals(3, suggestion.get(\"endOffset\"));\n    theSuggestion = (Collection<String>) suggestion.get(\"suggestion\");\n    assertEquals(1, theSuggestion.size());\n    assertEquals(\"foo\", theSuggestion.iterator().next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a7a175b7f0ec01b79c2c142563b69cbae9c1490","date":1287098292,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"documemt\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_DICT, \"perDict\");\n\n    params.add(SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\");\n    params.add(SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertNotNull(\"suggestions\", suggestions);\n    NamedList suggestion;\n    Collection<String> theSuggestion;\n    suggestion = (NamedList) suggestions.get(\"foo\");\n    assertEquals(1, suggestion.get(\"numFound\"));\n    assertEquals(0, suggestion.get(\"startOffset\"));\n    assertEquals(suggestion.get(\"endOffset\"), 1);\n    theSuggestion = (Collection<String>) suggestion.get(\"suggestion\");\n    assertEquals(1, theSuggestion.size());\n    assertEquals(\"bar\", theSuggestion.iterator().next());\n\n    suggestion = (NamedList) suggestions.get(\"bar\");\n    assertEquals(1, suggestion.get(\"numFound\"));\n    assertEquals(2, suggestion.get(\"startOffset\"));\n    assertEquals(3, suggestion.get(\"endOffset\"));\n    theSuggestion = (Collection<String>) suggestion.get(\"suggestion\");\n    assertEquals(1, theSuggestion.size());\n    assertEquals(\"foo\", theSuggestion.iterator().next());\n  }\n\n","bugFix":null,"bugIntro":["fae674af95d70b74b32add96ef03f3d021cac48a","fae674af95d70b74b32add96ef03f3d021cac48a","fae674af95d70b74b32add96ef03f3d021cac48a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"documemt\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_DICT, \"perDict\");\n\n    params.add(SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\");\n    params.add(SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertNotNull(\"suggestions\", suggestions);\n    NamedList suggestion;\n    Collection<String> theSuggestion;\n    suggestion = (NamedList) suggestions.get(\"foo\");\n    assertEquals(1, suggestion.get(\"numFound\"));\n    assertEquals(0, suggestion.get(\"startOffset\"));\n    assertEquals(suggestion.get(\"endOffset\"), 1);\n    theSuggestion = (Collection<String>) suggestion.get(\"suggestion\");\n    assertEquals(1, theSuggestion.size());\n    assertEquals(\"bar\", theSuggestion.iterator().next());\n\n    suggestion = (NamedList) suggestions.get(\"bar\");\n    assertEquals(1, suggestion.get(\"numFound\"));\n    assertEquals(2, suggestion.get(\"startOffset\"));\n    assertEquals(3, suggestion.get(\"endOffset\"));\n    theSuggestion = (Collection<String>) suggestion.get(\"suggestion\");\n    assertEquals(1, theSuggestion.size());\n    assertEquals(\"foo\", theSuggestion.iterator().next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d76ab9983349b199b0e6f65776c0087b0c08a10d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["6a7a175b7f0ec01b79c2c142563b69cbae9c1490"],"c26f00b574427b55127e869b935845554afde1fa":["6a7a175b7f0ec01b79c2c142563b69cbae9c1490","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["6a7a175b7f0ec01b79c2c142563b69cbae9c1490"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a7a175b7f0ec01b79c2c142563b69cbae9c1490"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d76ab9983349b199b0e6f65776c0087b0c08a10d","6a7a175b7f0ec01b79c2c142563b69cbae9c1490"],"6a7a175b7f0ec01b79c2c142563b69cbae9c1490":["d76ab9983349b199b0e6f65776c0087b0c08a10d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"d76ab9983349b199b0e6f65776c0087b0c08a10d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","6a7a175b7f0ec01b79c2c142563b69cbae9c1490"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d76ab9983349b199b0e6f65776c0087b0c08a10d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"6a7a175b7f0ec01b79c2c142563b69cbae9c1490":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}