{"path":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541","date":1284416022,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\r\n    if (!rb.doFacets) return;\r\n\r\n\r\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FACETS)!=0) {\r\n      SimpleOrderedMap<List<NamedList<Object>>> tf = rb._pivots;\r\n      if ( null == tf ) {\r\n        tf = new SimpleOrderedMap<List<NamedList<Object>>>();\r\n        rb._pivots = tf;\r\n      }\r\n      for (ShardResponse srsp: sreq.responses) {\r\n        int shardNum = rb.getShardNum(srsp.getShard());\r\n\r\n        NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\r\n\r\n        // handle facet trees from shards\r\n        SimpleOrderedMap<List<NamedList<Object>>> shard_pivots = \r\n          (SimpleOrderedMap<List<NamedList<Object>>>)facet_counts.get( PIVOT_KEY );\r\n        \r\n        if ( shard_pivots != null ) {\r\n          for (int j=0; j< shard_pivots.size(); j++) {\r\n            // TODO -- accumulate the results from each shard\r\n            // The following code worked to accumulate facets for an previous \r\n            // two level patch... it is here for reference till someone can upgrade\r\n            /**\r\n            String shard_tree_name = (String) shard_pivots.getName( j );\r\n            SimpleOrderedMap<NamedList> shard_tree = (SimpleOrderedMap<NamedList>)shard_pivots.getVal( j );\r\n            SimpleOrderedMap<NamedList> facet_tree = tf.get( shard_tree_name );\r\n            if ( null == facet_tree) { \r\n              facet_tree = new SimpleOrderedMap<NamedList>(); \r\n              tf.add( shard_tree_name, facet_tree );\r\n            }\r\n\r\n            for( int o = 0; o < shard_tree.size() ; o++ ) {\r\n              String shard_outer = (String) shard_tree.getName( o );\r\n              NamedList shard_innerList = (NamedList) shard_tree.getVal( o );\r\n              NamedList tree_innerList  = (NamedList) facet_tree.get( shard_outer );\r\n              if ( null == tree_innerList ) { \r\n                tree_innerList = new NamedList();\r\n                facet_tree.add( shard_outer, tree_innerList );\r\n              }\r\n\r\n              for ( int i = 0 ; i < shard_innerList.size() ; i++ ) {\r\n                String shard_term = (String) shard_innerList.getName( i );\r\n                long shard_count  = ((Number) shard_innerList.getVal(i)).longValue();\r\n                int tree_idx      = tree_innerList.indexOf( shard_term, 0 );\r\n\r\n                if ( -1 == tree_idx ) {\r\n                  tree_innerList.add( shard_term, shard_count );\r\n                } else {\r\n                  long tree_count = ((Number) tree_innerList.getVal( tree_idx )).longValue();\r\n                  tree_innerList.setVal( tree_idx, shard_count + tree_count );\r\n                }\r\n              } // innerList loop\r\n            } // outer loop\r\n              **/\r\n          } // each tree loop\r\n        }\r\n      }\r\n    } \r\n    return ;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FACETS)!=0) {\n      SimpleOrderedMap<List<NamedList<Object>>> tf = rb._pivots;\n      if ( null == tf ) {\n        tf = new SimpleOrderedMap<List<NamedList<Object>>>();\n        rb._pivots = tf;\n      }\n      for (ShardResponse srsp: sreq.responses) {\n        int shardNum = rb.getShardNum(srsp.getShard());\n\n        NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n\n        // handle facet trees from shards\n        SimpleOrderedMap<List<NamedList<Object>>> shard_pivots = \n          (SimpleOrderedMap<List<NamedList<Object>>>)facet_counts.get( PIVOT_KEY );\n        \n        if ( shard_pivots != null ) {\n          for (int j=0; j< shard_pivots.size(); j++) {\n            // TODO -- accumulate the results from each shard\n            // The following code worked to accumulate facets for an previous \n            // two level patch... it is here for reference till someone can upgrade\n            /**\n            String shard_tree_name = (String) shard_pivots.getName( j );\n            SimpleOrderedMap<NamedList> shard_tree = (SimpleOrderedMap<NamedList>)shard_pivots.getVal( j );\n            SimpleOrderedMap<NamedList> facet_tree = tf.get( shard_tree_name );\n            if ( null == facet_tree) { \n              facet_tree = new SimpleOrderedMap<NamedList>(); \n              tf.add( shard_tree_name, facet_tree );\n            }\n\n            for( int o = 0; o < shard_tree.size() ; o++ ) {\n              String shard_outer = (String) shard_tree.getName( o );\n              NamedList shard_innerList = (NamedList) shard_tree.getVal( o );\n              NamedList tree_innerList  = (NamedList) facet_tree.get( shard_outer );\n              if ( null == tree_innerList ) { \n                tree_innerList = new NamedList();\n                facet_tree.add( shard_outer, tree_innerList );\n              }\n\n              for ( int i = 0 ; i < shard_innerList.size() ; i++ ) {\n                String shard_term = (String) shard_innerList.getName( i );\n                long shard_count  = ((Number) shard_innerList.getVal(i)).longValue();\n                int tree_idx      = tree_innerList.indexOf( shard_term, 0 );\n\n                if ( -1 == tree_idx ) {\n                  tree_innerList.add( shard_term, shard_count );\n                } else {\n                  long tree_count = ((Number) tree_innerList.getVal( tree_idx )).longValue();\n                  tree_innerList.setVal( tree_idx, shard_count + tree_count );\n                }\n              } // innerList loop\n            } // outer loop\n              **/\n          } // each tree loop\n        }\n      }\n    } \n    return ;\n  }\n\n","sourceOld":"  @Override\r\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\r\n    if (!rb.doFacets) return;\r\n\r\n\r\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FACETS)!=0) {\r\n      SimpleOrderedMap<List<NamedList<Object>>> tf = rb._pivots;\r\n      if ( null == tf ) {\r\n        tf = new SimpleOrderedMap<List<NamedList<Object>>>();\r\n        rb._pivots = tf;\r\n      }\r\n      for (ShardResponse srsp: sreq.responses) {\r\n        int shardNum = rb.getShardNum(srsp.getShard());\r\n\r\n        NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\r\n\r\n        // handle facet trees from shards\r\n        SimpleOrderedMap<List<NamedList<Object>>> shard_pivots = \r\n          (SimpleOrderedMap<List<NamedList<Object>>>)facet_counts.get( PIVOT_KEY );\r\n        \r\n        if ( shard_pivots != null ) {\r\n          for (int j=0; j< shard_pivots.size(); j++) {\r\n            // TODO -- accumulate the results from each shard\r\n            // The following code worked to accumulate facets for an previous \r\n            // two level patch... it is here for reference till someone can upgrade\r\n            /**\r\n            String shard_tree_name = (String) shard_pivots.getName( j );\r\n            SimpleOrderedMap<NamedList> shard_tree = (SimpleOrderedMap<NamedList>)shard_pivots.getVal( j );\r\n            SimpleOrderedMap<NamedList> facet_tree = tf.get( shard_tree_name );\r\n            if ( null == facet_tree) { \r\n              facet_tree = new SimpleOrderedMap<NamedList>(); \r\n              tf.add( shard_tree_name, facet_tree );\r\n            }\r\n\r\n            for( int o = 0; o < shard_tree.size() ; o++ ) {\r\n              String shard_outer = (String) shard_tree.getName( o );\r\n              NamedList shard_innerList = (NamedList) shard_tree.getVal( o );\r\n              NamedList tree_innerList  = (NamedList) facet_tree.get( shard_outer );\r\n              if ( null == tree_innerList ) { \r\n                tree_innerList = new NamedList();\r\n                facet_tree.add( shard_outer, tree_innerList );\r\n              }\r\n\r\n              for ( int i = 0 ; i < shard_innerList.size() ; i++ ) {\r\n                String shard_term = (String) shard_innerList.getName( i );\r\n                long shard_count  = ((Number) shard_innerList.getVal(i)).longValue();\r\n                int tree_idx      = tree_innerList.indexOf( shard_term, 0 );\r\n\r\n                if ( -1 == tree_idx ) {\r\n                  tree_innerList.add( shard_term, shard_count );\r\n                } else {\r\n                  long tree_count = ((Number) tree_innerList.getVal( tree_idx )).longValue();\r\n                  tree_innerList.setVal( tree_idx, shard_count + tree_count );\r\n                }\r\n              } // innerList loop\r\n            } // outer loop\r\n              **/\r\n          } // each tree loop\r\n        }\r\n      }\r\n    } \r\n    return ;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03a198be002bb6786dce54cf550c3ca7bb7b88a9","date":1287519003,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FACETS)!=0) {\n      SimpleOrderedMap<List<NamedList<Object>>> tf = rb._pivots;\n      if ( null == tf ) {\n        tf = new SimpleOrderedMap<List<NamedList<Object>>>();\n        rb._pivots = tf;\n      }\n      for (ShardResponse srsp: sreq.responses) {\n        int shardNum = rb.getShardNum(srsp.getShard());\n\n        NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n\n        // handle facet trees from shards\n        SimpleOrderedMap<List<NamedList<Object>>> shard_pivots = \n          (SimpleOrderedMap<List<NamedList<Object>>>)facet_counts.get( PIVOT_KEY );\n        \n        if ( shard_pivots != null ) {\n          for (int j=0; j< shard_pivots.size(); j++) {\n            // TODO -- accumulate the results from each shard\n            // The following code worked to accumulate facets for an previous \n            // two level patch... it is here for reference till someone can upgrade\n            /**\n            String shard_tree_name = (String) shard_pivots.getName( j );\n            SimpleOrderedMap<NamedList> shard_tree = (SimpleOrderedMap<NamedList>)shard_pivots.getVal( j );\n            SimpleOrderedMap<NamedList> facet_tree = tf.get( shard_tree_name );\n            if ( null == facet_tree) { \n              facet_tree = new SimpleOrderedMap<NamedList>(); \n              tf.add( shard_tree_name, facet_tree );\n            }\n\n            for( int o = 0; o < shard_tree.size() ; o++ ) {\n              String shard_outer = (String) shard_tree.getName( o );\n              NamedList shard_innerList = (NamedList) shard_tree.getVal( o );\n              NamedList tree_innerList  = (NamedList) facet_tree.get( shard_outer );\n              if ( null == tree_innerList ) { \n                tree_innerList = new NamedList();\n                facet_tree.add( shard_outer, tree_innerList );\n              }\n\n              for ( int i = 0 ; i < shard_innerList.size() ; i++ ) {\n                String shard_term = (String) shard_innerList.getName( i );\n                long shard_count  = ((Number) shard_innerList.getVal(i)).longValue();\n                int tree_idx      = tree_innerList.indexOf( shard_term, 0 );\n\n                if ( -1 == tree_idx ) {\n                  tree_innerList.add( shard_term, shard_count );\n                } else {\n                  long tree_count = ((Number) tree_innerList.getVal( tree_idx )).longValue();\n                  tree_innerList.setVal( tree_idx, shard_count + tree_count );\n                }\n              } // innerList loop\n            } // outer loop\n              **/\n          } // each tree loop\n        }\n      }\n    } \n    return ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FACETS)!=0) {\n      SimpleOrderedMap<List<NamedList<Object>>> tf = rb._pivots;\n      if ( null == tf ) {\n        tf = new SimpleOrderedMap<List<NamedList<Object>>>();\n        rb._pivots = tf;\n      }\n      for (ShardResponse srsp: sreq.responses) {\n        int shardNum = rb.getShardNum(srsp.getShard());\n\n        NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n\n        // handle facet trees from shards\n        SimpleOrderedMap<List<NamedList<Object>>> shard_pivots = \n          (SimpleOrderedMap<List<NamedList<Object>>>)facet_counts.get( PIVOT_KEY );\n        \n        if ( shard_pivots != null ) {\n          for (int j=0; j< shard_pivots.size(); j++) {\n            // TODO -- accumulate the results from each shard\n            // The following code worked to accumulate facets for an previous \n            // two level patch... it is here for reference till someone can upgrade\n            /**\n            String shard_tree_name = (String) shard_pivots.getName( j );\n            SimpleOrderedMap<NamedList> shard_tree = (SimpleOrderedMap<NamedList>)shard_pivots.getVal( j );\n            SimpleOrderedMap<NamedList> facet_tree = tf.get( shard_tree_name );\n            if ( null == facet_tree) { \n              facet_tree = new SimpleOrderedMap<NamedList>(); \n              tf.add( shard_tree_name, facet_tree );\n            }\n\n            for( int o = 0; o < shard_tree.size() ; o++ ) {\n              String shard_outer = (String) shard_tree.getName( o );\n              NamedList shard_innerList = (NamedList) shard_tree.getVal( o );\n              NamedList tree_innerList  = (NamedList) facet_tree.get( shard_outer );\n              if ( null == tree_innerList ) { \n                tree_innerList = new NamedList();\n                facet_tree.add( shard_outer, tree_innerList );\n              }\n\n              for ( int i = 0 ; i < shard_innerList.size() ; i++ ) {\n                String shard_term = (String) shard_innerList.getName( i );\n                long shard_count  = ((Number) shard_innerList.getVal(i)).longValue();\n                int tree_idx      = tree_innerList.indexOf( shard_term, 0 );\n\n                if ( -1 == tree_idx ) {\n                  tree_innerList.add( shard_term, shard_count );\n                } else {\n                  long tree_count = ((Number) tree_innerList.getVal( tree_idx )).longValue();\n                  tree_innerList.setVal( tree_idx, shard_count + tree_count );\n                }\n              } // innerList loop\n            } // outer loop\n              **/\n          } // each tree loop\n        }\n      }\n    } \n    return ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541"],"601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"03a198be002bb6786dce54cf550c3ca7bb7b88a9":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"]},"commit2Childs":{"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"03a198be002bb6786dce54cf550c3ca7bb7b88a9":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}