{"path":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils.MockLinuxFileSystemProvider#MockLinuxFileSystemProvider(FileSystem,Map[String,FileStore],Path).mjava","commits":[{"id":"f1db7bd2068060be0b68fcca95c8270c7cb60f6c","date":1419003415,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils.MockLinuxFileSystemProvider#MockLinuxFileSystemProvider(FileSystem,Map[String,FileStore],Path).mjava","pathOld":"/dev/null","sourceNew":"    public MockLinuxFileSystemProvider(FileSystem delegateInstance, final Map<String,FileStore> filesToStore, Path root) {\n      super(\"mocklinux://\", delegateInstance);\n      final Collection<FileStore> allStores = new HashSet<>(filesToStore.values());\n      this.fileSystem = new FilterFileSystem(this, delegateInstance) {\n        @Override\n        public Iterable<FileStore> getFileStores() {\n          return allStores;\n        }\n\n        @Override\n        public Path getPath(String first, String... more) {\n          return new MockLinuxPath(super.getPath(first, more), this);\n        }\n      };\n      this.filesToStore = filesToStore;\n      this.root = root;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c4d4800310f2b63211f8c7538c896ee01332e5","date":1429094194,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils.MockLinuxFileSystemProvider#MockLinuxFileSystemProvider(FileSystem,Map[String,FileStore],Path).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils.MockLinuxFileSystemProvider#MockLinuxFileSystemProvider(FileSystem,Map[String,FileStore],Path).mjava","sourceNew":"    public MockLinuxFileSystemProvider(FileSystem delegateInstance, final Map<String,FileStore> filesToStore, Path root) {\n      super(\"mocklinux://\", delegateInstance);\n      final Collection<FileStore> allStores = new HashSet<>(filesToStore.values());\n      this.fileSystem = new FilterFileSystem(this, delegateInstance) {\n        @Override\n        public Iterable<FileStore> getFileStores() {\n          return allStores;\n        }\n\n        @Override\n        public Path getPath(String first, String... more) {\n          return new MockLinuxPath(delegateInstance.getPath(first, more), this);\n        }\n      };\n      this.filesToStore = filesToStore;\n      this.root = new MockLinuxPath(root, this.fileSystem);\n    }\n\n","sourceOld":"    public MockLinuxFileSystemProvider(FileSystem delegateInstance, final Map<String,FileStore> filesToStore, Path root) {\n      super(\"mocklinux://\", delegateInstance);\n      final Collection<FileStore> allStores = new HashSet<>(filesToStore.values());\n      this.fileSystem = new FilterFileSystem(this, delegateInstance) {\n        @Override\n        public Iterable<FileStore> getFileStores() {\n          return allStores;\n        }\n\n        @Override\n        public Path getPath(String first, String... more) {\n          return new MockLinuxPath(super.getPath(first, more), this);\n        }\n      };\n      this.filesToStore = filesToStore;\n      this.root = root;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"100d310b9270fdac19a5fd6847eac7d9dec8f898","date":1579748332,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils.MockLinuxFileSystemProvider#MockLinuxFileSystemProvider(FileSystem,Map[String,FileStore],Path).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils.MockLinuxFileSystemProvider#MockLinuxFileSystemProvider(FileSystem,Map[String,FileStore],Path).mjava","sourceNew":"    public MockLinuxFileSystemProvider(FileSystem delegateInstance, final Map<String,FileStore> filesToStore, Path root) {\n      super(\"mocklinux://\", delegateInstance);\n      if (mockedPath(root)) {\n        throw new AssumptionViolatedException(\"can't mock /sys and /dev inside of /sys or /dev!\");\n      }\n      final Collection<FileStore> allStores = new HashSet<>(filesToStore.values());\n      this.fileSystem = new FilterFileSystem(this, delegateInstance) {\n        @Override\n        public Iterable<FileStore> getFileStores() {\n          return allStores;\n        }\n\n        @Override\n        public Path getPath(String first, String... more) {\n          return new MockLinuxPath(delegateInstance.getPath(first, more), this);\n        }\n      };\n      this.filesToStore = filesToStore;\n      this.root = new MockLinuxPath(root, this.fileSystem);\n    }\n\n","sourceOld":"    public MockLinuxFileSystemProvider(FileSystem delegateInstance, final Map<String,FileStore> filesToStore, Path root) {\n      super(\"mocklinux://\", delegateInstance);\n      final Collection<FileStore> allStores = new HashSet<>(filesToStore.values());\n      this.fileSystem = new FilterFileSystem(this, delegateInstance) {\n        @Override\n        public Iterable<FileStore> getFileStores() {\n          return allStores;\n        }\n\n        @Override\n        public Path getPath(String first, String... more) {\n          return new MockLinuxPath(delegateInstance.getPath(first, more), this);\n        }\n      };\n      this.filesToStore = filesToStore;\n      this.root = new MockLinuxPath(root, this.fileSystem);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16c4d4800310f2b63211f8c7538c896ee01332e5":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"100d310b9270fdac19a5fd6847eac7d9dec8f898":["16c4d4800310f2b63211f8c7538c896ee01332e5"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["100d310b9270fdac19a5fd6847eac7d9dec8f898"]},"commit2Childs":{"16c4d4800310f2b63211f8c7538c896ee01332e5":["100d310b9270fdac19a5fd6847eac7d9dec8f898"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["16c4d4800310f2b63211f8c7538c896ee01332e5"],"100d310b9270fdac19a5fd6847eac7d9dec8f898":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}