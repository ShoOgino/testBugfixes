{"path":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          TermQuery tq = new TermQuery(t); // found a match\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          TermQuery tq = new TermQuery(t); // found a match\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      final Term placeholderTerm = new Term(query.field);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(BytesRef bytes, float boost) {\n          // add new TQ, we must clone the term, else it may get overwritten!\n          TermQuery tq = new TermQuery(placeholderTerm.createTerm(new BytesRef(bytes)));\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          TermQuery tq = new TermQuery(t); // found a match\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      final Term placeholderTerm = new Term(query.field);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(BytesRef bytes, float boost) {\n          // add new TQ, we must clone the term, else it may get overwritten!\n          TermQuery tq = new TermQuery(placeholderTerm.createTerm(new BytesRef(bytes)));\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          TermQuery tq = new TermQuery(t); // found a match\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      final Term placeholderTerm = new Term(query.field);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        @Override\n        public boolean collect(TermsEnum termsEnum, BytesRef bytes, float boost) {\n          // add new TQ, we must clone the term, else it may get overwritten!\n          TermQuery tq = new TermQuery(placeholderTerm.createTerm(new BytesRef(bytes)), termsEnum.docFreq());\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      final Term placeholderTerm = new Term(query.field);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(BytesRef bytes, float boost) {\n          // add new TQ, we must clone the term, else it may get overwritten!\n          TermQuery tq = new TermQuery(placeholderTerm.createTerm(new BytesRef(bytes)));\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n      collectTerms(reader, query, col);\n      \n      final Term placeholderTerm = new Term(query.field);\n      final BooleanQuery result = new BooleanQuery(true);\n      final int size = col.terms.size();\n      if (size > 0) {\n        final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n        final int[] docFreq = col.array.docFreq;\n        final float[] boost = col.array.boost;\n        for (int i = 0; i < size; i++) {\n          final int pos = sort[i];\n          final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n          assert reader.docFreq(term) == docFreq[pos];\n          final TermQuery tq = new TermQuery(term, docFreq[pos]);\n          tq.setBoost(query.getBoost() * boost[pos]);\n          result.add(tq, BooleanClause.Occur.SHOULD);\n        }\n      }\n      query.incTotalNumberOfTerms(size);\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      final Term placeholderTerm = new Term(query.field);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        @Override\n        public boolean collect(TermsEnum termsEnum, BytesRef bytes, float boost) {\n          // add new TQ, we must clone the term, else it may get overwritten!\n          TermQuery tq = new TermQuery(placeholderTerm.createTerm(new BytesRef(bytes)), termsEnum.docFreq());\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n      collectTerms(reader, query, col);\n      \n      final Term placeholderTerm = new Term(query.field);\n      final BooleanQuery result = new BooleanQuery(true);\n      final int size = col.terms.size();\n      if (size > 0) {\n        final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n        final int[] docFreq = col.array.docFreq;\n        final float[] boost = col.array.boost;\n        for (int i = 0; i < size; i++) {\n          final int pos = sort[i];\n          final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n          assert reader.docFreq(term) == docFreq[pos];\n          final TermQuery tq = new TermQuery(term, docFreq[pos]);\n          tq.setBoost(query.getBoost() * boost[pos]);\n          result.add(tq, BooleanClause.Occur.SHOULD);\n        }\n      }\n      query.incTotalNumberOfTerms(size);\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      final Term placeholderTerm = new Term(query.field);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        @Override\n        public boolean collect(TermsEnum termsEnum, BytesRef bytes, float boost) {\n          // add new TQ, we must clone the term, else it may get overwritten!\n          TermQuery tq = new TermQuery(placeholderTerm.createTerm(new BytesRef(bytes)), termsEnum.docFreq());\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n      collectTerms(reader, query, col);\n      \n      final Term placeholderTerm = new Term(query.field);\n      final BooleanQuery result = new BooleanQuery(true);\n      final int size = col.terms.size();\n      if (size > 0) {\n        final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n        final int[] docFreq = col.array.docFreq;\n        final float[] boost = col.array.boost;\n        for (int i = 0; i < size; i++) {\n          final int pos = sort[i];\n          final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n          assert reader.docFreq(term) == docFreq[pos];\n          final TermQuery tq = new TermQuery(term, docFreq[pos]);\n          tq.setBoost(query.getBoost() * boost[pos]);\n          result.add(tq, BooleanClause.Occur.SHOULD);\n        }\n      }\n      query.incTotalNumberOfTerms(size);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n      collectTerms(reader, query, col);\n      \n      final Term placeholderTerm = new Term(query.field);\n      final BooleanQuery result = new BooleanQuery(true);\n      final int size = col.terms.size();\n      if (size > 0) {\n        final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n        final int[] docFreq = col.array.docFreq;\n        final float[] boost = col.array.boost;\n        for (int i = 0; i < size; i++) {\n          final int pos = sort[i];\n          final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n          assert reader.docFreq(term) == docFreq[pos];\n          final TermQuery tq = new TermQuery(term, docFreq[pos]);\n          tq.setBoost(query.getBoost() * boost[pos]);\n          result.add(tq, BooleanClause.Occur.SHOULD);\n        }\n      }\n      query.incTotalNumberOfTerms(size);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      final Term placeholderTerm = new Term(query.field);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(BytesRef bytes, float boost) {\n          // add new TQ, we must clone the term, else it may get overwritten!\n          TermQuery tq = new TermQuery(placeholderTerm.createTerm(new BytesRef(bytes)));\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","744486748bc5bee772100e49230e5bca39bac99a"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","744486748bc5bee772100e49230e5bca39bac99a"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","33a8b1f99104f4144f210f5d068411c297cd7163"],"744486748bc5bee772100e49230e5bca39bac99a":["33a8b1f99104f4144f210f5d068411c297cd7163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["744486748bc5bee772100e49230e5bca39bac99a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","744486748bc5bee772100e49230e5bca39bac99a"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","5f4e87790277826a2aea119328600dfb07761f32"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}