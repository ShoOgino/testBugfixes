{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(IndexReader,TestReopen,int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(IndexReader,TestReopen,int,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(IndexReader,TestReopen,int,boolean).mjava","sourceNew":"  ReaderCouple refreshReader(IndexReader reader, TestReopen test, int modify, boolean hasChanges) throws IOException {\n    synchronized (createReaderMutex) {\n      IndexReader r = null;\n      if (test != null) {\n        test.modifyIndex(modify);\n        r = test.openReader();\n      }\n      \n      IndexReader refreshed = null;\n      try {\n        refreshed = reader.reopen();\n      } finally {\n        if (refreshed == null && r != null) {\n          // Hit exception -- close opened reader\n          r.close();\n        }\n      }\n      \n      if (hasChanges) {\n        if (refreshed == reader) {\n          fail(\"No new IndexReader instance created during refresh.\");\n        }\n      } else {\n        if (refreshed != reader) {\n          fail(\"New IndexReader instance created during refresh even though index had no changes.\");\n        }\n      }\n      \n      return new ReaderCouple(r, refreshed);\n    }\n  }\n\n","sourceOld":"  ReaderCouple refreshReader(IndexReader reader, TestReopen test, int modify, boolean hasChanges) throws IOException {\n    synchronized (createReaderMutex) {\n      IndexReader r = null;\n      if (test != null) {\n        test.modifyIndex(modify);\n        r = test.openReader();\n      }\n      \n      IndexReader refreshed = null;\n      try {\n        refreshed = reader.reopen();\n      } finally {\n        if (refreshed == null && r != null) {\n          // Hit exception -- close opened reader\n          r.close();\n        }\n      }\n      \n      if (hasChanges) {\n        if (refreshed == reader) {\n          fail(\"No new IndexReader instance created during refresh.\");\n        }\n      } else {\n        if (refreshed != reader) {\n          fail(\"New IndexReader instance created during refresh even though index had no changes.\");\n        }\n      }\n      \n      return new ReaderCouple(r, refreshed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(IndexReader,TestReopen,int,boolean).mjava","sourceNew":null,"sourceOld":"  ReaderCouple refreshReader(IndexReader reader, TestReopen test, int modify, boolean hasChanges) throws IOException {\n    synchronized (createReaderMutex) {\n      IndexReader r = null;\n      if (test != null) {\n        test.modifyIndex(modify);\n        r = test.openReader();\n      }\n      \n      IndexReader refreshed = null;\n      try {\n        refreshed = reader.reopen();\n      } finally {\n        if (refreshed == null && r != null) {\n          // Hit exception -- close opened reader\n          r.close();\n        }\n      }\n      \n      if (hasChanges) {\n        if (refreshed == reader) {\n          fail(\"No new IndexReader instance created during refresh.\");\n        }\n      } else {\n        if (refreshed != reader) {\n          fail(\"New IndexReader instance created during refresh even though index had no changes.\");\n        }\n      }\n      \n      return new ReaderCouple(r, refreshed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}