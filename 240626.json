{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits,boolean).mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs, needsScores);\n      if (bulkScorer != null) { // BooleanScorer is applicable\n        // TODO: what is the right heuristic here?\n        final long costThreshold;\n        if (minNrShouldMatch <= 1) {\n          // when all clauses are optional, use BooleanScorer aggressively\n          // TODO: is there actually a threshold under which we should rather\n          // use the regular scorer?\n          costThreshold = -1;\n        } else {\n          // when a minimum number of clauses should match, BooleanScorer is\n          // going to score all windows that have at least minNrShouldMatch\n          // matches in the window. But there is no way to know if there is\n          // an intersection (all clauses might match a different doc ID and\n          // there will be no matches in the end) so we should only use\n          // BooleanScorer if matches are very dense\n          costThreshold = context.reader().maxDoc() / 3;\n        }\n\n        if (bulkScorer.cost() > costThreshold) {\n          return bulkScorer;\n        }\n      }\n      return super.bulkScorer(context, acceptDocs, needsScores);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n      if (bulkScorer != null) { // BooleanScorer is applicable\n        // TODO: what is the right heuristic here?\n        final long costThreshold;\n        if (minNrShouldMatch <= 1) {\n          // when all clauses are optional, use BooleanScorer aggressively\n          // TODO: is there actually a threshold under which we should rather\n          // use the regular scorer?\n          costThreshold = -1;\n        } else {\n          // when a minimum number of clauses should match, BooleanScorer is\n          // going to score all windows that have at least minNrShouldMatch\n          // matches in the window. But there is no way to know if there is\n          // an intersection (all clauses might match a different doc ID and\n          // there will be no matches in the end) so we should only use\n          // BooleanScorer if matches are very dense\n          costThreshold = context.reader().maxDoc() / 3;\n        }\n\n        if (bulkScorer.cost() > costThreshold) {\n          return bulkScorer;\n        }\n      }\n      return super.bulkScorer(context, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n      if (bulkScorer != null) { // BooleanScorer is applicable\n        // TODO: what is the right heuristic here?\n        final long costThreshold;\n        if (minNrShouldMatch <= 1) {\n          // when all clauses are optional, use BooleanScorer aggressively\n          // TODO: is there actually a threshold under which we should rather\n          // use the regular scorer?\n          costThreshold = -1;\n        } else {\n          // when a minimum number of clauses should match, BooleanScorer is\n          // going to score all windows that have at least minNrShouldMatch\n          // matches in the window. But there is no way to know if there is\n          // an intersection (all clauses might match a different doc ID and\n          // there will be no matches in the end) so we should only use\n          // BooleanScorer if matches are very dense\n          costThreshold = context.reader().maxDoc() / 3;\n        }\n\n        if (bulkScorer.cost() > costThreshold) {\n          return bulkScorer;\n        }\n      }\n      return super.bulkScorer(context, acceptDocs);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs, needsScores);\n      if (bulkScorer != null) { // BooleanScorer is applicable\n        // TODO: what is the right heuristic here?\n        final long costThreshold;\n        if (minNrShouldMatch <= 1) {\n          // when all clauses are optional, use BooleanScorer aggressively\n          // TODO: is there actually a threshold under which we should rather\n          // use the regular scorer?\n          costThreshold = -1;\n        } else {\n          // when a minimum number of clauses should match, BooleanScorer is\n          // going to score all windows that have at least minNrShouldMatch\n          // matches in the window. But there is no way to know if there is\n          // an intersection (all clauses might match a different doc ID and\n          // there will be no matches in the end) so we should only use\n          // BooleanScorer if matches are very dense\n          costThreshold = context.reader().maxDoc() / 3;\n        }\n\n        if (bulkScorer.cost() > costThreshold) {\n          return bulkScorer;\n        }\n      }\n      return super.bulkScorer(context, acceptDocs, needsScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}