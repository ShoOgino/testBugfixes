{"path":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxThreadCount(int).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxThreadCount(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sets the max # simultaneous threads that may be\n   *  running.  If a merge is necessary yet we already have\n   *  this many threads running, the merge is returned back\n   *  to IndexWriter so that it runs in the \"foreground\". */\n  public void setMaxThreadCount(int count) {\n    if (count < 1)\n      throw new IllegalArgumentException(\"count should be at least 1\");\n    maxThreadCount = count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0ebc2085cdebd1e698f670bed4679ec7306f8a57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ebc2085cdebd1e698f670bed4679ec7306f8a57","date":1202479308,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxThreadCount(int).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxThreadCount(int).mjava","sourceNew":"  /** Sets the max # simultaneous threads that may be\n   *  running.  If a merge is necessary yet we already have\n   *  this many threads running, the incoming thread (that\n   *  is calling add/updateDocument) will block until\n   *  a merge thread has completed. */\n  public void setMaxThreadCount(int count) {\n    if (count < 1)\n      throw new IllegalArgumentException(\"count should be at least 1\");\n    maxThreadCount = count;\n  }\n\n","sourceOld":"  /** Sets the max # simultaneous threads that may be\n   *  running.  If a merge is necessary yet we already have\n   *  this many threads running, the merge is returned back\n   *  to IndexWriter so that it runs in the \"foreground\". */\n  public void setMaxThreadCount(int count) {\n    if (count < 1)\n      throw new IllegalArgumentException(\"count should be at least 1\");\n    maxThreadCount = count;\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa","date":1261431504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxThreadCount(int).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxThreadCount(int).mjava","sourceNew":"  /** Sets the max # simultaneous merge threads that should\n   *  be running at once.  This must be <= {@link\n   *  #setMaxMergeCount}. */\n  public void setMaxThreadCount(int count) {\n    if (count < 1) {\n      throw new IllegalArgumentException(\"count should be at least 1\");\n    }\n    if (count > maxMergeCount) {\n      throw new IllegalArgumentException(\"count should be <= maxMergeCount (= \" + maxMergeCount + \")\");\n    }\n    maxThreadCount = count;\n  }\n\n","sourceOld":"  /** Sets the max # simultaneous threads that may be\n   *  running.  If a merge is necessary yet we already have\n   *  this many threads running, the incoming thread (that\n   *  is calling add/updateDocument) will block until\n   *  a merge thread has completed. */\n  public void setMaxThreadCount(int count) {\n    if (count < 1)\n      throw new IllegalArgumentException(\"count should be at least 1\");\n    maxThreadCount = count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxThreadCount(int).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxThreadCount(int).mjava","sourceNew":"  /** Sets the max # simultaneous merge threads that should\n   *  be running at once.  This must be <= {@link\n   *  #setMaxMergeCount}. */\n  public void setMaxThreadCount(int count) {\n    if (count < 1) {\n      throw new IllegalArgumentException(\"count should be at least 1\");\n    }\n    if (count > maxMergeCount) {\n      throw new IllegalArgumentException(\"count should be <= maxMergeCount (= \" + maxMergeCount + \")\");\n    }\n    maxThreadCount = count;\n  }\n\n","sourceOld":"  /** Sets the max # simultaneous merge threads that should\n   *  be running at once.  This must be <= {@link\n   *  #setMaxMergeCount}. */\n  public void setMaxThreadCount(int count) {\n    if (count < 1) {\n      throw new IllegalArgumentException(\"count should be at least 1\");\n    }\n    if (count > maxMergeCount) {\n      throw new IllegalArgumentException(\"count should be <= maxMergeCount (= \" + maxMergeCount + \")\");\n    }\n    maxThreadCount = count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa":["0ebc2085cdebd1e698f670bed4679ec7306f8a57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ebc2085cdebd1e698f670bed4679ec7306f8a57":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8984893e6e8e4eaf80ab863dafae092a2e9b0eaa"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["0ebc2085cdebd1e698f670bed4679ec7306f8a57"],"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"0ebc2085cdebd1e698f670bed4679ec7306f8a57":["8984893e6e8e4eaf80ab863dafae092a2e9b0eaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}