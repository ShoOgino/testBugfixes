{"path":"backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void checkReadBytes(IndexInput input, int size, int pos) throws IOException{\n    // Just to see that \"offset\" is treated properly in readBytes(), we\n    // add an arbitrary offset at the beginning of the array\n    int offset = size % 10; // arbitrary\n    buffer = ArrayUtil.grow(buffer, offset+size);\n    assertEquals(pos, input.getFilePointer());\n    long left = TEST_FILE_LENGTH - input.getFilePointer();\n    if (left <= 0) {\n      return;\n    } else if (left < size) {\n      size = (int) left;\n    }\n    input.readBytes(buffer, offset, size);\n    assertEquals(pos+size, input.getFilePointer());\n    for(int i=0; i<size; i++) {\n      assertEquals(\"pos=\" + i + \" filepos=\" + (pos+i), byten(pos+i), buffer[offset+i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","sourceNew":"  private void checkReadBytes(IndexInput input, int size, int pos) throws IOException{\n    // Just to see that \"offset\" is treated properly in readBytes(), we\n    // add an arbitrary offset at the beginning of the array\n    int offset = size % 10; // arbitrary\n    buffer = ArrayUtil.grow(buffer, offset+size);\n    assertEquals(pos, input.getFilePointer());\n    long left = TEST_FILE_LENGTH - input.getFilePointer();\n    if (left <= 0) {\n      return;\n    } else if (left < size) {\n      size = (int) left;\n    }\n    input.readBytes(buffer, offset, size);\n    assertEquals(pos+size, input.getFilePointer());\n    for(int i=0; i<size; i++) {\n      assertEquals(\"pos=\" + i + \" filepos=\" + (pos+i), byten(pos+i), buffer[offset+i]);\n    }\n  }\n\n","sourceOld":"  private void checkReadBytes(IndexInput input, int size, int pos) throws IOException{\n    // Just to see that \"offset\" is treated properly in readBytes(), we\n    // add an arbitrary offset at the beginning of the array\n    int offset = size % 10; // arbitrary\n    buffer = ArrayUtil.grow(buffer, offset+size);\n    assertEquals(pos, input.getFilePointer());\n    long left = TEST_FILE_LENGTH - input.getFilePointer();\n    if (left <= 0) {\n      return;\n    } else if (left < size) {\n      size = (int) left;\n    }\n    input.readBytes(buffer, offset, size);\n    assertEquals(pos+size, input.getFilePointer());\n    for(int i=0; i<size; i++) {\n      assertEquals(\"pos=\" + i + \" filepos=\" + (pos+i), byten(pos+i), buffer[offset+i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}