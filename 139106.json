{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets().mjava","commits":[{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Factory method for generating some random (nested) facets.  \n     *\n     * For simplicity, each facet will have a unique key name, regardless of it's depth under other facets \n     *\n     * @see JoinDomain\n     */\n    public static Map<String,TermFacet> buildRandomFacets() {\n      // for simplicity, use a unique facet key regardless of depth - simplifies verification\n      AtomicInteger keyCounter = new AtomicInteger(0);\n      final int maxDepth = TestUtil.nextInt(random(), 0, (usually() ? 2 : 3));\n      return buildRandomFacets(keyCounter, maxDepth);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Factory method for generating some random (nested) facets.  \n     *\n     * For simplicity, each facet will have a unique key name, regardless of it's depth under other facets \n     *\n     * @see JoinDomain\n     */\n    public static Map<String,TermFacet> buildRandomFacets() {\n      // for simplicity, use a unique facet key regardless of depth - simplifies verification\n      AtomicInteger keyCounter = new AtomicInteger(0);\n      final int maxDepth = TestUtil.nextInt(random(), 0, (usually() ? 2 : 3));\n      return buildRandomFacets(keyCounter, maxDepth);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets().mjava","sourceNew":"    /**\n     * Factory method for generating some random (nested) facets.  \n     *\n     * For simplicity, each facet will have a unique key name, regardless of it's depth under other facets \n     *\n     * @see JoinDomain\n     */\n    public static Map<String,TermFacet> buildRandomFacets() {\n      // for simplicity, use a unique facet key regardless of depth - simplifies verification\n      AtomicInteger keyCounter = new AtomicInteger(0);\n      final int maxDepth = TestUtil.nextInt(random(), 0, (usually() ? 2 : 3));\n      return buildRandomFacets(keyCounter, maxDepth);\n    }\n\n","sourceOld":"    /**\n     * Factory method for generating some random (nested) facets.  \n     *\n     * For simplicity, each facet will have a unique key name, regardless of it's depth under other facets \n     *\n     * @see JoinDomain\n     */\n    public static Map<String,TermFacet> buildRandomFacets() {\n      // for simplicity, use a unique facet key regardless of depth - simplifies verification\n      AtomicInteger keyCounter = new AtomicInteger(0);\n      final int maxDepth = TestUtil.nextInt(random(), 0, (usually() ? 2 : 3));\n      return buildRandomFacets(keyCounter, maxDepth);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["e9017cf144952056066919f1ebc7897ff9bd71b1","92910727264a23a47b7a6c94b0f75d655537b9ea"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}