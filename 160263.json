{"path":"solr/core/src/test/org/apache/solr/update/PeerSyncWithBufferUpdatesTest#test().mjava","commits":[{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/PeerSyncWithBufferUpdatesTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    Set<Integer> docsAdded = new LinkedHashSet<>();\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    SolrClient client0 = clients.get(0);\n    SolrClient client1 = clients.get(1);\n    SolrClient client2 = clients.get(2);\n\n    long v = 0;\n    // add some context\n    for (int i = 1; i <= 10; i++) {\n      add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n      add(client1, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",v));\n    }\n\n    // jetty1 was down\n    for (int i = 11; i <= 15; i++) {\n      add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n    }\n\n    // it restarted and must do PeerSync\n    SolrCore jetty1Core = jettys.get(1).getCoreContainer().getCores().iterator().next();\n    jetty1Core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    for (int i = 16; i <= 20; i++) {\n      add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n      add(client1, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",v));\n    }\n\n    // some updates are on-wire\n    add(client0, seenLeader, sdoc(\"id\",\"21\",\"_version_\",++v));\n    add(client0, seenLeader, sdoc(\"id\",\"22\",\"_version_\",++v));\n\n    // this will make a gap in buffer tlog\n    add(client0, seenLeader, sdoc(\"id\",\"23\",\"_version_\",++v));\n    add(client1, seenLeader, sdoc(\"id\",\"23\",\"_version_\",v));\n\n    // client1 should be able to sync\n    assertSync(client1, numVersions, true, shardsArr[0]);\n\n    // on-wire updates arrived on jetty1\n    add(client1, seenLeader, sdoc(\"id\",\"21\",\"_version_\",v-2));\n    add(client1, seenLeader, sdoc(\"id\",\"22\",\"_version_\",v-1));\n\n    log.info(\"Apply buffered updates\");\n    jetty1Core.getUpdateHandler().getUpdateLog().applyBufferedUpdates().get();\n\n    for (int i = 1; i <= 23; i++) docsAdded.add(i);\n\n    validateDocs(docsAdded, client0, client1);\n\n    // random test\n    v = 2000;\n    if (random().nextBoolean()) {\n      for (int i = 24; i <= 30; i++) {\n        add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n        add(client1, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",v));\n      }\n    }\n\n    log.info(\"After buffer updates\");\n    jetty1Core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    List<Object> onWireUpdates = new ArrayList<>();\n    Set<Integer> docIds = new HashSet<>();\n\n    for (int i = 0; i <= 50; i++) {\n      int kindOfUpdate = random().nextInt(100);\n      if (docIds.size() < 10) kindOfUpdate = 0;\n      //TODO test atomic update\n      if (kindOfUpdate <= 50) {\n        // add a new document update, may by duplicate with the current one\n        int val = random().nextInt(1000);\n        int docId = random().nextInt(10000);\n        docIds.add(docId);\n\n        SolrInputDocument doc = sdoc(\"id\", docId, \"val_i_dvo\", val, \"_version_\",++v);\n        add(client0, seenLeader, doc);\n        if (random().nextBoolean()) add(client1, seenLeader, doc);\n        else onWireUpdates.add(doc);\n\n      } else if (kindOfUpdate <= 65) {\n        // delete by query\n        ArrayList<Integer> ids = new ArrayList<>(docIds);\n        int docId1 = ids.get(random().nextInt(ids.size()));\n        int docId2 = ids.get(random().nextInt(ids.size()));\n\n        String query = \"id:\" +docId1+\" OR id:\"+docId2;\n        String version = Long.toString(-++v);\n        delQ(client0, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), query);\n        if (random().nextBoolean()) {\n          delQ(client1, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), query);\n        } else {\n          onWireUpdates.add(new DeleteByQuery(query, version));\n        }\n\n      } else {\n        // delete by id\n        ArrayList<Integer> ids = new ArrayList<>(docIds);\n        String docId = ids.get(random().nextInt(ids.size())) + \"\";\n        String version = Long.toString(-++v);\n\n        del(client0, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), docId);\n        if (random().nextBoolean()) {\n          del(client1, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), docId);\n        } else {\n          onWireUpdates.add(new DeleteById(docId, version));\n        }\n      }\n    }\n    // with many gaps, client1 should be able to sync\n    assertSync(client1, numVersions, true, shardsArr[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/PeerSyncWithBufferUpdatesTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    Set<Integer> docsAdded = new LinkedHashSet<>();\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    SolrClient client0 = clients.get(0);\n    SolrClient client1 = clients.get(1);\n    SolrClient client2 = clients.get(2);\n\n    long v = 0;\n    // add some context\n    for (int i = 1; i <= 10; i++) {\n      add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n      add(client1, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",v));\n    }\n\n    // jetty1 was down\n    for (int i = 11; i <= 15; i++) {\n      add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n    }\n\n    // it restarted and must do PeerSync\n    SolrCore jetty1Core = jettys.get(1).getCoreContainer().getCores().iterator().next();\n    jetty1Core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    for (int i = 16; i <= 20; i++) {\n      add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n      add(client1, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",v));\n    }\n\n    // some updates are on-wire\n    add(client0, seenLeader, sdoc(\"id\",\"21\",\"_version_\",++v));\n    add(client0, seenLeader, sdoc(\"id\",\"22\",\"_version_\",++v));\n\n    // this will make a gap in buffer tlog\n    add(client0, seenLeader, sdoc(\"id\",\"23\",\"_version_\",++v));\n    add(client1, seenLeader, sdoc(\"id\",\"23\",\"_version_\",v));\n\n    // client1 should be able to sync\n    assertSync(client1, numVersions, true, shardsArr[0]);\n\n    // on-wire updates arrived on jetty1\n    add(client1, seenLeader, sdoc(\"id\",\"21\",\"_version_\",v-2));\n    add(client1, seenLeader, sdoc(\"id\",\"22\",\"_version_\",v-1));\n\n    log.info(\"Apply buffered updates\");\n    jetty1Core.getUpdateHandler().getUpdateLog().applyBufferedUpdates().get();\n\n    for (int i = 1; i <= 23; i++) docsAdded.add(i);\n\n    validateDocs(docsAdded, client0, client1);\n\n    // random test\n    v = 2000;\n    if (random().nextBoolean()) {\n      for (int i = 24; i <= 30; i++) {\n        add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n        add(client1, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",v));\n      }\n    }\n\n    log.info(\"After buffer updates\");\n    jetty1Core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    List<Object> onWireUpdates = new ArrayList<>();\n    Set<Integer> docIds = new HashSet<>();\n\n    for (int i = 0; i <= 50; i++) {\n      int kindOfUpdate = random().nextInt(100);\n      if (docIds.size() < 10) kindOfUpdate = 0;\n      //TODO test atomic update\n      if (kindOfUpdate <= 50) {\n        // add a new document update, may by duplicate with the current one\n        int val = random().nextInt(1000);\n        int docId = random().nextInt(10000);\n        docIds.add(docId);\n\n        SolrInputDocument doc = sdoc(\"id\", docId, \"val_i_dvo\", val, \"_version_\",++v);\n        add(client0, seenLeader, doc);\n        if (random().nextBoolean()) add(client1, seenLeader, doc);\n        else onWireUpdates.add(doc);\n\n      } else if (kindOfUpdate <= 65) {\n        // delete by query\n        ArrayList<Integer> ids = new ArrayList<>(docIds);\n        int docId1 = ids.get(random().nextInt(ids.size()));\n        int docId2 = ids.get(random().nextInt(ids.size()));\n\n        String query = \"id:\" +docId1+\" OR id:\"+docId2;\n        String version = Long.toString(-++v);\n        delQ(client0, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), query);\n        if (random().nextBoolean()) {\n          delQ(client1, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), query);\n        } else {\n          onWireUpdates.add(new DeleteByQuery(query, version));\n        }\n\n      } else {\n        // delete by id\n        ArrayList<Integer> ids = new ArrayList<>(docIds);\n        String docId = ids.get(random().nextInt(ids.size())) + \"\";\n        String version = Long.toString(-++v);\n\n        del(client0, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), docId);\n        if (random().nextBoolean()) {\n          del(client1, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), docId);\n        } else {\n          onWireUpdates.add(new DeleteById(docId, version));\n        }\n      }\n    }\n    // with many gaps, client1 should be able to sync\n    assertSync(client1, numVersions, true, shardsArr[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/PeerSyncWithBufferUpdatesTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    Set<Integer> docsAdded = new LinkedHashSet<>();\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    SolrClient client0 = clients.get(0);\n    SolrClient client1 = clients.get(1);\n    SolrClient client2 = clients.get(2);\n\n    long v = 0;\n    // add some context\n    for (int i = 1; i <= 10; i++) {\n      add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n      add(client1, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",v));\n    }\n\n    // jetty1 was down\n    for (int i = 11; i <= 15; i++) {\n      add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n    }\n\n    // it restarted and must do PeerSync\n    SolrCore jetty1Core = jettys.get(1).getCoreContainer().getCores().iterator().next();\n    jetty1Core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    for (int i = 16; i <= 20; i++) {\n      add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n      add(client1, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",v));\n    }\n\n    // some updates are on-wire\n    add(client0, seenLeader, sdoc(\"id\",\"21\",\"_version_\",++v));\n    add(client0, seenLeader, sdoc(\"id\",\"22\",\"_version_\",++v));\n\n    // this will make a gap in buffer tlog\n    add(client0, seenLeader, sdoc(\"id\",\"23\",\"_version_\",++v));\n    add(client1, seenLeader, sdoc(\"id\",\"23\",\"_version_\",v));\n\n    // client1 should be able to sync\n    assertSync(client1, numVersions, true, shardsArr[0]);\n\n    // on-wire updates arrived on jetty1\n    add(client1, seenLeader, sdoc(\"id\",\"21\",\"_version_\",v-2));\n    add(client1, seenLeader, sdoc(\"id\",\"22\",\"_version_\",v-1));\n\n    log.info(\"Apply buffered updates\");\n    jetty1Core.getUpdateHandler().getUpdateLog().applyBufferedUpdates().get();\n\n    for (int i = 1; i <= 23; i++) docsAdded.add(i);\n\n    validateDocs(docsAdded, client0, client1);\n\n    // random test\n    v = 2000;\n    if (random().nextBoolean()) {\n      for (int i = 24; i <= 30; i++) {\n        add(client0, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",++v));\n        add(client1, seenLeader, sdoc(\"id\",String.valueOf(i),\"_version_\",v));\n      }\n    }\n\n    log.info(\"After buffer updates\");\n    jetty1Core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    List<Object> onWireUpdates = new ArrayList<>();\n    Set<Integer> docIds = new HashSet<>();\n\n    for (int i = 0; i <= 50; i++) {\n      int kindOfUpdate = random().nextInt(100);\n      if (docIds.size() < 10) kindOfUpdate = 0;\n      //TODO test atomic update\n      if (kindOfUpdate <= 50) {\n        // add a new document update, may by duplicate with the current one\n        int val = random().nextInt(1000);\n        int docId = random().nextInt(10000);\n        docIds.add(docId);\n\n        SolrInputDocument doc = sdoc(\"id\", docId, \"val_i_dvo\", val, \"_version_\",++v);\n        add(client0, seenLeader, doc);\n        if (random().nextBoolean()) add(client1, seenLeader, doc);\n        else onWireUpdates.add(doc);\n\n      } else if (kindOfUpdate <= 65) {\n        // delete by query\n        ArrayList<Integer> ids = new ArrayList<>(docIds);\n        int docId1 = ids.get(random().nextInt(ids.size()));\n        int docId2 = ids.get(random().nextInt(ids.size()));\n\n        String query = \"id:\" +docId1+\" OR id:\"+docId2;\n        String version = Long.toString(-++v);\n        delQ(client0, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), query);\n        if (random().nextBoolean()) {\n          delQ(client1, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), query);\n        } else {\n          onWireUpdates.add(new DeleteByQuery(query, version));\n        }\n\n      } else {\n        // delete by id\n        ArrayList<Integer> ids = new ArrayList<>(docIds);\n        String docId = ids.get(random().nextInt(ids.size())) + \"\";\n        String version = Long.toString(-++v);\n\n        del(client0, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), docId);\n        if (random().nextBoolean()) {\n          del(client1, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,\"_version_\",version), docId);\n        } else {\n          onWireUpdates.add(new DeleteById(docId, version));\n        }\n      }\n    }\n    // with many gaps, client1 should be able to sync\n    assertSync(client1, numVersions, true, shardsArr[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}