{"path":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","date":1402659583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["acf00221f44c5f08ccea014f2492b53af15ecd66","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["211b1506e56f7860762fbd4698f6d1d1b57f672c","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3c188105a9aae04f56c24996f98f8333fc825d2e","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","acf00221f44c5f08ccea014f2492b53af15ecd66"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}