{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer...).mjava","commits":[{"id":"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5","date":1344439048,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,float,Scorer...).mjava","sourceNew":"  public ConjunctionScorer(Weight weight, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":"  public ConjunctionScorer(Weight weight, float coord, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    this.coord = coord;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer...).mjava","pathOld":"/dev/null","sourceNew":"  public ConjunctionScorer(Weight weight, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,float,Scorer...).mjava","sourceNew":"  public ConjunctionScorer(Weight weight, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":"  public ConjunctionScorer(Weight weight, float coord, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    this.coord = coord;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer...).mjava","sourceNew":"  public ConjunctionScorer(Weight weight, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      @Override\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":"  public ConjunctionScorer(Weight weight, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer...).mjava","sourceNew":"  public ConjunctionScorer(Weight weight, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      @Override\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":"  public ConjunctionScorer(Weight weight, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer...).mjava","sourceNew":null,"sourceOld":"  public ConjunctionScorer(Weight weight, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      @Override\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5","7530de27b87b961b51f01bd1299b7004d46e8823"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}