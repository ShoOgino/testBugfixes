{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","commits":[{"id":"5c9480bf8e52feb02af9b7fa13bf50929da7900b","date":1477527580,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      Tuple tuple = null;\n      try {\n        tuple = queue.take();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n\n      String expr = tuple.getString(\"expr_s\");\n      Object id = tuple.get(\"id\");\n      TupleStream stream = null;\n\n      try {\n        stream = streamFactory.constructStream(expr);\n        stream.setStreamContext(streamContext);\n        stream.open();\n        while (true) {\n          Tuple t = stream.read();\n          if (t.EOF) {\n            break;\n          }\n        }\n      } catch (Exception e) {\n        logger.error(\"Executor Error: id=\"+id+\" expr_s=\"+expr, e);\n      } finally {\n        try {\n          stream.close();\n        } catch (Exception e1) {\n          logger.error(\"Executor Error\", e1);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      Tuple tuple = null;\n      try {\n        tuple = queue.take();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n\n      String expr = tuple.getString(\"expr_s\");\n      Object id = tuple.get(\"id\");\n      TupleStream stream = null;\n\n      try {\n        stream = streamFactory.constructStream(expr);\n        stream.setStreamContext(streamContext);\n        stream.open();\n        while (true) {\n          Tuple t = stream.read();\n          if (t.EOF) {\n            break;\n          }\n        }\n      } catch (Exception e) {\n        logger.error(\"Executor Error: id=\"+id+\" expr_s=\"+expr, e);\n      } finally {\n        try {\n          stream.close();\n        } catch (Exception e1) {\n          logger.error(\"Executor Error\", e1);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","sourceNew":"    public void run() {\n      Tuple tuple = null;\n      try {\n        tuple = queue.take();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n\n      String expr = tuple.getString(\"expr_s\");\n      Object id = tuple.get(ID);\n      TupleStream stream = null;\n\n      try {\n        stream = streamFactory.constructStream(expr);\n        stream.setStreamContext(streamContext);\n        stream.open();\n        while (true) {\n          Tuple t = stream.read();\n          if (t.EOF) {\n            break;\n          }\n        }\n      } catch (Exception e) {\n        logger.error(\"Executor Error: id=\"+id+\" expr_s=\"+expr, e);\n      } finally {\n        try {\n          stream.close();\n        } catch (Exception e1) {\n          logger.error(\"Executor Error\", e1);\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      Tuple tuple = null;\n      try {\n        tuple = queue.take();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n\n      String expr = tuple.getString(\"expr_s\");\n      Object id = tuple.get(\"id\");\n      TupleStream stream = null;\n\n      try {\n        stream = streamFactory.constructStream(expr);\n        stream.setStreamContext(streamContext);\n        stream.open();\n        while (true) {\n          Tuple t = stream.read();\n          if (t.EOF) {\n            break;\n          }\n        }\n      } catch (Exception e) {\n        logger.error(\"Executor Error: id=\"+id+\" expr_s=\"+expr, e);\n      } finally {\n        try {\n          stream.close();\n        } catch (Exception e1) {\n          logger.error(\"Executor Error\", e1);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","sourceNew":"    public void run() {\n      Tuple tuple = null;\n      try {\n        tuple = queue.take();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n\n      String expr = tuple.getString(\"expr_s\");\n      Object id = tuple.get(ID);\n      TupleStream stream = null;\n\n      try {\n        stream = streamFactory.constructStream(expr);\n        stream.setStreamContext(streamContext);\n        stream.open();\n        while (true) {\n          Tuple t = stream.read();\n          if (t.EOF) {\n            break;\n          }\n        }\n      } catch (Exception e) {\n        logger.error(\"Executor Error: id=\"+id+\" expr_s=\"+expr, e);\n      } finally {\n        try {\n          stream.close();\n        } catch (Exception e1) {\n          logger.error(\"Executor Error\", e1);\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      Tuple tuple = null;\n      try {\n        tuple = queue.take();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n\n      String expr = tuple.getString(\"expr_s\");\n      Object id = tuple.get(\"id\");\n      TupleStream stream = null;\n\n      try {\n        stream = streamFactory.constructStream(expr);\n        stream.setStreamContext(streamContext);\n        stream.open();\n        while (true) {\n          Tuple t = stream.read();\n          if (t.EOF) {\n            break;\n          }\n        }\n      } catch (Exception e) {\n        logger.error(\"Executor Error: id=\"+id+\" expr_s=\"+expr, e);\n      } finally {\n        try {\n          stream.close();\n        } catch (Exception e1) {\n          logger.error(\"Executor Error\", e1);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","sourceNew":"    public void run() {\n      Tuple tuple = null;\n      try {\n        tuple = queue.take();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n\n      String expr = tuple.getString(\"expr_s\");\n      Object id = tuple.get(ID);\n      TupleStream stream = null;\n\n      try {\n        stream = streamFactory.constructStream(expr);\n        stream.setStreamContext(streamContext);\n        stream.open();\n        while (true) {\n          Tuple t = stream.read();\n          if (t.EOF) {\n            break;\n          }\n        }\n      } catch (Exception e) {\n        log.error(\"Executor Error: id=\"+id+\" expr_s=\"+expr, e);\n      } finally {\n        try {\n          stream.close();\n        } catch (Exception e1) {\n          log.error(\"Executor Error\", e1);\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      Tuple tuple = null;\n      try {\n        tuple = queue.take();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n\n      String expr = tuple.getString(\"expr_s\");\n      Object id = tuple.get(ID);\n      TupleStream stream = null;\n\n      try {\n        stream = streamFactory.constructStream(expr);\n        stream.setStreamContext(streamContext);\n        stream.open();\n        while (true) {\n          Tuple t = stream.read();\n          if (t.EOF) {\n            break;\n          }\n        }\n      } catch (Exception e) {\n        logger.error(\"Executor Error: id=\"+id+\" expr_s=\"+expr, e);\n      } finally {\n        try {\n          stream.close();\n        } catch (Exception e1) {\n          logger.error(\"Executor Error\", e1);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ExecutorStream.StreamTask#run().mjava","sourceNew":"    public void run() {\n      Tuple tuple = null;\n      try {\n        tuple = queue.take();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n\n      String expr = tuple.getString(\"expr_s\");\n      Object id = tuple.get(ID);\n      TupleStream stream = null;\n\n      try {\n        stream = streamFactory.constructStream(expr);\n        stream.setStreamContext(streamContext);\n        stream.open();\n        while (true) {\n          Tuple t = stream.read();\n          if (t.EOF) {\n            break;\n          }\n        }\n      } catch (Exception e) {\n        log.error(\"Executor Error: id={} expr_s={}\", id, expr, e);\n      } finally {\n        try {\n          stream.close();\n        } catch (Exception e1) {\n          log.error(\"Executor Error\", e1);\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      Tuple tuple = null;\n      try {\n        tuple = queue.take();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n\n      String expr = tuple.getString(\"expr_s\");\n      Object id = tuple.get(ID);\n      TupleStream stream = null;\n\n      try {\n        stream = streamFactory.constructStream(expr);\n        stream.setStreamContext(streamContext);\n        stream.open();\n        while (true) {\n          Tuple t = stream.read();\n          if (t.EOF) {\n            break;\n          }\n        }\n      } catch (Exception e) {\n        log.error(\"Executor Error: id=\"+id+\" expr_s=\"+expr, e);\n      } finally {\n        try {\n          stream.close();\n        } catch (Exception e1) {\n          log.error(\"Executor Error\", e1);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"5c9480bf8e52feb02af9b7fa13bf50929da7900b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["6d2dadc1f5ca8703d8659f4964961f9967935d75"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"5c9480bf8e52feb02af9b7fa13bf50929da7900b":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}