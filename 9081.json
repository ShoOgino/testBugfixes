{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c05c6a4f999960536d6b23302feffb8a50227466","date":1353382574,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n        log.warn(\"Unable to register log4j JMX control\", e);\n      }\n      \n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n      \n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":["fb22dc024132e7ee6f20788033de8f593cb6a1f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n        log.warn(\"Unable to register log4j JMX control\", e);\n      }\n      \n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n      \n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb22dc024132e7ee6f20788033de8f593cb6a1f6","date":1521308208,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n        log.warn(\"Unable to register log4j JMX control\", e);\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n        log.warn(\"Unable to register log4j JMX control\", e);\n      }\n      \n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n      \n      runFromConfig(config);\n    }\n\n","bugFix":["c05c6a4f999960536d6b23302feffb8a50227466"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n        log.warn(\"Unable to register log4j JMX control\", e);\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n        log.warn(\"Unable to register log4j JMX control\", e);\n      }\n      \n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n      \n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb22dc024132e7ee6f20788033de8f593cb6a1f6":["c05c6a4f999960536d6b23302feffb8a50227466"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["2c30e4c1cee08b3b229a77991882594fe7250b66","c05c6a4f999960536d6b23302feffb8a50227466"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["c05c6a4f999960536d6b23302feffb8a50227466","fb22dc024132e7ee6f20788033de8f593cb6a1f6"],"c05c6a4f999960536d6b23302feffb8a50227466":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fb22dc024132e7ee6f20788033de8f593cb6a1f6":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c05c6a4f999960536d6b23302feffb8a50227466":["fb22dc024132e7ee6f20788033de8f593cb6a1f6","407687e67faf6e1f02a211ca078d8e3eed631027","203e3fcf513c02ee2c07015f2ce277e26dc60907"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","c05c6a4f999960536d6b23302feffb8a50227466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}