{"path":"src/test/org/apache/solr/search/FunctionQParserTest#testFunctionQParser().mjava","commits":[{"id":"8f403af4d6e4de7f9c0881d6592dfb522d5fad41","date":1258470444,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/FunctionQParserTest#testFunctionQParser().mjava","pathOld":"/dev/null","sourceNew":"  public void testFunctionQParser() throws Exception {\n    ModifiableSolrParams local = new ModifiableSolrParams();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), \"_val_:'foo'\", \"\", 0, 10, new HashMap());\n    FunctionQParser parser;\n    Query query;\n    FunctionQuery fq;\n    parser = new FunctionQParser(\"'foo'\", local, params, req);\n    query = parser.parse();\n    assertTrue(\"query is not a FunctionQuery\", query instanceof FunctionQuery);\n    fq = (FunctionQuery) query;\n    assertTrue(\"ValueSource is not a LiteralValueSource\", fq.getValueSource() instanceof LiteralValueSource);\n\n    parser = new FunctionQParser(\"1.5\", local, params, req);\n    query = parser.parse();\n    assertTrue(\"query is not a FunctionQuery\", query instanceof FunctionQuery);\n    fq = (FunctionQuery) query;\n    assertTrue(\"ValueSource is not a LiteralValueSource\", fq.getValueSource() instanceof ConstValueSource);\n\n    //TODO: Add more tests here to test the parser\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/FunctionQParserTest#testFunctionQParser().mjava","pathOld":"src/test/org/apache/solr/search/FunctionQParserTest#testFunctionQParser().mjava","sourceNew":"  public void testFunctionQParser() throws Exception {\n    ModifiableSolrParams local = new ModifiableSolrParams();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), \"_val_:'foo'\", \"\", 0, 10, new HashMap());\n    FunctionQParser parser;\n    Query query;\n    FunctionQuery fq;\n    parser = new FunctionQParser(\"'foo'\", local, params, req);\n    query = parser.parse();\n    assertTrue(\"query is not a FunctionQuery\", query instanceof FunctionQuery);\n    fq = (FunctionQuery) query;\n    assertTrue(\"ValueSource is not a LiteralValueSource\", fq.getValueSource() instanceof LiteralValueSource);\n\n    parser = new FunctionQParser(\"1.5\", local, params, req);\n    query = parser.parse();\n    assertTrue(\"query is not a FunctionQuery\", query instanceof FunctionQuery);\n    fq = (FunctionQuery) query;\n    assertTrue(\"ValueSource is not a LiteralValueSource\", fq.getValueSource() instanceof ConstValueSource);\n\n    //TODO: Add more tests here to test the parser\n  }\n\n","sourceOld":"  public void testFunctionQParser() throws Exception {\n    ModifiableSolrParams local = new ModifiableSolrParams();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), \"_val_:'foo'\", \"\", 0, 10, new HashMap());\n    FunctionQParser parser;\n    Query query;\n    FunctionQuery fq;\n    parser = new FunctionQParser(\"'foo'\", local, params, req);\n    query = parser.parse();\n    assertTrue(\"query is not a FunctionQuery\", query instanceof FunctionQuery);\n    fq = (FunctionQuery) query;\n    assertTrue(\"ValueSource is not a LiteralValueSource\", fq.getValueSource() instanceof LiteralValueSource);\n\n    parser = new FunctionQParser(\"1.5\", local, params, req);\n    query = parser.parse();\n    assertTrue(\"query is not a FunctionQuery\", query instanceof FunctionQuery);\n    fq = (FunctionQuery) query;\n    assertTrue(\"ValueSource is not a LiteralValueSource\", fq.getValueSource() instanceof ConstValueSource);\n\n    //TODO: Add more tests here to test the parser\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8f403af4d6e4de7f9c0881d6592dfb522d5fad41":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["8f403af4d6e4de7f9c0881d6592dfb522d5fad41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8f403af4d6e4de7f9c0881d6592dfb522d5fad41"],"8f403af4d6e4de7f9c0881d6592dfb522d5fad41":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}