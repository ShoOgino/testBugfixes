{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","pathOld":"/dev/null","sourceNew":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","pathOld":"/dev/null","sourceNew":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","pathOld":"/dev/null","sourceNew":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","sourceNew":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec(resolver);\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","sourceNew":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec(resolver);\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","sourceNew":"  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      try (LogCodec codec = new LogCodec(resolver)) {\n        return codec.readVal(fis);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec(resolver);\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#lookup(long).mjava","sourceNew":"  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n         if (fos.size() != raf.length() || pos >= fos.size() ) {\n         throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n         }\n         ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      try (LogCodec codec = new LogCodec(resolver)) {\n        return codec.readVal(fis);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      try (LogCodec codec = new LogCodec(resolver)) {\n        return codec.readVal(fis);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["849494cf2f3a96af5c8c84995108ddd8456fcd04","0d22ac6a4146774c1bc8400160fc0b6150294e92","37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}