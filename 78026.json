{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrClientCloudManager).mjava","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrClientCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34dd1818ff2313f17cf59834695ab7ee0c7853d7","date":1527089210,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      map.put(\"isLive\", row.isLive);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSortedNodes();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      map.put(\"isLive\", row.isLive);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      map.put(\"isLive\", row.isLive);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      map.put(\"isLive\", row.isLive);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSortedNodes();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      map.put(\"isLive\", row.isLive);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSortedNodes();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      map.put(\"isLive\", row.isLive);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      map.put(\"isLive\", row.isLive);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSortedNodes();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      map.put(\"isLive\", row.isLive);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      map.put(\"isLive\", row.isLive);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSortedNodes();\n    return ew -> ew.put(\"sortedNodes\", (IteratorWriter) iw -> {\n      for (Row row : sorted) {\n        iw.add((MapWriter) ew1 -> {\n          ew1.put(\"node\", row.node).\n              put(\"isLive\", row.isLive);\n          for (Cell cell : row.getCells())\n            ew1.put(cell.name, cell.val,\n                (Predicate) o -> o != null && (!(o instanceof Map) || !((Map) o).isEmpty()));\n          ew1.put(\"replicas\", row.collectionVsShardVsReplicas);\n        });\n      }\n    }).put(\"liveNodes\", cloudManager.getClusterStateProvider().getLiveNodes())\n        .put(\"violations\", session.getViolations())\n        .put(\"config\", session.getPolicy());\n\n\n  }\n\n","sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSortedNodes();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      map.put(\"isLive\", row.isLive);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042da0877b8e28fd372a8ed80d11c4506a466ad7","date":1534516670,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    return getDiagnostics(session);\n  }\n\n","sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSortedNodes();\n    return ew -> ew.put(\"sortedNodes\", (IteratorWriter) iw -> {\n      for (Row row : sorted) {\n        iw.add((MapWriter) ew1 -> {\n          ew1.put(\"node\", row.node).\n              put(\"isLive\", row.isLive);\n          for (Cell cell : row.getCells())\n            ew1.put(cell.name, cell.val,\n                (Predicate) o -> o != null && (!(o instanceof Map) || !((Map) o).isEmpty()));\n          ew1.put(\"replicas\", row.collectionVsShardVsReplicas);\n        });\n      }\n    }).put(\"liveNodes\", cloudManager.getClusterStateProvider().getLiveNodes())\n        .put(\"violations\", session.getViolations())\n        .put(\"config\", session.getPolicy());\n\n\n  }\n\n","bugFix":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e","16a22f8085bb46850c91784e94f7714345011404","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","sourceNew":null,"sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    return getDiagnostics(session);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["34dd1818ff2313f17cf59834695ab7ee0c7853d7","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"3f504512a03d978990cbff30db0522b354e846db":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78231225260fb5b3bf9920f203d71477d5501c65":["34dd1818ff2313f17cf59834695ab7ee0c7853d7"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"34dd1818ff2313f17cf59834695ab7ee0c7853d7":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["16a22f8085bb46850c91784e94f7714345011404"],"16a22f8085bb46850c91784e94f7714345011404":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"]},"commit2Childs":{"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["34dd1818ff2313f17cf59834695ab7ee0c7853d7"],"34dd1818ff2313f17cf59834695ab7ee0c7853d7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","78231225260fb5b3bf9920f203d71477d5501c65"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","16a22f8085bb46850c91784e94f7714345011404"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"16a22f8085bb46850c91784e94f7714345011404":["042da0877b8e28fd372a8ed80d11c4506a466ad7"]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}