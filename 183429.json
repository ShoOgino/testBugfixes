{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      segmentsToOptimize.addAll(segmentInfos.asSet());\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      segmentsToOptimize.addAll(segmentInfos.asSet());\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      segmentsToOptimize.addAll(segmentInfos.asSet());\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>(segmentInfos);\n      optimizeMaxNumSegments = maxNumSegments;\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToOptimize.put(info, Boolean.TRUE);\n      }\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      segmentsToOptimize.addAll(segmentInfos.asSet());\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToOptimize.put(info, Boolean.TRUE);\n      }\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      segmentsToOptimize.addAll(segmentInfos.asSet());\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f8b6801dbaf49c247119734f6e4516cce94e49a","date":1308478532,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToOptimize.put(info, Boolean.TRUE);\n      }\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToOptimize.put(info, Boolean.TRUE);\n      }\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f902dca0fec763317e17fa91ff6543fc8120c609","date":1308553979,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToOptimize.put(info, Boolean.TRUE);\n      }\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToOptimize.put(info, Boolean.TRUE);\n      }\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"optimize: index now \" + segString());\n      infoStream.message(\"IW\", \"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToOptimize.put(info, Boolean.TRUE);\n      }\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      message(\"optimize: index now \" + segString());\n      message(\"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToOptimize.put(info, Boolean.TRUE);\n      }\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMerge(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #forceMerge(int)}, except you can\n   *  specify whether the call should block until\n   *  all merging completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMerge(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"forceMerge: index now \" + segString());\n      infoStream.message(\"IW\", \"now flush at forceMerge\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToMerge.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToMerge.put(info, Boolean.TRUE);\n      }\n      mergeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as isMaxNumSegments:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMerge\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.maxNumSegments != -1) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (maxNumSegmentsMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know merging did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"optimize: index now \" + segString());\n      infoStream.message(\"IW\", \"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToOptimize.put(info, Boolean.TRUE);\n      }\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","737e811ac4583c640a0680e784121677f311a8af"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["53a31399f2471493d67b19a95c028a74e0113b6a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","53a31399f2471493d67b19a95c028a74e0113b6a"],"f902dca0fec763317e17fa91ff6543fc8120c609":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","9f8b6801dbaf49c247119734f6e4516cce94e49a"],"06584e6e98d592b34e1329b384182f368d2025e8":["9f8b6801dbaf49c247119734f6e4516cce94e49a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9f8b6801dbaf49c247119734f6e4516cce94e49a":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a3776dccca01c11e7046323cfad46a3b4a471233","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"53a31399f2471493d67b19a95c028a74e0113b6a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"f902dca0fec763317e17fa91ff6543fc8120c609":[],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a","833a7987bc1c94455fde83e3311f72bddedcfb93"],"9f8b6801dbaf49c247119734f6e4516cce94e49a":["f902dca0fec763317e17fa91ff6543fc8120c609","06584e6e98d592b34e1329b384182f368d2025e8"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["f902dca0fec763317e17fa91ff6543fc8120c609"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"53a31399f2471493d67b19a95c028a74e0113b6a":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["9f8b6801dbaf49c247119734f6e4516cce94e49a","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f902dca0fec763317e17fa91ff6543fc8120c609","c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}