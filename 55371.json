{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","commits":[{"id":"26cb11ce089e71fb909641e7030b53c7d9e3fff3","date":1390348343,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    boolean success;\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n\n      success = syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    \n    MDCLoggingContext.setCore(core);\n    try {\n      boolean success;\n      \n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n      \n      success = syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n      \n      return success;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    boolean success;\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n\n      success = syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":["bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f1bee4bba8988141f8357bda2ccd9405926c4e5","date":1449703835,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    \n    MDCLoggingContext.setCore(core);\n    try {\n      boolean success;\n      \n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      \n      recoveryRequests.clear();\n      \n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n      \n      success = syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n      \n      return success;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    \n    MDCLoggingContext.setCore(core);\n    try {\n      boolean success;\n      \n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n      \n      success = syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n      \n      return success;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb62cc3362417c3e5136f2f26d34a1072ad633eb","date":1475149102,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  public PeerSync.PeerSyncResult sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return PeerSync.PeerSyncResult.success();\n    }\n    \n    MDCLoggingContext.setCore(core);\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n      \n      recoveryRequests.clear();\n      \n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n\n      return syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    \n    MDCLoggingContext.setCore(core);\n    try {\n      boolean success;\n      \n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      \n      recoveryRequests.clear();\n      \n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n      \n      success = syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n      \n      return success;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":["26cb11ce089e71fb909641e7030b53c7d9e3fff3","439c63ae5d22132fca810a0029a854e97d2c1a3e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  public PeerSync.PeerSyncResult sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return PeerSync.PeerSyncResult.success();\n    }\n    \n    MDCLoggingContext.setCore(core);\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n      \n      recoveryRequests.clear();\n      \n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n\n      return syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    \n    MDCLoggingContext.setCore(core);\n    try {\n      boolean success;\n      \n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      \n      recoveryRequests.clear();\n      \n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n      \n      success = syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n      \n      return success;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  public PeerSync.PeerSyncResult sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return PeerSync.PeerSyncResult.success();\n    }\n    \n    MDCLoggingContext.setCore(core);\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n      \n      recoveryRequests.clear();\n      \n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n\n      return syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    \n    MDCLoggingContext.setCore(core);\n    try {\n      boolean success;\n      \n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      \n      recoveryRequests.clear();\n      \n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n      \n      success = syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n      \n      return success;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed5005b977107bba28c700351216f1595e7abe4f","date":1585964712,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  public PeerSync.PeerSyncResult sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return PeerSync.PeerSyncResult.success();\n    }\n\n    if (isClosed) {\n      log.warn(\"Closed, skipping sync up.\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n\n    recoveryRequests.clear();\n\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n\n    return syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n  }\n\n","sourceOld":"  public PeerSync.PeerSyncResult sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return PeerSync.PeerSyncResult.success();\n    }\n    \n    MDCLoggingContext.setCore(core);\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n      \n      recoveryRequests.clear();\n      \n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n\n      return syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  public PeerSync.PeerSyncResult sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return PeerSync.PeerSyncResult.success();\n    }\n\n    if (isClosed) {\n      log.warn(\"Closed, skipping sync up.\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n\n    recoveryRequests.clear();\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Sync replicas to {}\", ZkCoreNodeProps.getCoreUrl(leaderProps));\n    }\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n\n    return syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n  }\n\n","sourceOld":"  public PeerSync.PeerSyncResult sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps,\n      boolean peerSyncOnlyWithActive) {\n    if (SKIP_AUTO_RECOVERY) {\n      return PeerSync.PeerSyncResult.success();\n    }\n\n    if (isClosed) {\n      log.warn(\"Closed, skipping sync up.\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n\n    recoveryRequests.clear();\n\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n\n    return syncReplicas(zkController, core, leaderProps, peerSyncOnlyWithActive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f1bee4bba8988141f8357bda2ccd9405926c4e5":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9f1bee4bba8988141f8357bda2ccd9405926c4e5","bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"ed5005b977107bba28c700351216f1595e7abe4f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"ad4957cde742defe6db19689abdc267c5d948066":["ed5005b977107bba28c700351216f1595e7abe4f"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9f1bee4bba8988141f8357bda2ccd9405926c4e5","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"]},"commit2Childs":{"9f1bee4bba8988141f8357bda2ccd9405926c4e5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bb62cc3362417c3e5136f2f26d34a1072ad633eb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ed5005b977107bba28c700351216f1595e7abe4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ed5005b977107bba28c700351216f1595e7abe4f":["ad4957cde742defe6db19689abdc267c5d948066"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}