{"path":"lucene/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","commits":[{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(IndexableField,FieldInfo).mjava","sourceNew":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n\n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n\n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","sourceNew":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n\n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","sourceNew":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"06584e6e98d592b34e1329b384182f368d2025e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06584e6e98d592b34e1329b384182f368d2025e8"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}