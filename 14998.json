{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map[Object,Object],LeafReaderContext).mjava","commits":[{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":1,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), field, true);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), field, true);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}