{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() throws IOException {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfo info : segmentInfos) {\n      count += info.docCount - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() throws IOException {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfo info : segmentInfos) {\n      count += info.docCount - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() throws IOException {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.docCount - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() throws IOException {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfo info : segmentInfos) {\n      count += info.docCount - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() throws IOException {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() throws IOException {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.docCount - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() throws IOException {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() throws IOException {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfo info : segmentInfos) {\n      count += info.docCount - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() throws IOException {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":["34e2c71b6406443562df54db233fde0728502f64"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() throws IOException {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abf299c3223296f3d69484286b321c8da2dfe3c6","date":1381332681,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentCommitInfo info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentCommitInfo info : segmentInfos) {\n      count += info.info.maxDoc() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentCommitInfo info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentCommitInfo info : segmentInfos) {\n      count += info.info.maxDoc() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentCommitInfo info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentCommitInfo info : segmentInfos) {\n      count += info.info.maxDoc() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentCommitInfo info : segmentInfos) {\n      count += info.info.getDocCount() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #maxDoc\n   *  @deprecated use {@link #getDocStats()} instead\n   *  */\n  @Deprecated\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentCommitInfo info : segmentInfos) {\n      count += info.info.maxDoc() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #numDocs */\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentCommitInfo info : segmentInfos) {\n      count += info.info.maxDoc() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ba3bb78479d97e76aa664b8958ccf070d655e6","date":1544812585,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDocs().mjava","sourceNew":null,"sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer), and\n   *  including deletions.  <b>NOTE:</b> buffered deletions\n   *  are not counted.  If you really need these to be\n   *  counted you should call {@link #commit()} first.\n   *  @see #maxDoc\n   *  @deprecated use {@link #getDocStats()} instead\n   *  */\n  @Deprecated\n  public synchronized int numDocs() {\n    ensureOpen();\n    int count = docWriter.getNumDocs();\n    for (final SegmentCommitInfo info : segmentInfos) {\n      count += info.info.maxDoc() - numDeletedDocs(info);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["abf299c3223296f3d69484286b321c8da2dfe3c6"],"abf299c3223296f3d69484286b321c8da2dfe3c6":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0267c69e2456a3477a1ad785723f2135da3117e":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"96ba3bb78479d97e76aa664b8958ccf070d655e6":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","b0267c69e2456a3477a1ad785723f2135da3117e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"b06445ae1731e049327712db0454e5643ca9b7fe":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","b0267c69e2456a3477a1ad785723f2135da3117e"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["b0267c69e2456a3477a1ad785723f2135da3117e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96ba3bb78479d97e76aa664b8958ccf070d655e6"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"abf299c3223296f3d69484286b321c8da2dfe3c6":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9d153abcf92dc5329d98571a8c3035df9bd80648","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","feb4029567b43f074ed7b6eb8fb126d355075dfd"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"96ba3bb78479d97e76aa664b8958ccf070d655e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["96ba3bb78479d97e76aa664b8958ccf070d655e6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["abf299c3223296f3d69484286b321c8da2dfe3c6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}