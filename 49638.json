{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#updateDocuments(Term,List[#-extends-Iterable[#-extends-IndexableField]]).mjava","commits":[{"id":"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9","date":1316963893,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#updateDocuments(Term,List[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void updateDocuments(Term id, List<? extends Iterable<? extends IndexableField>> docs) throws Exception {\n    final long gen = nrt.updateDocuments(id, docs);\n\n    // Randomly verify the update \"took\":\n    if (random.nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      final IndexSearcher s = nrt.get(gen, true);\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrt.release(s);\n      }\n    }\n    \n    lastGens.set(gen);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#updateDocuments(Term,List[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#updateDocuments(Term,List[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  @Override\n  protected void updateDocuments(Term id, List<? extends Iterable<? extends IndexableField>> docs) throws Exception {\n    final long gen = nrt.updateDocuments(id, docs);\n\n    // Randomly verify the update \"took\":\n    if (random.nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      SearcherManager manager = nrt.waitForGeneration(gen, true);\n      final IndexSearcher s = manager.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        manager.release(s);\n      }\n    }\n    \n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void updateDocuments(Term id, List<? extends Iterable<? extends IndexableField>> docs) throws Exception {\n    final long gen = nrt.updateDocuments(id, docs);\n\n    // Randomly verify the update \"took\":\n    if (random.nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      final IndexSearcher s = nrt.get(gen, true);\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrt.release(s);\n      }\n    }\n    \n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNRTManager#updateDocuments(Term,List[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#updateDocuments(Term,List[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  @Override\n  protected void updateDocuments(Term id, List<? extends Iterable<? extends IndexableField>> docs) throws Exception {\n    final long gen = nrt.updateDocuments(id, docs);\n\n    // Randomly verify the update \"took\":\n    if (random.nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      SearcherManager manager = nrt.waitForGeneration(gen, true);\n      final IndexSearcher s = manager.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        manager.release(s);\n      }\n    }\n    \n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void updateDocuments(Term id, List<? extends Iterable<? extends IndexableField>> docs) throws Exception {\n    final long gen = nrt.updateDocuments(id, docs);\n\n    // Randomly verify the update \"took\":\n    if (random.nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      SearcherManager manager = nrt.waitForGeneration(gen, true);\n      final IndexSearcher s = manager.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        manager.release(s);\n      }\n    }\n    \n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["606baff722a317c76a92b111d183b54b6e6e5741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"606baff722a317c76a92b111d183b54b6e6e5741":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["606baff722a317c76a92b111d183b54b6e6e5741"],"606baff722a317c76a92b111d183b54b6e6e5741":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}