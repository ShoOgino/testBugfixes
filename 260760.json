{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#startDoc(int,int).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startDoc docID[\"+docBufferUpto+\"]=\" + docID);\n    // }\n    // Have collected a block of docs, and get a new doc. \n    // Should write skip data as well as postings list for\n    // current block.\n    if (lastBlockDocID != -1 && docBufferUpto == 0) {\n      // if (DEBUG) {\n      //   System.out.println(\"  bufferSkip at writeBlock: lastDocID=\" + lastBlockDocID + \" docCount=\" + (docCount-1));\n      // }\n      skipWriter.bufferSkip(lastBlockDocID, docCount, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockPayloadByteUpto);\n    }\n\n    final int docDelta = docID - lastDocID;\n\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n    // if (DEBUG) {\n    //   System.out.println(\"  docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDelta);\n    // }\n    if (fieldHasFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write docDelta block @ fp=\" + docOut.getFilePointer());\n      // }\n      forUtil.writeBlock(docDeltaBuffer, encoded, docOut);\n      if (fieldHasFreqs) {\n        // if (DEBUG) {\n        //   System.out.println(\"  write freq block @ fp=\" + docOut.getFilePointer());\n        // }\n        forUtil.writeBlock(freqBuffer, encoded, docOut);\n      }\n      // NOTE: don't set docBufferUpto back to 0 here;\n      // finishDoc will do so (because it needs to see that\n      // the block was filled so it can save skip data)\n    }\n\n\n    lastDocID = docID;\n    lastPosition = 0;\n    lastStartOffset = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#startDoc(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startDoc docID[\"+docBufferUpto+\"]=\" + docID);\n    // }\n    // Have collected a block of docs, and get a new doc. \n    // Should write skip data as well as postings list for\n    // current block.\n    if (lastBlockDocID != -1 && docBufferUpto == 0) {\n      // if (DEBUG) {\n      //   System.out.println(\"  bufferSkip at writeBlock: lastDocID=\" + lastBlockDocID + \" docCount=\" + (docCount-1));\n      // }\n      skipWriter.bufferSkip(lastBlockDocID, docCount, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockPayloadByteUpto);\n    }\n\n    final int docDelta = docID - lastDocID;\n\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n    // if (DEBUG) {\n    //   System.out.println(\"  docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDelta);\n    // }\n    if (fieldHasFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write docDelta block @ fp=\" + docOut.getFilePointer());\n      // }\n      forUtil.writeBlock(docDeltaBuffer, encoded, docOut);\n      if (fieldHasFreqs) {\n        // if (DEBUG) {\n        //   System.out.println(\"  write freq block @ fp=\" + docOut.getFilePointer());\n        // }\n        forUtil.writeBlock(freqBuffer, encoded, docOut);\n      }\n      // NOTE: don't set docBufferUpto back to 0 here;\n      // finishDoc will do so (because it needs to see that\n      // the block was filled so it can save skip data)\n    }\n\n\n    lastDocID = docID;\n    lastPosition = 0;\n    lastStartOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}