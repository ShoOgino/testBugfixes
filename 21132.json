{"path":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testPointField().mjava","commits":[{"id":"ee8ab3e5e7c88ac47842e73e81cf68d90dd1dca6","date":1501534988,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testPointField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPointField() throws Exception {\n    assertU(adoc(\"id\", \"10000\", \"foo_pi\", \"1\"));\n    assertU(commit());\n    \n    try {\n      final SolrQueryRequest req = req(\n          \"qt\", \"/terms\",\n          \"terms\", \"true\",\n          \"terms.fl\", \"foo_pi\");\n      Exception e = expectThrows(SolrException.class, () -> h.query(req));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException) e).code());\n      assertTrue(e.getMessage().contains(\"The terms component does not support Points-based field foo_pi\"));\n\n      final SolrQueryRequest req2 = req(\n          \"qt\", \"/terms\",\n          \"terms\", \"true\",\n          \"terms.fl\", \"foo_pi\",\n          \"terms.list\", \"1\");\n      e = expectThrows(SolrException.class, () -> h.query(req2));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException) e).code());\n      assertTrue(e.getMessage().contains(\"The terms component does not support Points-based field foo_pi\"));\n    } finally {\n      assertU(delI(\"10000\"));\n      assertU(commit());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testPointField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPointField() throws Exception {\n    assertU(adoc(\"id\", \"10000\", \"foo_pi\", \"1\"));\n    assertU(commit());\n    \n    try {\n      final SolrQueryRequest req = req(\n          \"qt\", \"/terms\",\n          \"terms\", \"true\",\n          \"terms.fl\", \"foo_pi\");\n      Exception e = expectThrows(SolrException.class, () -> h.query(req));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException) e).code());\n      assertTrue(e.getMessage().contains(\"The terms component does not support Points-based field foo_pi\"));\n\n      final SolrQueryRequest req2 = req(\n          \"qt\", \"/terms\",\n          \"terms\", \"true\",\n          \"terms.fl\", \"foo_pi\",\n          \"terms.list\", \"1\");\n      e = expectThrows(SolrException.class, () -> h.query(req2));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException) e).code());\n      assertTrue(e.getMessage().contains(\"The terms component does not support Points-based field foo_pi\"));\n    } finally {\n      assertU(delI(\"10000\"));\n      assertU(commit());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7ebafe1543d3847a1cb09988cb6c46d48741f8","date":1503180131,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testPointField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testPointField().mjava","sourceNew":"  @Test\n  public void testPointField() throws Exception {\n    int nvals = 10000; int maxval = 1000000;\n    // int nvals = 5; int maxval = 2;\n    final int vals[] = new int[nvals];\n    for (int i=0; i<nvals; i++) {\n      vals[i] = random().nextInt(maxval);\n      String v = Integer.toString(vals[i]);\n      assertU(adoc(\"id\", Integer.toString(100000+i), \"foo_pi\",v, \"foo_pl\",v, \"foo_pf\",v, \"foo_pd\",v) );\n      if (random().nextInt(1000) == 0) assertU(commit());  // make multiple segments\n    }\n\n    assertU(commit());\n    // assertU(optimize());\n\n    Arrays.sort(vals);\n\n    // find the first two values and account for dups\n    int val1 = vals[0];\n    int val2 = vals[1];\n    for (int i=2; i<vals.length; i++) {\n      if (val2 != val1) break;\n      val2 = vals[i];\n    }\n\n    SolrQueryRequest req = req(\n        \"qt\", \"/terms\",\n        \"terms\", \"true\",\n        \"terms.fl\", \"foo_pi\");\n    ;\n    try {\n      SchemaField sf = req.getSchema().getField(\"foo_pi\");\n\n      /**\n      LeafReader r = req.getSearcher().getIndexReader().leaves().get(0).reader();\n      PointValues pv = r.getPointValues(\"foo_pi\");\n      System.out.println(\"pv=\" + pv);\n      if (pv instanceof AssertingLeafReader.AssertingPointValues) {\n        pv = ((AssertingLeafReader.AssertingPointValues) pv).getWrapped();\n      }\n      System.out.println(\"pv=\" + pv);\n      BKDReader bkdr = (BKDReader)pv;\n\n       for (int i=0; i<Math.min(10,nvals); i++) { System.out.println(\"INDEXED VAL=\" + vals[i]); }\n      **/\n\n\n      //\n      // iterate all values\n      //\n      int totBuff = random().nextInt(50)+1;\n      int minSegBuff = random().nextInt(10)+1;\n      PointMerger.ValueIterator iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pi\"), req.getSearcher().getIndexReader().leaves(), totBuff, minSegBuff);\n      MutableValueInt v = (MutableValueInt)iter.getMutableValue();\n      int i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], v.value );\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pl\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueLong lv = (MutableValueLong)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], lv.value );\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pf\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueFloat fv = (MutableValueFloat)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], fv.value, 0);\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pd\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueDouble dv = (MutableValueDouble)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], dv.value, 0);\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n          \"terms.fl\",\"foo_pi\", \"terms.sort\",\"index\", \"terms.limit\",\"2\")\n          ,\"count(//lst[@name='foo_pi']/*)=2\"\n          ,\"//lst[@name='foo_pi']/int[1][@name='\" +val1+ \"']\"\n          ,\"//lst[@name='foo_pi']/int[2][@name='\" +val2+ \"']\"\n      );\n\n\n    } finally {\n      req.close();\n      assertU(delQ(\"foo_pi:[* TO *]\"));\n      assertU(commit());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPointField() throws Exception {\n    assertU(adoc(\"id\", \"10000\", \"foo_pi\", \"1\"));\n    assertU(commit());\n    \n    try {\n      final SolrQueryRequest req = req(\n          \"qt\", \"/terms\",\n          \"terms\", \"true\",\n          \"terms.fl\", \"foo_pi\");\n      Exception e = expectThrows(SolrException.class, () -> h.query(req));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException) e).code());\n      assertTrue(e.getMessage().contains(\"The terms component does not support Points-based field foo_pi\"));\n\n      final SolrQueryRequest req2 = req(\n          \"qt\", \"/terms\",\n          \"terms\", \"true\",\n          \"terms.fl\", \"foo_pi\",\n          \"terms.list\", \"1\");\n      e = expectThrows(SolrException.class, () -> h.query(req2));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException) e).code());\n      assertTrue(e.getMessage().contains(\"The terms component does not support Points-based field foo_pi\"));\n    } finally {\n      assertU(delI(\"10000\"));\n      assertU(commit());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3051d6122751c8f6cc1e9cf24592658b59843ec2","date":1503298024,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testPointField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testPointField().mjava","sourceNew":"  @Test\n  public void testPointField() throws Exception {\n    int nvals = 10000; int maxval = 1000000;\n    // int nvals = 5; int maxval = 2;\n    final int vals[] = new int[nvals];\n    for (int i=0; i<nvals; i++) {\n      vals[i] = random().nextInt(maxval);\n      String v = Integer.toString(vals[i]);\n      assertU(adoc(\"id\", Integer.toString(100000+i), \"foo_pi\",v, \"foo_pl\",v, \"foo_pf\",v, \"foo_pd\",v) );\n      if (random().nextInt(1000) == 0) assertU(commit());  // make multiple segments\n    }\n\n    assertU(commit());\n    // assertU(optimize());\n\n    Arrays.sort(vals);\n\n    // find the first two values and account for dups\n    int val1 = vals[0];\n    int val2 = vals[1];\n    for (int i=2; i<vals.length; i++) {\n      if (val2 != val1) break;\n      val2 = vals[i];\n    }\n\n    SolrQueryRequest req = req(\n        \"qt\", \"/terms\",\n        \"terms\", \"true\",\n        \"terms.fl\", \"foo_pi\");\n    ;\n    try {\n      SchemaField sf = req.getSchema().getField(\"foo_pi\");\n\n      /**\n      LeafReader r = req.getSearcher().getIndexReader().leaves().get(0).reader();\n      PointValues pv = r.getPointValues(\"foo_pi\");\n      System.out.println(\"pv=\" + pv);\n      if (pv instanceof AssertingLeafReader.AssertingPointValues) {\n        pv = ((AssertingLeafReader.AssertingPointValues) pv).getWrapped();\n      }\n      System.out.println(\"pv=\" + pv);\n      BKDReader bkdr = (BKDReader)pv;\n\n       for (int i=0; i<Math.min(10,nvals); i++) { System.out.println(\"INDEXED VAL=\" + vals[i]); }\n      **/\n\n\n      //\n      // iterate all values\n      //\n      int totBuff = random().nextInt(50)+1;\n      int minSegBuff = random().nextInt(10)+1;\n      PointMerger.ValueIterator iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pi\"), req.getSearcher().getIndexReader().leaves(), totBuff, minSegBuff);\n      MutableValueInt v = (MutableValueInt)iter.getMutableValue();\n      int i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], v.value );\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pl\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueLong lv = (MutableValueLong)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], lv.value );\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pf\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueFloat fv = (MutableValueFloat)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], fv.value, 0);\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pd\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueDouble dv = (MutableValueDouble)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], dv.value, 0);\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n          \"terms.fl\",\"foo_pi\", \"terms.sort\",\"index\", \"terms.limit\",\"2\")\n          ,\"count(//lst[@name='foo_pi']/*)=2\"\n          ,\"//lst[@name='foo_pi']/int[1][@name='\" +val1+ \"']\"\n          ,\"//lst[@name='foo_pi']/int[2][@name='\" +val2+ \"']\"\n      );\n\n\n    } finally {\n      req.close();\n      assertU(delQ(\"foo_pi:[* TO *]\"));\n      assertU(commit());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPointField() throws Exception {\n    assertU(adoc(\"id\", \"10000\", \"foo_pi\", \"1\"));\n    assertU(commit());\n    \n    try {\n      final SolrQueryRequest req = req(\n          \"qt\", \"/terms\",\n          \"terms\", \"true\",\n          \"terms.fl\", \"foo_pi\");\n      Exception e = expectThrows(SolrException.class, () -> h.query(req));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException) e).code());\n      assertTrue(e.getMessage().contains(\"The terms component does not support Points-based field foo_pi\"));\n\n      final SolrQueryRequest req2 = req(\n          \"qt\", \"/terms\",\n          \"terms\", \"true\",\n          \"terms.fl\", \"foo_pi\",\n          \"terms.list\", \"1\");\n      e = expectThrows(SolrException.class, () -> h.query(req2));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException) e).code());\n      assertTrue(e.getMessage().contains(\"The terms component does not support Points-based field foo_pi\"));\n    } finally {\n      assertU(delI(\"10000\"));\n      assertU(commit());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"213e062dd7cfdd10e8df198b43616cb99b0c4fdd","date":1600693537,"type":3,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testPointField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testPointField().mjava","sourceNew":"  @Test\n  public void testPointField() throws Exception {\n    int nvals = 10000; int maxval = 1000000;\n    // int nvals = 5; int maxval = 2;\n    final int vals[] = new int[nvals];\n    for (int i=0; i<nvals; i++) {\n      vals[i] = random().nextInt(maxval);\n      String v = Integer.toString(vals[i]);\n      assertU(adoc(\"id\", Integer.toString(100000+i), \"foo_pi\",v, \"foo_pl\",v, \"foo_pf\",v, \"foo_pd\",v) );\n      if (random().nextInt(1000) == 0) assertU(commit());  // make multiple segments\n    }\n\n    assertU(commit());\n    // assertU(optimize());\n\n    Arrays.sort(vals);\n\n    // find the first two values and account for dups\n    int val1 = vals[0];\n    int val2 = vals[1];\n    for (int i=2; i<vals.length; i++) {\n      if (val2 != val1) break;\n      val2 = vals[i];\n    }\n\n    SolrQueryRequest req = req(\n        \"qt\", \"/terms\",\n        \"terms.fl\", \"foo_pi\");\n    ;\n    try {\n      SchemaField sf = req.getSchema().getField(\"foo_pi\");\n\n      /**\n      LeafReader r = req.getSearcher().getIndexReader().leaves().get(0).reader();\n      PointValues pv = r.getPointValues(\"foo_pi\");\n      System.out.println(\"pv=\" + pv);\n      if (pv instanceof AssertingLeafReader.AssertingPointValues) {\n        pv = ((AssertingLeafReader.AssertingPointValues) pv).getWrapped();\n      }\n      System.out.println(\"pv=\" + pv);\n      BKDReader bkdr = (BKDReader)pv;\n\n       for (int i=0; i<Math.min(10,nvals); i++) { System.out.println(\"INDEXED VAL=\" + vals[i]); }\n      **/\n\n\n      //\n      // iterate all values\n      //\n      int totBuff = random().nextInt(50)+1;\n      int minSegBuff = random().nextInt(10)+1;\n      PointMerger.ValueIterator iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pi\"), req.getSearcher().getIndexReader().leaves(), totBuff, minSegBuff);\n      MutableValueInt v = (MutableValueInt)iter.getMutableValue();\n      int i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], v.value );\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pl\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueLong lv = (MutableValueLong)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], lv.value );\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pf\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueFloat fv = (MutableValueFloat)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], fv.value, 0);\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pd\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueDouble dv = (MutableValueDouble)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], dv.value, 0);\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",\n          \"terms.fl\",\"foo_pi\", \"terms.sort\",\"index\", \"terms.limit\",\"2\")\n          ,\"count(//lst[@name='foo_pi']/*)=2\"\n          ,\"//lst[@name='foo_pi']/int[1][@name='\" +val1+ \"']\"\n          ,\"//lst[@name='foo_pi']/int[2][@name='\" +val2+ \"']\"\n      );\n\n\n    } finally {\n      req.close();\n      assertU(delQ(\"foo_pi:[* TO *]\"));\n      assertU(commit());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPointField() throws Exception {\n    int nvals = 10000; int maxval = 1000000;\n    // int nvals = 5; int maxval = 2;\n    final int vals[] = new int[nvals];\n    for (int i=0; i<nvals; i++) {\n      vals[i] = random().nextInt(maxval);\n      String v = Integer.toString(vals[i]);\n      assertU(adoc(\"id\", Integer.toString(100000+i), \"foo_pi\",v, \"foo_pl\",v, \"foo_pf\",v, \"foo_pd\",v) );\n      if (random().nextInt(1000) == 0) assertU(commit());  // make multiple segments\n    }\n\n    assertU(commit());\n    // assertU(optimize());\n\n    Arrays.sort(vals);\n\n    // find the first two values and account for dups\n    int val1 = vals[0];\n    int val2 = vals[1];\n    for (int i=2; i<vals.length; i++) {\n      if (val2 != val1) break;\n      val2 = vals[i];\n    }\n\n    SolrQueryRequest req = req(\n        \"qt\", \"/terms\",\n        \"terms\", \"true\",\n        \"terms.fl\", \"foo_pi\");\n    ;\n    try {\n      SchemaField sf = req.getSchema().getField(\"foo_pi\");\n\n      /**\n      LeafReader r = req.getSearcher().getIndexReader().leaves().get(0).reader();\n      PointValues pv = r.getPointValues(\"foo_pi\");\n      System.out.println(\"pv=\" + pv);\n      if (pv instanceof AssertingLeafReader.AssertingPointValues) {\n        pv = ((AssertingLeafReader.AssertingPointValues) pv).getWrapped();\n      }\n      System.out.println(\"pv=\" + pv);\n      BKDReader bkdr = (BKDReader)pv;\n\n       for (int i=0; i<Math.min(10,nvals); i++) { System.out.println(\"INDEXED VAL=\" + vals[i]); }\n      **/\n\n\n      //\n      // iterate all values\n      //\n      int totBuff = random().nextInt(50)+1;\n      int minSegBuff = random().nextInt(10)+1;\n      PointMerger.ValueIterator iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pi\"), req.getSearcher().getIndexReader().leaves(), totBuff, minSegBuff);\n      MutableValueInt v = (MutableValueInt)iter.getMutableValue();\n      int i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], v.value );\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pl\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueLong lv = (MutableValueLong)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], lv.value );\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pf\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueFloat fv = (MutableValueFloat)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], fv.value, 0);\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      totBuff = random().nextInt(50)+1;\n      minSegBuff = random().nextInt(10)+1;\n      iter = new PointMerger.ValueIterator(req.getSchema().getField(\"foo_pd\"), req.getSearcher().getIndexReader().leaves());\n      MutableValueDouble dv = (MutableValueDouble)iter.getMutableValue();\n      i=0;\n      for (;;) {\n        long count = iter.getNextCount();\n        if (count < 0) break;\n        assertEquals( vals[i], dv.value, 0);\n        i += count;\n        // if (i < 10) System.out.println(\"COUNT=\" + count + \" OBJ=\"+v.toObject());\n      }\n      assert(i==nvals);\n\n      assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n          \"terms.fl\",\"foo_pi\", \"terms.sort\",\"index\", \"terms.limit\",\"2\")\n          ,\"count(//lst[@name='foo_pi']/*)=2\"\n          ,\"//lst[@name='foo_pi']/int[1][@name='\" +val1+ \"']\"\n          ,\"//lst[@name='foo_pi']/int[2][@name='\" +val2+ \"']\"\n      );\n\n\n    } finally {\n      req.close();\n      assertU(delQ(\"foo_pi:[* TO *]\"));\n      assertU(commit());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"213e062dd7cfdd10e8df198b43616cb99b0c4fdd":["ee8ab3e5e7c88ac47842e73e81cf68d90dd1dca6"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee8ab3e5e7c88ac47842e73e81cf68d90dd1dca6"],"ee8ab3e5e7c88ac47842e73e81cf68d90dd1dca6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f7ebafe1543d3847a1cb09988cb6c46d48741f8":["ee8ab3e5e7c88ac47842e73e81cf68d90dd1dca6"],"3051d6122751c8f6cc1e9cf24592658b59843ec2":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","2f7ebafe1543d3847a1cb09988cb6c46d48741f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["213e062dd7cfdd10e8df198b43616cb99b0c4fdd"]},"commit2Childs":{"213e062dd7cfdd10e8df198b43616cb99b0c4fdd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3051d6122751c8f6cc1e9cf24592658b59843ec2"],"ee8ab3e5e7c88ac47842e73e81cf68d90dd1dca6":["213e062dd7cfdd10e8df198b43616cb99b0c4fdd","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","2f7ebafe1543d3847a1cb09988cb6c46d48741f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","ee8ab3e5e7c88ac47842e73e81cf68d90dd1dca6"],"2f7ebafe1543d3847a1cb09988cb6c46d48741f8":["3051d6122751c8f6cc1e9cf24592658b59843ec2"],"3051d6122751c8f6cc1e9cf24592658b59843ec2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3051d6122751c8f6cc1e9cf24592658b59843ec2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}