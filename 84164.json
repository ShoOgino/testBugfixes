{"path":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#execute().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#execute().mjava","pathOld":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#execute().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database, extracts the ASCII TLDs, then\n   * writes a JFlex macro accepting any of them case-insensitively out to\n   * the specified output file.\n   * \n   * @throws IOException if there is a problem either downloading the database\n   *  or writing out the output file.\n   */\n  public void execute() throws IOException {\n    final SortedSet<String> TLDs = getIANARootZoneDatabase();\n    writeOutput(TLDs);\n    System.err.println(\"Wrote \" + TLDs.size() + \" top level domains to '\" \n                       + outputFile + \"'.\");\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database, extracts the ASCII TLDs, then\n   * writes a JFlex macro accepting any of them case-insensitively out to\n   * the specified output file.\n   * \n   * @throws IOException if there is a problem either downloading the database\n   *  or writing out the output file.\n   */\n  public void execute() throws IOException {\n    final SortedSet<String> TLDs = getIANARootZoneDatabase();\n    writeOutput(TLDs);\n    System.err.println(\"Wrote \" + TLDs.size() + \" top level domains to '\" \n                       + outputFile + \"'.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8","date":1528751370,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#execute().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#execute().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database, extracts the ASCII TLDs, then\n   * writes a set of JFlex macros accepting any of them case-insensitively\n   * out to the specified output file.\n   * \n   * @throws IOException if there is a problem either downloading the database\n   *  or writing out the output file.\n   */\n  public void execute() throws IOException {\n    getIANARootZoneDatabase();\n    partitionTLDprefixesBySuffixLength();\n    writeOutput();\n    System.out.println(\"Wrote TLD macros to '\" + outputFile + \"':\");\n    int totalDomains = 0;\n    for (int suffixLength = 0 ; suffixLength < TLDsBySuffixLength.size() ; ++ suffixLength) {\n      int domainsAtThisSuffixLength = TLDsBySuffixLength.get(suffixLength).size();\n      totalDomains += domainsAtThisSuffixLength;\n      System.out.printf(\"%30s: %4d TLDs%n\", getMacroName(suffixLength), domainsAtThisSuffixLength);\n    }\n    System.out.printf(\"%30s: %4d TLDs%n\", \"Total\", totalDomains);\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database, extracts the ASCII TLDs, then\n   * writes a JFlex macro accepting any of them case-insensitively out to\n   * the specified output file.\n   * \n   * @throws IOException if there is a problem either downloading the database\n   *  or writing out the output file.\n   */\n  public void execute() throws IOException {\n    final SortedSet<String> TLDs = getIANARootZoneDatabase();\n    writeOutput(TLDs);\n    System.err.println(\"Wrote \" + TLDs.size() + \" top level domains to '\" \n                       + outputFile + \"'.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#execute().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#execute().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database, extracts the ASCII TLDs, then\n   * writes a set of JFlex macros accepting any of them case-insensitively\n   * out to the specified output file.\n   * \n   * @throws IOException if there is a problem either downloading the database\n   *  or writing out the output file.\n   */\n  public void execute() throws IOException {\n    getIANARootZoneDatabase();\n    partitionTLDprefixesBySuffixLength();\n    writeOutput();\n    System.out.println(\"Wrote TLD macros to '\" + outputFile + \"':\");\n    int totalDomains = 0;\n    for (int suffixLength = 0 ; suffixLength < TLDsBySuffixLength.size() ; ++ suffixLength) {\n      int domainsAtThisSuffixLength = TLDsBySuffixLength.get(suffixLength).size();\n      totalDomains += domainsAtThisSuffixLength;\n      System.out.printf(\"%30s: %4d TLDs%n\", getMacroName(suffixLength), domainsAtThisSuffixLength);\n    }\n    System.out.printf(\"%30s: %4d TLDs%n\", \"Total\", totalDomains);\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database, extracts the ASCII TLDs, then\n   * writes a JFlex macro accepting any of them case-insensitively out to\n   * the specified output file.\n   * \n   * @throws IOException if there is a problem either downloading the database\n   *  or writing out the output file.\n   */\n  public void execute() throws IOException {\n    final SortedSet<String> TLDs = getIANARootZoneDatabase();\n    writeOutput(TLDs);\n    System.err.println(\"Wrote \" + TLDs.size() + \" top level domains to '\" \n                       + outputFile + \"'.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#execute().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#execute().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database, extracts the ASCII TLDs, then\n   * writes a set of JFlex macros accepting any of them case-insensitively\n   * out to the specified output file.\n   * \n   * @throws IOException if there is a problem either downloading the database\n   *  or writing out the output file.\n   */\n  public void execute() throws IOException {\n    getIANARootZoneDatabase();\n    partitionTLDprefixesBySuffixLength();\n    writeOutput();\n    System.out.println(\"Wrote TLD macros to '\" + outputFile + \"':\");\n    int totalDomains = 0;\n    for (int suffixLength = 0 ; suffixLength < TLDsBySuffixLength.size() ; ++ suffixLength) {\n      int domainsAtThisSuffixLength = TLDsBySuffixLength.get(suffixLength).size();\n      totalDomains += domainsAtThisSuffixLength;\n      System.out.printf(\"%30s: %4d TLDs%n\", getMacroName(suffixLength), domainsAtThisSuffixLength);\n    }\n    System.out.printf(\"%30s: %4d TLDs%n\", \"Total\", totalDomains);\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database, extracts the ASCII TLDs, then\n   * writes a JFlex macro accepting any of them case-insensitively out to\n   * the specified output file.\n   * \n   * @throws IOException if there is a problem either downloading the database\n   *  or writing out the output file.\n   */\n  public void execute() throws IOException {\n    final SortedSet<String> TLDs = getIANARootZoneDatabase();\n    writeOutput(TLDs);\n    System.err.println(\"Wrote \" + TLDs.size() + \" top level domains to '\" \n                       + outputFile + \"'.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"]},"commit2Childs":{"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}