{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"e8550173e67bccdaad7c5cbb85fb81886fecfcb7","date":1376943063,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":2,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeByte(SORTED_SET);\n      // write the ordinals as a binary field\n      addBinaryField(field, new Iterable<BytesRef>() {\n        @Override\n        public Iterator<BytesRef> iterator() {\n          return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n        }\n      });\n      \n      // write the values as FST\n      writeFST(field, values);\n    }\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeByte(SORTED_SET);\n      // write the ordinals as a binary field\n      addBinaryField(field, new Iterable<BytesRef>() {\n        @Override\n        public Iterator<BytesRef> iterator() {\n          return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n        }\n      });\n      \n      // write the values as FST\n      writeFST(field, values);\n    }\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but it's fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeByte(SORTED_SET);\n      // write the ordinals as a binary field\n      addBinaryField(field, new Iterable<BytesRef>() {\n        @Override\n        public Iterator<BytesRef> iterator() {\n          return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n        }\n      });\n      \n      // write the values as FST\n      writeFST(field, values);\n    }\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeByte(SORTED_SET);\n      // write the ordinals as a binary field\n      addBinaryField(field, new Iterable<BytesRef>() {\n        @Override\n        public Iterator<BytesRef> iterator() {\n          return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n        }\n      });\n      \n      // write the values as FST\n      writeFST(field, values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but it's fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    Iterable<BytesRef> values = LegacyDocValuesIterables.valuesIterable(valuesProducer.getSortedSet(field));\n    Iterable<Number> docToOrdCount = LegacyDocValuesIterables.sortedSetOrdCountIterable(valuesProducer, field, maxDoc);\n    Iterable<Number> ords = LegacyDocValuesIterables.sortedSetOrdsIterable(valuesProducer, field);\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeByte(SORTED_SET);\n      // write the ordinals as a binary field\n      addBinaryField(field, new Iterable<BytesRef>() {\n        @Override\n        public Iterator<BytesRef> iterator() {\n          return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n        }\n      });\n      \n      // write the values as FST\n      writeFST(field, values);\n    }\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but it's fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeByte(SORTED_SET);\n      // write the ordinals as a binary field\n      addBinaryField(field, new Iterable<BytesRef>() {\n        @Override\n        public Iterator<BytesRef> iterator() {\n          return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n        }\n      });\n      \n      // write the values as FST\n      writeFST(field, values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  // note: this might not be the most efficient... but it's fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeByte(SORTED_SET);\n      // write the ordinals as a binary field\n      addBinaryField(field, new Iterable<BytesRef>() {\n        @Override\n        public Iterator<BytesRef> iterator() {\n          return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n        }\n      });\n      \n      // write the values as FST\n      writeFST(field, values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  // note: this might not be the most efficient... but it's fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeByte(SORTED_SET);\n      // write the ordinals as a binary field\n      addBinaryField(field, new Iterable<BytesRef>() {\n        @Override\n        public Iterator<BytesRef> iterator() {\n          return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n        }\n      });\n      \n      // write the values as FST\n      writeFST(field, values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}