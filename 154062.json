{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newFieldType(String,String,Map[String,#]).mjava","commits":[{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newFieldType(String,String,Map[String,#]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldType newFieldType(String typeName, String className, Map<String, ?> options) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n\n    if (getFieldTypeByName(typeName) != null) {\n      String msg = \"Field type '\" + typeName + \"' already exists.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    // build the new FieldType using the existing FieldTypePluginLoader framework\n    // which expects XML, so we use a JSON to XML adapter to transform the JSON object\n    // provided in the request into the XML format supported by the plugin loader\n    Map<String, FieldType> newFieldTypes = new HashMap<String, FieldType>();\n    List<SchemaAware> schemaAwareList = new ArrayList<SchemaAware>();\n    FieldTypePluginLoader typeLoader = new FieldTypePluginLoader(this, newFieldTypes, schemaAwareList);\n    typeLoader.loadSingle(loader, FieldTypeXmlAdapter.toNode(options));\n    FieldType ft = newFieldTypes.get(typeName);\n    if (!schemaAwareList.isEmpty())\n      schemaAware.addAll(schemaAwareList);\n\n    return ft;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newFieldType(String,String,Map[String,#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newFieldType(String,String,Map[String,#]).mjava","sourceNew":"  @Override\n  public FieldType newFieldType(String typeName, String className, Map<String, ?> options) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n\n    if (getFieldTypeByName(typeName) != null) {\n      String msg = \"Field type '\" + typeName + \"' already exists.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    // build the new FieldType using the existing FieldTypePluginLoader framework\n    // which expects XML, so we use a JSON to XML adapter to transform the JSON object\n    // provided in the request into the XML format supported by the plugin loader\n    Map<String,FieldType> newFieldTypes = new HashMap<>();\n    List<SchemaAware> schemaAwareList = new ArrayList<>();\n    FieldTypePluginLoader typeLoader = new FieldTypePluginLoader(this, newFieldTypes, schemaAwareList);\n    typeLoader.loadSingle(loader, FieldTypeXmlAdapter.toNode(options));\n    FieldType ft = newFieldTypes.get(typeName);\n    if (!schemaAwareList.isEmpty())\n      schemaAware.addAll(schemaAwareList);\n\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  public FieldType newFieldType(String typeName, String className, Map<String, ?> options) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n\n    if (getFieldTypeByName(typeName) != null) {\n      String msg = \"Field type '\" + typeName + \"' already exists.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    // build the new FieldType using the existing FieldTypePluginLoader framework\n    // which expects XML, so we use a JSON to XML adapter to transform the JSON object\n    // provided in the request into the XML format supported by the plugin loader\n    Map<String, FieldType> newFieldTypes = new HashMap<String, FieldType>();\n    List<SchemaAware> schemaAwareList = new ArrayList<SchemaAware>();\n    FieldTypePluginLoader typeLoader = new FieldTypePluginLoader(this, newFieldTypes, schemaAwareList);\n    typeLoader.loadSingle(loader, FieldTypeXmlAdapter.toNode(options));\n    FieldType ft = newFieldTypes.get(typeName);\n    if (!schemaAwareList.isEmpty())\n      schemaAware.addAll(schemaAwareList);\n\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newFieldType(String,String,Map[String,#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newFieldType(String,String,Map[String,#]).mjava","sourceNew":"  @Override\n  public FieldType newFieldType(String typeName, String className, Map<String, ?> options) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n\n    if (getFieldTypeByName(typeName) != null) {\n      String msg = \"Field type '\" + typeName + \"' already exists.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    // build the new FieldType using the existing FieldTypePluginLoader framework\n    // which expects XML, so we use a JSON to XML adapter to transform the JSON object\n    // provided in the request into the XML format supported by the plugin loader\n    Map<String,FieldType> newFieldTypes = new HashMap<>();\n    List<SchemaAware> schemaAwareList = new ArrayList<>();\n    FieldTypePluginLoader typeLoader = new FieldTypePluginLoader(this, newFieldTypes, schemaAwareList);\n    typeLoader.loadSingle(loader, FieldTypeXmlAdapter.toNode(options));\n    FieldType ft = newFieldTypes.get(typeName);\n    if (!schemaAwareList.isEmpty())\n      schemaAware.addAll(schemaAwareList);\n\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  public FieldType newFieldType(String typeName, String className, Map<String, ?> options) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n\n    if (getFieldTypeByName(typeName) != null) {\n      String msg = \"Field type '\" + typeName + \"' already exists.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    // build the new FieldType using the existing FieldTypePluginLoader framework\n    // which expects XML, so we use a JSON to XML adapter to transform the JSON object\n    // provided in the request into the XML format supported by the plugin loader\n    Map<String, FieldType> newFieldTypes = new HashMap<String, FieldType>();\n    List<SchemaAware> schemaAwareList = new ArrayList<SchemaAware>();\n    FieldTypePluginLoader typeLoader = new FieldTypePluginLoader(this, newFieldTypes, schemaAwareList);\n    typeLoader.loadSingle(loader, FieldTypeXmlAdapter.toNode(options));\n    FieldType ft = newFieldTypes.get(typeName);\n    if (!schemaAwareList.isEmpty())\n      schemaAware.addAll(schemaAwareList);\n\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newFieldType(String,String,Map[String,#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newFieldType(String,String,Map[String,#]).mjava","sourceNew":"  @Override\n  public FieldType newFieldType(String typeName, String className, Map<String, ?> options) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n\n    if (getFieldTypeByName(typeName) != null) {\n      String msg = \"Field type '\" + typeName + \"' already exists.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    // build the new FieldType using the existing FieldTypePluginLoader framework\n    // which expects XML, so we use a JSON to XML adapter to transform the JSON object\n    // provided in the request into the XML format supported by the plugin loader\n    Map<String,FieldType> newFieldTypes = new HashMap<>();\n    List<SchemaAware> schemaAwareList = new ArrayList<>();\n    FieldTypePluginLoader typeLoader = new FieldTypePluginLoader(this, newFieldTypes, schemaAwareList);\n    typeLoader.loadSingle(solrClassLoader, FieldTypeXmlAdapter.toNode(options));\n    FieldType ft = newFieldTypes.get(typeName);\n    if (!schemaAwareList.isEmpty())\n      schemaAware.addAll(schemaAwareList);\n\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  public FieldType newFieldType(String typeName, String className, Map<String, ?> options) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n\n    if (getFieldTypeByName(typeName) != null) {\n      String msg = \"Field type '\" + typeName + \"' already exists.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    // build the new FieldType using the existing FieldTypePluginLoader framework\n    // which expects XML, so we use a JSON to XML adapter to transform the JSON object\n    // provided in the request into the XML format supported by the plugin loader\n    Map<String,FieldType> newFieldTypes = new HashMap<>();\n    List<SchemaAware> schemaAwareList = new ArrayList<>();\n    FieldTypePluginLoader typeLoader = new FieldTypePluginLoader(this, newFieldTypes, schemaAwareList);\n    typeLoader.loadSingle(loader, FieldTypeXmlAdapter.toNode(options));\n    FieldType ft = newFieldTypes.get(typeName);\n    if (!schemaAwareList.isEmpty())\n      schemaAware.addAll(schemaAwareList);\n\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bdf16ebe435fc9daea90a73b8683ff001c6d3523","eeeea2295d6355a29e259130a5c48ace73022d7c"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}