{"path":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","commits":[{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) > 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) > 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53b70b692842f41a1612f56f9ad247ff0ed3cdb1","date":1307284452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) >= 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) > 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) >= 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) >= 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      IndexOutput datOut = null;\n      boolean success = false;\n      try {\n        datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        byte headerType = typeOrd;\n        if (typeOrd == PACKED) {\n          final long delta = maxValue - minValue;\n          // if we exceed the range of positive longs we must switch to fixed ints\n          if (delta <= ( maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE : Long.MAX_VALUE -1) &&  delta >= 0) {\n            writePackedInts(datOut, docCount);\n            return;\n          } \n          headerType = FIXED_64;\n        }\n        datOut.writeByte(headerType);\n        array.write(datOut, docCount);\n        success = true;\n      } finally {\n        IOUtils.closeSafely(!success, datOut);\n        array.clear();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) >= 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","date":1309190785,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        if (datOut == null) {\n          // if we only add or merge Packed ints datOut is not initialized\n          assert !merging || typeOrd == PACKED;\n          finishAdd(docCount);\n        } else {\n          assert datOut != null && merging && typeOrd != PACKED;\n          // on merge, simply fill up missing values \n          fillDefault(datOut, docCount - (lastDocId + 1));\n        }\n        success = true;\n      } finally {\n        IOUtils.closeSafely(!success, datOut);\n        array.clear();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      IndexOutput datOut = null;\n      boolean success = false;\n      try {\n        datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        byte headerType = typeOrd;\n        if (typeOrd == PACKED) {\n          final long delta = maxValue - minValue;\n          // if we exceed the range of positive longs we must switch to fixed ints\n          if (delta <= ( maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE : Long.MAX_VALUE -1) &&  delta >= 0) {\n            writePackedInts(datOut, docCount);\n            return;\n          } \n          headerType = FIXED_64;\n        }\n        datOut.writeByte(headerType);\n        array.write(datOut, docCount);\n        success = true;\n      } finally {\n        IOUtils.closeSafely(!success, datOut);\n        array.clear();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        if (datOut == null) {\n          // if we only add or merge Packed ints datOut is not initialized\n          assert !merging || typeOrd == PACKED;\n          finishAdd(docCount);\n        } else {\n          assert datOut != null && merging && typeOrd != PACKED;\n          // on merge, simply fill up missing values \n          fillDefault(datOut, docCount - (lastDocId + 1));\n        }\n        success = true;\n      } finally {\n        IOUtils.closeSafely(!success, datOut);\n        array.clear();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) >= 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        if (datOut == null) {\n          // if we only add or merge Packed ints datOut is not initialized\n          assert !merging || typeOrd == PACKED;\n          finishAdd(docCount);\n        } else {\n          assert datOut != null && merging && typeOrd != PACKED;\n          // on merge, simply fill up missing values \n          fillDefault(datOut, docCount - (lastDocId + 1));\n        }\n        success = true;\n      } finally {\n        IOUtils.closeSafely(!success, datOut);\n        array.clear();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) >= 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        if (datOut == null) {\n          // if we only add or merge Packed ints datOut is not initialized\n          assert !merging || typeOrd == PACKED;\n          finishAdd(docCount);\n        } else {\n          assert datOut != null && merging && typeOrd != PACKED;\n          // on merge, simply fill up missing values \n          fillDefault(datOut, docCount - (lastDocId + 1));\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        array.clear();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        if (datOut == null) {\n          // if we only add or merge Packed ints datOut is not initialized\n          assert !merging || typeOrd == PACKED;\n          finishAdd(docCount);\n        } else {\n          assert datOut != null && merging && typeOrd != PACKED;\n          // on merge, simply fill up missing values \n          fillDefault(datOut, docCount - (lastDocId + 1));\n        }\n        success = true;\n      } finally {\n        IOUtils.closeSafely(!success, datOut);\n        array.clear();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        if (datOut == null) {\n          // if we only add or merge Packed ints datOut is not initialized\n          assert !merging || typeOrd == PACKED;\n          finishAdd(docCount);\n        } else {\n          assert datOut != null && merging && typeOrd != PACKED;\n          // on merge, simply fill up missing values \n          fillDefault(datOut, docCount - (lastDocId + 1));\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        array.clear();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53b70b692842f41a1612f56f9ad247ff0ed3cdb1"],"605b061fadf71aa6458c0005eaae83a98350c403":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b70b692842f41a1612f56f9ad247ff0ed3cdb1":["605b061fadf71aa6458c0005eaae83a98350c403"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85eb75e0c0203e44dcf686f35876cf6080f3a671"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"605b061fadf71aa6458c0005eaae83a98350c403":["53b70b692842f41a1612f56f9ad247ff0ed3cdb1"],"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["24230fe54121f9be9d85f2c2067536296785e421","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","605b061fadf71aa6458c0005eaae83a98350c403"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53b70b692842f41a1612f56f9ad247ff0ed3cdb1":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}