{"path":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","commits":[{"id":"2e5d36d3b999ce76a1e80788e5d243f513c69d50","date":1359044508,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesDVWriter#addOneValue(BytesRef).mjava","sourceNew":"  private void addOneValue(BytesRef value) {\n    int ord = hash.add(value);\n    if (ord < 0) {\n      ord = -ord-1;\n    } \n    \n    if (pendingIndex <= pending.length) {\n      int pendingLen = pending.length;\n      pending = ArrayUtil.grow(pending, pendingIndex+1);\n      iwBytesUsed.addAndGet((pending.length - pendingLen) * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    pending[pendingIndex++] = ord;\n  }\n\n","sourceOld":"  private void addOneValue(BytesRef value) {\n    int ord = hash.add(value);\n    if (ord < 0) {\n      ord = -ord-1;\n    } \n    \n    if (pendingIndex <= pending.length) {\n      int pendingLen = pending.length;\n      pending = ArrayUtil.grow(pending, pendingIndex+1);\n      iwBytesUsed.addAndGet((pending.length - pendingLen) * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    pending[pendingIndex++] = ord;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217deea97c6f9889ae5841798ceb2d62a98bee16","date":1359314941,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","sourceNew":"  private void addOneValue(BytesRef value) {\n    int ord = hash.add(value);\n    if (ord < 0) {\n      ord = -ord-1;\n    }\n    \n    if (pendingIndex <= pending.length) {\n      int pendingLen = pending.length;\n      pending = ArrayUtil.grow(pending, pendingIndex+1);\n      iwBytesUsed.addAndGet((pending.length - pendingLen) * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    pending[pendingIndex++] = ord;\n  }\n\n","sourceOld":"  private void addOneValue(BytesRef value) {\n    int ord = hash.add(value);\n    if (ord < 0) {\n      ord = -ord-1;\n    } \n    \n    if (pendingIndex <= pending.length) {\n      int pendingLen = pending.length;\n      pending = ArrayUtil.grow(pending, pendingIndex+1);\n      iwBytesUsed.addAndGet((pending.length - pendingLen) * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    pending[pendingIndex++] = ord;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d805367d8ca5fa9d4d9037076fd87698b9080f53","date":1359549977,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","sourceNew":"  private void addOneValue(BytesRef value) {\n    int ord = hash.add(value);\n    if (ord < 0) {\n      ord = -ord-1;\n    }\n    \n    pending.add(ord);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  private void addOneValue(BytesRef value) {\n    int ord = hash.add(value);\n    if (ord < 0) {\n      ord = -ord-1;\n    }\n    \n    if (pendingIndex <= pending.length) {\n      int pendingLen = pending.length;\n      pending = ArrayUtil.grow(pending, pendingIndex+1);\n      iwBytesUsed.addAndGet((pending.length - pendingLen) * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    pending[pendingIndex++] = ord;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eeb17a2bb36160ebf1f228be37f19a8b332f059","date":1359555682,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","sourceNew":"  private void addOneValue(BytesRef value) {\n    int ord = hash.add(value);\n    if (ord < 0) {\n      ord = -ord-1;\n    } else {\n      // reserve additional space for each unique value:\n      // 1. when indexing, when hash is 50% full, rehash() suddenly needs 2*size ints.\n      //    TODO: can this same OOM happen in THPF?\n      // 2. when flushing, we need 1 int per value (slot in the ordMap).\n      iwBytesUsed.addAndGet(2 * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    \n    pending.add(ord);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  private void addOneValue(BytesRef value) {\n    int ord = hash.add(value);\n    if (ord < 0) {\n      ord = -ord-1;\n    }\n    \n    pending.add(ord);\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private void addOneValue(BytesRef value) {\n    int ord = hash.add(value);\n    if (ord < 0) {\n      ord = -ord-1;\n    } else {\n      // reserve additional space for each unique value:\n      // 1. when indexing, when hash is 50% full, rehash() suddenly needs 2*size ints.\n      //    TODO: can this same OOM happen in THPF?\n      // 2. when flushing, we need 1 int per value (slot in the ordMap).\n      iwBytesUsed.addAndGet(2 * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    \n    pending.add(ord);\n    updateBytesUsed();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55536992cfc5c87d8b7196c556d1b458afe1f840","date":1362267535,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","sourceNew":"  private void addOneValue(BytesRef value) {\n    int termID = hash.add(value);\n    if (termID < 0) {\n      termID = -termID-1;\n    } else {\n      // reserve additional space for each unique value:\n      // 1. when indexing, when hash is 50% full, rehash() suddenly needs 2*size ints.\n      //    TODO: can this same OOM happen in THPF?\n      // 2. when flushing, we need 1 int per value (slot in the ordMap).\n      iwBytesUsed.addAndGet(2 * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    \n    pending.add(termID);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  private void addOneValue(BytesRef value) {\n    int ord = hash.add(value);\n    if (ord < 0) {\n      ord = -ord-1;\n    } else {\n      // reserve additional space for each unique value:\n      // 1. when indexing, when hash is 50% full, rehash() suddenly needs 2*size ints.\n      //    TODO: can this same OOM happen in THPF?\n      // 2. when flushing, we need 1 int per value (slot in the ordMap).\n      iwBytesUsed.addAndGet(2 * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    \n    pending.add(ord);\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","sourceNew":"  private void addOneValue(BytesRef value) {\n    int termID = hash.add(value);\n    if (termID < 0) {\n      termID = -termID-1;\n    } else {\n      // reserve additional space for each unique value:\n      // 1. when indexing, when hash is 50% full, rehash() suddenly needs 2*size ints.\n      //    TODO: can this same OOM happen in THPF?\n      // 2. when flushing, we need 1 int per value (slot in the ordMap).\n      iwBytesUsed.addAndGet(2 * Integer.BYTES);\n    }\n    \n    pending.add(termID);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  private void addOneValue(BytesRef value) {\n    int termID = hash.add(value);\n    if (termID < 0) {\n      termID = -termID-1;\n    } else {\n      // reserve additional space for each unique value:\n      // 1. when indexing, when hash is 50% full, rehash() suddenly needs 2*size ints.\n      //    TODO: can this same OOM happen in THPF?\n      // 2. when flushing, we need 1 int per value (slot in the ordMap).\n      iwBytesUsed.addAndGet(2 * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    \n    pending.add(termID);\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#addOneValue(BytesRef).mjava","sourceNew":"  private void addOneValue(BytesRef value) {\n    int termID = hash.add(value);\n    if (termID < 0) {\n      termID = -termID-1;\n    } else {\n      // reserve additional space for each unique value:\n      // 1. when indexing, when hash is 50% full, rehash() suddenly needs 2*size ints.\n      //    TODO: can this same OOM happen in THPF?\n      // 2. when flushing, we need 1 int per value (slot in the ordMap).\n      iwBytesUsed.addAndGet(2 * Integer.BYTES);\n    }\n    \n    pending.add(termID);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  private void addOneValue(BytesRef value) {\n    int termID = hash.add(value);\n    if (termID < 0) {\n      termID = -termID-1;\n    } else {\n      // reserve additional space for each unique value:\n      // 1. when indexing, when hash is 50% full, rehash() suddenly needs 2*size ints.\n      //    TODO: can this same OOM happen in THPF?\n      // 2. when flushing, we need 1 int per value (slot in the ordMap).\n      iwBytesUsed.addAndGet(2 * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    \n    pending.add(termID);\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d805367d8ca5fa9d4d9037076fd87698b9080f53":["217deea97c6f9889ae5841798ceb2d62a98bee16"],"217deea97c6f9889ae5841798ceb2d62a98bee16":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6eeb17a2bb36160ebf1f228be37f19a8b332f059"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["55536992cfc5c87d8b7196c556d1b458afe1f840","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["55536992cfc5c87d8b7196c556d1b458afe1f840"],"6eeb17a2bb36160ebf1f228be37f19a8b332f059":["d805367d8ca5fa9d4d9037076fd87698b9080f53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["419a8f52c6635419beb951255cacbbb281044c57"],"55536992cfc5c87d8b7196c556d1b458afe1f840":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d805367d8ca5fa9d4d9037076fd87698b9080f53":["6eeb17a2bb36160ebf1f228be37f19a8b332f059"],"217deea97c6f9889ae5841798ceb2d62a98bee16":["d805367d8ca5fa9d4d9037076fd87698b9080f53"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["55536992cfc5c87d8b7196c556d1b458afe1f840"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["217deea97c6f9889ae5841798ceb2d62a98bee16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"419a8f52c6635419beb951255cacbbb281044c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"6eeb17a2bb36160ebf1f228be37f19a8b332f059":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"55536992cfc5c87d8b7196c556d1b458afe1f840":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}