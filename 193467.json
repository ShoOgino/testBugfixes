{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/TraversalIterator#TraversalIterator(Traversal,Set[Scatter]).mjava","commits":[{"id":"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc","date":1461010196,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/TraversalIterator#TraversalIterator(Traversal,Set[Scatter]).mjava","pathOld":"/dev/null","sourceNew":"  public TraversalIterator(Traversal traversal, Set<Scatter> scatter) {\n    this.traversal = traversal;\n    graph = traversal.getGraph();\n    collections = traversal.getCollections();\n    fields = traversal.getFields();\n\n    List<String> outCollections = new ArrayList();\n    List<String> outFields = new ArrayList();\n    List<Integer> levelNums = new ArrayList();\n    List<Iterator<Node>> levelIterators = new ArrayList();\n\n    if(scatter.contains(Scatter.BRANCHES)) {\n      if(graph.size() > 1) {\n        for(int i=0; i<graph.size()-1; i++) {\n          Map<String, Node> graphLevel = graph.get(i);\n          String collection = collections.get(i);\n          String field = fields.get(i);\n          outCollections.add(collection);\n          outFields.add(field);\n          levelNums.add(i);\n          levelIterators.add(graphLevel.values().iterator());\n        }\n      }\n    }\n\n    if(scatter.contains(Scatter.LEAVES)) {\n      int leavesLevel = graph.size() > 1 ? graph.size()-1 : 0 ;\n      Map<String, Node> graphLevel = graph.get(leavesLevel);\n      String collection = collections.get(leavesLevel);\n      String field = fields.get(leavesLevel);\n      levelNums.add(leavesLevel);\n      outCollections.add(collection);\n      outFields.add(field);\n      levelIterators.add(graphLevel.values().iterator());\n    }\n\n    graphIterator = levelIterators.iterator();\n    levelIterator = graphIterator.next();\n\n    fieldIterator = outFields.iterator();\n    collectionIterator = outCollections.iterator();\n    levelNumIterator = levelNums.iterator();\n\n    outField = fieldIterator.next();\n    outCollection = collectionIterator.next();\n    outLevel = levelNumIterator.next();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/TraversalIterator#TraversalIterator(Traversal,Set[Scatter]).mjava","pathOld":"/dev/null","sourceNew":"  public TraversalIterator(Traversal traversal, Set<Scatter> scatter) {\n    this.traversal = traversal;\n    graph = traversal.getGraph();\n    collections = traversal.getCollections();\n    fields = traversal.getFields();\n\n    List<String> outCollections = new ArrayList();\n    List<String> outFields = new ArrayList();\n    List<Integer> levelNums = new ArrayList();\n    List<Iterator<Node>> levelIterators = new ArrayList();\n\n    if(scatter.contains(Scatter.BRANCHES)) {\n      if(graph.size() > 1) {\n        for(int i=0; i<graph.size()-1; i++) {\n          Map<String, Node> graphLevel = graph.get(i);\n          String collection = collections.get(i);\n          String field = fields.get(i);\n          outCollections.add(collection);\n          outFields.add(field);\n          levelNums.add(i);\n          levelIterators.add(graphLevel.values().iterator());\n        }\n      }\n    }\n\n    if(scatter.contains(Scatter.LEAVES)) {\n      int leavesLevel = graph.size() > 1 ? graph.size()-1 : 0 ;\n      Map<String, Node> graphLevel = graph.get(leavesLevel);\n      String collection = collections.get(leavesLevel);\n      String field = fields.get(leavesLevel);\n      levelNums.add(leavesLevel);\n      outCollections.add(collection);\n      outFields.add(field);\n      levelIterators.add(graphLevel.values().iterator());\n    }\n\n    graphIterator = levelIterators.iterator();\n    levelIterator = graphIterator.next();\n\n    fieldIterator = outFields.iterator();\n    collectionIterator = outCollections.iterator();\n    levelNumIterator = levelNums.iterator();\n\n    outField = fieldIterator.next();\n    outCollection = collectionIterator.next();\n    outLevel = levelNumIterator.next();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/TraversalIterator#TraversalIterator(Traversal,Set[Scatter]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/TraversalIterator#TraversalIterator(Traversal,Set[Scatter]).mjava","sourceNew":"  public TraversalIterator(Traversal traversal, Set<Scatter> scatter) {\n    this.traversal = traversal;\n    graph = traversal.getGraph();\n    collections = traversal.getCollections();\n    fields = traversal.getFields();\n\n    List<String> outCollections = new ArrayList<>();\n    List<String> outFields = new ArrayList<>();\n    List<Integer> levelNums = new ArrayList<>();\n    List<Iterator<Node>> levelIterators = new ArrayList<>();\n\n    if(scatter.contains(Scatter.BRANCHES)) {\n      if(graph.size() > 1) {\n        for(int i=0; i<graph.size()-1; i++) {\n          Map<String, Node> graphLevel = graph.get(i);\n          String collection = collections.get(i);\n          String field = fields.get(i);\n          outCollections.add(collection);\n          outFields.add(field);\n          levelNums.add(i);\n          levelIterators.add(graphLevel.values().iterator());\n        }\n      }\n    }\n\n    if(scatter.contains(Scatter.LEAVES)) {\n      int leavesLevel = graph.size() > 1 ? graph.size()-1 : 0 ;\n      Map<String, Node> graphLevel = graph.get(leavesLevel);\n      String collection = collections.get(leavesLevel);\n      String field = fields.get(leavesLevel);\n      levelNums.add(leavesLevel);\n      outCollections.add(collection);\n      outFields.add(field);\n      levelIterators.add(graphLevel.values().iterator());\n    }\n\n    graphIterator = levelIterators.iterator();\n    levelIterator = graphIterator.next();\n\n    fieldIterator = outFields.iterator();\n    collectionIterator = outCollections.iterator();\n    levelNumIterator = levelNums.iterator();\n\n    outField = fieldIterator.next();\n    outCollection = collectionIterator.next();\n    outLevel = levelNumIterator.next();\n  }\n\n","sourceOld":"  public TraversalIterator(Traversal traversal, Set<Scatter> scatter) {\n    this.traversal = traversal;\n    graph = traversal.getGraph();\n    collections = traversal.getCollections();\n    fields = traversal.getFields();\n\n    List<String> outCollections = new ArrayList();\n    List<String> outFields = new ArrayList();\n    List<Integer> levelNums = new ArrayList();\n    List<Iterator<Node>> levelIterators = new ArrayList();\n\n    if(scatter.contains(Scatter.BRANCHES)) {\n      if(graph.size() > 1) {\n        for(int i=0; i<graph.size()-1; i++) {\n          Map<String, Node> graphLevel = graph.get(i);\n          String collection = collections.get(i);\n          String field = fields.get(i);\n          outCollections.add(collection);\n          outFields.add(field);\n          levelNums.add(i);\n          levelIterators.add(graphLevel.values().iterator());\n        }\n      }\n    }\n\n    if(scatter.contains(Scatter.LEAVES)) {\n      int leavesLevel = graph.size() > 1 ? graph.size()-1 : 0 ;\n      Map<String, Node> graphLevel = graph.get(leavesLevel);\n      String collection = collections.get(leavesLevel);\n      String field = fields.get(leavesLevel);\n      levelNums.add(leavesLevel);\n      outCollections.add(collection);\n      outFields.add(field);\n      levelIterators.add(graphLevel.values().iterator());\n    }\n\n    graphIterator = levelIterators.iterator();\n    levelIterator = graphIterator.next();\n\n    fieldIterator = outFields.iterator();\n    collectionIterator = outCollections.iterator();\n    levelNumIterator = levelNums.iterator();\n\n    outField = fieldIterator.next();\n    outCollection = collectionIterator.next();\n    outLevel = levelNumIterator.next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","afdf6ff5b1319d8ae254212f1203a6233ed3e1dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"]},"commit2Childs":{"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afdf6ff5b1319d8ae254212f1203a6233ed3e1dc","0e15955b4980562a0c1c81d08654904f3fadb83b"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}