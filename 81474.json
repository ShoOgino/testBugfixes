{"path":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase();\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase();\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"/dev/null","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase();\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b375ac28473e1310fa9ea99d95e9c6001e3719d5","date":1274116690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase();\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"c26f00b574427b55127e869b935845554afde1fa":["b375ac28473e1310fa9ea99d95e9c6001e3719d5","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}