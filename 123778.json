{"path":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#isMatchingEtag(List[String],String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#isMatchingEtag(List[String],String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#isMatchingEtag(List[String],String).mjava","sourceNew":"  /**\n   * Checks if one of the tags in the list equals the given etag.\n   * \n   * @param headerList\n   *            the ETag header related header elements\n   * @param etag\n   *            the ETag to compare with\n   * @return true if the etag is found in one of the header elements - false\n   *         otherwise\n   */\n  public static boolean isMatchingEtag(final List<String> headerList,\n      final String etag) {\n    for (String header : headerList) {\n      final String[] headerEtags = header.split(\",\");\n      for (String s : headerEtags) {\n        s = s.trim();\n        if (s.equals(etag) || \"*\".equals(s)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks if one of the tags in the list equals the given etag.\n   * \n   * @param headerList\n   *            the ETag header related header elements\n   * @param etag\n   *            the ETag to compare with\n   * @return true if the etag is found in one of the header elements - false\n   *         otherwise\n   */\n  public static boolean isMatchingEtag(final List<String> headerList,\n      final String etag) {\n    for (String header : headerList) {\n      final String[] headerEtags = header.split(\",\");\n      for (String s : headerEtags) {\n        s = s.trim();\n        if (s.equals(etag) || \"*\".equals(s)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#isMatchingEtag(List[String],String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#isMatchingEtag(List[String],String).mjava","sourceNew":"  /**\n   * Checks if one of the tags in the list equals the given etag.\n   * \n   * @param headerList\n   *            the ETag header related header elements\n   * @param etag\n   *            the ETag to compare with\n   * @return true if the etag is found in one of the header elements - false\n   *         otherwise\n   */\n  public static boolean isMatchingEtag(final List<String> headerList,\n      final String etag) {\n    for (String header : headerList) {\n      final String[] headerEtags = header.split(\",\");\n      for (String s : headerEtags) {\n        s = s.trim();\n        if (s.equals(etag) || \"*\".equals(s)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks if one of the tags in the list equals the given etag.\n   * \n   * @param headerList\n   *            the ETag header related header elements\n   * @param etag\n   *            the ETag to compare with\n   * @return true if the etag is found in one of the header elements - false\n   *         otherwise\n   */\n  public static boolean isMatchingEtag(final List<String> headerList,\n      final String etag) {\n    for (String header : headerList) {\n      final String[] headerEtags = header.split(\",\");\n      for (String s : headerEtags) {\n        s = s.trim();\n        if (s.equals(etag) || \"*\".equals(s)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#isMatchingEtag(List[String],String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#isMatchingEtag(List[String],String).mjava","sourceNew":"  /**\n   * Checks if one of the tags in the list equals the given etag.\n   * \n   * @param headerList\n   *            the ETag header related header elements\n   * @param etag\n   *            the ETag to compare with\n   * @return true if the etag is found in one of the header elements - false\n   *         otherwise\n   */\n  public static boolean isMatchingEtag(final List<String> headerList,\n      final String etag) {\n    for (String header : headerList) {\n      final String[] headerEtags = header.split(\",\");\n      for (String s : headerEtags) {\n        s = s.trim();\n        if (s.equals(etag) || \"*\".equals(s)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks if one of the tags in the list equals the given etag.\n   * \n   * @param headerList\n   *            the ETag header related header elements\n   * @param etag\n   *            the ETag to compare with\n   * @return true if the etag is found in one of the header elements - false\n   *         otherwise\n   */\n  public static boolean isMatchingEtag(final List<String> headerList,\n      final String etag) {\n    for (String header : headerList) {\n      final String[] headerEtags = header.split(\",\");\n      for (String s : headerEtags) {\n        s = s.trim();\n        if (s.equals(etag) || \"*\".equals(s)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}