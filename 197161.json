{"path":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","commits":[{"id":"4f7c8ed26cfbf4007c46fd27a417560e932ab4d8","date":1246360634,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = new Short((short) minId);\n    Short maxIdO = new Short((short) maxId);\n    Short medIdO = new Short((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",new Short(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,new Short(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c","date":1246364870,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = new Short((short) minId);\n    Short maxIdO = new Short((short) maxId);\n    Short medIdO = new Short((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",new Short(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,new Short(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = new Short((short) minId);\n    Short maxIdO = new Short((short) maxId);\n    Short medIdO = new Short((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",new Short(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,new Short(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a0b8ae4ac997de7adea27f34c380588fa28d646","date":1253188966,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = new Short((short) minId);\n    Short maxIdO = new Short((short) maxId);\n    Short medIdO = new Short((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",new Short(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,new Short(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = new Short((short) minId);\n    Short maxIdO = new Short((short) maxId);\n    Short medIdO = new Short((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",new Short(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,new Short(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":["4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = new Short((short) minId);\n    Short maxIdO = new Short((short) maxId);\n    Short medIdO = new Short((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",new Short(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,new Short(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = new Short((short) minId);\n    Short maxIdO = new Short((short) maxId);\n    Short medIdO = new Short((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",new Short(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,new Short(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = new Short((short) minId);\n    Short maxIdO = new Short((short) maxId);\n    Short medIdO = new Short((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",new Short(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,new Short(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter<Short> fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter<Short> fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter<Short> fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4f7c8ed26cfbf4007c46fd27a417560e932ab4d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bcde5e3f23911110baa101ed062b544162825b5":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c":["4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["6bcde5e3f23911110baa101ed062b544162825b5","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"3a0b8ae4ac997de7adea27f34c380588fa28d646":["9b2ba469e48c35b93f118b45188ffaf6e9c31c9c"]},"commit2Childs":{"4f7c8ed26cfbf4007c46fd27a417560e932ab4d8":["9b2ba469e48c35b93f118b45188ffaf6e9c31c9c"],"6bcde5e3f23911110baa101ed062b544162825b5":["0a046c0c310bc77931fc8441bd920053b607dd14"],"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a0b8ae4ac997de7adea27f34c380588fa28d646":["6bcde5e3f23911110baa101ed062b544162825b5","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}