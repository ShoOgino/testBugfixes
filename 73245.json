{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      indexReader = new CompressingStoredFieldsIndexReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","sourceOld":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      indexReader = new CompressingStoredFieldsIndexReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672d7b75cc3198c053fd48a3138a50f4ec7bf4c6","date":1353340695,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext,String,CompressionMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public CompressingStoredFieldsReader( Directory d, SegmentInfo si, FieldInfos fn,\n      IOContext context, String formatName, CompressionMode compressionMode) throws IOException {\n    this.compressionMode = compressionMode;\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.checkHeader(indexStream, codecNameIdx, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, codecNameDat, VERSION_START, VERSION_CURRENT);\n      assert CodecUtil.headerLength(codecNameDat) == fieldsStream.getFilePointer();\n      assert CodecUtil.headerLength(codecNameIdx) == indexStream.getFilePointer();\n\n      indexReader = new CompressingStoredFieldsIndexReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","sourceOld":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      indexReader = new CompressingStoredFieldsIndexReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"672d7b75cc3198c053fd48a3138a50f4ec7bf4c6":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672d7b75cc3198c053fd48a3138a50f4ec7bf4c6"]},"commit2Childs":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["672d7b75cc3198c053fd48a3138a50f4ec7bf4c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"672d7b75cc3198c053fd48a3138a50f4ec7bf4c6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}