{"path":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","commits":[{"id":"0a2a4e39332de25d2866f373dbf3991a7125b31d","date":1246542679,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrParams).mjava","sourceNew":"\tpublic Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n\t\ttry {\n\t\t\t// Prepare attributes for Carrot2 clustering call\n\t\t\tMap<String, Object> attributes = new HashMap<String, Object>();\n\t\t\tList<Document> documents = getDocuments(docList, query, sreq);\n\t\t\tattributes.put(AttributeNames.DOCUMENTS, documents);\n\t\t\tattributes.put(AttributeNames.QUERY, query.toString());\n\t\t\t\n\t\t\t// Pass extra overriding attributes from the request, if any\n\t\t\textractCarrotAttributes(sreq.getParams(), attributes);\n\n\t\t\t// Perform clustering and convert to named list\n\t\t\treturn clustersToNamedList(controller.process(attributes,\n\t\t\t\t\tclusteringAlgorithmClass).getClusters(), sreq.getParams());\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Carrot2 clustering failed\", e);\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n","sourceOld":"\tpublic NamedList cluster(Query query, DocList docList, SolrParams solrParams) {\n\t\ttry {\n\t\t\t// Prepare attributes for Carrot2 clustering call\n\t\t\tMap<String, Object> attributes = new HashMap<String, Object>();\n\t\t\tList<Document> documents = getDocuments(docList, core, query, solrParams);\n\t\t\tattributes.put(AttributeNames.DOCUMENTS, documents);\n\t\t\tattributes.put(AttributeNames.QUERY, query.toString());\n\t\t\t\n\t\t\t// Pass extra overriding attributes from the request, if any\n\t\t\textractCarrotAttributes(solrParams, attributes);\n\n\t\t\t// Perform clustering and convert to named list\n\t\t\treturn clustersToNamedList(controller.process(attributes,\n\t\t\t\t\tclusteringAlgorithmClass).getClusters(), solrParams);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Carrot2 clustering failed\", e);\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8","date":1246543717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"\tpublic Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n\t\ttry {\n\t\t\t// Prepare attributes for Carrot2 clustering call\n\t\t\tMap<String, Object> attributes = new HashMap<String, Object>();\n\t\t\tList<Document> documents = getDocuments(docList, query, sreq);\n\t\t\tattributes.put(AttributeNames.DOCUMENTS, documents);\n\t\t\tattributes.put(AttributeNames.QUERY, query.toString());\n\t\t\t\n\t\t\t// Pass extra overriding attributes from the request, if any\n\t\t\textractCarrotAttributes(sreq.getParams(), attributes);\n\n\t\t\t// Perform clustering and convert to named list\n\t\t\treturn clustersToNamedList(controller.process(attributes,\n\t\t\t\t\tclusteringAlgorithmClass).getClusters(), sreq.getParams());\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Carrot2 clustering failed\", e);\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}