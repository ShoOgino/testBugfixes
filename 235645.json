{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"  @Override\n  public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException {\n    return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.sloppySimScorer(stats, context));\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException {\n    return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.sloppySimScorer(stats, context));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2da200553d43622ccbeef29f3c1b6223fec4d83","date":1331145186,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"  @Override\n  public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException {\n    if (stats == null) {\n      return null;\n    } else {\n      return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.sloppySimScorer(stats, context));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException {\n    return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.sloppySimScorer(stats, context));\n  }\n\n","bugFix":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"bugIntro":["b799defcfda6d303cbb180917bf1e749089adf42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"  @Override\n  public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException {\n    if (stats == null) {\n      return null;\n    } else {\n      return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.sloppySimScorer(stats, context));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException {\n    return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.sloppySimScorer(stats, context));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"  @Override\n  public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException {\n    if (stats == null) {\n      return null;\n    } else {\n      return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.simScorer(stats, context));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException {\n    if (stats == null) {\n      return null;\n    } else {\n      return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.sloppySimScorer(stats, context));\n    }\n  }\n\n","bugFix":["d2da200553d43622ccbeef29f3c1b6223fec4d83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"  @Override\n  public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    if (stats == null) {\n      return null;\n    } else {\n      return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.simScorer(stats, context));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException {\n    if (stats == null) {\n      return null;\n    } else {\n      return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.simScorer(stats, context));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"  @Override\n  public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    if (stats == null) {\n      return null;\n    } else {\n      return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.simScorer(stats, context));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException {\n    if (stats == null) {\n      return null;\n    } else {\n      return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.simScorer(stats, context));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["b799defcfda6d303cbb180917bf1e749089adf42"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d2da200553d43622ccbeef29f3c1b6223fec4d83"],"d2da200553d43622ccbeef29f3c1b6223fec4d83":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b799defcfda6d303cbb180917bf1e749089adf42":["d2da200553d43622ccbeef29f3c1b6223fec4d83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["b799defcfda6d303cbb180917bf1e749089adf42","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","d2da200553d43622ccbeef29f3c1b6223fec4d83"],"d2da200553d43622ccbeef29f3c1b6223fec4d83":["38e3b736c7ca086d61b7dbb841c905ee115490da","b799defcfda6d303cbb180917bf1e749089adf42"],"b799defcfda6d303cbb180917bf1e749089adf42":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}