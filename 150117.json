{"path":"src/java/org/apache/lucene/util/cache/SimpleLRUCache#SimpleLRUCache(int).mjava","commits":[{"id":"1b30678d88259b68d3d1e3faba3ea3bccdf0c751","date":1211563231,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/cache/SimpleLRUCache#SimpleLRUCache(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Creates a last-recently-used cache with the specified size. \r\n   */\r\n  public SimpleLRUCache(int cacheSize) {\r\n    super(null);\r\n    this.cacheSize = cacheSize;\r\n    int capacity = (int) Math.ceil(cacheSize / LOADFACTOR) + 1;\r\n\r\n    super.map = new LinkedHashMap(capacity, LOADFACTOR, true) {\r\n      protected boolean removeEldestEntry(Map.Entry eldest) {\r\n        return size() > SimpleLRUCache.this.cacheSize;\r\n      }\r\n    };\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/cache/SimpleLRUCache#SimpleLRUCache(int).mjava","pathOld":"src/java/org/apache/lucene/util/cache/SimpleLRUCache#SimpleLRUCache(int).mjava","sourceNew":"  /**\n   * Creates a last-recently-used cache with the specified size. \n   */\n  public SimpleLRUCache(int cacheSize) {\n    super(null);\n    this.cacheSize = cacheSize;\n    int capacity = (int) Math.ceil(cacheSize / LOADFACTOR) + 1;\n\n    super.map = new LinkedHashMap(capacity, LOADFACTOR, true) {\n      protected boolean removeEldestEntry(Map.Entry eldest) {\n        return size() > SimpleLRUCache.this.cacheSize;\n      }\n    };\n  }\n\n","sourceOld":"  /**\r\n   * Creates a last-recently-used cache with the specified size. \r\n   */\r\n  public SimpleLRUCache(int cacheSize) {\r\n    super(null);\r\n    this.cacheSize = cacheSize;\r\n    int capacity = (int) Math.ceil(cacheSize / LOADFACTOR) + 1;\r\n\r\n    super.map = new LinkedHashMap(capacity, LOADFACTOR, true) {\r\n      protected boolean removeEldestEntry(Map.Entry eldest) {\r\n        return size() > SimpleLRUCache.this.cacheSize;\r\n      }\r\n    };\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/cache/SimpleLRUCache#SimpleLRUCache(int).mjava","pathOld":"src/java/org/apache/lucene/util/cache/SimpleLRUCache#SimpleLRUCache(int).mjava","sourceNew":"  /**\n   * Creates a last-recently-used cache with the specified size. \n   */\n  public SimpleLRUCache(final int cacheSize) {\n    super(new LinkedHashMap<K,V>((int) Math.ceil(cacheSize / LOADFACTOR) + 1, LOADFACTOR, true) {\n      @Override\n      protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n        return size() > cacheSize;\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Creates a last-recently-used cache with the specified size. \n   */\n  public SimpleLRUCache(int cacheSize) {\n    super(null);\n    this.cacheSize = cacheSize;\n    int capacity = (int) Math.ceil(cacheSize / LOADFACTOR) + 1;\n\n    super.map = new LinkedHashMap(capacity, LOADFACTOR, true) {\n      protected boolean removeEldestEntry(Map.Entry eldest) {\n        return size() > SimpleLRUCache.this.cacheSize;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/cache/SimpleLRUCache#SimpleLRUCache(int).mjava","pathOld":"src/java/org/apache/lucene/util/cache/SimpleLRUCache#SimpleLRUCache(int).mjava","sourceNew":"  /**\n   * Creates a last-recently-used cache with the specified size. \n   */\n  public SimpleLRUCache(final int cacheSize) {\n    super(new LinkedHashMap<K,V>((int) Math.ceil(cacheSize / LOADFACTOR) + 1, LOADFACTOR, true) {\n      @Override\n      protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n        return size() > cacheSize;\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Creates a last-recently-used cache with the specified size. \n   */\n  public SimpleLRUCache(final int cacheSize) {\n    super(new LinkedHashMap<K,V>((int) Math.ceil(cacheSize / LOADFACTOR) + 1, LOADFACTOR, true) {\n      @Override\n      protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n        return size() > cacheSize;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}