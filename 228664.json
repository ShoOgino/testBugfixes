{"path":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","commits":[{"id":"073a74201a21520f4fc543c9f6d1d87c19a467b2","date":1472788663,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Delete replicas based on count for a given collection. If a shard is passed, uses that\n   * else deletes given num replicas across all shards for the given collection.\n   */\n  void deleteReplicaBasedOnCount(ClusterState clusterState,\n                                 ZkNodeProps message,\n                                 NamedList results,\n                                 Runnable onComplete,\n                                 boolean parallel)\n          throws KeeperException, InterruptedException {\n    ocmh.checkRequired(message, COLLECTION_PROP, COUNT_PROP);\n    int count = Integer.parseInt(message.getStr(COUNT_PROP));\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = null;\n    //Validate if shard is passed.\n    if (shard != null) {\n      slice = coll.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Invalid shard name : \" +  shard +  \" in collection : \" + collectionName);\n      }\n    }\n\n    Map<Slice, Set<String>> shardToReplicasMapping = new HashMap<Slice, Set<String>>();\n    if (slice != null) {\n      Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(slice, shard, collectionName, count);\n      shardToReplicasMapping.put(slice,replicasToBeDeleted);\n    } else {\n\n      //If there are many replicas left, remove the rest based on count.\n      Collection<Slice> allSlices = coll.getSlices();\n      for (Slice individualSlice : allSlices) {\n        Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(individualSlice, individualSlice.getName(), collectionName, count);\n        shardToReplicasMapping.put(individualSlice, replicasToBeDeleted);\n      }\n    }\n\n    for (Slice shardSlice: shardToReplicasMapping.keySet()) {\n      String shardId = shardSlice.getName();\n      Set<String> replicas = shardToReplicasMapping.get(shardSlice);\n      //callDeleteReplica on all replicas\n      for (String replica: replicas) {\n        log.info(\"Deleting replica {}  for shard {} based on count {}\", replica, shardId, count);\n        deleteCore(shardSlice, collectionName, replica, message, shard, results, onComplete, parallel);\n      }\n      results.add(\"shard_id\", shardId);\n      results.add(\"replicas_deleted\", replicas);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Delete replicas based on count for a given collection. If a shard is passed, uses that\n   * else deletes given num replicas across all shards for the given collection.\n   */\n  void deleteReplicaBasedOnCount(ClusterState clusterState,\n                                 ZkNodeProps message,\n                                 NamedList results,\n                                 Runnable onComplete,\n                                 boolean parallel)\n          throws KeeperException, InterruptedException {\n    ocmh.checkRequired(message, COLLECTION_PROP, COUNT_PROP);\n    int count = Integer.parseInt(message.getStr(COUNT_PROP));\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = null;\n    //Validate if shard is passed.\n    if (shard != null) {\n      slice = coll.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Invalid shard name : \" +  shard +  \" in collection : \" + collectionName);\n      }\n    }\n\n    Map<Slice, Set<String>> shardToReplicasMapping = new HashMap<Slice, Set<String>>();\n    if (slice != null) {\n      Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(slice, shard, collectionName, count);\n      shardToReplicasMapping.put(slice,replicasToBeDeleted);\n    } else {\n\n      //If there are many replicas left, remove the rest based on count.\n      Collection<Slice> allSlices = coll.getSlices();\n      for (Slice individualSlice : allSlices) {\n        Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(individualSlice, individualSlice.getName(), collectionName, count);\n        shardToReplicasMapping.put(individualSlice, replicasToBeDeleted);\n      }\n    }\n\n    for (Slice shardSlice: shardToReplicasMapping.keySet()) {\n      String shardId = shardSlice.getName();\n      Set<String> replicas = shardToReplicasMapping.get(shardSlice);\n      //callDeleteReplica on all replicas\n      for (String replica: replicas) {\n        log.info(\"Deleting replica {}  for shard {} based on count {}\", replica, shardId, count);\n        deleteCore(shardSlice, collectionName, replica, message, shard, results, onComplete, parallel);\n      }\n      results.add(\"shard_id\", shardId);\n      results.add(\"replicas_deleted\", replicas);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","sourceNew":"  /**\n   * Delete replicas based on count for a given collection. If a shard is passed, uses that\n   * else deletes given num replicas across all shards for the given collection.\n   */\n  void deleteReplicaBasedOnCount(ClusterState clusterState,\n                                 ZkNodeProps message,\n                                 NamedList results,\n                                 Runnable onComplete,\n                                 boolean parallel)\n          throws KeeperException, InterruptedException {\n    ocmh.checkRequired(message, COLLECTION_PROP, COUNT_PROP);\n    int count = Integer.parseInt(message.getStr(COUNT_PROP));\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = null;\n    //Validate if shard is passed.\n    if (shard != null) {\n      slice = coll.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Invalid shard name : \" +  shard +  \" in collection : \" + collectionName);\n      }\n    }\n\n    Map<Slice, Set<String>> shardToReplicasMapping = new HashMap<Slice, Set<String>>();\n    if (slice != null) {\n      Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(slice, shard, collectionName, count);\n      shardToReplicasMapping.put(slice,replicasToBeDeleted);\n    } else {\n\n      //If there are many replicas left, remove the rest based on count.\n      Collection<Slice> allSlices = coll.getSlices();\n      for (Slice individualSlice : allSlices) {\n        Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(individualSlice, individualSlice.getName(), collectionName, count);\n        shardToReplicasMapping.put(individualSlice, replicasToBeDeleted);\n      }\n    }\n\n    for (Slice shardSlice: shardToReplicasMapping.keySet()) {\n      String shardId = shardSlice.getName();\n      Set<String> replicas = shardToReplicasMapping.get(shardSlice);\n      //callDeleteReplica on all replicas\n      for (String replica: replicas) {\n        log.debug(\"Deleting replica {}  for shard {} based on count {}\", replica, shardId, count);\n        deleteCore(shardSlice, collectionName, replica, message, shard, results, onComplete, parallel);\n      }\n      results.add(\"shard_id\", shardId);\n      results.add(\"replicas_deleted\", replicas);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Delete replicas based on count for a given collection. If a shard is passed, uses that\n   * else deletes given num replicas across all shards for the given collection.\n   */\n  void deleteReplicaBasedOnCount(ClusterState clusterState,\n                                 ZkNodeProps message,\n                                 NamedList results,\n                                 Runnable onComplete,\n                                 boolean parallel)\n          throws KeeperException, InterruptedException {\n    ocmh.checkRequired(message, COLLECTION_PROP, COUNT_PROP);\n    int count = Integer.parseInt(message.getStr(COUNT_PROP));\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = null;\n    //Validate if shard is passed.\n    if (shard != null) {\n      slice = coll.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Invalid shard name : \" +  shard +  \" in collection : \" + collectionName);\n      }\n    }\n\n    Map<Slice, Set<String>> shardToReplicasMapping = new HashMap<Slice, Set<String>>();\n    if (slice != null) {\n      Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(slice, shard, collectionName, count);\n      shardToReplicasMapping.put(slice,replicasToBeDeleted);\n    } else {\n\n      //If there are many replicas left, remove the rest based on count.\n      Collection<Slice> allSlices = coll.getSlices();\n      for (Slice individualSlice : allSlices) {\n        Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(individualSlice, individualSlice.getName(), collectionName, count);\n        shardToReplicasMapping.put(individualSlice, replicasToBeDeleted);\n      }\n    }\n\n    for (Slice shardSlice: shardToReplicasMapping.keySet()) {\n      String shardId = shardSlice.getName();\n      Set<String> replicas = shardToReplicasMapping.get(shardSlice);\n      //callDeleteReplica on all replicas\n      for (String replica: replicas) {\n        log.info(\"Deleting replica {}  for shard {} based on count {}\", replica, shardId, count);\n        deleteCore(shardSlice, collectionName, replica, message, shard, results, onComplete, parallel);\n      }\n      results.add(\"shard_id\", shardId);\n      results.add(\"replicas_deleted\", replicas);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Delete replicas based on count for a given collection. If a shard is passed, uses that\n   * else deletes given num replicas across all shards for the given collection.\n   */\n  void deleteReplicaBasedOnCount(ClusterState clusterState,\n                                 ZkNodeProps message,\n                                 NamedList results,\n                                 Runnable onComplete,\n                                 boolean parallel)\n          throws KeeperException, InterruptedException {\n    ocmh.checkRequired(message, COLLECTION_PROP, COUNT_PROP);\n    int count = Integer.parseInt(message.getStr(COUNT_PROP));\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = null;\n    //Validate if shard is passed.\n    if (shard != null) {\n      slice = coll.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Invalid shard name : \" +  shard +  \" in collection : \" + collectionName);\n      }\n    }\n\n    Map<Slice, Set<String>> shardToReplicasMapping = new HashMap<Slice, Set<String>>();\n    if (slice != null) {\n      Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(slice, shard, collectionName, count);\n      shardToReplicasMapping.put(slice,replicasToBeDeleted);\n    } else {\n\n      //If there are many replicas left, remove the rest based on count.\n      Collection<Slice> allSlices = coll.getSlices();\n      for (Slice individualSlice : allSlices) {\n        Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(individualSlice, individualSlice.getName(), collectionName, count);\n        shardToReplicasMapping.put(individualSlice, replicasToBeDeleted);\n      }\n    }\n\n    for (Slice shardSlice: shardToReplicasMapping.keySet()) {\n      String shardId = shardSlice.getName();\n      Set<String> replicas = shardToReplicasMapping.get(shardSlice);\n      //callDeleteReplica on all replicas\n      for (String replica: replicas) {\n        log.debug(\"Deleting replica {}  for shard {} based on count {}\", replica, shardId, count);\n        deleteCore(shardSlice, collectionName, replica, message, shard, results, onComplete, parallel);\n      }\n      results.add(\"shard_id\", shardId);\n      results.add(\"replicas_deleted\", replicas);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Delete replicas based on count for a given collection. If a shard is passed, uses that\n   * else deletes given num replicas across all shards for the given collection.\n   */\n  void deleteReplicaBasedOnCount(ClusterState clusterState,\n                                 ZkNodeProps message,\n                                 NamedList results,\n                                 Runnable onComplete,\n                                 boolean parallel)\n          throws KeeperException, InterruptedException {\n    ocmh.checkRequired(message, COLLECTION_PROP, COUNT_PROP);\n    int count = Integer.parseInt(message.getStr(COUNT_PROP));\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = null;\n    //Validate if shard is passed.\n    if (shard != null) {\n      slice = coll.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Invalid shard name : \" +  shard +  \" in collection : \" + collectionName);\n      }\n    }\n\n    Map<Slice, Set<String>> shardToReplicasMapping = new HashMap<Slice, Set<String>>();\n    if (slice != null) {\n      Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(slice, shard, collectionName, count);\n      shardToReplicasMapping.put(slice,replicasToBeDeleted);\n    } else {\n\n      //If there are many replicas left, remove the rest based on count.\n      Collection<Slice> allSlices = coll.getSlices();\n      for (Slice individualSlice : allSlices) {\n        Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(individualSlice, individualSlice.getName(), collectionName, count);\n        shardToReplicasMapping.put(individualSlice, replicasToBeDeleted);\n      }\n    }\n\n    for (Slice shardSlice: shardToReplicasMapping.keySet()) {\n      String shardId = shardSlice.getName();\n      Set<String> replicas = shardToReplicasMapping.get(shardSlice);\n      //callDeleteReplica on all replicas\n      for (String replica: replicas) {\n        log.debug(\"Deleting replica {}  for shard {} based on count {}\", replica, shardId, count);\n        deleteCore(shardSlice, collectionName, replica, message, shard, results, onComplete, parallel);\n      }\n      results.add(\"shard_id\", shardId);\n      results.add(\"replicas_deleted\", replicas);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","sourceNew":"  /**\n   * Delete replicas based on count for a given collection. If a shard is passed, uses that\n   * else deletes given num replicas across all shards for the given collection.\n   */\n  void deleteReplicaBasedOnCount(ClusterState clusterState,\n                                 ZkNodeProps message,\n                                 NamedList results,\n                                 Runnable onComplete,\n                                 boolean parallel)\n          throws KeeperException, InterruptedException {\n    ocmh.checkRequired(message, COLLECTION_PROP, COUNT_PROP);\n    int count = Integer.parseInt(message.getStr(COUNT_PROP));\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = null;\n    //Validate if shard is passed.\n    if (shard != null) {\n      slice = coll.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Invalid shard name : \" +  shard +  \" in collection : \" + collectionName);\n      }\n    }\n\n    Map<Slice, Set<String>> shardToReplicasMapping = new HashMap<Slice, Set<String>>();\n    if (slice != null) {\n      Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(slice, shard, collectionName, count);\n      shardToReplicasMapping.put(slice,replicasToBeDeleted);\n    } else {\n\n      //If there are many replicas left, remove the rest based on count.\n      Collection<Slice> allSlices = coll.getSlices();\n      for (Slice individualSlice : allSlices) {\n        Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(individualSlice, individualSlice.getName(), collectionName, count);\n        shardToReplicasMapping.put(individualSlice, replicasToBeDeleted);\n      }\n    }\n\n    for (Slice shardSlice: shardToReplicasMapping.keySet()) {\n      String shardId = shardSlice.getName();\n      Set<String> replicas = shardToReplicasMapping.get(shardSlice);\n      //callDeleteReplica on all replicas\n      for (String replica: replicas) {\n        log.debug(\"Deleting replica {}  for shard {} based on count {}\", replica, shardId, count);\n        deleteCore(shardSlice, collectionName, replica, message, shard, results, onComplete, parallel);\n      }\n      results.add(\"shard_id\", shardId);\n      results.add(\"replicas_deleted\", replicas);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Delete replicas based on count for a given collection. If a shard is passed, uses that\n   * else deletes given num replicas across all shards for the given collection.\n   */\n  void deleteReplicaBasedOnCount(ClusterState clusterState,\n                                 ZkNodeProps message,\n                                 NamedList results,\n                                 Runnable onComplete,\n                                 boolean parallel)\n          throws KeeperException, InterruptedException {\n    ocmh.checkRequired(message, COLLECTION_PROP, COUNT_PROP);\n    int count = Integer.parseInt(message.getStr(COUNT_PROP));\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = null;\n    //Validate if shard is passed.\n    if (shard != null) {\n      slice = coll.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Invalid shard name : \" +  shard +  \" in collection : \" + collectionName);\n      }\n    }\n\n    Map<Slice, Set<String>> shardToReplicasMapping = new HashMap<Slice, Set<String>>();\n    if (slice != null) {\n      Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(slice, shard, collectionName, count);\n      shardToReplicasMapping.put(slice,replicasToBeDeleted);\n    } else {\n\n      //If there are many replicas left, remove the rest based on count.\n      Collection<Slice> allSlices = coll.getSlices();\n      for (Slice individualSlice : allSlices) {\n        Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(individualSlice, individualSlice.getName(), collectionName, count);\n        shardToReplicasMapping.put(individualSlice, replicasToBeDeleted);\n      }\n    }\n\n    for (Slice shardSlice: shardToReplicasMapping.keySet()) {\n      String shardId = shardSlice.getName();\n      Set<String> replicas = shardToReplicasMapping.get(shardSlice);\n      //callDeleteReplica on all replicas\n      for (String replica: replicas) {\n        log.debug(\"Deleting replica {}  for shard {} based on count {}\", replica, shardId, count);\n        deleteCore(shardSlice, collectionName, replica, message, shard, results, onComplete, parallel);\n      }\n      results.add(\"shard_id\", shardId);\n      results.add(\"replicas_deleted\", replicas);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplicaBasedOnCount(ClusterState,ZkNodeProps,NamedList,Runnable,boolean).mjava","sourceNew":"  /**\n   * Delete replicas based on count for a given collection. If a shard is passed, uses that\n   * else deletes given num replicas across all shards for the given collection.\n   */\n  void deleteReplicaBasedOnCount(ClusterState clusterState,\n                                 ZkNodeProps message,\n                                 NamedList results,\n                                 Runnable onComplete,\n                                 boolean parallel)\n          throws KeeperException, InterruptedException {\n    ocmh.checkRequired(message, COLLECTION_PROP, COUNT_PROP);\n    int count = Integer.parseInt(message.getStr(COUNT_PROP));\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = null;\n    //Validate if shard is passed.\n    if (shard != null) {\n      slice = coll.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Invalid shard name : \" +  shard +  \" in collection : \" + collectionName);\n      }\n    }\n\n    Map<Slice, Set<String>> shardToReplicasMapping = new HashMap<Slice, Set<String>>();\n    if (slice != null) {\n      Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(slice, shard, collectionName, count);\n      shardToReplicasMapping.put(slice,replicasToBeDeleted);\n    } else {\n\n      //If there are many replicas left, remove the rest based on count.\n      Collection<Slice> allSlices = coll.getSlices();\n      for (Slice individualSlice : allSlices) {\n        Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(individualSlice, individualSlice.getName(), collectionName, count);\n        shardToReplicasMapping.put(individualSlice, replicasToBeDeleted);\n      }\n    }\n\n    for (Slice shardSlice: shardToReplicasMapping.keySet()) {\n      String shardId = shardSlice.getName();\n      Set<String> replicas = shardToReplicasMapping.get(shardSlice);\n      //callDeleteReplica on all replicas\n      for (String replica: replicas) {\n        log.debug(\"Deleting replica {}  for shard {} based on count {}\", replica, shardId, count);\n        deleteCore(shardSlice, collectionName, replica, message, shard, results, onComplete, parallel);\n      }\n      results.add(\"shard_id\", shardId);\n      results.add(\"replicas_deleted\", replicas);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Delete replicas based on count for a given collection. If a shard is passed, uses that\n   * else deletes given num replicas across all shards for the given collection.\n   */\n  void deleteReplicaBasedOnCount(ClusterState clusterState,\n                                 ZkNodeProps message,\n                                 NamedList results,\n                                 Runnable onComplete,\n                                 boolean parallel)\n          throws KeeperException, InterruptedException {\n    ocmh.checkRequired(message, COLLECTION_PROP, COUNT_PROP);\n    int count = Integer.parseInt(message.getStr(COUNT_PROP));\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = null;\n    //Validate if shard is passed.\n    if (shard != null) {\n      slice = coll.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Invalid shard name : \" +  shard +  \" in collection : \" + collectionName);\n      }\n    }\n\n    Map<Slice, Set<String>> shardToReplicasMapping = new HashMap<Slice, Set<String>>();\n    if (slice != null) {\n      Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(slice, shard, collectionName, count);\n      shardToReplicasMapping.put(slice,replicasToBeDeleted);\n    } else {\n\n      //If there are many replicas left, remove the rest based on count.\n      Collection<Slice> allSlices = coll.getSlices();\n      for (Slice individualSlice : allSlices) {\n        Set<String> replicasToBeDeleted = pickReplicasTobeDeleted(individualSlice, individualSlice.getName(), collectionName, count);\n        shardToReplicasMapping.put(individualSlice, replicasToBeDeleted);\n      }\n    }\n\n    for (Slice shardSlice: shardToReplicasMapping.keySet()) {\n      String shardId = shardSlice.getName();\n      Set<String> replicas = shardToReplicasMapping.get(shardSlice);\n      //callDeleteReplica on all replicas\n      for (String replica: replicas) {\n        log.debug(\"Deleting replica {}  for shard {} based on count {}\", replica, shardId, count);\n        deleteCore(shardSlice, collectionName, replica, message, shard, results, onComplete, parallel);\n      }\n      results.add(\"shard_id\", shardId);\n      results.add(\"replicas_deleted\", replicas);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5d615d62cd8aff3690943d765e46942551f98b6":["073a74201a21520f4fc543c9f6d1d87c19a467b2"],"073a74201a21520f4fc543c9f6d1d87c19a467b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5d615d62cd8aff3690943d765e46942551f98b6"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","073a74201a21520f4fc543c9f6d1d87c19a467b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"073a74201a21520f4fc543c9f6d1d87c19a467b2":["a5d615d62cd8aff3690943d765e46942551f98b6","bc8f206328a706450934717bec7ccc22ad166fc0"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073a74201a21520f4fc543c9f6d1d87c19a467b2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}