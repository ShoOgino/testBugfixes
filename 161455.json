{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/values/Lucene41SortedDocValues#lookupOrd(int,BytesRef).mjava","commits":[{"id":"ede45a461a2dcb573505ed9b6a5182dfebd3688f","date":1353338494,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/values/Lucene41SortedDocValues#lookupOrd(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void lookupOrd(int ord, BytesRef result) {\n    try {\n      final long offset;\n      final int length;\n      if (ordToOffsetIndex != null) {\n        offset = ordToOffsetIndex.get(ord);\n        // 1+ord is safe because we write a sentinel at the end\n        final long nextOffset = ordToOffsetIndex.get(1 + ord);\n        length = (int) (nextOffset - offset);\n      } else {\n        length = size;\n        offset = size * ord;\n      }\n      data.seek(baseOffset + offset);\n      result.offset = 0;\n      result.grow(length);\n      data.readBytes(result.bytes, 0, length);\n      result.length = length;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"failed\", ex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"340d84be22eb83faa30ac0cbbaa6db6ae6500709","date":1353346410,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/values/Lucene41SortedDocValues#lookupOrd(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/values/Lucene41SortedDocValues#lookupOrd(int,BytesRef).mjava","sourceNew":"  @Override\n  public void lookupOrd(int ord, BytesRef result) {\n    try {\n      assert ord < valueCount;\n      final long offset;\n      final int length;\n      if (ordToOffsetIndex != null) {\n        offset = ordToOffsetIndex.get(ord);\n        \n        // 1+ord is safe because we write a sentinel at the end\n        final long nextOffset = ordToOffsetIndex.get(1 + ord);\n        assert offset <= nextOffset : \"offset: \" + offset + \" nextOffset: \" + nextOffset + \" ord: \" + ord + \" numValues: \" + valueCount;\n        length = (int) (nextOffset - offset);\n      } else {\n        length = size;\n        offset = size * ord;\n      }\n      data.seek(baseOffset + offset);\n      result.offset = 0;\n      result.grow(length);\n      data.readBytes(result.bytes, 0, length);\n      result.length = length;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"failed\", ex);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void lookupOrd(int ord, BytesRef result) {\n    try {\n      final long offset;\n      final int length;\n      if (ordToOffsetIndex != null) {\n        offset = ordToOffsetIndex.get(ord);\n        // 1+ord is safe because we write a sentinel at the end\n        final long nextOffset = ordToOffsetIndex.get(1 + ord);\n        length = (int) (nextOffset - offset);\n      } else {\n        length = size;\n        offset = size * ord;\n      }\n      data.seek(baseOffset + offset);\n      result.offset = 0;\n      result.grow(length);\n      data.readBytes(result.bytes, 0, length);\n      result.length = length;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"failed\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed9002c5afac843c7f2d04d88e74b40d627e1af","date":1357602069,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/values/Lucene41SortedDocValues#lookupOrd(int,BytesRef).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void lookupOrd(int ord, BytesRef result) {\n    try {\n      assert ord < valueCount;\n      final long offset;\n      final int length;\n      if (ordToOffsetIndex != null) {\n        offset = ordToOffsetIndex.get(ord);\n        \n        // 1+ord is safe because we write a sentinel at the end\n        final long nextOffset = ordToOffsetIndex.get(1 + ord);\n        assert offset <= nextOffset : \"offset: \" + offset + \" nextOffset: \" + nextOffset + \" ord: \" + ord + \" numValues: \" + valueCount;\n        length = (int) (nextOffset - offset);\n      } else {\n        length = size;\n        offset = size * ord;\n      }\n      data.seek(baseOffset + offset);\n      result.offset = 0;\n      result.grow(length);\n      data.readBytes(result.bytes, 0, length);\n      result.length = length;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"failed\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"340d84be22eb83faa30ac0cbbaa6db6ae6500709":["ede45a461a2dcb573505ed9b6a5182dfebd3688f"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":["340d84be22eb83faa30ac0cbbaa6db6ae6500709"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["340d84be22eb83faa30ac0cbbaa6db6ae6500709"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ede45a461a2dcb573505ed9b6a5182dfebd3688f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"340d84be22eb83faa30ac0cbbaa6db6ae6500709":["1ed9002c5afac843c7f2d04d88e74b40d627e1af"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1ed9002c5afac843c7f2d04d88e74b40d627e1af","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}