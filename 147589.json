{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","commits":[{"id":"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","date":1377955248,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n\n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n\n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new CorePropertiesLocator(solrHomeDirectory.getAbsolutePath());\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new CorePropertiesLocator(solrHomeDirectory.getAbsolutePath());\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n\n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n\n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new CorePropertiesLocator(solrHomeDirectory.getAbsolutePath());\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new CorePropertiesLocator(solrHomeDirectory.getAbsolutePath());\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n\n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n\n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new CorePropertiesLocator(solrHomeDirectory.getAbsolutePath());\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new CorePropertiesLocator(solrHomeDirectory.getAbsolutePath());\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new CorePropertiesLocator(solrHomeDirectory.getAbsolutePath());\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config);\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new CorePropertiesLocator(solrHomeDirectory.getAbsolutePath());\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    NodeConfig config = SolrXmlConfig.fromFile(loader, solrXml);\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    NodeConfig config = SolrXmlConfig.fromFile(loader, solrXml);\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    ConfigSolrXml config = (ConfigSolrXml) ConfigSolr.fromFile(loader, solrXml);\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfff642564a0bd7d0848b5e8146a64f7623f6612","date":1447091419,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    NodeConfig config = SolrXmlConfig.fromFile(loader, solrXml);\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(Paths.get(config.getCoreRootDirectory())));\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    NodeConfig config = SolrXmlConfig.fromFile(loader, solrXml);\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dc6df6d3cec2cda16c96f408123470a6c069a29","date":1447321406,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    NodeConfig config = SolrXmlConfig.fromFile(loader, solrXml);\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    NodeConfig config = SolrXmlConfig.fromFile(loader, solrXml);\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(Paths.get(config.getCoreRootDirectory())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = SolrXmlConfig.fromString(loader, \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    // Write the solr.xml file. Cute how minimal it can be now....\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, \"<solr/>\", Charsets.UTF_8.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    NodeConfig config = SolrXmlConfig.fromFile(loader, solrXml);\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        StandardCharsets.UTF_8);\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        StandardCharsets.UTF_8);\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        StandardCharsets.UTF_8);\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = SolrXmlConfig.fromString(loader, \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = SolrXmlConfig.fromString(loader, \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        StandardCharsets.UTF_8);\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        StandardCharsets.UTF_8);\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        StandardCharsets.UTF_8);\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = SolrXmlConfig.fromString(loader, \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        Charsets.UTF_8.toString());\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        Charsets.UTF_8.toString());\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        Charsets.UTF_8.toString());\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = SolrXmlConfig.fromString(loader, \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad026d488f8fbf9ab33e5232d3343395c19b6cc8","date":1507308872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n\n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n\n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        StandardCharsets.UTF_8);\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        StandardCharsets.UTF_8);\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        StandardCharsets.UTF_8);\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = SolrXmlConfig.fromString(loader, \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        StandardCharsets.UTF_8);\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        StandardCharsets.UTF_8);\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        StandardCharsets.UTF_8);\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = SolrXmlConfig.fromString(loader, \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48e6317c36b128552eaed2363bb069267defb0e0","date":1507335877,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        StandardCharsets.UTF_8);\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        StandardCharsets.UTF_8);\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        StandardCharsets.UTF_8);\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = SolrXmlConfig.fromString(loader, \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n\n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n\n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        StandardCharsets.UTF_8);\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        StandardCharsets.UTF_8);\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        StandardCharsets.UTF_8);\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = SolrXmlConfig.fromString(loader, \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#initGoodAndBad(List[String],List[String],List[String]).mjava","sourceNew":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        StandardCharsets.UTF_8);\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        StandardCharsets.UTF_8);\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        StandardCharsets.UTF_8);\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    NodeConfig config = SolrXmlConfig.fromString(solrHomeDirectory.toPath(), \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","sourceOld":"  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.\n  private CoreContainer initGoodAndBad(List<String> goodCores,\n                                       List<String> badSchemaCores,\n                                       List<String> badConfigCores) throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    // Don't pollute the log with exception traces when they're expected.\n    ignoreException(Pattern.quote(\"SAXParseException\"));\n    \n    // Create the cores that should be fine.\n    for (String coreName : goodCores) {\n      File coreRoot = new File(solrHomeDirectory, coreName);\n      copyMinConf(coreRoot, \"name=\" + coreName);\n\n    }\n\n    // Collect the files that we'll write to the config directories.\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    String min_schema = FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"),\n        StandardCharsets.UTF_8);\n    String min_config = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"),\n        StandardCharsets.UTF_8);\n    String rand_snip = FileUtils.readFileToString(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"),\n        StandardCharsets.UTF_8);\n\n    // Now purposely mess up the config files, introducing stupid syntax errors.\n    String bad_config = min_config.replace(\"<requestHandler\", \"<reqsthalr\");\n    String bad_schema = min_schema.replace(\"<field\", \"<filed\");\n\n    // Create the cores with bad configs\n    for (String coreName : badConfigCores) {\n      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);\n    }\n\n    // Create the cores with bad schemas.\n    for (String coreName : badSchemaCores) {\n      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = SolrXmlConfig.fromString(loader, \"<solr/>\");\n\n    // OK this should succeed, but at the end we should have recorded a series of errors.\n    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["f4abec28b874149a7223e32cc7a01704c27790de"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"320888923ec13b91f53082558f01f4c9960dd226":["a626ec4d1c92e59fe390724d6220081047b03ce7","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"e15199583d3635cb940942caed05132dd6c4c7c6":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"bfff642564a0bd7d0848b5e8146a64f7623f6612":["e15199583d3635cb940942caed05132dd6c4c7c6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","e15199583d3635cb940942caed05132dd6c4c7c6"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["48e6317c36b128552eaed2363bb069267defb0e0"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["9dc6df6d3cec2cda16c96f408123470a6c069a29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dc6df6d3cec2cda16c96f408123470a6c069a29":["bfff642564a0bd7d0848b5e8146a64f7623f6612"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"48e6317c36b128552eaed2363bb069267defb0e0":["ad026d488f8fbf9ab33e5232d3343395c19b6cc8"]},"commit2Childs":{"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["ad026d488f8fbf9ab33e5232d3343395c19b6cc8","320888923ec13b91f53082558f01f4c9960dd226"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["48e6317c36b128552eaed2363bb069267defb0e0"],"f4abec28b874149a7223e32cc7a01704c27790de":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"320888923ec13b91f53082558f01f4c9960dd226":[],"e15199583d3635cb940942caed05132dd6c4c7c6":["bfff642564a0bd7d0848b5e8146a64f7623f6612","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"bfff642564a0bd7d0848b5e8146a64f7623f6612":["9dc6df6d3cec2cda16c96f408123470a6c069a29"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","320888923ec13b91f53082558f01f4c9960dd226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"9dc6df6d3cec2cda16c96f408123470a6c069a29":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"48e6317c36b128552eaed2363bb069267defb0e0":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}