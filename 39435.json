{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentReader).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentInfoPerCommit si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.maxDoc() - si.getDelCount());\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":["f412711b73fe38b28bb793928ad02da8c829cff5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.maxDoc() - si.getDelCount());\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.maxDoc() - si.getDelCount());\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f412711b73fe38b28bb793928ad02da8c829cff5","date":1465765014,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.hasDeletions() ? si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE) : null,\n         si.info.maxDoc() - si.getDelCount(), false);\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.maxDoc() - si.getDelCount());\n  }\n\n","bugFix":["b0267c69e2456a3477a1ad785723f2135da3117e","82ffd58510acfc0e2e788a90a10002e689ec9145"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.hasDeletions() ? si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE) : null,\n         si.info.maxDoc() - si.getDelCount(), false);\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.maxDoc() - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"578a4d73d90ecd838846cc32bf1098aaa262b524","date":1532504076,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader).mjava","sourceNew":null,"sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr) throws IOException {\n    this(si, sr,\n         si.hasDeletions() ? si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE) : null,\n         si.info.maxDoc() - si.getDelCount(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","b0267c69e2456a3477a1ad785723f2135da3117e"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b06445ae1731e049327712db0454e5643ca9b7fe":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","b0267c69e2456a3477a1ad785723f2135da3117e"],"b0267c69e2456a3477a1ad785723f2135da3117e":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f412711b73fe38b28bb793928ad02da8c829cff5":["b0267c69e2456a3477a1ad785723f2135da3117e"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["f412711b73fe38b28bb793928ad02da8c829cff5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0267c69e2456a3477a1ad785723f2135da3117e","f412711b73fe38b28bb793928ad02da8c829cff5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["578a4d73d90ecd838846cc32bf1098aaa262b524"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","f412711b73fe38b28bb793928ad02da8c829cff5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"f412711b73fe38b28bb793928ad02da8c829cff5":["578a4d73d90ecd838846cc32bf1098aaa262b524","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}