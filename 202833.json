{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testComplexPhrases().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testComplexPhrases().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testComplexPhrases().mjava","sourceNew":"  public void testComplexPhrases() throws Exception {\n    checkMatches(\"\\\"john smith\\\"\", \"1\"); // Simple multi-term still works\n    checkMatches(\"\\\"j*   smyth~\\\"\", \"1,2\"); // wildcards and fuzzies are OK in\n    // phrases\n    checkMatches(\"\\\"(jo* -john)  smith\\\"\", \"2\"); // boolean logic works\n    checkMatches(\"\\\"jo*  smith\\\"~2\", \"1,2,3\"); // position logic works.\n    checkMatches(\"\\\"jo* [sma TO smZ]\\\" \", \"1,2\"); // range queries supported\n    checkMatches(\"\\\"john\\\"\", \"1,3\"); // Simple single-term still works\n    checkMatches(\"\\\"(john OR johathon)  smith\\\"\", \"1,2\"); // boolean logic with\n    // brackets works.\n    checkMatches(\"\\\"(jo* -john) smyth~\\\"\", \"2\"); // boolean logic with\n    // brackets works.\n\n    // checkMatches(\"\\\"john -percival\\\"\", \"1\"); // not logic doesn't work\n    // currently :(.\n\n    checkMatches(\"\\\"john  nosuchword*\\\"\", \"\"); // phrases with clauses producing\n    // empty sets\n\n    checkBadQuery(\"\\\"jo*  id:1 smith\\\"\"); // mixing fields in a phrase is bad\n    checkBadQuery(\"\\\"jo* \\\"smith\\\" \\\"\"); // phrases inside phrases is bad\n  }\n\n","sourceOld":"  public void testComplexPhrases() throws Exception {\n    checkMatches(\"\\\"john smith\\\"\", \"1\"); // Simple multi-term still works\n    checkMatches(\"\\\"j*   smyth~\\\"\", \"1,2\"); // wildcards and fuzzies are OK in\n    // phrases\n    checkMatches(\"\\\"(jo* -john)  smith\\\"\", \"2\"); // boolean logic works\n    checkMatches(\"\\\"jo*  smith\\\"~2\", \"1,2,3\"); // position logic works.\n    checkMatches(\"\\\"jo* [sma TO smZ]\\\" \", \"1,2\"); // range queries supported\n    checkMatches(\"\\\"john\\\"\", \"1,3\"); // Simple single-term still works\n    checkMatches(\"\\\"(john OR johathon)  smith\\\"\", \"1,2\"); // boolean logic with\n    // brackets works.\n    checkMatches(\"\\\"(jo* -john) smyth~\\\"\", \"2\"); // boolean logic with\n    // brackets works.\n\n    // checkMatches(\"\\\"john -percival\\\"\", \"1\"); // not logic doesn't work\n    // currently :(.\n\n    checkMatches(\"\\\"john  nosuchword*\\\"\", \"\"); // phrases with clauses producing\n    // empty sets\n\n    checkBadQuery(\"\\\"jo*  id:1 smith\\\"\"); // mixing fields in a phrase is bad\n    checkBadQuery(\"\\\"jo* \\\"smith\\\" \\\"\"); // phrases inside phrases is bad\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4636a6c87ecee6029b76024c78a0b49031928d1d","date":1525921420,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testComplexPhrases().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testComplexPhrases().mjava","sourceNew":"  public void testComplexPhrases() throws Exception {\n    checkMatches(\"\\\"john smith\\\"\", \"1\"); // Simple multi-term still works\n    checkMatches(\"\\\"j*   smyth~\\\"\", \"1,2\"); // wildcards and fuzzies are OK in\n    // phrases\n    checkMatches(\"\\\"(jo* -john)  smith\\\"\", \"2\"); // boolean logic works\n    checkMatches(\"\\\"jo*  smith\\\"~2\", \"1,2,3\"); // position logic works.\n    checkMatches(\"\\\"jo* [sma TO smZ]\\\" \", \"1,2\"); // range queries supported\n    checkMatches(\"\\\"john\\\"\", \"1,3\"); // Simple single-term still works\n    checkMatches(\"\\\"(john OR johathon)  smith\\\"\", \"1,2\"); // boolean logic with\n    // brackets works.\n    checkMatches(\"\\\"(john OR nosuchword*)  smith\\\"\", \"1\"); // boolean logic with\n    // brackets works when one of the terms in BooleanQuery does not exist (LUCENE-8305).\n    checkMatches(\"\\\"(jo* -john) smyth~\\\"\", \"2\"); // boolean logic with\n    // brackets works.\n\n    // checkMatches(\"\\\"john -percival\\\"\", \"1\"); // not logic doesn't work\n    // currently :(.\n\n    checkMatches(\"\\\"john  nosuchword*\\\"\", \"\"); // phrases with clauses producing\n    // empty sets\n\n    checkBadQuery(\"\\\"jo*  id:1 smith\\\"\"); // mixing fields in a phrase is bad\n    checkBadQuery(\"\\\"jo* \\\"smith\\\" \\\"\"); // phrases inside phrases is bad\n  }\n\n","sourceOld":"  public void testComplexPhrases() throws Exception {\n    checkMatches(\"\\\"john smith\\\"\", \"1\"); // Simple multi-term still works\n    checkMatches(\"\\\"j*   smyth~\\\"\", \"1,2\"); // wildcards and fuzzies are OK in\n    // phrases\n    checkMatches(\"\\\"(jo* -john)  smith\\\"\", \"2\"); // boolean logic works\n    checkMatches(\"\\\"jo*  smith\\\"~2\", \"1,2,3\"); // position logic works.\n    checkMatches(\"\\\"jo* [sma TO smZ]\\\" \", \"1,2\"); // range queries supported\n    checkMatches(\"\\\"john\\\"\", \"1,3\"); // Simple single-term still works\n    checkMatches(\"\\\"(john OR johathon)  smith\\\"\", \"1,2\"); // boolean logic with\n    // brackets works.\n    checkMatches(\"\\\"(jo* -john) smyth~\\\"\", \"2\"); // boolean logic with\n    // brackets works.\n\n    // checkMatches(\"\\\"john -percival\\\"\", \"1\"); // not logic doesn't work\n    // currently :(.\n\n    checkMatches(\"\\\"john  nosuchword*\\\"\", \"\"); // phrases with clauses producing\n    // empty sets\n\n    checkBadQuery(\"\\\"jo*  id:1 smith\\\"\"); // mixing fields in a phrase is bad\n    checkBadQuery(\"\\\"jo* \\\"smith\\\" \\\"\"); // phrases inside phrases is bad\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4636a6c87ecee6029b76024c78a0b49031928d1d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4636a6c87ecee6029b76024c78a0b49031928d1d"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4636a6c87ecee6029b76024c78a0b49031928d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4636a6c87ecee6029b76024c78a0b49031928d1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}