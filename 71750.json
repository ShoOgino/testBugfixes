{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new LegacyIntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntPoint(\"number\", 17));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.INT_POINT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new LegacyIntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntPoint(\"number\", 17));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlyLeafReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.INT_POINT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntPoint(\"number\", 17));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.INT_POINT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntPoint(\"number\", 17));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlyLeafReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.INT_POINT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntPoint(\"number\", 17));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlyLeafReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.INT_POINT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntPoint(\"number\", 17));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlyLeafReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.INT_POINT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntPoint(\"number\", 17));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlyLeafReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.INT_POINT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntPoint(\"number\", 17));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlyLeafReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.INT_POINT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntPoint(\"number\", 17));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlyLeafReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.INT_POINT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntPoint(\"number\", 17));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlyLeafReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    LeafReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.INT_POINT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"770342641f7b505eaa8dccdc666158bff2419109":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["770342641f7b505eaa8dccdc666158bff2419109"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"770342641f7b505eaa8dccdc666158bff2419109":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["770342641f7b505eaa8dccdc666158bff2419109"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}