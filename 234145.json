{"path":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(DocumentsWriter.FlushState).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(DocumentsWriter.FlushState).mjava","pathOld":"/dev/null","sourceNew":"  synchronized public void closeDocStore(DocumentsWriter.FlushState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      if (4+state.numDocsInStore*8 != state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION) + \" length in bytes of \" + state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c6e9e8b4258e08645a02d6b454cdb1689f6763d2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d17492f26096e19670d947d1be5e9adc52b1d3d","date":1224931200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(DocumentsWriter.FlushState).mjava","sourceNew":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      if (4+state.numDocsInStore*8 != state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION) + \" length in bytes of \" + state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(DocumentsWriter.FlushState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      if (4+state.numDocsInStore*8 != state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION) + \" length in bytes of \" + state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d17492f26096e19670d947d1be5e9adc52b1d3d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5350389bf83287111f7760b9e3db3af8e3648474":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}