{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getDirectSorted(FieldInfo).mjava","commits":[{"id":"7cd329bd749496f6c58b586a6c0dd0dc8201206f","date":1353092226,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getDirectSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SortedDocValues getDirectSorted(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n      final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValues() {\n        @Override\n        public int getOrd(int docID) {\n          try {\n            in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n            SimpleTextUtil.readLine(in, scratch);\n            try {\n              return ordDecoder.parse(scratch.utf8ToString()).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse ord\");\n              e.initCause(pe);\n              throw e;\n            }\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public void lookupOrd(int ord, BytesRef result) {\n          try {\n            in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int getValueCount() {\n          return field.numValues;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getDirectSorted(FieldInfo).mjava","sourceNew":"    @Override\n    public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n      final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValues() {\n        @Override\n        public int getOrd(int docID) {\n          try {\n            in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n            SimpleTextUtil.readLine(in, scratch);\n            try {\n              return ordDecoder.parse(scratch.utf8ToString()).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse ord\");\n              e.initCause(pe);\n              throw e;\n            }\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public void lookupOrd(int ord, BytesRef result) {\n          try {\n            in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int getValueCount() {\n          return field.numValues;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SortedDocValues getDirectSorted(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n      final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValues() {\n        @Override\n        public int getOrd(int docID) {\n          try {\n            in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n            SimpleTextUtil.readLine(in, scratch);\n            try {\n              return ordDecoder.parse(scratch.utf8ToString()).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse ord\");\n              e.initCause(pe);\n              throw e;\n            }\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public void lookupOrd(int ord, BytesRef result) {\n          try {\n            in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n            SimpleTextUtil.readLine(in, scratch);\n            assert StringHelper.startsWith(scratch, LENGTH);\n            int len;\n            try {\n              len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n              e.initCause(pe);\n              throw e;\n            }\n            result.bytes = new byte[len];\n            result.offset = 0;\n            result.length = len;\n            in.readBytes(result.bytes, 0, len);\n          } catch (IOException ioe) {\n            // nocommit should .get() just throw IOE...\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int getValueCount() {\n          return field.numValues;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cd329bd749496f6c58b586a6c0dd0dc8201206f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a4d374b2bebd0d52acaa61038fbf23068620fba7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}