{"path":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#openOutput(ISchemaVersion,String,TestType).mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#openOutput(ISchemaVersion,String,TestType).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Opens a {@link FileWriter} and writes out an appropriate CSV header.\n     *\n     * @param  schemaVersion Schema version of the output. This cannot be\n     *         <code>null</code>.\n     * @param  description Description string used to build the filename.\n     *         This cannot be <code>null</code>.\n     * @param  type {@link TestType type} of the test file to be written.\n     *         This cannot be <code>null</code>.\n     * @return The opened {@link FileWriter writer}. This will never be <code>null</code>.\n     */\n    private static FileWriter openOutput(final ISchemaVersion schemaVersion, final String description, final TestType type) throws IOException {\n        final String schemaVersionPrefix = \"v\"+ schemaVersion.schemaVersionNumber() + \"_\";\n        final String header;\n        final String filename;\n        switch(type) {\n            case ADD:\n                header = \"cardinality,raw_value,HLL\\n\";\n                filename = schemaVersionPrefix + \"cumulative_add_\" + description + \".csv\";\n                break;\n            case UNION:\n                header = \"cardinality,HLL,union_cardinality,union_HLL\\n\";\n                filename = schemaVersionPrefix + \"cumulative_union_\" + description + \".csv\";\n                break;\n            default:\n                throw new RuntimeException(\"Unknown test type \" + type);\n        }\n\n        final FileWriter output = new FileWriter(OUTPUT_DIRECTORY + filename);\n        output.write(header);\n        output.flush();\n        return output;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee9a66ccba41a876431a55e209bff48f6c894f9","date":1437045967,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#openOutput(ISchemaVersion,String,TestType).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#openOutput(ISchemaVersion,String,TestType).mjava","sourceNew":"    /**\n     * Opens a {@link Writer} and writes out an appropriate CSV header.\n     *\n     * @param  schemaVersion Schema version of the output. This cannot be\n     *         <code>null</code>.\n     * @param  description Description string used to build the filename.\n     *         This cannot be <code>null</code>.\n     * @param  type {@link TestType type} of the test file to be written.\n     *         This cannot be <code>null</code>.\n     * @return The opened {@link Writer writer}. This will never be <code>null</code>.\n     */\n    private static Writer openOutput(final ISchemaVersion schemaVersion, final String description, final TestType type) throws IOException {\n        final String schemaVersionPrefix = \"v\"+ schemaVersion.schemaVersionNumber() + \"_\";\n        final String header;\n        final String filename;\n        switch(type) {\n            case ADD:\n                header = \"cardinality,raw_value,HLL\\n\";\n                filename = schemaVersionPrefix + \"cumulative_add_\" + description + \".csv\";\n                break;\n            case UNION:\n                header = \"cardinality,HLL,union_cardinality,union_HLL\\n\";\n                filename = schemaVersionPrefix + \"cumulative_union_\" + description + \".csv\";\n                break;\n            default:\n                throw new RuntimeException(\"Unknown test type \" + type);\n        }\n\n        final Writer output = Files.newBufferedWriter(\n            Paths.get(OUTPUT_DIRECTORY, filename), StandardCharsets.UTF_8);\n        output.write(header);\n        output.flush();\n        return output;\n    }\n\n","sourceOld":"    /**\n     * Opens a {@link FileWriter} and writes out an appropriate CSV header.\n     *\n     * @param  schemaVersion Schema version of the output. This cannot be\n     *         <code>null</code>.\n     * @param  description Description string used to build the filename.\n     *         This cannot be <code>null</code>.\n     * @param  type {@link TestType type} of the test file to be written.\n     *         This cannot be <code>null</code>.\n     * @return The opened {@link FileWriter writer}. This will never be <code>null</code>.\n     */\n    private static FileWriter openOutput(final ISchemaVersion schemaVersion, final String description, final TestType type) throws IOException {\n        final String schemaVersionPrefix = \"v\"+ schemaVersion.schemaVersionNumber() + \"_\";\n        final String header;\n        final String filename;\n        switch(type) {\n            case ADD:\n                header = \"cardinality,raw_value,HLL\\n\";\n                filename = schemaVersionPrefix + \"cumulative_add_\" + description + \".csv\";\n                break;\n            case UNION:\n                header = \"cardinality,HLL,union_cardinality,union_HLL\\n\";\n                filename = schemaVersionPrefix + \"cumulative_union_\" + description + \".csv\";\n                break;\n            default:\n                throw new RuntimeException(\"Unknown test type \" + type);\n        }\n\n        final FileWriter output = new FileWriter(OUTPUT_DIRECTORY + filename);\n        output.write(header);\n        output.flush();\n        return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#openOutput(ISchemaVersion,String,TestType).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Opens a {@link Writer} and writes out an appropriate CSV header.\n     *\n     * @param  schemaVersion Schema version of the output. This cannot be\n     *         <code>null</code>.\n     * @param  description Description string used to build the filename.\n     *         This cannot be <code>null</code>.\n     * @param  type {@link TestType type} of the test file to be written.\n     *         This cannot be <code>null</code>.\n     * @return The opened {@link Writer writer}. This will never be <code>null</code>.\n     */\n    private static Writer openOutput(final ISchemaVersion schemaVersion, final String description, final TestType type) throws IOException {\n        final String schemaVersionPrefix = \"v\"+ schemaVersion.schemaVersionNumber() + \"_\";\n        final String header;\n        final String filename;\n        switch(type) {\n            case ADD:\n                header = \"cardinality,raw_value,HLL\\n\";\n                filename = schemaVersionPrefix + \"cumulative_add_\" + description + \".csv\";\n                break;\n            case UNION:\n                header = \"cardinality,HLL,union_cardinality,union_HLL\\n\";\n                filename = schemaVersionPrefix + \"cumulative_union_\" + description + \".csv\";\n                break;\n            default:\n                throw new RuntimeException(\"Unknown test type \" + type);\n        }\n\n        final Writer output = Files.newBufferedWriter(\n            Paths.get(OUTPUT_DIRECTORY, filename), StandardCharsets.UTF_8);\n        output.write(header);\n        output.flush();\n        return output;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9a66ccba41a876431a55e209bff48f6c894f9":["6faa211c4af605e3cf078a76d200c1dc348973f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eee9a66ccba41a876431a55e209bff48f6c894f9"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"eee9a66ccba41a876431a55e209bff48f6c894f9":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["eee9a66ccba41a876431a55e209bff48f6c894f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}