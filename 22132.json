{"path":"solr/src/java/org/apache/solr/analysis/SynonymFilter#next(Token).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilter#next(Token).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Need to worry about multiple scenarios:\n   *  - need to go for the longest match\n   *    a b => foo      #shouldn't match if \"a b\" is followed by \"c d\"\n   *    a b c d => bar\n   *  - need to backtrack - retry matches for tokens already read\n   *     a b c d => foo\n   *       b c => bar\n   *     If the input stream is \"a b c x\", one will consume \"a b c d\"\n   *     trying to match the first rule... all but \"a\" should be\n   *     pushed back so a match may be made on \"b c\".\n   *  - don't try and match generated tokens (thus need separate queue)\n   *    matching is not recursive.\n   *  - handle optional generation of original tokens in all these cases,\n   *    merging token streams to preserve token positions.\n   *  - preserve original positionIncrement of first matched token\n   */\n  @Override\n  public Token next(Token target) throws IOException {\n    while (true) {\n      // if there are any generated tokens, return them... don't try any\n      // matches against them, as we specifically don't want recursion.\n      if (replacement!=null && replacement.hasNext()) {\n        return replacement.next();\n      }\n\n      // common case fast-path of first token not matching anything\n      Token firstTok = nextTok(target);\n      if (firstTok == null) return null;\n      SynonymMap result = map.submap!=null ? map.submap.get(firstTok.termBuffer(), 0, firstTok.termLength()) : null;\n      if (result == null) return firstTok;\n\n      // OK, we matched a token, so find the longest match.\n\n      matched = new LinkedList<Token>();\n\n      result = match(result);\n\n      if (result==null) {\n        // no match, simply return the first token read.\n        return firstTok;\n      }\n\n      // reuse, or create new one each time?\n      ArrayList<Token> generated = new ArrayList<Token>(result.synonyms.length + matched.size() + 1);\n\n      //\n      // there was a match... let's generate the new tokens, merging\n      // in the matched tokens (position increments need adjusting)\n      //\n      Token lastTok = matched.isEmpty() ? firstTok : matched.getLast();\n      boolean includeOrig = result.includeOrig();\n\n      Token origTok = includeOrig ? firstTok : null;\n      int origPos = firstTok.getPositionIncrement();  // position of origTok in the original stream\n      int repPos=0; // curr position in replacement token stream\n      int pos=0;  // current position in merged token stream\n\n      for (int i=0; i<result.synonyms.length; i++) {\n        Token repTok = result.synonyms[i];\n        Token newTok = new Token(firstTok.startOffset(), lastTok.endOffset(), firstTok.type());\n        newTok.setTermBuffer(repTok.termBuffer(), 0, repTok.termLength());\n        repPos += repTok.getPositionIncrement();\n        if (i==0) repPos=origPos;  // make position of first token equal to original\n\n        // if necessary, insert original tokens and adjust position increment\n        while (origTok != null && origPos <= repPos) {\n          origTok.setPositionIncrement(origPos-pos);\n          generated.add(origTok);\n          pos += origTok.getPositionIncrement();\n          origTok = matched.isEmpty() ? null : matched.removeFirst();\n          if (origTok != null) origPos += origTok.getPositionIncrement();\n        }\n\n        newTok.setPositionIncrement(repPos - pos);\n        generated.add(newTok);\n        pos += newTok.getPositionIncrement();\n      }\n\n      // finish up any leftover original tokens\n      while (origTok!=null) {\n        origTok.setPositionIncrement(origPos-pos);\n        generated.add(origTok);\n        pos += origTok.getPositionIncrement();\n        origTok = matched.isEmpty() ? null : matched.removeFirst();\n        if (origTok != null) origPos += origTok.getPositionIncrement();\n      }\n\n      // what if we replaced a longer sequence with a shorter one?\n      // a/0 b/5 =>  foo/0\n      // should I re-create the gap on the next buffered token?\n\n      replacement = generated.iterator();\n      // Now return to the top of the loop to read and return the first\n      // generated token.. The reason this is done is that we may have generated\n      // nothing at all, and may need to continue with more matching logic.\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilter#next(Token).mjava","sourceNew":null,"sourceOld":"  /*\n   * Need to worry about multiple scenarios:\n   *  - need to go for the longest match\n   *    a b => foo      #shouldn't match if \"a b\" is followed by \"c d\"\n   *    a b c d => bar\n   *  - need to backtrack - retry matches for tokens already read\n   *     a b c d => foo\n   *       b c => bar\n   *     If the input stream is \"a b c x\", one will consume \"a b c d\"\n   *     trying to match the first rule... all but \"a\" should be\n   *     pushed back so a match may be made on \"b c\".\n   *  - don't try and match generated tokens (thus need separate queue)\n   *    matching is not recursive.\n   *  - handle optional generation of original tokens in all these cases,\n   *    merging token streams to preserve token positions.\n   *  - preserve original positionIncrement of first matched token\n   */\n  @Override\n  public Token next(Token target) throws IOException {\n    while (true) {\n      // if there are any generated tokens, return them... don't try any\n      // matches against them, as we specifically don't want recursion.\n      if (replacement!=null && replacement.hasNext()) {\n        return replacement.next();\n      }\n\n      // common case fast-path of first token not matching anything\n      Token firstTok = nextTok(target);\n      if (firstTok == null) return null;\n      SynonymMap result = map.submap!=null ? map.submap.get(firstTok.termBuffer(), 0, firstTok.termLength()) : null;\n      if (result == null) return firstTok;\n\n      // OK, we matched a token, so find the longest match.\n\n      matched = new LinkedList<Token>();\n\n      result = match(result);\n\n      if (result==null) {\n        // no match, simply return the first token read.\n        return firstTok;\n      }\n\n      // reuse, or create new one each time?\n      ArrayList<Token> generated = new ArrayList<Token>(result.synonyms.length + matched.size() + 1);\n\n      //\n      // there was a match... let's generate the new tokens, merging\n      // in the matched tokens (position increments need adjusting)\n      //\n      Token lastTok = matched.isEmpty() ? firstTok : matched.getLast();\n      boolean includeOrig = result.includeOrig();\n\n      Token origTok = includeOrig ? firstTok : null;\n      int origPos = firstTok.getPositionIncrement();  // position of origTok in the original stream\n      int repPos=0; // curr position in replacement token stream\n      int pos=0;  // current position in merged token stream\n\n      for (int i=0; i<result.synonyms.length; i++) {\n        Token repTok = result.synonyms[i];\n        Token newTok = new Token(firstTok.startOffset(), lastTok.endOffset(), firstTok.type());\n        newTok.setTermBuffer(repTok.termBuffer(), 0, repTok.termLength());\n        repPos += repTok.getPositionIncrement();\n        if (i==0) repPos=origPos;  // make position of first token equal to original\n\n        // if necessary, insert original tokens and adjust position increment\n        while (origTok != null && origPos <= repPos) {\n          origTok.setPositionIncrement(origPos-pos);\n          generated.add(origTok);\n          pos += origTok.getPositionIncrement();\n          origTok = matched.isEmpty() ? null : matched.removeFirst();\n          if (origTok != null) origPos += origTok.getPositionIncrement();\n        }\n\n        newTok.setPositionIncrement(repPos - pos);\n        generated.add(newTok);\n        pos += newTok.getPositionIncrement();\n      }\n\n      // finish up any leftover original tokens\n      while (origTok!=null) {\n        origTok.setPositionIncrement(origPos-pos);\n        generated.add(origTok);\n        pos += origTok.getPositionIncrement();\n        origTok = matched.isEmpty() ? null : matched.removeFirst();\n        if (origTok != null) origPos += origTok.getPositionIncrement();\n      }\n\n      // what if we replaced a longer sequence with a shorter one?\n      // a/0 b/5 =>  foo/0\n      // should I re-create the gap on the next buffered token?\n\n      replacement = generated.iterator();\n      // Now return to the top of the loop to read and return the first\n      // generated token.. The reason this is done is that we may have generated\n      // nothing at all, and may need to continue with more matching logic.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}