{"path":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQueue(Map).mjava","commits":[{"id":"0d57805a939f8923b86ca8202ccef1f7cf548098","date":1105995946,"type":0,"author":"David Spencer","isMerge":false,"pathNew":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQueue(Map).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create a PriorityQueue from a word->tf map.\n     *\n     * @param words a map of words keyed on the word(String) with Int objects as the values.\n     */\n    private PriorityQueue createQueue(Map words) throws IOException {\n        // have collected all words in doc and their freqs\n        int numDocs = ir.numDocs();\n        FreqQ res = new FreqQ(words.size()); // will order words by score\n\n        Iterator it = words.keySet().iterator();\n        while (it.hasNext()) { // for every word\n            String word = (String) it.next();\n\n            int tf = ((Int) words.get(word)).x; // term freq in the source doc\n            if (minTermFreq > 0 && tf < minTermFreq) {\n                continue; // filter out words that don't occur enough times in the source\n            }\n\n            // go through all the fields and find the largest document frequency\n            String topField = fieldNames[0];\n            int docFreq = 0;\n            for (int i = 0; i < fieldNames.length; i++) {\n                int freq = ir.docFreq(new Term(fieldNames[i], word));\n                topField = (freq > docFreq) ? fieldNames[i] : topField;\n                docFreq = (freq > docFreq) ? freq : docFreq;\n            }\n\n            if (minDocFreq > 0 && docFreq < minDocFreq) {\n                continue; // filter out words that don't occur in enough docs\n            }\n\n            if (docFreq == 0) {\n                continue; // index update problem?\n            }\n\n            float idf = similarity.idf(docFreq, numDocs);\n            float score = tf * idf;\n\n            // only really need 1st 3 entries, other ones are for troubleshooting\n            res.insert(new Object[]{word,                   // the word\n                                    topField,               // the top field\n                                    new Float(score),       // overall score\n                                    new Float(idf),         // idf\n                                    new Integer(docFreq),   // freq in all docs\n                                    new Integer(tf)\n            });\n        }\n        return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQueue(Map).mjava","pathOld":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQueue(Map).mjava","sourceNew":"    /**\n     * Create a PriorityQueue from a word->tf map.\n     *\n     * @param words a map of words keyed on the word(String) with Int objects as the values.\n     */\n    private PriorityQueue createQueue(Map words) throws IOException {\n        // have collected all words in doc and their freqs\n        int numDocs = ir.numDocs();\n        FreqQ res = new FreqQ(words.size()); // will order words by score\n\n        Iterator it = words.keySet().iterator();\n        while (it.hasNext()) { // for every word\n            String word = (String) it.next();\n\n            int tf = ((Int) words.get(word)).x; // term freq in the source doc\n            if (minTermFreq > 0 && tf < minTermFreq) {\n                continue; // filter out words that don't occur enough times in the source\n            }\n\n            // go through all the fields and find the largest document frequency\n            String topField = fieldNames[0];\n            int docFreq = 0;\n            for (int i = 0; i < fieldNames.length; i++) {\n                int freq = ir.docFreq(new Term(fieldNames[i], word));\n                topField = (freq > docFreq) ? fieldNames[i] : topField;\n                docFreq = (freq > docFreq) ? freq : docFreq;\n            }\n\n            if (minDocFreq > 0 && docFreq < minDocFreq) {\n                continue; // filter out words that don't occur in enough docs\n            }\n\n            if (docFreq == 0) {\n                continue; // index update problem?\n            }\n\n            float idf = similarity.idf(docFreq, numDocs);\n            float score = tf * idf;\n\n            // only really need 1st 3 entries, other ones are for troubleshooting\n            res.insert(new Object[]{word,                   // the word\n                                    topField,               // the top field\n                                    new Float(score),       // overall score\n                                    new Float(idf),         // idf\n                                    new Integer(docFreq),   // freq in all docs\n                                    new Integer(tf)\n            });\n        }\n        return res;\n    }\n\n","sourceOld":"    /**\n     * Create a PriorityQueue from a word->tf map.\n     *\n     * @param words a map of words keyed on the word(String) with Int objects as the values.\n     */\n    private PriorityQueue createQueue(Map words) throws IOException {\n        // have collected all words in doc and their freqs\n        int numDocs = ir.numDocs();\n        FreqQ res = new FreqQ(words.size()); // will order words by score\n\n        Iterator it = words.keySet().iterator();\n        while (it.hasNext()) { // for every word\n            String word = (String) it.next();\n\n            int tf = ((Int) words.get(word)).x; // term freq in the source doc\n            if (minTermFreq > 0 && tf < minTermFreq) {\n                continue; // filter out words that don't occur enough times in the source\n            }\n\n            // go through all the fields and find the largest document frequency\n            String topField = fieldNames[0];\n            int docFreq = 0;\n            for (int i = 0; i < fieldNames.length; i++) {\n                int freq = ir.docFreq(new Term(fieldNames[i], word));\n                topField = (freq > docFreq) ? fieldNames[i] : topField;\n                docFreq = (freq > docFreq) ? freq : docFreq;\n            }\n\n            if (minDocFreq > 0 && docFreq < minDocFreq) {\n                continue; // filter out words that don't occur in enough docs\n            }\n\n            if (docFreq == 0) {\n                continue; // index update problem?\n            }\n\n            float idf = similarity.idf(docFreq, numDocs);\n            float score = tf * idf;\n\n            // only really need 1st 3 entries, other ones are for troubleshooting\n            res.insert(new Object[]{word,                   // the word\n                                    topField,               // the top field\n                                    new Float(score),       // overall score\n                                    new Float(idf),         // idf\n                                    new Integer(docFreq),   // freq in all docs\n                                    new Integer(tf)\n            });\n        }\n        return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d57805a939f8923b86ca8202ccef1f7cf548098":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["0d57805a939f8923b86ca8202ccef1f7cf548098"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"]},"commit2Childs":{"0d57805a939f8923b86ca8202ccef1f7cf548098":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d57805a939f8923b86ca8202ccef1f7cf548098"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}