{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), Character.BYTES)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), Character.BYTES)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"419a8f52c6635419beb951255cacbbb281044c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}