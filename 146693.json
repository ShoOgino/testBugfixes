{"path":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],PostingsEnum).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final PostingsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertNotNull(posEnum.getPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertNull(posEnum.getPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertNotNull(posEnum.getPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertNull(posEnum.getPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}