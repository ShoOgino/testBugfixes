{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","commits":[{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection,float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","sourceOld":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","sourceOld":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0d3ac29cb12b76130b702427d6bcd355e68d126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e0d3ac29cb12b76130b702427d6bcd355e68d126"]},"commit2Childs":{"e0d3ac29cb12b76130b702427d6bcd355e68d126":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}