{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#endElement(String,String,String).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#endElement(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#endElement(String,String,String).mjava","sourceNew":"  @Override\n  public void endElement(String uri, String localName, String qName) throws SAXException {\n    if (inEnvelope) {\n      if (inRequest) {\n        if (inStatistic) {\n          if (localName.equals(EXPRESSION)) {\n            expression = new ExpressionRequest(currentElementText,currentElementText);\n          } else if (localName.equals(NAME)) {\n            expression.setName(currentElementText);\n          } else if (localName.equals(STATISTIC)) {\n            // Finished Parsing the Statistic Request\n            expressionList.add(expression);\n            inStatistic = false;\n          } \n        } else if (inFieldFacet) {\n          if (inSortSpecification) {\n            if (localName.equals(STAT_NAME)) {\n              sortSpecification.setStatistic(currentElementText);\n            } else if (localName.equals(DIRECTION)) {\n              sortSpecification.setDirection(FacetSortDirection.fromExternal(currentElementText));\n            } else if (localName.equals(SORT_SPECIFICATION)) {\n              // Finished Parsing the Sort Specification\n              fieldFacet.setSort(sortSpecification);\n              inSortSpecification = false;\n            } \n          } else if (localName.equals(FIELD)) {\n            fieldFacet = new FieldFacetRequest(schema.getField(currentElementText));\n          } else if (localName.equals(FIELD_FACET)) {\n            // Finished Parsing the Field Facet Request\n            fieldFacet.setLimit(limit);\n            fieldFacet.showMissing(showMissing);\n            fieldFacetList.add(fieldFacet);\n            inFieldFacet = false;\n          } \n        } else if (inRangeFacet) {\n          if (localName.equals(FIELD)) {\n            rangeFacet = new RangeFacetRequest(schema.getField(currentElementText), \"\", \"\", new String[1]);\n          } else if (localName.equals(START)) {\n            rangeFacet.setStart(currentElementText);\n          } else if (localName.equals(END)) {\n            rangeFacet.setEnd(currentElementText);\n          } else if (localName.equals(GAP)) {\n            gaps.add(currentElementText);\n          } else if (localName.equals(INCLUDE_BOUNDARY)) {\n            includeBoundaries.add(FacetRangeInclude.get(currentElementText));\n          } else if (localName.equals(OTHER_RANGE)) {\n            otherRanges.add(FacetRangeOther.get(currentElementText));\n          } else if (localName.equals(RANGE_FACET)) {\n            // Finished Parsing the Range Facet Request\n            rangeFacet.setHardEnd(hardend);\n            rangeFacet.setGaps(gaps.toArray(new String[1]));\n            rangeFacet.setInclude(includeBoundaries);\n            rangeFacet.setOthers(otherRanges);\n            inRangeFacet = false;\n            rangeFacetList.add(rangeFacet);\n          } \n        } else if (inQueryFacet) {\n          if (localName.equals(NAME)) {\n            queryName = currentElementText;\n          } else if (localName.equals(QUERY)) {\n            queries.add(currentElementText);\n          } else if (localName.equals(QUERY_FACET)) {\n            // Finished Parsing the Query Facet Request\n            QueryFacetRequest temp = new QueryFacetRequest(queryName);\n            temp.setQueries(queries);\n            queryFacetList.add(temp);\n            inQueryFacet = false;\n          }\n        } else if (localName.equals(NAME)) {\n          analyticsRequest = new AnalyticsRequest(currentElementText);\n        } else if (localName.equals(ANALYTICS_REQUEST)){\n          // Finished Parsing the Analytics Request\n          analyticsRequest.setExpressions(expressionList);\n          analyticsRequest.setFieldFacets(fieldFacetList);\n          analyticsRequest.setRangeFacets(rangeFacetList);\n          analyticsRequest.setQueryFacets(queryFacetList);\n          requests.add(analyticsRequest);\n          inRequest = false;\n        }\n      } else if (localName.equals(ANALYTICS_REQUEST_ENVELOPE)){\n        // Finished Parsing\n        inEnvelope = false;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void endElement(String uri, String localName, String qName) throws SAXException {\n    if (inEnvelope) {\n      if (inRequest) {\n        if (inStatistic) {\n          if (localName.equals(EXPRESSION)) {\n            expression = new ExpressionRequest(currentElementText,currentElementText);\n          } else if (localName.equals(NAME)) {\n            expression.setName(currentElementText);\n          } else if (localName.equals(STATISTIC)) {\n            // Finished Parsing the Statistic Request\n            expressionList.add(expression);\n            inStatistic = false;\n          } \n        } else if (inFieldFacet) {\n          if (inSortSpecification) {\n            if (localName.equals(STAT_NAME)) {\n              sortSpecification.setStatistic(currentElementText);\n            } else if (localName.equals(DIRECTION)) {\n              sortSpecification.setDirection(FacetSortDirection.fromExternal(currentElementText));\n            } else if (localName.equals(SORT_SPECIFICATION)) {\n              // Finished Parsing the Sort Specification\n              fieldFacet.setSort(sortSpecification);\n              inSortSpecification = false;\n            } \n          } else if (localName.equals(FIELD)) {\n            fieldFacet = new FieldFacetRequest(schema.getField(currentElementText));\n          } else if (localName.equals(FIELD_FACET)) {\n            // Finished Parsing the Field Facet Request\n            fieldFacet.setLimit(limit);\n            fieldFacet.showMissing(showMissing);\n            fieldFacetList.add(fieldFacet);\n            inFieldFacet = false;\n          } \n        } else if (inRangeFacet) {\n          if (localName.equals(FIELD)) {\n            rangeFacet = new RangeFacetRequest(schema.getField(currentElementText), \"\", \"\", new String[1]);\n          } else if (localName.equals(START)) {\n            rangeFacet.setStart(currentElementText);\n          } else if (localName.equals(END)) {\n            rangeFacet.setEnd(currentElementText);\n          } else if (localName.equals(GAP)) {\n            gaps.add(currentElementText);\n          } else if (localName.equals(INCLUDE_BOUNDARY)) {\n            includeBoundaries.add(FacetRangeInclude.get(currentElementText));\n          } else if (localName.equals(OTHER_RANGE)) {\n            otherRanges.add(FacetRangeOther.get(currentElementText));\n          } else if (localName.equals(RANGE_FACET)) {\n            // Finished Parsing the Range Facet Request\n            rangeFacet.setHardEnd(hardend);\n            rangeFacet.setGaps(gaps.toArray(new String[1]));\n            rangeFacet.setInclude(includeBoundaries);\n            rangeFacet.setOthers(otherRanges);\n            inRangeFacet = false;\n            rangeFacetList.add(rangeFacet);\n          } \n        } else if (inQueryFacet) {\n          if (localName.equals(NAME)) {\n            queryName = currentElementText;\n          } else if (localName.equals(QUERY)) {\n            queries.add(currentElementText);\n          } else if (localName.equals(QUERY_FACET)) {\n            // Finished Parsing the Query Facet Request\n            QueryFacetRequest temp = new QueryFacetRequest(queryName);\n            temp.setQueries(queries);\n            queryFacetList.add(temp);\n            inQueryFacet = false;\n          }\n        } else if (localName.equals(NAME)) {\n          analyticsRequest = new AnalyticsRequest(currentElementText);\n        } else if (localName.equals(ANALYTICS_REQUEST)){\n          // Finished Parsing the Analytics Request\n          analyticsRequest.setExpressions(expressionList);\n          analyticsRequest.setFieldFacets(fieldFacetList);\n          analyticsRequest.setRangeFacets(rangeFacetList);\n          analyticsRequest.setQueryFacets(queryFacetList);\n          requests.add(analyticsRequest);\n          inRequest = false;\n        }\n      } else if (localName.equals(ANALYTICS_REQUEST_ENVELOPE)){\n        // Finished Parsing\n        inEnvelope = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#endElement(String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void endElement(String uri, String localName, String qName) throws SAXException {\n    if (inEnvelope) {\n      if (inRequest) {\n        if (inStatistic) {\n          if (localName.equals(EXPRESSION)) {\n            expression = new ExpressionRequest(currentElementText,currentElementText);\n          } else if (localName.equals(NAME)) {\n            expression.setName(currentElementText);\n          } else if (localName.equals(STATISTIC)) {\n            // Finished Parsing the Statistic Request\n            expressionList.add(expression);\n            inStatistic = false;\n          } \n        } else if (inFieldFacet) {\n          if (inSortSpecification) {\n            if (localName.equals(STAT_NAME)) {\n              sortSpecification.setStatistic(currentElementText);\n            } else if (localName.equals(DIRECTION)) {\n              sortSpecification.setDirection(FacetSortDirection.fromExternal(currentElementText));\n            } else if (localName.equals(SORT_SPECIFICATION)) {\n              // Finished Parsing the Sort Specification\n              fieldFacet.setSort(sortSpecification);\n              inSortSpecification = false;\n            } \n          } else if (localName.equals(FIELD)) {\n            fieldFacet = new FieldFacetRequest(schema.getField(currentElementText));\n          } else if (localName.equals(FIELD_FACET)) {\n            // Finished Parsing the Field Facet Request\n            fieldFacet.setLimit(limit);\n            fieldFacet.showMissing(showMissing);\n            fieldFacetList.add(fieldFacet);\n            inFieldFacet = false;\n          } \n        } else if (inRangeFacet) {\n          if (localName.equals(FIELD)) {\n            rangeFacet = new RangeFacetRequest(schema.getField(currentElementText), \"\", \"\", new String[1]);\n          } else if (localName.equals(START)) {\n            rangeFacet.setStart(currentElementText);\n          } else if (localName.equals(END)) {\n            rangeFacet.setEnd(currentElementText);\n          } else if (localName.equals(GAP)) {\n            gaps.add(currentElementText);\n          } else if (localName.equals(INCLUDE_BOUNDARY)) {\n            includeBoundaries.add(FacetRangeInclude.get(currentElementText));\n          } else if (localName.equals(OTHER_RANGE)) {\n            otherRanges.add(FacetRangeOther.get(currentElementText));\n          } else if (localName.equals(RANGE_FACET)) {\n            // Finished Parsing the Range Facet Request\n            rangeFacet.setHardEnd(hardend);\n            rangeFacet.setGaps(gaps.toArray(new String[1]));\n            rangeFacet.setInclude(includeBoundaries);\n            rangeFacet.setOthers(otherRanges);\n            inRangeFacet = false;\n            rangeFacetList.add(rangeFacet);\n          } \n        } else if (inQueryFacet) {\n          if (localName.equals(NAME)) {\n            queryName = currentElementText;\n          } else if (localName.equals(QUERY)) {\n            queries.add(currentElementText);\n          } else if (localName.equals(QUERY_FACET)) {\n            // Finished Parsing the Query Facet Request\n            QueryFacetRequest temp = new QueryFacetRequest(queryName);\n            temp.setQueries(queries);\n            queryFacetList.add(temp);\n            inQueryFacet = false;\n          }\n        } else if (localName.equals(NAME)) {\n          analyticsRequest = new AnalyticsRequest(currentElementText);\n        } else if (localName.equals(ANALYTICS_REQUEST)){\n          // Finished Parsing the Analytics Request\n          analyticsRequest.setExpressions(expressionList);\n          analyticsRequest.setFieldFacets(fieldFacetList);\n          analyticsRequest.setRangeFacets(rangeFacetList);\n          analyticsRequest.setQueryFacets(queryFacetList);\n          requests.add(analyticsRequest);\n          inRequest = false;\n        }\n      } else if (localName.equals(ANALYTICS_REQUEST_ENVELOPE)){\n        // Finished Parsing\n        inEnvelope = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#endElement(String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void endElement(String uri, String localName, String qName) throws SAXException {\n    if (inEnvelope) {\n      if (inRequest) {\n        if (inStatistic) {\n          if (localName.equals(EXPRESSION)) {\n            expression = new ExpressionRequest(currentElementText,currentElementText);\n          } else if (localName.equals(NAME)) {\n            expression.setName(currentElementText);\n          } else if (localName.equals(STATISTIC)) {\n            // Finished Parsing the Statistic Request\n            expressionList.add(expression);\n            inStatistic = false;\n          } \n        } else if (inFieldFacet) {\n          if (inSortSpecification) {\n            if (localName.equals(STAT_NAME)) {\n              sortSpecification.setStatistic(currentElementText);\n            } else if (localName.equals(DIRECTION)) {\n              sortSpecification.setDirection(FacetSortDirection.fromExternal(currentElementText));\n            } else if (localName.equals(SORT_SPECIFICATION)) {\n              // Finished Parsing the Sort Specification\n              fieldFacet.setSort(sortSpecification);\n              inSortSpecification = false;\n            } \n          } else if (localName.equals(FIELD)) {\n            fieldFacet = new FieldFacetRequest(schema.getField(currentElementText));\n          } else if (localName.equals(FIELD_FACET)) {\n            // Finished Parsing the Field Facet Request\n            fieldFacet.setLimit(limit);\n            fieldFacet.showMissing(showMissing);\n            fieldFacetList.add(fieldFacet);\n            inFieldFacet = false;\n          } \n        } else if (inRangeFacet) {\n          if (localName.equals(FIELD)) {\n            rangeFacet = new RangeFacetRequest(schema.getField(currentElementText), \"\", \"\", new String[1]);\n          } else if (localName.equals(START)) {\n            rangeFacet.setStart(currentElementText);\n          } else if (localName.equals(END)) {\n            rangeFacet.setEnd(currentElementText);\n          } else if (localName.equals(GAP)) {\n            gaps.add(currentElementText);\n          } else if (localName.equals(INCLUDE_BOUNDARY)) {\n            includeBoundaries.add(FacetRangeInclude.get(currentElementText));\n          } else if (localName.equals(OTHER_RANGE)) {\n            otherRanges.add(FacetRangeOther.get(currentElementText));\n          } else if (localName.equals(RANGE_FACET)) {\n            // Finished Parsing the Range Facet Request\n            rangeFacet.setHardEnd(hardend);\n            rangeFacet.setGaps(gaps.toArray(new String[1]));\n            rangeFacet.setInclude(includeBoundaries);\n            rangeFacet.setOthers(otherRanges);\n            inRangeFacet = false;\n            rangeFacetList.add(rangeFacet);\n          } \n        } else if (inQueryFacet) {\n          if (localName.equals(NAME)) {\n            queryName = currentElementText;\n          } else if (localName.equals(QUERY)) {\n            queries.add(currentElementText);\n          } else if (localName.equals(QUERY_FACET)) {\n            // Finished Parsing the Query Facet Request\n            QueryFacetRequest temp = new QueryFacetRequest(queryName);\n            temp.setQueries(queries);\n            queryFacetList.add(temp);\n            inQueryFacet = false;\n          }\n        } else if (localName.equals(NAME)) {\n          analyticsRequest = new AnalyticsRequest(currentElementText);\n        } else if (localName.equals(ANALYTICS_REQUEST)){\n          // Finished Parsing the Analytics Request\n          analyticsRequest.setExpressions(expressionList);\n          analyticsRequest.setFieldFacets(fieldFacetList);\n          analyticsRequest.setRangeFacets(rangeFacetList);\n          analyticsRequest.setQueryFacets(queryFacetList);\n          requests.add(analyticsRequest);\n          inRequest = false;\n        }\n      } else if (localName.equals(ANALYTICS_REQUEST_ENVELOPE)){\n        // Finished Parsing\n        inEnvelope = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#endElement(String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void endElement(String uri, String localName, String qName) throws SAXException {\n    if (inEnvelope) {\n      if (inRequest) {\n        if (inStatistic) {\n          if (localName.equals(EXPRESSION)) {\n            expression = new ExpressionRequest(currentElementText,currentElementText);\n          } else if (localName.equals(NAME)) {\n            expression.setName(currentElementText);\n          } else if (localName.equals(STATISTIC)) {\n            // Finished Parsing the Statistic Request\n            expressionList.add(expression);\n            inStatistic = false;\n          } \n        } else if (inFieldFacet) {\n          if (inSortSpecification) {\n            if (localName.equals(STAT_NAME)) {\n              sortSpecification.setStatistic(currentElementText);\n            } else if (localName.equals(DIRECTION)) {\n              sortSpecification.setDirection(FacetSortDirection.fromExternal(currentElementText));\n            } else if (localName.equals(SORT_SPECIFICATION)) {\n              // Finished Parsing the Sort Specification\n              fieldFacet.setSort(sortSpecification);\n              inSortSpecification = false;\n            } \n          } else if (localName.equals(FIELD)) {\n            fieldFacet = new FieldFacetRequest(schema.getField(currentElementText));\n          } else if (localName.equals(FIELD_FACET)) {\n            // Finished Parsing the Field Facet Request\n            fieldFacet.setLimit(limit);\n            fieldFacet.showMissing(showMissing);\n            fieldFacetList.add(fieldFacet);\n            inFieldFacet = false;\n          } \n        } else if (inRangeFacet) {\n          if (localName.equals(FIELD)) {\n            rangeFacet = new RangeFacetRequest(schema.getField(currentElementText), \"\", \"\", new String[1]);\n          } else if (localName.equals(START)) {\n            rangeFacet.setStart(currentElementText);\n          } else if (localName.equals(END)) {\n            rangeFacet.setEnd(currentElementText);\n          } else if (localName.equals(GAP)) {\n            gaps.add(currentElementText);\n          } else if (localName.equals(INCLUDE_BOUNDARY)) {\n            includeBoundaries.add(FacetRangeInclude.get(currentElementText));\n          } else if (localName.equals(OTHER_RANGE)) {\n            otherRanges.add(FacetRangeOther.get(currentElementText));\n          } else if (localName.equals(RANGE_FACET)) {\n            // Finished Parsing the Range Facet Request\n            rangeFacet.setHardEnd(hardend);\n            rangeFacet.setGaps(gaps.toArray(new String[1]));\n            rangeFacet.setInclude(includeBoundaries);\n            rangeFacet.setOthers(otherRanges);\n            inRangeFacet = false;\n            rangeFacetList.add(rangeFacet);\n          } \n        } else if (inQueryFacet) {\n          if (localName.equals(NAME)) {\n            queryName = currentElementText;\n          } else if (localName.equals(QUERY)) {\n            queries.add(currentElementText);\n          } else if (localName.equals(QUERY_FACET)) {\n            // Finished Parsing the Query Facet Request\n            QueryFacetRequest temp = new QueryFacetRequest(queryName);\n            temp.setQueries(queries);\n            queryFacetList.add(temp);\n            inQueryFacet = false;\n          }\n        } else if (localName.equals(NAME)) {\n          analyticsRequest = new AnalyticsRequest(currentElementText);\n        } else if (localName.equals(ANALYTICS_REQUEST)){\n          // Finished Parsing the Analytics Request\n          analyticsRequest.setExpressions(expressionList);\n          analyticsRequest.setFieldFacets(fieldFacetList);\n          analyticsRequest.setRangeFacets(rangeFacetList);\n          analyticsRequest.setQueryFacets(queryFacetList);\n          requests.add(analyticsRequest);\n          inRequest = false;\n        }\n      } else if (localName.equals(ANALYTICS_REQUEST_ENVELOPE)){\n        // Finished Parsing\n        inEnvelope = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}