{"path":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testBadCompressionMode().mjava","commits":[{"id":"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","date":1452119871,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testBadCompressionMode().mjava","pathOld":"/dev/null","sourceNew":"  public void testBadCompressionMode() throws Exception {\n    try {\n      doTestCompressionMode(\"something_that_doesnt_exist\", \"something_that_doesnt_exist\");\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, e.code());\n      assertTrue(\"Unexpected Exception message: \" + e.getMessage(), \n          e.getMessage().contains(\"Unable to reload core\"));\n    }\n    \n    SchemaCodecFactory factory = new SchemaCodecFactory();\n    NamedList<String> nl = new NamedList<>();\n    nl.add(SchemaCodecFactory.COMPRESSION_MODE, \"something_that_doesnt_exist\");\n    try {\n      factory.init(nl);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, e.code());\n      assertTrue(\"Unexpected Exception message: \" + e.getMessage(), \n          e.getMessage().contains(\"Invalid compressionMode: 'something_that_doesnt_exist'\"));\n    }\n    \n    factory = new SchemaCodecFactory();\n    nl = new NamedList<>();\n    nl.add(SchemaCodecFactory.COMPRESSION_MODE, \"\");\n    try {\n      factory.init(nl);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, e.code());\n      assertTrue(\"Unexpected Exception message: \" + e.getMessage(), \n          e.getMessage().contains(\"Invalid compressionMode: ''\"));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cb00b5f16300efa7bd172de723d9ac91d38cc2","date":1543702774,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testBadCompressionMode().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testBadCompressionMode().mjava","sourceNew":"  public void testBadCompressionMode() throws Exception {\n    SolrException thrown = expectThrows(SolrException.class, () -> {\n      doTestCompressionMode(\"something_that_doesnt_exist\", \"something_that_doesnt_exist\");\n    });\n    assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, thrown.code());\n    assertTrue(\"Unexpected Exception message: \" + thrown.getMessage(),\n        thrown.getMessage().contains(\"Unable to reload core\"));\n    \n    final SchemaCodecFactory factory1 = new SchemaCodecFactory();\n    final NamedList<String> nl = new NamedList<>();\n    nl.add(SchemaCodecFactory.COMPRESSION_MODE, \"something_that_doesnt_exist\");\n    thrown = expectThrows(SolrException.class, () -> {\n      factory1.init(nl);\n    });\n    assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, thrown.code());\n    assertTrue(\"Unexpected Exception message: \" + thrown.getMessage(),\n        thrown.getMessage().contains(\"Invalid compressionMode: 'something_that_doesnt_exist'\"));\n    \n    final SchemaCodecFactory factory2 = new SchemaCodecFactory();\n    final NamedList<String> nl2 = new NamedList<>();\n    nl2.add(SchemaCodecFactory.COMPRESSION_MODE, \"\");\n    thrown = expectThrows(SolrException.class, () -> {\n      factory2.init(nl2);\n    });\n    assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, thrown.code());\n    assertTrue(\"Unexpected Exception message: \" + thrown.getMessage(),\n        thrown.getMessage().contains(\"Invalid compressionMode: ''\"));\n  }\n\n","sourceOld":"  public void testBadCompressionMode() throws Exception {\n    try {\n      doTestCompressionMode(\"something_that_doesnt_exist\", \"something_that_doesnt_exist\");\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, e.code());\n      assertTrue(\"Unexpected Exception message: \" + e.getMessage(), \n          e.getMessage().contains(\"Unable to reload core\"));\n    }\n    \n    SchemaCodecFactory factory = new SchemaCodecFactory();\n    NamedList<String> nl = new NamedList<>();\n    nl.add(SchemaCodecFactory.COMPRESSION_MODE, \"something_that_doesnt_exist\");\n    try {\n      factory.init(nl);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, e.code());\n      assertTrue(\"Unexpected Exception message: \" + e.getMessage(), \n          e.getMessage().contains(\"Invalid compressionMode: 'something_that_doesnt_exist'\"));\n    }\n    \n    factory = new SchemaCodecFactory();\n    nl = new NamedList<>();\n    nl.add(SchemaCodecFactory.COMPRESSION_MODE, \"\");\n    try {\n      factory.init(nl);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, e.code());\n      assertTrue(\"Unexpected Exception message: \" + e.getMessage(), \n          e.getMessage().contains(\"Invalid compressionMode: ''\"));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}