{"path":"lucene/core/src/java/org/apache/lucene/util/BitSet#andNot(DocIdSetIterator).mjava","commits":[{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitSet#andNot(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /** this = this AND NOT other */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    for (int doc = iter.nextDoc(), len = length(); doc < len; doc = iter.nextDoc()) {\n      clear(doc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","date":1414400081,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitSet#andNot(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitSet#andNot(DocIdSetIterator).mjava","sourceNew":"  /** this = this AND NOT other. The state of the iterator after this operation\n   *  terminates is undefined. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    assertUnpositioned(iter);\n    leapFrog(iter, new LeapFrogCallBack() {\n\n      @Override\n      public void onMatch(int doc) {\n        clear(doc);\n      }\n\n    });\n  }\n\n","sourceOld":"  /** this = this AND NOT other */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    for (int doc = iter.nextDoc(), len = length(); doc < len; doc = iter.nextDoc()) {\n      clear(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"099c774ddd27f4ad437ca5df14d153bab0a3affe","date":1424527689,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitSet#andNot(DocIdSetIterator).mjava","sourceNew":null,"sourceOld":"  /** this = this AND NOT other. The state of the iterator after this operation\n   *  terminates is undefined. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    assertUnpositioned(iter);\n    leapFrog(iter, new LeapFrogCallBack() {\n\n      @Override\n      public void onMatch(int doc) {\n        clear(doc);\n      }\n\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"099c774ddd27f4ad437ca5df14d153bab0a3affe":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["099c774ddd27f4ad437ca5df14d153bab0a3affe"]},"commit2Childs":{"099c774ddd27f4ad437ca5df14d153bab0a3affe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["099c774ddd27f4ad437ca5df14d153bab0a3affe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}