{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelRankStream().mjava","commits":[{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelGroupByStream().mjava","sourceNew":"  private void testParallelRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"5\", \"a_f\", \"1\");\n    indexr(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"6\", \"a_f\", \"1\");\n    indexr(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"7\", \"a_f\", \"1\");\n    indexr(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"8\", \"a_f\", \"1\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"9\", \"a_f\", \"1\");\n    indexr(id, \"10\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 11, new DescFieldComp(\"a_i\"));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new DescFieldComp(\"a_i\"));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 10);\n    assertOrder(tuples, 10,9,8,7,6,5,4,3,2,0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testParallelGroupByStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_s asc\", \"partitionKeys\",\"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    GroupByStream gstream  = new GroupByStream(stream, new AscFieldComp(\"a_s\"), new AscFieldComp(\"a_i\"),5);\n    ParallelStream pstream = new ParallelStream(zkHost,\"collection1\", gstream, 2, new AscFieldComp(\"a_s\"));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,1,2);\n    assertGroupOrder(tuples.get(0),3,4);\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelRankStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"5\", \"a_f\", \"1\");\n    indexr(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"6\", \"a_f\", \"1\");\n    indexr(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"7\", \"a_f\", \"1\");\n    indexr(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"8\", \"a_f\", \"1\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"9\", \"a_f\", \"1\");\n    indexr(id, \"10\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 11, new DescFieldComp(\"a_i\"));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new DescFieldComp(\"a_i\"));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 10);\n    assertOrder(tuples, 10,9,8,7,6,5,4,3,2,0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6127e3b5c60a3982abec2dfd5c289d3f6a64194d","date":1428333164,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelRankStream().mjava","sourceNew":"  private void testParallelRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"5\", \"a_f\", \"1\");\n    indexr(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"6\", \"a_f\", \"1\");\n    indexr(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"7\", \"a_f\", \"1\");\n    indexr(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"8\", \"a_f\", \"1\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"9\", \"a_f\", \"1\");\n    indexr(id, \"10\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 11, new DescFieldComp(\"a_i\"));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new DescFieldComp(\"a_i\"));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 10);\n    assertOrder(tuples, 10,9,8,7,6,5,4,3,2,0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testParallelRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"5\", \"a_f\", \"1\");\n    indexr(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"6\", \"a_f\", \"1\");\n    indexr(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"7\", \"a_f\", \"1\");\n    indexr(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"8\", \"a_f\", \"1\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"9\", \"a_f\", \"1\");\n    indexr(id, \"10\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 11, new DescFieldComp(\"a_i\"));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new DescFieldComp(\"a_i\"));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 10);\n    assertOrder(tuples, 10,9,8,7,6,5,4,3,2,0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelRankStream().mjava","sourceNew":"  private void testParallelRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"5\", \"a_f\", \"1\");\n    indexr(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"6\", \"a_f\", \"1\");\n    indexr(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"7\", \"a_f\", \"1\");\n    indexr(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"8\", \"a_f\", \"1\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"9\", \"a_f\", \"1\");\n    indexr(id, \"10\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 11, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 10);\n    assertOrder(tuples, 10,9,8,7,6,5,4,3,2,0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testParallelRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"5\", \"a_f\", \"1\");\n    indexr(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"6\", \"a_f\", \"1\");\n    indexr(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"7\", \"a_f\", \"1\");\n    indexr(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"8\", \"a_f\", \"1\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"9\", \"a_f\", \"1\");\n    indexr(id, \"10\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 11, new DescFieldComp(\"a_i\"));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new DescFieldComp(\"a_i\"));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 10);\n    assertOrder(tuples, 10,9,8,7,6,5,4,3,2,0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["6127e3b5c60a3982abec2dfd5c289d3f6a64194d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6127e3b5c60a3982abec2dfd5c289d3f6a64194d":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6127e3b5c60a3982abec2dfd5c289d3f6a64194d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"6127e3b5c60a3982abec2dfd5c289d3f6a64194d":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}