{"path":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.info(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.info(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.info(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.info(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.info(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.info(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      for (SolrDocument doc : a.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n      for (SolrDocument doc : b.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.info(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      for (SolrDocument doc : a.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n      for (SolrDocument doc : b.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.info(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      for (SolrDocument doc : a.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n      for (SolrDocument doc : b.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.info(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      for (SolrDocument doc : a.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n      for (SolrDocument doc : b.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      Assert.fail(cmp);\n    }\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      for (SolrDocument doc : a.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n      for (SolrDocument doc : b.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      for (SolrDocument doc : a.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n      for (SolrDocument doc : b.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      Assert.fail(cmp);\n    }\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      for (SolrDocument doc : a.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n      for (SolrDocument doc : b.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      TestCase.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c197a6fac0ddfa4c18b4683b906f7e31e4c6652","date":1332881914,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      // TODO: this should prob be done by adding an ignore on _version_ rather than mutating the responses?\n      if (a.getResults() != null) {\n        for (SolrDocument doc : a.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n      if (b.getResults() != null) {\n        for (SolrDocument doc : b.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      Assert.fail(cmp);\n    }\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      for (SolrDocument doc : a.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n      for (SolrDocument doc : b.getResults()) {\n        doc.removeFields(\"_version_\");\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      Assert.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","date":1371479482,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      // TODO: this should prob be done by adding an ignore on _version_ rather than mutating the responses?\n      if (a.getResults() != null) {\n        for (SolrDocument doc : a.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n      if (b.getResults() != null) {\n        for (SolrDocument doc : b.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n    }\n    compareSolrResponses(a, b);\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      // TODO: this should prob be done by adding an ignore on _version_ rather than mutating the responses?\n      if (a.getResults() != null) {\n        for (SolrDocument doc : a.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n      if (b.getResults() != null) {\n        for (SolrDocument doc : b.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      Assert.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      // TODO: this should prob be done by adding an ignore on _version_ rather than mutating the responses?\n      if (a.getResults() != null) {\n        for (SolrDocument doc : a.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n      if (b.getResults() != null) {\n        for (SolrDocument doc : b.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n    }\n    compareSolrResponses(a, b);\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    String cmp;\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      // TODO: this should prob be done by adding an ignore on _version_ rather than mutating the responses?\n      if (a.getResults() != null) {\n        for (SolrDocument doc : a.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n      if (b.getResults() != null) {\n        for (SolrDocument doc : b.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n    }\n    cmp = compare(a.getResponse(), b.getResponse(), flags, handle);\n    if (cmp != null) {\n      log.error(\"Mismatched responses:\\n\" + a + \"\\n\" + b);\n      Assert.fail(cmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4d5fb9dcd0252c01091169ffebedebb249a1ec3","date":1501679239,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      // TODO: this should prob be done by adding an ignore on _version_ rather than mutating the responses?\n      if (a.getResults() != null) {\n        for (SolrDocument doc : a.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n      if (b.getResults() != null) {\n        for (SolrDocument doc : b.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n    }\n    { // we don't care if one has a warnings section in the header and the other doesn't - control vs distrib\n      if (a.getHeader() != null) {\n        a.getHeader().remove(\"warnings\");\n      }\n      if (b.getHeader() != null) {\n        b.getHeader().remove(\"warnings\");\n      }\n    }\n    compareSolrResponses(a, b);\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      // TODO: this should prob be done by adding an ignore on _version_ rather than mutating the responses?\n      if (a.getResults() != null) {\n        for (SolrDocument doc : a.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n      if (b.getResults() != null) {\n        for (SolrDocument doc : b.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n    }\n    compareSolrResponses(a, b);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compareResponses(QueryResponse,QueryResponse).mjava","sourceNew":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      // TODO: this should prob be done by adding an ignore on _version_ rather than mutating the responses?\n      if (a.getResults() != null) {\n        for (SolrDocument doc : a.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n      if (b.getResults() != null) {\n        for (SolrDocument doc : b.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n    }\n    { // we don't care if one has a warnings section in the header and the other doesn't - control vs distrib\n      if (a.getHeader() != null) {\n        a.getHeader().remove(\"warnings\");\n      }\n      if (b.getHeader() != null) {\n        b.getHeader().remove(\"warnings\");\n      }\n    }\n    compareSolrResponses(a, b);\n  }\n\n","sourceOld":"  protected void compareResponses(QueryResponse a, QueryResponse b) {\n    if (System.getProperty(\"remove.version.field\") != null) {\n      // we don't care if one has a version and the other doesnt -\n      // control vs distrib\n      // TODO: this should prob be done by adding an ignore on _version_ rather than mutating the responses?\n      if (a.getResults() != null) {\n        for (SolrDocument doc : a.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n      if (b.getResults() != null) {\n        for (SolrDocument doc : b.getResults()) {\n          doc.removeFields(\"_version_\");\n        }\n      }\n    }\n    compareSolrResponses(a, b);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["0c197a6fac0ddfa4c18b4683b906f7e31e4c6652"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["0c197a6fac0ddfa4c18b4683b906f7e31e4c6652","2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","f4d5fb9dcd0252c01091169ffebedebb249a1ec3"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c197a6fac0ddfa4c18b4683b906f7e31e4c6652":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4d5fb9dcd0252c01091169ffebedebb249a1ec3":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4d5fb9dcd0252c01091169ffebedebb249a1ec3"]},"commit2Childs":{"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","f4d5fb9dcd0252c01091169ffebedebb249a1ec3"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0c197a6fac0ddfa4c18b4683b906f7e31e4c6652"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"0c197a6fac0ddfa4c18b4683b906f7e31e4c6652":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f4d5fb9dcd0252c01091169ffebedebb249a1ec3":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}