{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].val_ =\n          prevVal == null || Math.abs(((Number) prevVal).longValue() - ((Number) row.cells[idx].val).longValue()) > precision ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].val_ =\n          prevVal == null || Math.abs(((Number) prevVal).longValue() - ((Number) row.cells[idx].val).longValue()) > precision ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          prevVal == null || Math.abs(((Number) prevVal).longValue() - ((Number) row.cells[idx].val).longValue()) > precision ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].val_ =\n          prevVal == null || Math.abs(((Number) prevVal).longValue() - ((Number) row.cells[idx].val).longValue()) > precision ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          prevVal == null || Math.abs(((Number) prevVal).longValue() - ((Number) row.cells[idx].val).longValue()) > precision ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          prevVal == null || Math.abs(((Number) prevVal).longValue() - ((Number) row.cells[idx].val).longValue()) > precision ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          prevVal == null || Math.abs(((Number) prevVal).longValue() - ((Number) row.cells[idx].val).longValue()) > precision ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["8aa61ea06d4d27acb465d77e15f20aae84531d73","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["a513b6a92751e54c76fb5447948c9e7d437163a7"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}