{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final InvertedFields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final InvertedFields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes())) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes())) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes())) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}