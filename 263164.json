{"path":"src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","commits":[{"id":"d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e","date":1260705517,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}