{"path":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","commits":[{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned.\n   * \n   * @param path\n   * @param rawLockType\n   * @param forceNew\n   * @return\n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4281584355bbe0d25a40eb7990ca2184a954bfa6","date":1313725067,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned.\n   * \n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned.\n   * \n   * @param path\n   * @param rawLockType\n   * @param forceNew\n   * @return\n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4897c5b415f476d84ec970a19c41510645887526","date":1342627582,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned.\n   * \n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned.\n   * \n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned.\n   * \n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,DirContext,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path,  DirContext dirContext, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,DirContext,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path,  DirContext dirContext, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4897c5b415f476d84ec970a19c41510645887526"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4281584355bbe0d25a40eb7990ca2184a954bfa6","4897c5b415f476d84ec970a19c41510645887526"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4281584355bbe0d25a40eb7990ca2184a954bfa6","4897c5b415f476d84ec970a19c41510645887526"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"4281584355bbe0d25a40eb7990ca2184a954bfa6":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4897c5b415f476d84ec970a19c41510645887526":["4281584355bbe0d25a40eb7990ca2184a954bfa6"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["8917bfede3b4ca30f4305c1e391e9218959cd723","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"4281584355bbe0d25a40eb7990ca2184a954bfa6":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","4897c5b415f476d84ec970a19c41510645887526"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"4897c5b415f476d84ec970a19c41510645887526":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["4281584355bbe0d25a40eb7990ca2184a954bfa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","8917bfede3b4ca30f4305c1e391e9218959cd723","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}