{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#suggestNegativeViolations(Suggestion.Ctx,Function[Set[String],List[String]]).mjava","commits":[{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#suggestNegativeViolations(Suggestion.Ctx,Function[Set[String],List[String]]).mjava","pathOld":"/dev/null","sourceNew":"  static void suggestNegativeViolations(Suggestion.Ctx ctx, Function<Set<String>, List<String>> shardSorter) {\n    if (ctx.violation.coll == null) return;\n    Set<String> shardSet = new HashSet<>();\n    for (Row node : ctx.session.matrix)\n      node.forEachShard(ctx.violation.coll, (s, ri) -> {\n        if (Policy.ANY.equals(ctx.violation.shard) || s.equals(ctx.violation.shard)) shardSet.add(s);\n      });\n    //Now, sort shards based on their index size ascending\n    List<String> shards = shardSorter.apply(shardSet);\n    outer:\n    for (int i = 0; i < 5; i++) {\n      int totalSuggestions = 0;\n      for (String shard : shards) {\n        Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n            .hint(Suggester.Hint.COLL_SHARD, new Pair<>(ctx.violation.coll, shard))\n            .forceOperation(true);\n        SolrRequest op = ctx.addSuggestion(suggester);\n        if (op == null) continue;\n        totalSuggestions++;\n        boolean violationStillExists = false;\n        for (Violation violation : suggester.session.getViolations()) {\n          if (violation.getClause().original == ctx.violation.getClause().original) {\n            violationStillExists = true;\n            break;\n          }\n        }\n        if (!violationStillExists) break outer;\n      }\n      if (totalSuggestions == 0) break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#suggestNegativeViolations(Suggestion.Ctx,Function[Set[String],List[String]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#suggestNegativeViolations(Suggestion.Ctx,Function[Set[String],List[String]]).mjava","sourceNew":"  static void suggestNegativeViolations(Suggestion.Ctx ctx, Function<Set<String>, List<String>> shardSorter) {\n    if (ctx.violation.coll == null) return;\n    Set<String> shardSet = new HashSet<>();\n    if (!ctx.needMore()) return;\n    for (Row node : ctx.session.matrix)\n      node.forEachShard(ctx.violation.coll, (s, ri) -> {\n        if (Policy.ANY.equals(ctx.violation.shard) || s.equals(ctx.violation.shard)) shardSet.add(s);\n      });\n    //Now, sort shards based on their index size ascending\n    List<String> shards = shardSorter.apply(shardSet);\n    outer:\n    for (int i = 0; i < 5; i++) {\n      if (!ctx.needMore()) break;\n      int totalSuggestions = 0;\n      for (String shard : shards) {\n        Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n            .hint(Suggester.Hint.COLL_SHARD, new Pair<>(ctx.violation.coll, shard))\n            .forceOperation(true);\n        SolrRequest op = ctx.addSuggestion(suggester);\n        if (op == null) continue;\n        totalSuggestions++;\n        boolean violationStillExists = false;\n        for (Violation violation : suggester.session.getViolations()) {\n          if (violation.getClause().original == ctx.violation.getClause().original) {\n            violationStillExists = true;\n            break;\n          }\n        }\n        if (!violationStillExists) break outer;\n      }\n      if (totalSuggestions == 0) break;\n    }\n  }\n\n","sourceOld":"  static void suggestNegativeViolations(Suggestion.Ctx ctx, Function<Set<String>, List<String>> shardSorter) {\n    if (ctx.violation.coll == null) return;\n    Set<String> shardSet = new HashSet<>();\n    for (Row node : ctx.session.matrix)\n      node.forEachShard(ctx.violation.coll, (s, ri) -> {\n        if (Policy.ANY.equals(ctx.violation.shard) || s.equals(ctx.violation.shard)) shardSet.add(s);\n      });\n    //Now, sort shards based on their index size ascending\n    List<String> shards = shardSorter.apply(shardSet);\n    outer:\n    for (int i = 0; i < 5; i++) {\n      int totalSuggestions = 0;\n      for (String shard : shards) {\n        Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n            .hint(Suggester.Hint.COLL_SHARD, new Pair<>(ctx.violation.coll, shard))\n            .forceOperation(true);\n        SolrRequest op = ctx.addSuggestion(suggester);\n        if (op == null) continue;\n        totalSuggestions++;\n        boolean violationStillExists = false;\n        for (Violation violation : suggester.session.getViolations()) {\n          if (violation.getClause().original == ctx.violation.getClause().original) {\n            violationStillExists = true;\n            break;\n          }\n        }\n        if (!violationStillExists) break outer;\n      }\n      if (totalSuggestions == 0) break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#suggestNegativeViolations(Suggestion.Ctx,Function[Set[String],List[String]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#suggestNegativeViolations(Suggestion.Ctx,Function[Set[String],List[String]]).mjava","sourceNew":"  static void suggestNegativeViolations(Suggestion.Ctx ctx, Function<Set<String>, List<String>> shardSorter) {\n    if (ctx.violation.coll == null) return;\n    Set<String> shardSet = new HashSet<>();\n    if (!ctx.needMore()) return;\n    for (Row node : ctx.session.matrix)\n      node.forEachShard(ctx.violation.coll, (s, ri) -> {\n        if (Policy.ANY.equals(ctx.violation.shard) || s.equals(ctx.violation.shard)) shardSet.add(s);\n      });\n    //Now, sort shards based on their index size ascending\n    List<String> shards = shardSorter.apply(shardSet);\n    outer:\n    for (int i = 0; i < 5; i++) {\n      if (!ctx.needMore()) break;\n      int totalSuggestions = 0;\n      for (String shard : shards) {\n        Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n            .hint(Suggester.Hint.COLL_SHARD, new Pair<>(ctx.violation.coll, shard))\n            .forceOperation(true);\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest op = ctx.addSuggestion(suggester);\n        if (op == null) continue;\n        totalSuggestions++;\n        boolean violationStillExists = false;\n        for (Violation violation : suggester.session.getViolations()) {\n          if (violation.getClause().original == ctx.violation.getClause().original) {\n            violationStillExists = true;\n            break;\n          }\n        }\n        if (!violationStillExists) break outer;\n      }\n      if (totalSuggestions == 0) break;\n    }\n  }\n\n","sourceOld":"  static void suggestNegativeViolations(Suggestion.Ctx ctx, Function<Set<String>, List<String>> shardSorter) {\n    if (ctx.violation.coll == null) return;\n    Set<String> shardSet = new HashSet<>();\n    if (!ctx.needMore()) return;\n    for (Row node : ctx.session.matrix)\n      node.forEachShard(ctx.violation.coll, (s, ri) -> {\n        if (Policy.ANY.equals(ctx.violation.shard) || s.equals(ctx.violation.shard)) shardSet.add(s);\n      });\n    //Now, sort shards based on their index size ascending\n    List<String> shards = shardSorter.apply(shardSet);\n    outer:\n    for (int i = 0; i < 5; i++) {\n      if (!ctx.needMore()) break;\n      int totalSuggestions = 0;\n      for (String shard : shards) {\n        Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n            .hint(Suggester.Hint.COLL_SHARD, new Pair<>(ctx.violation.coll, shard))\n            .forceOperation(true);\n        SolrRequest op = ctx.addSuggestion(suggester);\n        if (op == null) continue;\n        totalSuggestions++;\n        boolean violationStillExists = false;\n        for (Violation violation : suggester.session.getViolations()) {\n          if (violation.getClause().original == ctx.violation.getClause().original) {\n            violationStillExists = true;\n            break;\n          }\n        }\n        if (!violationStillExists) break outer;\n      }\n      if (totalSuggestions == 0) break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#suggestNegativeViolations(Suggestion.Ctx,Function[Set[String],List[String]]).mjava","sourceNew":null,"sourceOld":"  static void suggestNegativeViolations(Suggestion.Ctx ctx, Function<Set<String>, List<String>> shardSorter) {\n    if (ctx.violation.coll == null) return;\n    Set<String> shardSet = new HashSet<>();\n    if (!ctx.needMore()) return;\n    for (Row node : ctx.session.matrix)\n      node.forEachShard(ctx.violation.coll, (s, ri) -> {\n        if (Policy.ANY.equals(ctx.violation.shard) || s.equals(ctx.violation.shard)) shardSet.add(s);\n      });\n    //Now, sort shards based on their index size ascending\n    List<String> shards = shardSorter.apply(shardSet);\n    outer:\n    for (int i = 0; i < 5; i++) {\n      if (!ctx.needMore()) break;\n      int totalSuggestions = 0;\n      for (String shard : shards) {\n        Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n            .hint(Suggester.Hint.COLL_SHARD, new Pair<>(ctx.violation.coll, shard))\n            .forceOperation(true);\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest op = ctx.addSuggestion(suggester);\n        if (op == null) continue;\n        totalSuggestions++;\n        boolean violationStillExists = false;\n        for (Violation violation : suggester.session.getViolations()) {\n          if (violation.getClause().original == ctx.violation.getClause().original) {\n            violationStillExists = true;\n            break;\n          }\n        }\n        if (!violationStillExists) break outer;\n      }\n      if (totalSuggestions == 0) break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["527adea7ce767368d7317339023e18e39702132e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}