{"path":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],MergeState.DocMap[],DocValues[],MergeContext).mjava","commits":[{"id":"e25729298aefe258b77e1b2676ae1088c1a2c49d","date":1338320376,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],MergeState.DocMap[],DocValues[],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],int[][],DocValues[],MergeContext).mjava","sourceNew":"  public static List<SortedSourceSlice> buildSlices(\n      int[] docBases, MergeState.DocMap[] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  public static List<SortedSourceSlice> buildSlices(int[] docBases, int[][] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14aed69f37b57db63b1fccc0740b17060a08f2b","date":1348227091,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],MergeState.DocMap[],DocValues[],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],MergeState.DocMap[],DocValues[],MergeContext).mjava","sourceNew":"  /** Creates the {@link SortedSourceSlice}s for\n   *  merging. */\n  public static List<SortedSourceSlice> buildSlices(\n      int[] docBases, MergeState.DocMap[] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  public static List<SortedSourceSlice> buildSlices(\n      int[] docBases, MergeState.DocMap[] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],MergeState.DocMap[],DocValues[],MergeContext).mjava","sourceNew":null,"sourceOld":"  /** Creates the {@link SortedSourceSlice}s for\n   *  merging. */\n  public static List<SortedSourceSlice> buildSlices(\n      int[] docBases, MergeState.DocMap[] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],MergeState.DocMap[],DocValues[],MergeContext).mjava","sourceNew":null,"sourceOld":"  /** Creates the {@link SortedSourceSlice}s for\n   *  merging. */\n  public static List<SortedSourceSlice> buildSlices(\n      int[] docBases, MergeState.DocMap[] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e25729298aefe258b77e1b2676ae1088c1a2c49d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c14aed69f37b57db63b1fccc0740b17060a08f2b","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["e25729298aefe258b77e1b2676ae1088c1a2c49d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"e25729298aefe258b77e1b2676ae1088c1a2c49d":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e25729298aefe258b77e1b2676ae1088c1a2c49d"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}