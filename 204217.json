{"path":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","commits":[{"id":"432127b09840b2b70209e404d242e7029421ef0a","date":1280433941,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","pathOld":"/dev/null","sourceNew":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList res = new SimpleOrderedMap();\n    final NamedList counts = new SimpleOrderedMap();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","pathOld":"/dev/null","sourceNew":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList res = new SimpleOrderedMap();\n    final NamedList counts = new SimpleOrderedMap();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755f2f419306d7297c8feee10d1897addf4b2dd0","date":1294442354,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","sourceNew":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new SimpleOrderedMap<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","sourceOld":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList res = new SimpleOrderedMap();\n    final NamedList counts = new SimpleOrderedMap();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","sourceNew":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new SimpleOrderedMap<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","sourceOld":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList res = new SimpleOrderedMap();\n    final NamedList counts = new SimpleOrderedMap();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4e6f900acc549e157fedb4ce21e4e85a34d75ed","date":1295910238,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","sourceNew":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new NamedList<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","sourceOld":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new SimpleOrderedMap<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","sourceNew":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new NamedList<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","sourceOld":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList res = new SimpleOrderedMap();\n    final NamedList counts = new SimpleOrderedMap();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","sourceNew":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new NamedList<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","sourceOld":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new SimpleOrderedMap<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","sourceNew":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new NamedList<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","sourceOld":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new NamedList<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","sourceNew":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new NamedList<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","sourceOld":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new NamedList<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCounts(SchemaField,RangeEndpointCalculator[T]).mjava","sourceNew":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new NamedList<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","sourceOld":"  private <T extends Comparable<T>> NamedList getFacetRangeCounts\n    (final SchemaField sf, \n     final RangeEndpointCalculator<T> calc) throws IOException {\n    \n    final String f = sf.getName();\n    final NamedList<Object> res = new SimpleOrderedMap<Object>();\n    final NamedList<Integer> counts = new NamedList<Integer>();\n    res.add(\"counts\", counts);\n\n    final T start = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_START));\n    // not final, hardend may change this\n    T end = calc.getValue(required.getFieldParam(f,FacetParams.FACET_RANGE_END));\n    if (end.compareTo(start) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n    }\n    \n    final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n    // explicitly return the gap.  compute this early so we are more \n    // likely to catch parse errors before attempting math\n    res.add(\"gap\", calc.getGap(gap));\n    \n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n    \n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n      (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n    \n    T low = start;\n    \n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      \n      final boolean includeLower = \n        (include.contains(FacetRangeInclude.LOWER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == low.compareTo(start)));\n      final boolean includeUpper = \n        (include.contains(FacetRangeInclude.UPPER) ||\n         (include.contains(FacetRangeInclude.EDGE) && \n          0 == high.compareTo(end)));\n      \n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      final int count = rangeCount(sf, lowS, highS,\n                                   includeLower,includeUpper);\n      if (count >= minCount) {\n        counts.add(lowS, count);\n      }\n      \n      low = high;\n    }\n    \n    // explicitly return the start and end so all the counts \n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    res.add(\"start\", start);\n    res.add(\"end\", end);\n    \n    final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n      \n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n      \n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        \n        boolean all = others.contains(FacetRangeOther.ALL);\n        final String startS = calc.formatValue(start);\n        final String endS = calc.formatValue(end);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          res.add(FacetRangeOther.BEFORE.toString(),\n                  rangeCount(sf,null,startS,\n                             false,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.LOWER) ||\n                                  include.contains(FacetRangeInclude.EDGE))))));\n          \n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          res.add(FacetRangeOther.AFTER.toString(),\n                  rangeCount(sf,endS,null,\n                             (include.contains(FacetRangeInclude.OUTER) ||\n                              (! (include.contains(FacetRangeInclude.UPPER) ||\n                                  include.contains(FacetRangeInclude.EDGE)))),  \n                             false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n         res.add(FacetRangeOther.BETWEEN.toString(),\n                 rangeCount(sf,startS,endS,\n                            (include.contains(FacetRangeInclude.LOWER) ||\n                             include.contains(FacetRangeInclude.EDGE)),\n                            (include.contains(FacetRangeInclude.UPPER) ||\n                             include.contains(FacetRangeInclude.EDGE))));\n         \n        }\n      }\n    }\n    return res;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["f4e6f900acc549e157fedb4ce21e4e85a34d75ed"],"f4e6f900acc549e157fedb4ce21e4e85a34d75ed":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["432127b09840b2b70209e404d242e7029421ef0a"],"c26f00b574427b55127e869b935845554afde1fa":["f4e6f900acc549e157fedb4ce21e4e85a34d75ed","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["432127b09840b2b70209e404d242e7029421ef0a","f4e6f900acc549e157fedb4ce21e4e85a34d75ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f4e6f900acc549e157fedb4ce21e4e85a34d75ed"],"432127b09840b2b70209e404d242e7029421ef0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","432127b09840b2b70209e404d242e7029421ef0a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","755f2f419306d7297c8feee10d1897addf4b2dd0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","f4e6f900acc549e157fedb4ce21e4e85a34d75ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"f4e6f900acc549e157fedb4ce21e4e85a34d75ed":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["f4e6f900acc549e157fedb4ce21e4e85a34d75ed","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["432127b09840b2b70209e404d242e7029421ef0a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"432127b09840b2b70209e404d242e7029421ef0a":["755f2f419306d7297c8feee10d1897addf4b2dd0","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}