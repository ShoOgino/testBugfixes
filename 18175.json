{"path":"lucene/core/src/test/org/apache/lucene/store/TestSingleInstanceLockFactory#testDefaultRAMDirectory().mjava","commits":[{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestSingleInstanceLockFactory#testDefaultRAMDirectory().mjava","pathOld":"/dev/null","sourceNew":"  // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n  // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n  public void testDefaultRAMDirectory() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    \n    assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.lockFactory,\n        dir.lockFactory instanceof SingleInstanceLockFactory);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n    \n    // Create a 2nd IndexWriter.  This should fail:\n    IndexWriter writer2 = null;\n    try {\n      writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n      fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n    } catch (IOException e) {\n    }\n    \n    writer.close();\n    if (writer2 != null) {\n      writer2.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestSingleInstanceLockFactory#testDefaultRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestSingleInstanceLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"  // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n  // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n  public void testDefaultRAMDirectory() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    \n    assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.lockFactory,\n        dir.lockFactory instanceof SingleInstanceLockFactory);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n    \n    // Create a 2nd IndexWriter.  This should fail:\n    expectThrows(IOException.class, () -> {\n      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    });\n    \n    writer.close();\n  }\n\n","sourceOld":"  // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n  // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n  public void testDefaultRAMDirectory() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    \n    assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.lockFactory,\n        dir.lockFactory instanceof SingleInstanceLockFactory);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n    \n    // Create a 2nd IndexWriter.  This should fail:\n    IndexWriter writer2 = null;\n    try {\n      writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n      fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n    } catch (IOException e) {\n    }\n    \n    writer.close();\n    if (writer2 != null) {\n      writer2.close();\n    }\n  }\n\n","bugFix":["618635065f043788c9e034f96ca5cd5cea1b4592"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestSingleInstanceLockFactory#testDefaultLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestSingleInstanceLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"  // Verify: basic locking on single instance lock factory (can't create two IndexWriters)\n  public void testDefaultLockFactory() throws IOException {\n    ByteBuffersDirectory dir = new ByteBuffersDirectory();\n\n    assertTrue(dir.lockFactory instanceof SingleInstanceLockFactory);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n    \n    // Create a 2nd IndexWriter.  This should fail.\n    expectThrows(IOException.class, () -> {\n      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    });\n    \n    writer.close();\n  }\n\n","sourceOld":"  // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n  // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n  public void testDefaultRAMDirectory() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    \n    assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.lockFactory,\n        dir.lockFactory instanceof SingleInstanceLockFactory);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n    \n    // Create a 2nd IndexWriter.  This should fail:\n    expectThrows(IOException.class, () -> {\n      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    });\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["618635065f043788c9e034f96ca5cd5cea1b4592"],"d77dafd89756a5161d244985903e3487ca109182":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["618635065f043788c9e034f96ca5cd5cea1b4592"],"05fe562aa248790944d43cdd478f512572835ba0":["d77dafd89756a5161d244985903e3487ca109182"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}