{"path":"lucene/core/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,TermsHashConsumer,boolean,TermsHash).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,TermsHashConsumer,boolean,TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,TermsHashConsumer,boolean,TermsHash).mjava","sourceNew":"  public TermsHash(final DocumentsWriterPerThread docWriter, final TermsHashConsumer consumer, boolean trackAllocations, final TermsHash nextTermsHash) {\n    this.docState = docWriter.docState;\n    this.docWriter = docWriter;\n    this.consumer = consumer;\n    this.trackAllocations = trackAllocations; \n    this.nextTermsHash = nextTermsHash;\n    intPool = new IntBlockPool(docWriter);\n    bytePool = new ByteBlockPool(docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n      nextTermsHash.termBytePool = bytePool;\n    } else {\n      primary = false;\n    }\n  }\n\n","sourceOld":"  public TermsHash(final DocumentsWriterPerThread docWriter, final TermsHashConsumer consumer, boolean trackAllocations, final TermsHash nextTermsHash) {\n    this.docState = docWriter.docState;\n    this.docWriter = docWriter;\n    this.consumer = consumer;\n    this.trackAllocations = trackAllocations; \n    this.nextTermsHash = nextTermsHash;\n    intPool = new IntBlockPool(docWriter);\n    bytePool = new ByteBlockPool(docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n      nextTermsHash.termBytePool = bytePool;\n    } else {\n      primary = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,TermsHashConsumer,boolean,TermsHash).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,TermsHashConsumer,boolean,TermsHash).mjava","sourceNew":"  public TermsHash(final DocumentsWriterPerThread docWriter, final TermsHashConsumer consumer, boolean trackAllocations, final TermsHash nextTermsHash) {\n    this.docState = docWriter.docState;\n    this.consumer = consumer;\n    this.trackAllocations = trackAllocations; \n    this.nextTermsHash = nextTermsHash;\n    this.bytesUsed = trackAllocations ? docWriter.bytesUsed : Counter.newCounter();\n    intPool = new IntBlockPool(docWriter.intBlockAllocator);\n    bytePool = new ByteBlockPool(docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n      nextTermsHash.termBytePool = bytePool;\n    } else {\n      primary = false;\n    }\n  }\n\n","sourceOld":"  public TermsHash(final DocumentsWriterPerThread docWriter, final TermsHashConsumer consumer, boolean trackAllocations, final TermsHash nextTermsHash) {\n    this.docState = docWriter.docState;\n    this.docWriter = docWriter;\n    this.consumer = consumer;\n    this.trackAllocations = trackAllocations; \n    this.nextTermsHash = nextTermsHash;\n    intPool = new IntBlockPool(docWriter);\n    bytePool = new ByteBlockPool(docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n      nextTermsHash.termBytePool = bytePool;\n    } else {\n      primary = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,boolean,TermsHash).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,TermsHashConsumer,boolean,TermsHash).mjava","sourceNew":"  TermsHash(final DocumentsWriterPerThread docWriter, boolean trackAllocations, TermsHash nextTermsHash) {\n    this.docState = docWriter.docState;\n    this.trackAllocations = trackAllocations; \n    this.nextTermsHash = nextTermsHash;\n    this.bytesUsed = trackAllocations ? docWriter.bytesUsed : Counter.newCounter();\n    intPool = new IntBlockPool(docWriter.intBlockAllocator);\n    bytePool = new ByteBlockPool(docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      termBytePool = bytePool;\n      nextTermsHash.termBytePool = bytePool;\n    }\n  }\n\n","sourceOld":"  public TermsHash(final DocumentsWriterPerThread docWriter, final TermsHashConsumer consumer, boolean trackAllocations, final TermsHash nextTermsHash) {\n    this.docState = docWriter.docState;\n    this.consumer = consumer;\n    this.trackAllocations = trackAllocations; \n    this.nextTermsHash = nextTermsHash;\n    this.bytesUsed = trackAllocations ? docWriter.bytesUsed : Counter.newCounter();\n    intPool = new IntBlockPool(docWriter.intBlockAllocator);\n    bytePool = new ByteBlockPool(docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n      nextTermsHash.termBytePool = bytePool;\n    } else {\n      primary = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,boolean,TermsHash).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,TermsHashConsumer,boolean,TermsHash).mjava","sourceNew":"  TermsHash(final DocumentsWriterPerThread docWriter, boolean trackAllocations, TermsHash nextTermsHash) {\n    this.docState = docWriter.docState;\n    this.trackAllocations = trackAllocations; \n    this.nextTermsHash = nextTermsHash;\n    this.bytesUsed = trackAllocations ? docWriter.bytesUsed : Counter.newCounter();\n    intPool = new IntBlockPool(docWriter.intBlockAllocator);\n    bytePool = new ByteBlockPool(docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      termBytePool = bytePool;\n      nextTermsHash.termBytePool = bytePool;\n    }\n  }\n\n","sourceOld":"  public TermsHash(final DocumentsWriterPerThread docWriter, final TermsHashConsumer consumer, boolean trackAllocations, final TermsHash nextTermsHash) {\n    this.docState = docWriter.docState;\n    this.consumer = consumer;\n    this.trackAllocations = trackAllocations; \n    this.nextTermsHash = nextTermsHash;\n    this.bytesUsed = trackAllocations ? docWriter.bytesUsed : Counter.newCounter();\n    intPool = new IntBlockPool(docWriter.intBlockAllocator);\n    bytePool = new ByteBlockPool(docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n      nextTermsHash.termBytePool = bytePool;\n    } else {\n      primary = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,boolean,TermsHash).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriterPerThread,TermsHashConsumer,boolean,TermsHash).mjava","sourceNew":"  TermsHash(final DocumentsWriterPerThread docWriter, boolean trackAllocations, TermsHash nextTermsHash) {\n    this.docState = docWriter.docState;\n    this.trackAllocations = trackAllocations; \n    this.nextTermsHash = nextTermsHash;\n    this.bytesUsed = trackAllocations ? docWriter.bytesUsed : Counter.newCounter();\n    intPool = new IntBlockPool(docWriter.intBlockAllocator);\n    bytePool = new ByteBlockPool(docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      termBytePool = bytePool;\n      nextTermsHash.termBytePool = bytePool;\n    }\n  }\n\n","sourceOld":"  public TermsHash(final DocumentsWriterPerThread docWriter, final TermsHashConsumer consumer, boolean trackAllocations, final TermsHash nextTermsHash) {\n    this.docState = docWriter.docState;\n    this.consumer = consumer;\n    this.trackAllocations = trackAllocations; \n    this.nextTermsHash = nextTermsHash;\n    this.bytesUsed = trackAllocations ? docWriter.bytesUsed : Counter.newCounter();\n    intPool = new IntBlockPool(docWriter.intBlockAllocator);\n    bytePool = new ByteBlockPool(docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n      nextTermsHash.termBytePool = bytePool;\n    } else {\n      primary = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52c7e49be259508735752fba88085255014a6ecf":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}