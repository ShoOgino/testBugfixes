{"path":"lucene/core/src/java/org/apache/lucene/index/DimensionalValuesWriter#flush(SegmentWriteState,DimensionalWriter).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DimensionalValuesWriter#flush(SegmentWriteState,DimensionalWriter).mjava","pathOld":"/dev/null","sourceNew":"  public void flush(SegmentWriteState state, DimensionalWriter writer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    writer.writeField(fieldInfo,\n                      new DimensionalReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                      });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecf331f9d7bdd234863d2df2bb5c1f019979422f","date":1452250335,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DimensionalValuesWriter#flush(SegmentWriteState,DimensionalWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DimensionalValuesWriter#flush(SegmentWriteState,DimensionalWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, DimensionalWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new DimensionalReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, DimensionalWriter writer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    writer.writeField(fieldInfo,\n                      new DimensionalReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DimensionalValuesWriter#flush(SegmentWriteState,DimensionalWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, DimensionalWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new DimensionalReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}