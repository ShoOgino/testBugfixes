{"path":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","commits":[{"id":"05c52ac194342b760b830342ee8423fcf00e54d0","date":1429197275,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtractTerms() throws Exception {\n    final IndexSearcher searcher = newSearcher(new MultiReader());\n    final TermQuery termQuery = new TermQuery(new Term(\"foo\", \"bar\"));\n    final ConstantScoreQuery csq = new ConstantScoreQuery(termQuery);\n\n    final Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, true).extractTerms(scoringTerms);\n    assertEquals(Collections.emptySet(), scoringTerms);\n\n    final Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, false).extractTerms(matchingTerms);\n    assertEquals(Collections.singleton(new Term(\"foo\", \"bar\")), matchingTerms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","sourceNew":"  public void testExtractTerms() throws Exception {\n    final IndexSearcher searcher = newSearcher(new MultiReader());\n    final TermQuery termQuery = new TermQuery(new Term(\"foo\", \"bar\"));\n    final ConstantScoreQuery csq = new ConstantScoreQuery(termQuery);\n\n    final Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, ScoreMode.COMPLETE).extractTerms(scoringTerms);\n    assertEquals(Collections.emptySet(), scoringTerms);\n\n    final Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, ScoreMode.COMPLETE_NO_SCORES).extractTerms(matchingTerms);\n    assertEquals(Collections.singleton(new Term(\"foo\", \"bar\")), matchingTerms);\n  }\n\n","sourceOld":"  public void testExtractTerms() throws Exception {\n    final IndexSearcher searcher = newSearcher(new MultiReader());\n    final TermQuery termQuery = new TermQuery(new Term(\"foo\", \"bar\"));\n    final ConstantScoreQuery csq = new ConstantScoreQuery(termQuery);\n\n    final Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, true).extractTerms(scoringTerms);\n    assertEquals(Collections.emptySet(), scoringTerms);\n\n    final Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, false).extractTerms(matchingTerms);\n    assertEquals(Collections.singleton(new Term(\"foo\", \"bar\")), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","sourceNew":"  public void testExtractTerms() throws Exception {\n    final IndexSearcher searcher = newSearcher(new MultiReader());\n    final TermQuery termQuery = new TermQuery(new Term(\"foo\", \"bar\"));\n    final ConstantScoreQuery csq = new ConstantScoreQuery(termQuery);\n\n    final Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, ScoreMode.COMPLETE).extractTerms(scoringTerms);\n    assertEquals(Collections.emptySet(), scoringTerms);\n\n    final Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, ScoreMode.COMPLETE_NO_SCORES).extractTerms(matchingTerms);\n    assertEquals(Collections.singleton(new Term(\"foo\", \"bar\")), matchingTerms);\n  }\n\n","sourceOld":"  public void testExtractTerms() throws Exception {\n    final IndexSearcher searcher = newSearcher(new MultiReader());\n    final TermQuery termQuery = new TermQuery(new Term(\"foo\", \"bar\"));\n    final ConstantScoreQuery csq = new ConstantScoreQuery(termQuery);\n\n    final Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, true).extractTerms(scoringTerms);\n    assertEquals(Collections.emptySet(), scoringTerms);\n\n    final Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, false).extractTerms(matchingTerms);\n    assertEquals(Collections.singleton(new Term(\"foo\", \"bar\")), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","sourceNew":"  public void testExtractTerms() throws Exception {\n    final IndexSearcher searcher = newSearcher(new MultiReader());\n    final TermQuery termQuery = new TermQuery(new Term(\"foo\", \"bar\"));\n    final Query csq = searcher.rewrite(new ConstantScoreQuery(termQuery));\n\n    final Set<Term> scoringTerms = new HashSet<>();\n    searcher.createWeight(csq, ScoreMode.COMPLETE, 1).extractTerms(scoringTerms);\n    assertEquals(Collections.emptySet(), scoringTerms);\n\n    final Set<Term> matchingTerms = new HashSet<>();\n    searcher.createWeight(csq, ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(matchingTerms);\n    assertEquals(Collections.singleton(new Term(\"foo\", \"bar\")), matchingTerms);\n  }\n\n","sourceOld":"  public void testExtractTerms() throws Exception {\n    final IndexSearcher searcher = newSearcher(new MultiReader());\n    final TermQuery termQuery = new TermQuery(new Term(\"foo\", \"bar\"));\n    final ConstantScoreQuery csq = new ConstantScoreQuery(termQuery);\n\n    final Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, ScoreMode.COMPLETE).extractTerms(scoringTerms);\n    assertEquals(Collections.emptySet(), scoringTerms);\n\n    final Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, ScoreMode.COMPLETE_NO_SCORES).extractTerms(matchingTerms);\n    assertEquals(Collections.singleton(new Term(\"foo\", \"bar\")), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","sourceNew":"  public void testExtractTerms() throws Exception {\n    final IndexSearcher searcher = newSearcher(new MultiReader());\n    final TermQuery termQuery = new TermQuery(new Term(\"foo\", \"bar\"));\n    final Query csq = searcher.rewrite(new ConstantScoreQuery(termQuery));\n\n    final Set<Term> scoringTerms = new HashSet<>();\n    searcher.createWeight(csq, ScoreMode.COMPLETE, 1).extractTerms(scoringTerms);\n    assertEquals(Collections.emptySet(), scoringTerms);\n\n    final Set<Term> matchingTerms = new HashSet<>();\n    searcher.createWeight(csq, ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(matchingTerms);\n    assertEquals(Collections.singleton(new Term(\"foo\", \"bar\")), matchingTerms);\n  }\n\n","sourceOld":"  public void testExtractTerms() throws Exception {\n    final IndexSearcher searcher = newSearcher(new MultiReader());\n    final TermQuery termQuery = new TermQuery(new Term(\"foo\", \"bar\"));\n    final ConstantScoreQuery csq = new ConstantScoreQuery(termQuery);\n\n    final Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, ScoreMode.COMPLETE).extractTerms(scoringTerms);\n    assertEquals(Collections.emptySet(), scoringTerms);\n\n    final Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(csq, ScoreMode.COMPLETE_NO_SCORES).extractTerms(matchingTerms);\n    assertEquals(Collections.singleton(new Term(\"foo\", \"bar\")), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testExtractTerms().mjava","sourceNew":null,"sourceOld":"  public void testExtractTerms() throws Exception {\n    final IndexSearcher searcher = newSearcher(new MultiReader());\n    final TermQuery termQuery = new TermQuery(new Term(\"foo\", \"bar\"));\n    final Query csq = searcher.rewrite(new ConstantScoreQuery(termQuery));\n\n    final Set<Term> scoringTerms = new HashSet<>();\n    searcher.createWeight(csq, ScoreMode.COMPLETE, 1).extractTerms(scoringTerms);\n    assertEquals(Collections.emptySet(), scoringTerms);\n\n    final Set<Term> matchingTerms = new HashSet<>();\n    searcher.createWeight(csq, ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(matchingTerms);\n    assertEquals(Collections.singleton(new Term(\"foo\", \"bar\")), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["05c52ac194342b760b830342ee8423fcf00e54d0"],"05c52ac194342b760b830342ee8423fcf00e54d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["05c52ac194342b760b830342ee8423fcf00e54d0","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05c52ac194342b760b830342ee8423fcf00e54d0"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"05c52ac194342b760b830342ee8423fcf00e54d0":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}