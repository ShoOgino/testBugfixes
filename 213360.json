{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63c3b81be29df3abe3b6c0446b054f7f52576091","date":1336174872,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":["95ae76773bf2b95987d5f9c8f566ab3738953fb4","382fe3a6ca9745891afebda9b9a57cc158305545"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d988d1ad2c000ac97e5743a6ed8c69677492e35b","date":1361043522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(te);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(te);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60daad1187870cb8dea2344dcd50c29136546f18","date":1361389468,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(te);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(te);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"240cffb5a9df98261aab509ee8fd2a252bccf157","date":1363702876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(te);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":["d988d1ad2c000ac97e5743a6ed8c69677492e35b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final FieldCache.Ints docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","d988d1ad2c000ac97e5743a6ed8c69677492e35b"],"56572ec06f1407c066d6b7399413178b33176cd8":["6613659748fe4411a7dcf85266e55db1f95f7315","93dd449115a9247533e44bab47e8429e5dccbc6d"],"f45457a742a53533c348c4b990b1c579ff364467":["63c3b81be29df3abe3b6c0446b054f7f52576091"],"d988d1ad2c000ac97e5743a6ed8c69677492e35b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["63c3b81be29df3abe3b6c0446b054f7f52576091","f45457a742a53533c348c4b990b1c579ff364467"],"63c3b81be29df3abe3b6c0446b054f7f52576091":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["6613659748fe4411a7dcf85266e55db1f95f7315","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"60daad1187870cb8dea2344dcd50c29136546f18":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"240cffb5a9df98261aab509ee8fd2a252bccf157":["60daad1187870cb8dea2344dcd50c29136546f18"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["60daad1187870cb8dea2344dcd50c29136546f18"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d988d1ad2c000ac97e5743a6ed8c69677492e35b":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","d988d1ad2c000ac97e5743a6ed8c69677492e35b"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"63c3b81be29df3abe3b6c0446b054f7f52576091":["f45457a742a53533c348c4b990b1c579ff364467","d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"60daad1187870cb8dea2344dcd50c29136546f18":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["63c3b81be29df3abe3b6c0446b054f7f52576091"],"240cffb5a9df98261aab509ee8fd2a252bccf157":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}