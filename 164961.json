{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","commits":[{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":1,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#checkReader(AtomicReader,boolean).mjava","sourceNew":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, \"UTF-8\");\n\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(\"UTF-8\"));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(\"UTF-8\"));\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, \"UTF-8\");\n\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(\"UTF-8\"));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(\"UTF-8\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","sourceNew":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(IOUtils.UTF_8));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(IOUtils.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, \"UTF-8\");\n\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(\"UTF-8\"));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(\"UTF-8\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","sourceNew":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(IOUtils.UTF_8));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(IOUtils.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(IOUtils.UTF_8));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(IOUtils.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","sourceNew":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(IOUtils.UTF_8));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(IOUtils.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, \"UTF-8\");\n\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(\"UTF-8\"));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(\"UTF-8\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","sourceNew":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream, true);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream, false, true);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream, true);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors, true);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream, true);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n  }\n\n","sourceOld":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream);\n    \n    if (fieldNormStatus.error != null || \n      termIndexStatus.error != null ||\n      storedFieldStatus.error != null ||\n      termVectorStatus.error != null ||\n      docValuesStatus.error != null) {\n      System.out.println(\"CheckReader failed\");\n      System.out.println(bos.toString(IOUtils.UTF_8));\n      throw new RuntimeException(\"CheckReader failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(IOUtils.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","sourceNew":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream, true);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream, false, true);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream, true);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors, true);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream, true);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    AtomicReader unwrapped = FilterAtomicReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream, true);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream, false, true);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream, true);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors, true);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream, true);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(AtomicReader,boolean).mjava","sourceNew":null,"sourceOld":"  public static void checkReader(AtomicReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream, true);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream, false, true);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream, true);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors, true);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream, true);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    AtomicReader unwrapped = FilterAtomicReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"5eb2511ababf862ea11e10761c70ee560cd84510":["6613659748fe4411a7dcf85266e55db1f95f7315","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["7d89d7e4e5101347833eea558851bf4209218619"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"7d89d7e4e5101347833eea558851bf4209218619":["6613659748fe4411a7dcf85266e55db1f95f7315"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7","5eb2511ababf862ea11e10761c70ee560cd84510"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"7d89d7e4e5101347833eea558851bf4209218619":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}