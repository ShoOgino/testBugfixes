{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    return new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    return new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d94d6afa51157e490fc169e192a154ffc4cdad0b","date":1283184289,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    return new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    return new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["d94d6afa51157e490fc169e192a154ffc4cdad0b","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"]},"commit2Childs":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["d94d6afa51157e490fc169e192a154ffc4cdad0b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}