{"path":"sandbox/contributions/searchbean/src/test/org/apache/lucene/TestSearchBean#testSearchBean().mjava","commits":[{"id":"19458526931534c2a4f0d1cd2d55b3f39401b664","date":1021962547,"type":0,"author":"Peter Carlson","isMerge":false,"pathNew":"sandbox/contributions/searchbean/src/test/org/apache/lucene/TestSearchBean#testSearchBean().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     *\n     */\n    public void testSearchBean() throws IOException, ParseException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        doc1.add(Field.Text(\"text\", \"metal\"));\n        doc2.add(Field.Text(\"text\", \"metals\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.optimize();\n        \n        SortedField.addField(\"text\",indexStore);\n        //IndexSearcher searcher = new IndexSearcher(indexStore);\n        \n        SearchBean sb = new SearchBean(indexStore);\n        HitsIterator hi = sb.search(\"metal\");\n        \n        assertEquals(1, hi.getTotalHits());\n\n        assertEquals(1, hi.getPageCount());\n        \n        assertEquals(\"metal\",hi.next().get(\"text\"));\n        \n        writer.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20686bfc87b7d58ec1187cd2ea6db7b5e211a5f","date":1031360461,"type":3,"author":"Peter Carlson","isMerge":false,"pathNew":"sandbox/contributions/searchbean/src/test/org/apache/lucene/TestSearchBean#testSearchBean().mjava","pathOld":"sandbox/contributions/searchbean/src/test/org/apache/lucene/TestSearchBean#testSearchBean().mjava","sourceNew":"    /*\n     *\n     */\n    public void testSearchBean() throws IOException, ParseException {\n        Directory indexStore = createIndex();\n        SortedField.addField(\"text\",indexStore);\n        //IndexSearcher searcher = new IndexSearcher(indexStore);\n        \n        SearchBean sb = new SearchBean(indexStore);\n        HitsIterator hi = sb.search(\"metal\");\n        \n        assertEquals(1, hi.getTotalHits());\n        \n        assertEquals(1, hi.getPageCount());\n        \n        assertEquals(\"metal\",hi.next().get(\"text\"));\n    }\n\n","sourceOld":"    /*\n     *\n     */\n    public void testSearchBean() throws IOException, ParseException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        doc1.add(Field.Text(\"text\", \"metal\"));\n        doc2.add(Field.Text(\"text\", \"metals\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.optimize();\n        \n        SortedField.addField(\"text\",indexStore);\n        //IndexSearcher searcher = new IndexSearcher(indexStore);\n        \n        SearchBean sb = new SearchBean(indexStore);\n        HitsIterator hi = sb.search(\"metal\");\n        \n        assertEquals(1, hi.getTotalHits());\n\n        assertEquals(1, hi.getPageCount());\n        \n        assertEquals(\"metal\",hi.next().get(\"text\"));\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cf8dc3d9f37967bbc2455ea65754be7b38ee97b","date":1074876716,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/searchbean/src/test/org/apache/lucene/TestSearchBean#testSearchBean().mjava","pathOld":"sandbox/contributions/searchbean/src/test/org/apache/lucene/TestSearchBean#testSearchBean().mjava","sourceNew":"    public void testSearchBean() throws IOException, ParseException {\n        Directory indexStore = createIndex();\n        SortedField.addField(\"text\",indexStore);\n        //IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        SearchBean sb = new SearchBean(indexStore);\n        HitsIterator hi = sb.search(\"metal\");\n\n        assertEquals(1, hi.getTotalHits());\n\n        assertEquals(1, hi.getPageCount());\n\n        assertEquals(\"metal\",hi.next().get(\"text\"));\n    }\n\n","sourceOld":"    /*\n     *\n     */\n    public void testSearchBean() throws IOException, ParseException {\n        Directory indexStore = createIndex();\n        SortedField.addField(\"text\",indexStore);\n        //IndexSearcher searcher = new IndexSearcher(indexStore);\n        \n        SearchBean sb = new SearchBean(indexStore);\n        HitsIterator hi = sb.search(\"metal\");\n        \n        assertEquals(1, hi.getTotalHits());\n        \n        assertEquals(1, hi.getPageCount());\n        \n        assertEquals(\"metal\",hi.next().get(\"text\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81002862d80ac0d5cf5a9a6d7fb0fc5927bba516","date":1108145240,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/searchbean/src/test/org/apache/lucene/TestSearchBean#testSearchBean().mjava","sourceNew":null,"sourceOld":"    public void testSearchBean() throws IOException, ParseException {\n        Directory indexStore = createIndex();\n        SortedField.addField(\"text\",indexStore);\n        //IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        SearchBean sb = new SearchBean(indexStore);\n        HitsIterator hi = sb.search(\"metal\");\n\n        assertEquals(1, hi.getTotalHits());\n\n        assertEquals(1, hi.getPageCount());\n\n        assertEquals(\"metal\",hi.next().get(\"text\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b20686bfc87b7d58ec1187cd2ea6db7b5e211a5f":["19458526931534c2a4f0d1cd2d55b3f39401b664"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19458526931534c2a4f0d1cd2d55b3f39401b664":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2cf8dc3d9f37967bbc2455ea65754be7b38ee97b":["b20686bfc87b7d58ec1187cd2ea6db7b5e211a5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81002862d80ac0d5cf5a9a6d7fb0fc5927bba516"],"81002862d80ac0d5cf5a9a6d7fb0fc5927bba516":["2cf8dc3d9f37967bbc2455ea65754be7b38ee97b"]},"commit2Childs":{"b20686bfc87b7d58ec1187cd2ea6db7b5e211a5f":["2cf8dc3d9f37967bbc2455ea65754be7b38ee97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19458526931534c2a4f0d1cd2d55b3f39401b664"],"19458526931534c2a4f0d1cd2d55b3f39401b664":["b20686bfc87b7d58ec1187cd2ea6db7b5e211a5f"],"2cf8dc3d9f37967bbc2455ea65754be7b38ee97b":["81002862d80ac0d5cf5a9a6d7fb0fc5927bba516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"81002862d80ac0d5cf5a9a6d7fb0fc5927bba516":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}