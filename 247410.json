{"path":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","commits":[{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","pathOld":"/dev/null","sourceNew":"  private void sortScorers() throws IOException {\n    // move scorers to an array\n    Scorer[] array = (Scorer[])scorers.toArray(new Scorer[scorers.size()]);\n    scorers.clear();                              // empty the list\n\n    Arrays.sort(array, new Comparator() {         // sort the array\n        public int compare(Object o1, Object o2) {\n          return ((Scorer)o1).doc() - ((Scorer)o2).doc();\n        }\n        public boolean equals(Object o1, Object o2) {\n          return ((Scorer)o1).doc() == ((Scorer)o2).doc();\n        }\n      });\n    \n    for (int i = 0; i < array.length; i++) {\n      scorers.addLast(array[i]);                  // re-build list, now sorted\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2c2de4d23143bb03db6c8482422af2e9af132bd5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfab81c03dd23957f875ae11ea217c44403a7874","date":1082561009,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","pathOld":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","sourceNew":"  private void sortScorers() throws IOException {\n    // move scorers to an array\n    Scorer[] array = (Scorer[])scorers.toArray(new Scorer[scorers.size()]);\n    scorers.clear();                              // empty the list\n\n    // note that this comparator is not consistent with equals!\n    Arrays.sort(array, new Comparator() {         // sort the array\n        public int compare(Object o1, Object o2) {\n          return ((Scorer)o1).doc() - ((Scorer)o2).doc();\n        }\n        public boolean equals(Object o1, Object o2) {\n          return ((Scorer)o1).doc() == ((Scorer)o2).doc();\n        }\n      });\n    \n    for (int i = 0; i < array.length; i++) {\n      scorers.addLast(array[i]);                  // re-build list, now sorted\n    }\n  }\n\n","sourceOld":"  private void sortScorers() throws IOException {\n    // move scorers to an array\n    Scorer[] array = (Scorer[])scorers.toArray(new Scorer[scorers.size()]);\n    scorers.clear();                              // empty the list\n\n    Arrays.sort(array, new Comparator() {         // sort the array\n        public int compare(Object o1, Object o2) {\n          return ((Scorer)o1).doc() - ((Scorer)o2).doc();\n        }\n        public boolean equals(Object o1, Object o2) {\n          return ((Scorer)o1).doc() == ((Scorer)o2).doc();\n        }\n      });\n    \n    for (int i = 0; i < array.length; i++) {\n      scorers.addLast(array[i]);                  // re-build list, now sorted\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f314029fc991d70f9c6a7fd0b01f36da98c1c32","date":1091823553,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","pathOld":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","sourceNew":"  private void sortScorers() {\n    // move scorers to an array\n    Scorer[] array = (Scorer[])scorers.toArray(new Scorer[scorers.size()]);\n    scorers.clear();                              // empty the list\n\n    // note that this comparator is not consistent with equals!\n    Arrays.sort(array, new Comparator() {         // sort the array\n        public int compare(Object o1, Object o2) {\n          return ((Scorer)o1).doc() - ((Scorer)o2).doc();\n        }\n        public boolean equals(Object o1, Object o2) {\n          return ((Scorer)o1).doc() == ((Scorer)o2).doc();\n        }\n      });\n    \n    for (int i = 0; i < array.length; i++) {\n      scorers.addLast(array[i]);                  // re-build list, now sorted\n    }\n  }\n\n","sourceOld":"  private void sortScorers() throws IOException {\n    // move scorers to an array\n    Scorer[] array = (Scorer[])scorers.toArray(new Scorer[scorers.size()]);\n    scorers.clear();                              // empty the list\n\n    // note that this comparator is not consistent with equals!\n    Arrays.sort(array, new Comparator() {         // sort the array\n        public int compare(Object o1, Object o2) {\n          return ((Scorer)o1).doc() - ((Scorer)o2).doc();\n        }\n        public boolean equals(Object o1, Object o2) {\n          return ((Scorer)o1).doc() == ((Scorer)o2).doc();\n        }\n      });\n    \n    for (int i = 0; i < array.length; i++) {\n      scorers.addLast(array[i]);                  // re-build list, now sorted\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97472cabc1f12f530f6d5c91afb3c0aa42c7a46c","date":1094472424,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","pathOld":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","sourceNew":"  private void sortScorers() {\n    // move scorers to an array\n    Scorer[] array = (Scorer[])scorers.toArray(new Scorer[scorers.size()]);\n    scorers.clear();                              // empty the list\n\n    // note that this comparator is not consistent with equals!\n    Arrays.sort(array, new Comparator() {         // sort the array\n        public int compare(Object o1, Object o2) {\n          return ((Scorer)o1).doc() - ((Scorer)o2).doc();\n        }\n      });\n    \n    for (int i = 0; i < array.length; i++) {\n      scorers.addLast(array[i]);                  // re-build list, now sorted\n    }\n  }\n\n","sourceOld":"  private void sortScorers() {\n    // move scorers to an array\n    Scorer[] array = (Scorer[])scorers.toArray(new Scorer[scorers.size()]);\n    scorers.clear();                              // empty the list\n\n    // note that this comparator is not consistent with equals!\n    Arrays.sort(array, new Comparator() {         // sort the array\n        public int compare(Object o1, Object o2) {\n          return ((Scorer)o1).doc() - ((Scorer)o2).doc();\n        }\n        public boolean equals(Object o1, Object o2) {\n          return ((Scorer)o1).doc() == ((Scorer)o2).doc();\n        }\n      });\n    \n    for (int i = 0; i < array.length; i++) {\n      scorers.addLast(array[i]);                  // re-build list, now sorted\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c2de4d23143bb03db6c8482422af2e9af132bd5","date":1161118252,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","pathOld":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","sourceNew":"  private void sortScorers() {\n    // squeeze the array down for the sort\n    if (length != scorers.length) {\n      Scorer[] temps = new Scorer[length];\n      System.arraycopy(scorers, 0, temps, 0, length);\n      scorers = temps;\n    }\n    \n    // note that this comparator is not consistent with equals!\n    Arrays.sort(scorers, new Comparator() {         // sort the array\n        public int compare(Object o1, Object o2) {\n          return ((Scorer)o1).doc() - ((Scorer)o2).doc();\n        }\n      });\n   \n    first = 0;\n    last = length - 1;\n  }\n\n","sourceOld":"  private void sortScorers() {\n    // move scorers to an array\n    Scorer[] array = (Scorer[])scorers.toArray(new Scorer[scorers.size()]);\n    scorers.clear();                              // empty the list\n\n    // note that this comparator is not consistent with equals!\n    Arrays.sort(array, new Comparator() {         // sort the array\n        public int compare(Object o1, Object o2) {\n          return ((Scorer)o1).doc() - ((Scorer)o2).doc();\n        }\n      });\n    \n    for (int i = 0; i < array.length; i++) {\n      scorers.addLast(array[i]);                  // re-build list, now sorted\n    }\n  }\n\n","bugFix":["15c469602973ef1a33c9a07367a380d278ffab20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a251547210ad8523f10c15c461496a2ad4bb3df4","date":1195837134,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/ConjunctionScorer#sortScorers().mjava","sourceNew":null,"sourceOld":"  private void sortScorers() {\n    // squeeze the array down for the sort\n    if (length != scorers.length) {\n      Scorer[] temps = new Scorer[length];\n      System.arraycopy(scorers, 0, temps, 0, length);\n      scorers = temps;\n    }\n    \n    // note that this comparator is not consistent with equals!\n    Arrays.sort(scorers, new Comparator() {         // sort the array\n        public int compare(Object o1, Object o2) {\n          return ((Scorer)o1).doc() - ((Scorer)o2).doc();\n        }\n      });\n   \n    first = 0;\n    last = length - 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfab81c03dd23957f875ae11ea217c44403a7874":["15c469602973ef1a33c9a07367a380d278ffab20"],"a251547210ad8523f10c15c461496a2ad4bb3df4":["2c2de4d23143bb03db6c8482422af2e9af132bd5"],"3f314029fc991d70f9c6a7fd0b01f36da98c1c32":["cfab81c03dd23957f875ae11ea217c44403a7874"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c2de4d23143bb03db6c8482422af2e9af132bd5":["97472cabc1f12f530f6d5c91afb3c0aa42c7a46c"],"97472cabc1f12f530f6d5c91afb3c0aa42c7a46c":["3f314029fc991d70f9c6a7fd0b01f36da98c1c32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"15c469602973ef1a33c9a07367a380d278ffab20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cfab81c03dd23957f875ae11ea217c44403a7874":["3f314029fc991d70f9c6a7fd0b01f36da98c1c32"],"a251547210ad8523f10c15c461496a2ad4bb3df4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f314029fc991d70f9c6a7fd0b01f36da98c1c32":["97472cabc1f12f530f6d5c91afb3c0aa42c7a46c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c469602973ef1a33c9a07367a380d278ffab20"],"2c2de4d23143bb03db6c8482422af2e9af132bd5":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"97472cabc1f12f530f6d5c91afb3c0aa42c7a46c":["2c2de4d23143bb03db6c8482422af2e9af132bd5"],"15c469602973ef1a33c9a07367a380d278ffab20":["cfab81c03dd23957f875ae11ea217c44403a7874"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}