{"path":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","sourceNew":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base, true);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","sourceOld":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base, true);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","sourceNew":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","sourceOld":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base, true);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","sourceNew":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","sourceOld":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base, true);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28dbdccfa460fb41c33b6d23411572298d589b99","date":1399839432,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","sourceNew":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","sourceOld":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","sourceNew":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","sourceOld":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekExact(long).mjava","sourceNew":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","sourceOld":"    @Override\n    public void seekExact(long targetOrd) throws IOException {\n      int delta = (int) (targetOrd - ordBase - ord);\n      //System.out.println(\"  seek(ord) targetOrd=\" + targetOrd + \" delta=\" + delta + \" ord=\" + ord + \" ii=\" + indexInterval);\n      if (delta < 0 || delta > indexInterval) {\n        final int idx = (int) (targetOrd >>> indexIntervalBits);\n        final BytesRef base = indexedTermsArray[idx];\n        //System.out.println(\"  do seek term=\" + base.utf8ToString());\n        ord = idx << indexIntervalBits;\n        delta = (int) (targetOrd - ord);\n        final TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(base);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      } else {\n        //System.out.println(\"seek w/in block\");\n      }\n\n      while (--delta >= 0) {\n        BytesRef br = termsEnum.next();\n        if (br == null) {\n          assert false;\n          return;\n        }\n        ord++;\n      }\n\n      setTerm();\n      assert term != null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28dbdccfa460fb41c33b6d23411572298d589b99":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","28dbdccfa460fb41c33b6d23411572298d589b99"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"28dbdccfa460fb41c33b6d23411572298d589b99":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["28dbdccfa460fb41c33b6d23411572298d589b99","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}