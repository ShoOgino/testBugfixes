{"path":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm.utf8ToString()) ? \"\\\\*\" : lowerTerm.utf8ToString())  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm.utf8ToString()) ? \"\\\\*\" : upperTerm.utf8ToString()) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm.utf8ToString()) ? \"\\\\*\" : lowerTerm.utf8ToString())  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm.utf8ToString()) ? \"\\\\*\" : upperTerm.utf8ToString()) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a22ad352a73aa6ab982b6377e1714950edaf62f0","date":1366051636,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(Term.toString(lowerTerm)) ? \"\\\\*\" : Term.toString(lowerTerm))  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(Term.toString(upperTerm)) ? \"\\\\*\" : Term.toString(upperTerm)) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm.utf8ToString()) ? \"\\\\*\" : lowerTerm.utf8ToString())  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm.utf8ToString()) ? \"\\\\*\" : upperTerm.utf8ToString()) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    if (!getField().equals(field)) {\n      buffer.append(getField());\n      buffer.append(\":\");\n    }\n    buffer.append(includeLower ? '[' : '{');\n    // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n    buffer.append(lowerTerm != null ? (\"*\".equals(Term.toString(lowerTerm)) ? \"\\\\*\" : Term.toString(lowerTerm))  : \"*\");\n    buffer.append(\" TO \");\n    buffer.append(upperTerm != null ? (\"*\".equals(Term.toString(upperTerm)) ? \"\\\\*\" : Term.toString(upperTerm)) : \"*\");\n    buffer.append(includeUpper ? ']' : '}');\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(Term.toString(lowerTerm)) ? \"\\\\*\" : Term.toString(lowerTerm))  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(Term.toString(upperTerm)) ? \"\\\\*\" : Term.toString(upperTerm)) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    if (!getField().equals(field)) {\n      buffer.append(getField());\n      buffer.append(\":\");\n    }\n    buffer.append(includeLower ? '[' : '{');\n    // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n    buffer.append(lowerTerm != null ? (\"*\".equals(Term.toString(lowerTerm)) ? \"\\\\*\" : Term.toString(lowerTerm))  : \"*\");\n    buffer.append(\" TO \");\n    buffer.append(upperTerm != null ? (\"*\".equals(Term.toString(upperTerm)) ? \"\\\\*\" : Term.toString(upperTerm)) : \"*\");\n    buffer.append(includeUpper ? ']' : '}');\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(Term.toString(lowerTerm)) ? \"\\\\*\" : Term.toString(lowerTerm))  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(Term.toString(upperTerm)) ? \"\\\\*\" : Term.toString(upperTerm)) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    if (!getField().equals(field)) {\n      buffer.append(getField());\n      buffer.append(\":\");\n    }\n    buffer.append(includeLower ? '[' : '{');\n    // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n    buffer.append(lowerTerm != null ? (\"*\".equals(Term.toString(lowerTerm)) ? \"\\\\*\" : Term.toString(lowerTerm))  : \"*\");\n    buffer.append(\" TO \");\n    buffer.append(upperTerm != null ? (\"*\".equals(Term.toString(upperTerm)) ? \"\\\\*\" : Term.toString(upperTerm)) : \"*\");\n    buffer.append(includeUpper ? ']' : '}');\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    if (!getField().equals(field)) {\n      buffer.append(getField());\n      buffer.append(\":\");\n    }\n    buffer.append(includeLower ? '[' : '{');\n    // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n    buffer.append(lowerTerm != null ? (\"*\".equals(Term.toString(lowerTerm)) ? \"\\\\*\" : Term.toString(lowerTerm))  : \"*\");\n    buffer.append(\" TO \");\n    buffer.append(upperTerm != null ? (\"*\".equals(Term.toString(upperTerm)) ? \"\\\\*\" : Term.toString(upperTerm)) : \"*\");\n    buffer.append(includeUpper ? ']' : '}');\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a22ad352a73aa6ab982b6377e1714950edaf62f0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a22ad352a73aa6ab982b6377e1714950edaf62f0","3e8715d826e588419327562287d5d6a8040d63d6"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a22ad352a73aa6ab982b6377e1714950edaf62f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"a22ad352a73aa6ab982b6377e1714950edaf62f0":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a22ad352a73aa6ab982b6377e1714950edaf62f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}