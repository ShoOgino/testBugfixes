{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,byte[],byte[],IntFunction[BytesRef]).mjava","sourceNew":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, int sortedDim, byte[] minPackedValue, byte[] maxPackedValue,\n      IntFunction<BytesRef> values, int[] docs, int docsOffset) throws IOException {\n    byte[] lastPackedValue = new byte[packedBytesLength];\n    int lastDoc = -1;\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert valueInOrder(i, sortedDim, lastPackedValue, packedValue.bytes, packedValue.offset,\n          docs[docsOffset + i], lastDoc);\n      lastDoc = docs[docsOffset + i];\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, byte[] minPackedValue, byte[] maxPackedValue, IntFunction<BytesRef> values) throws IOException {\n    byte[] lastPackedValue = new byte[bytesPerDim];\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert numDims != 1 || valueInOrder(i, lastPackedValue, packedValue.bytes, packedValue.offset);\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","pathOld":"/dev/null","sourceNew":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, int sortedDim, byte[] minPackedValue, byte[] maxPackedValue,\n      IntFunction<BytesRef> values, int[] docs, int docsOffset) throws IOException {\n    byte[] lastPackedValue = new byte[packedBytesLength];\n    int lastDoc = -1;\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert valueInOrder(i, sortedDim, lastPackedValue, packedValue.bytes, packedValue.offset,\n          docs[docsOffset + i], lastDoc);\n      lastDoc = docs[docsOffset + i];\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","pathOld":"/dev/null","sourceNew":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, int sortedDim, byte[] minPackedValue, byte[] maxPackedValue,\n      IntFunction<BytesRef> values, int[] docs, int docsOffset) throws IOException {\n    byte[] lastPackedValue = new byte[packedBytesLength];\n    int lastDoc = -1;\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert valueInOrder(i, sortedDim, lastPackedValue, packedValue.bytes, packedValue.offset,\n          docs[docsOffset + i], lastDoc);\n      lastDoc = docs[docsOffset + i];\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(BKDConfig,int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","sourceNew":"  // only called from assert\n  private static boolean valuesInOrderAndBounds(BKDConfig config, int count, int sortedDim, byte[] minPackedValue, byte[] maxPackedValue,\n      IntFunction<BytesRef> values, int[] docs, int docsOffset) {\n    byte[] lastPackedValue = new byte[config.packedBytesLength];\n    int lastDoc = -1;\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == config.packedBytesLength;\n      assert valueInOrder(config, i, sortedDim, lastPackedValue, packedValue.bytes, packedValue.offset,\n          docs[docsOffset + i], lastDoc);\n      lastDoc = docs[docsOffset + i];\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(config, packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, int sortedDim, byte[] minPackedValue, byte[] maxPackedValue,\n      IntFunction<BytesRef> values, int[] docs, int docsOffset) throws IOException {\n    byte[] lastPackedValue = new byte[packedBytesLength];\n    int lastDoc = -1;\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert valueInOrder(i, sortedDim, lastPackedValue, packedValue.bytes, packedValue.offset,\n          docs[docsOffset + i], lastDoc);\n      lastDoc = docs[docsOffset + i];\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}