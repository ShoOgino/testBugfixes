{"path":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        if (qStrict) {\n          valSrcWeights[i].getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeights[i].getValueForNormalization();\n        }\n      }\n      sum *= getBoost() * getBoost(); // boost each sub-weight\n      return sum ;\n    }\n\n","sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        if (qStrict) {\n          valSrcWeights[i].getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeights[i].getValueForNormalization();\n        }\n      }\n      sum *= getBoost() * getBoost(); // boost each sub-weight\n      return sum ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed50c8be6f41a006d8f93268765de9ad91908419","date":1340353054,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict) {\n          valSrcWeight.getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      sum *= getBoost() * getBoost(); // boost each sub-weight\n      return sum ;\n    }\n\n","sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        if (qStrict) {\n          valSrcWeights[i].getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeights[i].getValueForNormalization();\n        }\n      }\n      sum *= getBoost() * getBoost(); // boost each sub-weight\n      return sum ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict) {\n          valSrcWeight.getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      sum *= getBoost() * getBoost(); // boost each sub-weight\n      return sum ;\n    }\n\n","sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        if (qStrict) {\n          valSrcWeights[i].getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeights[i].getValueForNormalization();\n        }\n      }\n      sum *= getBoost() * getBoost(); // boost each sub-weight\n      return sum ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7","date":1366210710,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict) {\n          valSrcWeight.getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      return sum;\n    }\n\n","sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict) {\n          valSrcWeight.getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      sum *= getBoost() * getBoost(); // boost each sub-weight\n      return sum ;\n    }\n\n","bugFix":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict) {\n          valSrcWeight.getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      return sum;\n    }\n\n","sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict) {\n          valSrcWeight.getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      return sum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict) {\n          valSrcWeight.getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      return sum;\n    }\n\n","sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict) {\n          valSrcWeight.getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      return sum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict == false) { // otherwise do not include ValueSource part in the query normalization\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      return sum;\n    }\n\n","sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict) {\n          valSrcWeight.getValueForNormalization(); // do not include ValueSource part in the query normalization\n        } else {\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      return sum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","sourceNew":null,"sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict == false) { // otherwise do not include ValueSource part in the query normalization\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      return sum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#getValueForNormalization().mjava","sourceNew":null,"sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = subQueryWeight.getValueForNormalization();\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict == false) { // otherwise do not include ValueSource part in the query normalization\n          sum += valSrcWeight.getValueForNormalization();\n        }\n      }\n      return sum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ed50c8be6f41a006d8f93268765de9ad91908419":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ed50c8be6f41a006d8f93268765de9ad91908419"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7":["ed50c8be6f41a006d8f93268765de9ad91908419"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ed50c8be6f41a006d8f93268765de9ad91908419","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ed50c8be6f41a006d8f93268765de9ad91908419":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}