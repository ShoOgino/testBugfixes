{"path":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a backslash escaped string, joining all the items. */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      for (int i=0; i<item.length(); i++) {\n        char ch = item.charAt(i);\n        if (ch=='\\\\' || ch == separator) {\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a backslash escaped string, joining all the items. */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      for (int i=0; i<item.length(); i++) {\n        char ch = item.charAt(i);\n        if (ch=='\\\\' || ch == separator) {\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a backslash escaped string, joining all the items. */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      for (int i=0; i<item.length(); i++) {\n        char ch = item.charAt(i);\n        if (ch=='\\\\' || ch == separator) {\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","sourceNew":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** Creates a backslash escaped string, joining all the items. */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      for (int i=0; i<item.length(); i++) {\n        char ch = item.charAt(i);\n        if (ch=='\\\\' || ch == separator) {\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","sourceNew":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","sourceNew":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","sourceNew":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["92751ba9273251eab6a2e379ec42a1697a32ff96","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["92751ba9273251eab6a2e379ec42a1697a32ff96","1c7a21395bae9e2f61aeb639f47aaca771c426ed"]},"commit2Childs":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["c5c99ad021f3da085fcb66220598a8f91dc5e453","1c7a21395bae9e2f61aeb639f47aaca771c426ed","55b50463286869f584cf849d1587a0fcd54d1dfa"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["92751ba9273251eab6a2e379ec42a1697a32ff96","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}