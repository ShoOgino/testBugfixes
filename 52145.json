{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","commits":[{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  /** Set UpdateLog to buffer updates if the slice is in construction. */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n    final CoreContainer cc = coreDescriptor.getCoreContainer();\n    if (cc != null && cc.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = cc.getZkController().getClusterState();\n      final Slice slice = clusterState.getSlice(coreDescriptor.getCloudDescriptor().getCollectionName(), \n          coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","sourceNew":"  /** Set UpdateLog to buffer updates if the slice is in construction. */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n    final CoreContainer cc = coreDescriptor.getCoreContainer();\n    if (cc != null && cc.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = cc.getZkController().getClusterState();\n      final DocCollection collection = clusterState.getCollection(coreDescriptor.getCloudDescriptor().getCollectionName());\n      final Slice slice = collection.getSlice(coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","sourceOld":"  /** Set UpdateLog to buffer updates if the slice is in construction. */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n    final CoreContainer cc = coreDescriptor.getCoreContainer();\n    if (cc != null && cc.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = cc.getZkController().getClusterState();\n      final Slice slice = clusterState.getSlice(coreDescriptor.getCloudDescriptor().getCollectionName(), \n          coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","sourceNew":"  /** Set UpdateLog to buffer updates if the slice is in construction. */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n    final CoreContainer cc = coreDescriptor.getCoreContainer();\n    if (cc != null && cc.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = cc.getZkController().getClusterState();\n      final DocCollection collection = clusterState.getCollection(coreDescriptor.getCloudDescriptor().getCollectionName());\n      final Slice slice = collection.getSlice(coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","sourceOld":"  /** Set UpdateLog to buffer updates if the slice is in construction. */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n    final CoreContainer cc = coreDescriptor.getCoreContainer();\n    if (cc != null && cc.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = cc.getZkController().getClusterState();\n      final Slice slice = clusterState.getSlice(coreDescriptor.getCloudDescriptor().getCollectionName(), \n          coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","sourceNew":"  /** Set UpdateLog to buffer updates if the slice is in construction. */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n    \n    if (coreContainer != null && coreContainer.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = coreContainer.getZkController().getClusterState();\n      final DocCollection collection = clusterState.getCollection(coreDescriptor.getCloudDescriptor().getCollectionName());\n      final Slice slice = collection.getSlice(coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","sourceOld":"  /** Set UpdateLog to buffer updates if the slice is in construction. */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n    final CoreContainer cc = coreDescriptor.getCoreContainer();\n    if (cc != null && cc.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = cc.getZkController().getClusterState();\n      final DocCollection collection = clusterState.getCollection(coreDescriptor.getCloudDescriptor().getCollectionName());\n      final Slice slice = collection.getSlice(coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","sourceNew":"  /** Set UpdateLog to buffer updates if the slice is in construction. */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n    \n    if (coreContainer != null && coreContainer.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = coreContainer.getZkController().getClusterState();\n      final DocCollection collection = clusterState.getCollection(coreDescriptor.getCloudDescriptor().getCollectionName());\n      final Slice slice = collection.getSlice(coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","sourceOld":"  /** Set UpdateLog to buffer updates if the slice is in construction. */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n    final CoreContainer cc = coreDescriptor.getCoreContainer();\n    if (cc != null && cc.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = cc.getZkController().getClusterState();\n      final DocCollection collection = clusterState.getCollection(coreDescriptor.getCloudDescriptor().getCollectionName());\n      final Slice slice = collection.getSlice(coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","sourceNew":"  /**\n   * Set UpdateLog to buffer updates if the slice is in construction.\n   */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n\n    if (coreContainer != null && coreContainer.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = coreContainer.getZkController().getClusterState();\n      final DocCollection collection = clusterState.getCollection(coreDescriptor.getCloudDescriptor().getCollectionName());\n      final Slice slice = collection.getSlice(coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","sourceOld":"  /** Set UpdateLog to buffer updates if the slice is in construction. */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n    \n    if (coreContainer != null && coreContainer.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = coreContainer.getZkController().getClusterState();\n      final DocCollection collection = clusterState.getCollection(coreDescriptor.getCloudDescriptor().getCollectionName());\n      final Slice slice = collection.getSlice(coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#bufferUpdatesIfConstructing(CoreDescriptor).mjava","sourceNew":"  /**\n   * Set UpdateLog to buffer updates if the slice is in construction.\n   */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n\n    if (coreContainer != null && coreContainer.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = coreContainer.getZkController().getClusterState();\n      final DocCollection collection = clusterState.getCollection(coreDescriptor.getCloudDescriptor().getCollectionName());\n      final Slice slice = collection.getSlice(coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Set UpdateLog to buffer updates if the slice is in construction.\n   */\n  private void bufferUpdatesIfConstructing(CoreDescriptor coreDescriptor) {\n\n    if (coreContainer != null && coreContainer.isZooKeeperAware()) {\n      if (reqHandlers.get(\"/get\") == null) {\n        log.warn(\"WARNING: RealTimeGetHandler is not registered at /get. \" +\n            \"SolrCloud will always use full index replication instead of the more efficient PeerSync method.\");\n      }\n\n      // ZK pre-register would have already happened so we read slice properties now\n      final ClusterState clusterState = coreContainer.getZkController().getClusterState();\n      final DocCollection collection = clusterState.getCollection(coreDescriptor.getCloudDescriptor().getCollectionName());\n      final Slice slice = collection.getSlice(coreDescriptor.getCloudDescriptor().getShardId());\n      if (slice.getState() == Slice.State.CONSTRUCTION) {\n        // set update log to buffer before publishing the core\n        getUpdateHandler().getUpdateLog().bufferUpdates();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"140be51d03394488536f4aacedace29f9b318347":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["54bb8da55080e4569804e0661b83a3c72cbd8d4d","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["140be51d03394488536f4aacedace29f9b318347"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}