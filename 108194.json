{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs.MockCollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionParams.CollectionAction,CollectionOperation).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs.MockCollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionParams.CollectionAction,CollectionOperation).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp,\n                      CoreContainer cores,\n                      CollectionParams.CollectionAction action,\n                      CollectionOperation operation) throws Exception {\n      Map<String, Object> result = operation.execute(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs.MockCollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionParams.CollectionAction,CollectionOperation).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp,\n                      CoreContainer cores,\n                      CollectionParams.CollectionAction action,\n                      CollectionOperation operation) throws Exception {\n      Map<String, Object> result = operation.execute(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs.MockCollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionParams.CollectionAction,CollectionOperation).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs.MockCollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionParams.CollectionAction,CollectionOperation).mjava","sourceNew":"    @Override\n    void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp,\n                      CoreContainer cores,\n                      CollectionParams.CollectionAction action,\n                      CollectionOperation operation) throws Exception {\n      Map<String, Object> result = null;\n      if (action == CollectionParams.CollectionAction.COLLECTIONPROP) {\n        //Fake this action, since we don't want to write to ZooKeeper in this test\n        result = new HashMap<>();\n        result.put(NAME, req.getParams().required().get(NAME));\n        result.put(PROPERTY_NAME, req.getParams().required().get(PROPERTY_NAME));\n        result.put(PROPERTY_VALUE, req.getParams().required().get(PROPERTY_VALUE));\n      } else {\n        result = operation.execute(req, rsp, this);\n      }\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }\n\n","sourceOld":"    @Override\n    void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp,\n                      CoreContainer cores,\n                      CollectionParams.CollectionAction action,\n                      CollectionOperation operation) throws Exception {\n      Map<String, Object> result = operation.execute(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de3459a54b4c8751d9ef19b035577e2418064be7":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de3459a54b4c8751d9ef19b035577e2418064be7"]},"commit2Childs":{"de3459a54b4c8751d9ef19b035577e2418064be7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["de3459a54b4c8751d9ef19b035577e2418064be7","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}