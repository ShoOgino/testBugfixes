{"path":"src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","commits":[{"id":"7e4ae0374b4fd2a7d32976f5bd8a09ecfd87db3e","date":1212699003,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"/dev/null","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e4ae0374b4fd2a7d32976f5bd8a09ecfd87db3e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7e4ae0374b4fd2a7d32976f5bd8a09ecfd87db3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7e4ae0374b4fd2a7d32976f5bd8a09ecfd87db3e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7e4ae0374b4fd2a7d32976f5bd8a09ecfd87db3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}