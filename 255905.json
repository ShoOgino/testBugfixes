{"path":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataOutput#testLargeArrayAdd().mjava","commits":[{"id":"fad01f81cc24b33263ccec7dbff3fb907702f91e","date":1535461373,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataOutput#testLargeArrayAdd().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLargeArrayAdd() {\n    ByteBuffersDataOutput o = new ByteBuffersDataOutput();\n    int MB = 1024 * 1024;\n    byte [] bytes = randomBytesOfLength(5 * MB, 15 * MB);\n    int offset = randomIntBetween(0, 100);\n    int len = bytes.length - offset;\n    o.writeBytes(bytes, offset, len);\n    assertEquals(len, o.size());\n    Assert.assertArrayEquals(ArrayUtil.copyOfSubArray(bytes, offset, offset + len), o.toArrayCopy());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataOutput#testLargeArrayAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataOutput#testLargeArrayAdd().mjava","sourceNew":"  @Test\n  public void testLargeArrayAdd() {\n    ByteBuffersDataOutput o = new ByteBuffersDataOutput();\n    int MB = 1024 * 1024;\n    final byte [] bytes;\n    if (LuceneTestCase.TEST_NIGHTLY) {\n      bytes = randomBytesOfLength(5 * MB, 15 * MB);\n    } else {\n      bytes = randomBytesOfLength(MB/2, MB);\n    }\n    int offset = randomIntBetween(0, 100);\n    int len = bytes.length - offset;\n    o.writeBytes(bytes, offset, len);\n    assertEquals(len, o.size());\n    Assert.assertArrayEquals(ArrayUtil.copyOfSubArray(bytes, offset, offset + len), o.toArrayCopy());\n  }\n\n","sourceOld":"  @Test\n  public void testLargeArrayAdd() {\n    ByteBuffersDataOutput o = new ByteBuffersDataOutput();\n    int MB = 1024 * 1024;\n    byte [] bytes = randomBytesOfLength(5 * MB, 15 * MB);\n    int offset = randomIntBetween(0, 100);\n    int len = bytes.length - offset;\n    o.writeBytes(bytes, offset, len);\n    assertEquals(len, o.size());\n    Assert.assertArrayEquals(ArrayUtil.copyOfSubArray(bytes, offset, offset + len), o.toArrayCopy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}