{"path":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","sourceNew":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n    \n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n    \n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","sourceNew":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n    \n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n    \n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","sourceNew":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.shutdown();\n    \n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n    \n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","sourceNew":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n    \n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.shutdown();\n    \n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","sourceNew":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n    \n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n    \n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}