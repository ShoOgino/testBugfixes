{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    Query query = new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\")));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["887174d31513f1717a7902651feeb3a76fce94ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    Query query = new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\")));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"887174d31513f1717a7902651feeb3a76fce94ec","date":1492539278,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","sourceNew":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    // wrap in a SpanBoostQuery to also show we see inside it\n    Query query = new SpanBoostQuery(\n        new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\"))), 2.0f);\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    Query query = new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\")));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","bugFix":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","sourceNew":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    // wrap in a SpanBoostQuery to also show we see inside it\n    Query query = new SpanBoostQuery(\n        new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\"))), 2.0f);\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    Query query = new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\")));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","sourceNew":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    // wrap in a SpanBoostQuery to also show we see inside it\n    Query query = new SpanBoostQuery(\n        new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\"))), 2.0f);\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    // wrap in a SpanBoostQuery to also show we see inside it\n    Query query = new SpanBoostQuery(\n        new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\"))), 2.0f);\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","sourceNew":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    // wrap in a SpanBoostQuery to also show we see inside it\n    Query query = new SpanBoostQuery(\n        new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\"))), 2.0f);\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    // wrap in a SpanBoostQuery to also show we see inside it\n    Query query = new SpanBoostQuery(\n        new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\"))), 2.0f);\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testSpanWildcard().mjava","sourceNew":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    // wrap in a SpanBoostQuery to also show we see inside it\n    Query query = new SpanBoostQuery(\n        new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\"))), 2.0f);\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testSpanWildcard() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    // wrap in a SpanBoostQuery to also show we see inside it\n    Query query = new SpanBoostQuery(\n        new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"body\", \"te*\"))), 2.0f);\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"887174d31513f1717a7902651feeb3a76fce94ec":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"b94236357aaa22b76c10629851fe4e376e0cea82":["887174d31513f1717a7902651feeb3a76fce94ec","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["887174d31513f1717a7902651feeb3a76fce94ec"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"887174d31513f1717a7902651feeb3a76fce94ec":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"b94236357aaa22b76c10629851fe4e376e0cea82":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","887174d31513f1717a7902651feeb3a76fce94ec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}