{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List[Token],int,List[Row],List[Token]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List[Token],int,List[Row],List[Token]).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":"  /**\n   * Evaluates the new shingle token weight.\n   *\n   * for (shingle part token in shingle)\n   * weight +=  shingle part token weight * (1 / sqrt(all shingle part token weights summed))\n   *\n   * This algorithm gives a slightly greater score for longer shingles\n   * and is rather penalising to great shingle token part weights.\n   *\n   * @param shingleToken token returned to consumer\n   * @param shingle tokens the tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset start offset in parameter currentPermutationRows and currentPermutationTokens.\n   * @param currentPermutationRows an index to what matrix row a token in parameter currentPermutationTokens exist.\n   * @param currentPermuationTokens all tokens in the current row permutation of the matrix. A sub list (parameter offset, parameter shingle.size) equals parameter shingle.\n   * @return weight to be set for parameter shingleToken\n   */\n  public float calculateShingleWeight(Token shingleToken, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    double[] weights = new double[shingle.size()];\n\n    double total = 0f;\n    double top = 0d;\n\n\n    for (int i=0; i<weights.length; i++) {\n      weights[i] = settingsCodec.getWeight(shingle.get(i));\n\n      double tmp = weights[i];\n      if (tmp > top) {\n        top = tmp;\n      }\n      total += tmp;\n    }\n\n    double factor = 1d / Math.sqrt(total);\n\n    double weight = 0d;\n    for (double partWeight : weights) {\n      weight += partWeight * factor;\n    }\n\n    return (float) weight;\n  }\n\n","sourceOld":"  /**\n   * Evaluates the new shingle token weight.\n   *\n   * for (shingle part token in shingle)\n   * weight +=  shingle part token weight * (1 / sqrt(all shingle part token weights summed))\n   *\n   * This algorithm gives a slightly greater score for longer shingles\n   * and is rather penalising to great shingle token part weights.\n   *\n   * @param shingleToken token returned to consumer\n   * @param shingle tokens the tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset start offset in parameter currentPermutationRows and currentPermutationTokens.\n   * @param currentPermutationRows an index to what matrix row a token in parameter currentPermutationTokens exist.\n   * @param currentPermuationTokens all tokens in the current row permutation of the matrix. A sub list (parameter offset, parameter shingle.size) equals parameter shingle.\n   * @return weight to be set for parameter shingleToken\n   */\n  public float calculateShingleWeight(Token shingleToken, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    double[] weights = new double[shingle.size()];\n\n    double total = 0f;\n    double top = 0d;\n\n\n    for (int i=0; i<weights.length; i++) {\n      weights[i] = settingsCodec.getWeight(shingle.get(i));\n\n      double tmp = weights[i];\n      if (tmp > top) {\n        top = tmp;\n      }\n      total += tmp;\n    }\n\n    double factor = 1d / Math.sqrt(total);\n\n    double weight = 0d;\n    for (double partWeight : weights) {\n      weight += partWeight * factor;\n    }\n\n    return (float) weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aacf7f8a9f6ea920c7ca39f86371d4e25397121b","date":1297761846,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Evaluates the new shingle token weight.\n   *\n   * for (shingle part token in shingle)\n   * weight +=  shingle part token weight * (1 / sqrt(all shingle part token weights summed))\n   *\n   * This algorithm gives a slightly greater score for longer shingles\n   * and is rather penalising to great shingle token part weights.\n   *\n   * @param shingleToken token returned to consumer\n   * @param shingle tokens the tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset start offset in parameter currentPermutationRows and currentPermutationTokens.\n   * @param currentPermutationRows an index to what matrix row a token in parameter currentPermutationTokens exist.\n   * @param currentPermuationTokens all tokens in the current row permutation of the matrix. A sub list (parameter offset, parameter shingle.size) equals parameter shingle.\n   * @return weight to be set for parameter shingleToken\n   */\n  public float calculateShingleWeight(Token shingleToken, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    double[] weights = new double[shingle.size()];\n\n    double total = 0f;\n    double top = 0d;\n\n\n    for (int i=0; i<weights.length; i++) {\n      weights[i] = settingsCodec.getWeight(shingle.get(i));\n\n      double tmp = weights[i];\n      if (tmp > top) {\n        top = tmp;\n      }\n      total += tmp;\n    }\n\n    double factor = 1d / Math.sqrt(total);\n\n    double weight = 0d;\n    for (double partWeight : weights) {\n      weight += partWeight * factor;\n    }\n\n    return (float) weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Evaluates the new shingle token weight.\n   *\n   * for (shingle part token in shingle)\n   * weight +=  shingle part token weight * (1 / sqrt(all shingle part token weights summed))\n   *\n   * This algorithm gives a slightly greater score for longer shingles\n   * and is rather penalising to great shingle token part weights.\n   *\n   * @param shingleToken token returned to consumer\n   * @param shingle tokens the tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset start offset in parameter currentPermutationRows and currentPermutationTokens.\n   * @param currentPermutationRows an index to what matrix row a token in parameter currentPermutationTokens exist.\n   * @param currentPermuationTokens all tokens in the current row permutation of the matrix. A sub list (parameter offset, parameter shingle.size) equals parameter shingle.\n   * @return weight to be set for parameter shingleToken\n   */\n  public float calculateShingleWeight(Token shingleToken, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    double[] weights = new double[shingle.size()];\n\n    double total = 0f;\n    double top = 0d;\n\n\n    for (int i=0; i<weights.length; i++) {\n      weights[i] = settingsCodec.getWeight(shingle.get(i));\n\n      double tmp = weights[i];\n      if (tmp > top) {\n        top = tmp;\n      }\n      total += tmp;\n    }\n\n    double factor = 1d / Math.sqrt(total);\n\n    double weight = 0d;\n    for (double partWeight : weights) {\n      weight += partWeight * factor;\n    }\n\n    return (float) weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Evaluates the new shingle token weight.\n   *\n   * for (shingle part token in shingle)\n   * weight +=  shingle part token weight * (1 / sqrt(all shingle part token weights summed))\n   *\n   * This algorithm gives a slightly greater score for longer shingles\n   * and is rather penalising to great shingle token part weights.\n   *\n   * @param shingleToken token returned to consumer\n   * @param shingle tokens the tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset start offset in parameter currentPermutationRows and currentPermutationTokens.\n   * @param currentPermutationRows an index to what matrix row a token in parameter currentPermutationTokens exist.\n   * @param currentPermuationTokens all tokens in the current row permutation of the matrix. A sub list (parameter offset, parameter shingle.size) equals parameter shingle.\n   * @return weight to be set for parameter shingleToken\n   */\n  public float calculateShingleWeight(Token shingleToken, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    double[] weights = new double[shingle.size()];\n\n    double total = 0f;\n    double top = 0d;\n\n\n    for (int i=0; i<weights.length; i++) {\n      weights[i] = settingsCodec.getWeight(shingle.get(i));\n\n      double tmp = weights[i];\n      if (tmp > top) {\n        top = tmp;\n      }\n      total += tmp;\n    }\n\n    double factor = 1d / Math.sqrt(total);\n\n    double weight = 0d;\n    for (double partWeight : weights) {\n      weight += partWeight * factor;\n    }\n\n    return (float) weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aacf7f8a9f6ea920c7ca39f86371d4e25397121b"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["f1bdbf92da222965b46c0a942c3857ba56e5c638","aacf7f8a9f6ea920c7ca39f86371d4e25397121b","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}