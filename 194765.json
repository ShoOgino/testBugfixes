{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","commits":[{"id":"b9f70b31079ec002469ee49df3b8f9bd8d10df23","date":1447755747,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  @Override\n  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitDocValues(byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af","date":1461918927,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  @Override\n  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e8d5955830d712186a4beb716e797d505af7981","date":1461951189,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  @Override\n  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  @Override\n  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["8e8d5955830d712186a4beb716e797d505af7981"],"b9f70b31079ec002469ee49df3b8f9bd8d10df23":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af":["b9f70b31079ec002469ee49df3b8f9bd8d10df23"],"8e8d5955830d712186a4beb716e797d505af7981":["b9f70b31079ec002469ee49df3b8f9bd8d10df23","3d3eccadf4f2a01d2034c96afe1a5c617b2e85af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["55b50463286869f584cf849d1587a0fcd54d1dfa","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["b9f70b31079ec002469ee49df3b8f9bd8d10df23","8e8d5955830d712186a4beb716e797d505af7981"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b9f70b31079ec002469ee49df3b8f9bd8d10df23":["3d3eccadf4f2a01d2034c96afe1a5c617b2e85af","8e8d5955830d712186a4beb716e797d505af7981","55b50463286869f584cf849d1587a0fcd54d1dfa"],"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af":["8e8d5955830d712186a4beb716e797d505af7981"],"8e8d5955830d712186a4beb716e797d505af7981":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b9f70b31079ec002469ee49df3b8f9bd8d10df23"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}