{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(double,double).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#constructNormalizedVerticalPlane(double,double).mjava","sourceNew":"  /** Construct a normalized, vertical plane through an x-y point.  If the x-y point is at (0,0), return null.\n  */\n  public static Plane constructNormalizedVerticalPlane(final double x, final double y) {\n    if (Math.abs(x) < MINIMUM_RESOLUTION && Math.abs(y) < MINIMUM_RESOLUTION)\n      return null;\n    final double denom = 1.0 / Math.sqrt(x*x + y*y);\n    return new Plane(x * denom, y * denom);\n  }\n\n","sourceOld":"  /** Construct a normalized, vertical plane through an x-y point.  If the x-y point is at (0,0), return null.\n  */\n  public static Plane constructNormalizedVerticalPlane(final double x, final double y) {\n    if (Math.abs(x) < MINIMUM_RESOLUTION && Math.abs(y) < MINIMUM_RESOLUTION)\n      return null;\n    final double denom = 1.0 / Math.sqrt(x*x + y*y);\n    return new Plane(x * denom, y * denom);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d48c2726dec3381fb15aa3b90f7857635b6bdf74","date":1436825583,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(double,double).mjava","sourceNew":"  /** Construct a normalized, vertical plane through an x-y point.  If the x-y point is at (0,0), return null.\n   * @param x is the x value.\n   * @param y is the y value.\n   * @return a vertical plane passing through the center and (x,y,0).\n   */\n  public static Plane constructNormalizedVerticalPlane(final double x, final double y) {\n    if (Math.abs(x) < MINIMUM_RESOLUTION && Math.abs(y) < MINIMUM_RESOLUTION)\n      return null;\n    final double denom = 1.0 / Math.sqrt(x*x + y*y);\n    return new Plane(x * denom, y * denom);\n  }\n\n","sourceOld":"  /** Construct a normalized, vertical plane through an x-y point.  If the x-y point is at (0,0), return null.\n  */\n  public static Plane constructNormalizedVerticalPlane(final double x, final double y) {\n    if (Math.abs(x) < MINIMUM_RESOLUTION && Math.abs(y) < MINIMUM_RESOLUTION)\n      return null;\n    final double denom = 1.0 / Math.sqrt(x*x + y*y);\n    return new Plane(x * denom, y * denom);\n  }\n\n","bugFix":["f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedZPlane(double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(double,double).mjava","sourceNew":"  /** Construct a normalized plane through an x-y point and including the Z axis.\n   * If the x-y point is at (0,0), return null.\n   * @param x is the x value.\n   * @param y is the y value.\n   * @return a plane passing through the Z axis and (x,y,0).\n   */\n  public static Plane constructNormalizedZPlane(final double x, final double y) {\n    if (Math.abs(x) < MINIMUM_RESOLUTION && Math.abs(y) < MINIMUM_RESOLUTION)\n      return null;\n    final double denom = 1.0 / Math.sqrt(x*x + y*y);\n    return new Plane(y * denom, -x * denom, 0.0, 0.0);\n  }\n\n","sourceOld":"  /** Construct a normalized, vertical plane through an x-y point.  If the x-y point is at (0,0), return null.\n   * @param x is the x value.\n   * @param y is the y value.\n   * @return a vertical plane passing through the center and (x,y,0).\n   */\n  public static Plane constructNormalizedVerticalPlane(final double x, final double y) {\n    if (Math.abs(x) < MINIMUM_RESOLUTION && Math.abs(y) < MINIMUM_RESOLUTION)\n      return null;\n    final double denom = 1.0 / Math.sqrt(x*x + y*y);\n    return new Plane(x * denom, y * denom);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f64b7098768253180859cd8faeae6b1a185b06ed"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}