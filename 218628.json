{"path":"sandbox/contributions/lucli/src/lucli/LuceneMethods#info().mjava","commits":[{"id":"66a601acf439105252becef7e0f1cb6b2e296bce","date":1071108465,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#info().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void info() throws java.io.IOException {\n\t\tIndexReader indexReader = IndexReader.open(indexName);\n\n\n\t\tgetFieldInfo();\n\t\tnumDocs= indexReader.numDocs();\n\t\tmessage(\"Index has \" + numDocs + \" documents \");\n\t\tmessage (\"All Fields:\" + fields.toString());\n\t\tmessage (\"Indexed Fields:\" + indexedFields.toString());\n\n\t\tif (IndexReader.isLocked(indexName)) {\n\t\t\tmessage(\"Index is locked\");\n\t\t}\n\t\t//IndexReader.getCurrentVersion(indexName);\n\t\t//System.out.println(\"Version:\" + version);\n\n\t\tindexReader.close();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8","date":1075080975,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#info().mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#info().mjava","sourceNew":"  public void info() throws java.io.IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n\n\n    getFieldInfo();\n    numDocs = indexReader.numDocs();\n    message(\"Index has \" + numDocs + \" documents \");\n    message(\"All Fields:\" + fields.toString());\n    message(\"Indexed Fields:\" + indexedFields.toString());\n\n    if (IndexReader.isLocked(indexName)) {\n      message(\"Index is locked\");\n    }\n    //IndexReader.getCurrentVersion(indexName);\n    //System.out.println(\"Version:\" + version);\n\n    indexReader.close();\n  }\n\n","sourceOld":"\tpublic void info() throws java.io.IOException {\n\t\tIndexReader indexReader = IndexReader.open(indexName);\n\n\n\t\tgetFieldInfo();\n\t\tnumDocs= indexReader.numDocs();\n\t\tmessage(\"Index has \" + numDocs + \" documents \");\n\t\tmessage (\"All Fields:\" + fields.toString());\n\t\tmessage (\"Indexed Fields:\" + indexedFields.toString());\n\n\t\tif (IndexReader.isLocked(indexName)) {\n\t\t\tmessage(\"Index is locked\");\n\t\t}\n\t\t//IndexReader.getCurrentVersion(indexName);\n\t\t//System.out.println(\"Version:\" + version);\n\n\t\tindexReader.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a","date":1107704112,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/lucli/LuceneMethods#info().mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#info().mjava","sourceNew":"  public void info() throws java.io.IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n\n\n    getFieldInfo();\n    numDocs = indexReader.numDocs();\n    message(\"Index has \" + numDocs + \" documents \");\n    message(\"All Fields:\" + fields.toString());\n    message(\"Indexed Fields:\" + indexedFields.toString());\n\n    if (IndexReader.isLocked(indexName)) {\n      message(\"Index is locked\");\n    }\n    //IndexReader.getCurrentVersion(indexName);\n    //System.out.println(\"Version:\" + version);\n\n    indexReader.close();\n  }\n\n","sourceOld":"  public void info() throws java.io.IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n\n\n    getFieldInfo();\n    numDocs = indexReader.numDocs();\n    message(\"Index has \" + numDocs + \" documents \");\n    message(\"All Fields:\" + fields.toString());\n    message(\"Indexed Fields:\" + indexedFields.toString());\n\n    if (IndexReader.isLocked(indexName)) {\n      message(\"Index is locked\");\n    }\n    //IndexReader.getCurrentVersion(indexName);\n    //System.out.println(\"Version:\" + version);\n\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"66a601acf439105252becef7e0f1cb6b2e296bce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["66a601acf439105252becef7e0f1cb6b2e296bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66a601acf439105252becef7e0f1cb6b2e296bce"],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66a601acf439105252becef7e0f1cb6b2e296bce":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}