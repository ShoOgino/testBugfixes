{"path":"lucene/backwards/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(RawPostingList,RawPostingList).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(RawPostingList,RawPostingList).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(RawPostingList,RawPostingList).mjava","sourceNew":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(RawPostingList p1, RawPostingList p2) {\n\n    if (p1 == p2)\n      return 0;\n\n    final char[] text1 = charPool.buffers[p1.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = p1.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[p2.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = p2.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    assert text1 != text2 || pos1 != pos2;\n\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 != c2) {\n        if (0xffff == c2)\n          return 1;\n        else if (0xffff == c1)\n          return -1;\n        else\n          return c1-c2;\n      } else\n        // This method should never compare equal postings\n        // unless p1==p2\n        assert c1 != 0xffff;\n    }\n  }\n\n","sourceOld":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(RawPostingList p1, RawPostingList p2) {\n\n    if (p1 == p2)\n      return 0;\n\n    final char[] text1 = charPool.buffers[p1.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = p1.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[p2.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = p2.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    assert text1 != text2 || pos1 != pos2;\n\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 != c2) {\n        if (0xffff == c2)\n          return 1;\n        else if (0xffff == c1)\n          return -1;\n        else\n          return c1-c2;\n      } else\n        // This method should never compare equal postings\n        // unless p1==p2\n        assert c1 != 0xffff;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(RawPostingList,RawPostingList).mjava","sourceNew":null,"sourceOld":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(RawPostingList p1, RawPostingList p2) {\n\n    if (p1 == p2)\n      return 0;\n\n    final char[] text1 = charPool.buffers[p1.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = p1.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[p2.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = p2.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    assert text1 != text2 || pos1 != pos2;\n\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 != c2) {\n        if (0xffff == c2)\n          return 1;\n        else if (0xffff == c1)\n          return -1;\n        else\n          return c1-c2;\n      } else\n        // This method should never compare equal postings\n        // unless p1==p2\n        assert c1 != 0xffff;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}