{"path":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes());\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'disk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f787cd05db3599da4aebdbe5e239ddb89163d87","date":1430755822,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'disk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes());\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'disk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4532ba8e59acd790546fd70dbf60086b24b2795c","date":1431009695,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'disk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n  }\n\n","bugFix":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9db5fcef0c59566ad373ff7844f8a985f0017c","date":1467374856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info) {\n        return new SnitchContext(info, node, snitchSession){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n        };\n      }\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":["bf98283bf93e06ee092a158798e6a9d53bb4c747"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dded3df9e710f258905cff1def2f25eb51c62e0f","date":1475158173,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info) {\n        return new SnitchContext(info, node, snitchSession){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n        };\n      }\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info) {\n        return new SnitchContext(info, node, snitchSession){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n        };\n      }\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf98283bf93e06ee092a158798e6a9d53bb4c747","date":1483715447,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}, {'freedisk':'>1'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","bugFix":["2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}, {'freedisk':'>1'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"969718c368b28ed1b2335ea2deb275c696cddb4f","date":1498803580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}, {'freedisk':'>1'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}, {'freedisk':'>1'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}, {'freedisk':'>1'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}, {'freedisk':'>1'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}, {'freedisk':'>1'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, SolrCloudManager cloudManager) {\n        return new ServerSnitchContext(info, node, snitchSession,cloudManager){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}, {'freedisk':'>1'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, CoreContainer cc) {\n        return new ServerSnitchContext(info, node, snitchSession,cc){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","bugFix":["dded3df9e710f258905cff1def2f25eb51c62e0f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement2().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}, {'freedisk':'>1'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, SolrCloudManager cloudManager) {\n        return new ServerSnitchContext(info, node, snitchSession,cloudManager){\n          @Override\n          @SuppressWarnings({\"rawtypes\"})\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement2(){\n\n\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n\n    List<Rule> rules = parseRules(\"[{'cores':'<4'}, {\" +\n            \"'replica':'1',shard:'*','node':'*'},\" +\n            \" {'freedisk':'>1'}]\");\n\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null ).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\"[{role:'!overseer'}, {'freedisk':'>1'}]\" );\n    Map<String, Object> snitchSession = new HashMap<>();\n    List<String> preferredOverseerNodes = ImmutableList.of(\"127.0.0.1:49947_\", \"127.0.0.1:49952_\");\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null) {\n\n      @Override\n      protected SnitchContext getSnitchCtx(String node, SnitchInfoImpl info, SolrCloudManager cloudManager) {\n        return new ServerSnitchContext(info, node, snitchSession,cloudManager){\n          @Override\n          public Map getZkJson(String path) {\n            if(ZkStateReader.ROLES.equals(path)){\n              return Collections.singletonMap(\"overseer\", preferredOverseerNodes);\n            }\n            return null;\n          }\n\n        };\n      }\n\n    };\n    mapping = replicaAssigner.getNodeMappings();\n    assertNotNull(mapping);\n\n    for (String nodeName : mapping.values()) {\n      assertFalse(preferredOverseerNodes.contains(nodeName));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f787cd05db3599da4aebdbe5e239ddb89163d87":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["969718c368b28ed1b2335ea2deb275c696cddb4f"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b693a83132c9e45afcd564fd65a25b60ed80388b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"bf98283bf93e06ee092a158798e6a9d53bb4c747":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["bf98283bf93e06ee092a158798e6a9d53bb4c747"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["bf98283bf93e06ee092a158798e6a9d53bb4c747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2e9db5fcef0c59566ad373ff7844f8a985f0017c","dded3df9e710f258905cff1def2f25eb51c62e0f"],"4532ba8e59acd790546fd70dbf60086b24b2795c":["9f787cd05db3599da4aebdbe5e239ddb89163d87"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","bf98283bf93e06ee092a158798e6a9d53bb4c747"]},"commit2Childs":{"9f787cd05db3599da4aebdbe5e239ddb89163d87":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["9f787cd05db3599da4aebdbe5e239ddb89163d87"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["2e9db5fcef0c59566ad373ff7844f8a985f0017c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","dded3df9e710f258905cff1def2f25eb51c62e0f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf98283bf93e06ee092a158798e6a9d53bb4c747":["969718c368b28ed1b2335ea2deb275c696cddb4f","0d92226151c91fb4bebcca6d18782d1c84aee2cd","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","bf98283bf93e06ee092a158798e6a9d53bb4c747"],"4532ba8e59acd790546fd70dbf60086b24b2795c":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["0d92226151c91fb4bebcca6d18782d1c84aee2cd","cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}