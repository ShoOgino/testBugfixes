{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ee056ec8e953928ee49a691090634eed1fa4d6b","date":1274852580,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition || !quoted) {\n        if (positionCount == 1 || !quoted) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e4a95ed08968b85d84e9fba82424f1fd945fbb","date":1274878310,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition || !quoted) {\n        if (positionCount == 1 || !quoted) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.toString()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.toString()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.toString()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.toString()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f0d8e9a3f2e45eeea14a4803eaac02a0865097","date":1279565910,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.toString()));\n    } else {\n      if (severalTokensAtSamePosition || !quoted) {\n        if (positionCount == 1 || !quoted) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.toString()));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.toString()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.toString()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.toString()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.toString()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.toString()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.toString()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.toString()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.toString()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.toString()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.toString()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"5f4e87790277826a2aea119328600dfb07761f32":["a7347509fad0711ac30cb15a746e9a3830a38ebd","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"5f4e87790277826a2aea119328600dfb07761f32":[],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["5f4e87790277826a2aea119328600dfb07761f32","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}