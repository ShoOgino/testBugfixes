{"path":"src/java/org/apache/solr/request/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","commits":[{"id":"8eb6c8a345eb88b08768b150ffd0bd8088827260","date":1161193988,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    \n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/request/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getSearcher().getSchema().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    \n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72cd269b00ce636078acda21f4b6f920b75dba13","date":1225131045,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/request/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getSearcher().getSchema().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/request/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["8eb6c8a345eb88b08768b150ffd0bd8088827260"],"72cd269b00ce636078acda21f4b6f920b75dba13":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["72cd269b00ce636078acda21f4b6f920b75dba13"],"8eb6c8a345eb88b08768b150ffd0bd8088827260":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["72cd269b00ce636078acda21f4b6f920b75dba13"],"72cd269b00ce636078acda21f4b6f920b75dba13":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8eb6c8a345eb88b08768b150ffd0bd8088827260"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"8eb6c8a345eb88b08768b150ffd0bd8088827260":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}