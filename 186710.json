{"path":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3a2f7df6ce044e8e7f5fe84cb5b23682fa1b27d","date":1335141740,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3a2f7df6ce044e8e7f5fe84cb5b23682fa1b27d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["f3a2f7df6ce044e8e7f5fe84cb5b23682fa1b27d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d374631bb6f5665bd5907a6186a9bb283a315f7d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f3a2f7df6ce044e8e7f5fe84cb5b23682fa1b27d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f3a2f7df6ce044e8e7f5fe84cb5b23682fa1b27d":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}