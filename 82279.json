{"path":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = query.weight(new IndexSearcher(privateContext));\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final ReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final ReaderContext privateContext = context.reader.getTopReaderContext();\n    final Weight weight = query.weight(new IndexSearcher(privateContext));\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = query.weight(new IndexSearcher(privateContext));\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, ScorerContext.def());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = query.weight(new IndexSearcher(privateContext));\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = query.weight(new IndexSearcher(privateContext));\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, ScorerContext.def());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = query.weight(new IndexSearcher(privateContext));\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, ScorerContext.def());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7fee42303a18cc146043c96f66491311b345d9","date":1308246904,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, ScorerContext.def());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = query.weight(new IndexSearcher(privateContext));\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, ScorerContext.def());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, ScorerContext.def());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = query.weight(new IndexSearcher(privateContext));\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, ScorerContext.def());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, privateContext.reader.getLiveDocs());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, ScorerContext.def());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, privateContext.reader.getLiveDocs());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c","6f7fee42303a18cc146043c96f66491311b345d9"],"6f7fee42303a18cc146043c96f66491311b345d9":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"6620df8541b174097b1133a4fc370adb2e570524":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6f7fee42303a18cc146043c96f66491311b345d9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"6f7fee42303a18cc146043c96f66491311b345d9":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6620df8541b174097b1133a4fc370adb2e570524"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","6f7fee42303a18cc146043c96f66491311b345d9","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}