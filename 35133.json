{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnBytesEachTime().mjava","commits":[{"id":"2ec08217282b5e9df023dcdff55c745ff68b1c7d","date":1359392781,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnBytesEachTime().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testCodecUsesOwnBytesEachTime().mjava","sourceNew":"  public void testCodecUsesOwnBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setCodec(getCodec());\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testCodecUsesOwnBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d8cfa5f35ad55b831a4a78a03de723602870d47","date":1359393260,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnBytesEachTime().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnBytesEachTime().mjava","sourceNew":"  public void testCodecUsesOwnBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testCodecUsesOwnBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setCodec(getCodec());\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"003dc2cb64b06ce8caea28156505feb3c5059ba2","date":1359688932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnBytesEachTime().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnBytesEachTime().mjava","sourceNew":"  public void testCodecUsesOwnBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, conf);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testCodecUsesOwnBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnBytesEachTime().mjava","pathOld":"/dev/null","sourceNew":"  public void testCodecUsesOwnBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, conf);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnBytesEachTime().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnBytesEachTime().mjava","sourceNew":"  public void testCodecUsesOwnBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, conf);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.shutdown();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testCodecUsesOwnBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, conf);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testCodecUsesOwnBytesEachTime().mjava","sourceNew":null,"sourceOld":"  public void testCodecUsesOwnBytesEachTime() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, conf);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"foo!\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"bar!\")));\n    iwriter.addDocument(doc);\n    iwriter.shutdown();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.get(0, scratch);\n    assertEquals(\"foo!\", scratch.utf8ToString());\n    \n    BytesRef scratch2 = new BytesRef();\n    dv.get(1, scratch2);\n    assertEquals(\"bar!\", scratch2.utf8ToString());\n    // check scratch is still valid\n    assertEquals(\"foo!\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","003dc2cb64b06ce8caea28156505feb3c5059ba2"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"003dc2cb64b06ce8caea28156505feb3c5059ba2":["4d8cfa5f35ad55b831a4a78a03de723602870d47"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4d8cfa5f35ad55b831a4a78a03de723602870d47":["2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"003dc2cb64b06ce8caea28156505feb3c5059ba2":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"4d8cfa5f35ad55b831a4a78a03de723602870d47":["003dc2cb64b06ce8caea28156505feb3c5059ba2"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["4d8cfa5f35ad55b831a4a78a03de723602870d47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}