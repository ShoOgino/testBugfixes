{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82b686ab2904b3e81184ecea0d238b4ab0885376","date":1529576124,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !updateKey.equals(PROPERTY_UNSET) // handled below in a separate conditional\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateKey.equals(PROPERTY_UNSET) && collection.containsKey((String) updateEntry.getValue())) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c72a217478b8fa40b34697477ecd97e00789579f","date":1529924692,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !updateKey.equals(PROPERTY_UNSET) // handled below in a separate conditional\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateKey.equals(PROPERTY_UNSET) && collection.containsKey((String) updateEntry.getValue())) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24ff7c4fec127d952f886cbfc13dbd18d1e77f6f","date":1550176702,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":["4b4a0745c88f26fb0cb08db12df3db00e49df3b8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e","date":1551802585,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","bugFix":["4425aa1103f1abe8e39d220f12e82b94c4f8272a","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName);\n      reloadCollection(null, cloudConfig, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, cloudConfig, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName);\n      reloadCollection(null, cloudConfig, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, cloudConfig, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"c526352db87264a72a7a9ad68c1b769b81e54305":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c72a217478b8fa40b34697477ecd97e00789579f"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["b94236357aaa22b76c10629851fe4e376e0cea82"],"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e":["24ff7c4fec127d952f886cbfc13dbd18d1e77f6f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","c72a217478b8fa40b34697477ecd97e00789579f"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"],"24ff7c4fec127d952f886cbfc13dbd18d1e77f6f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c72a217478b8fa40b34697477ecd97e00789579f":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","c72a217478b8fa40b34697477ecd97e00789579f"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["82b686ab2904b3e81184ecea0d238b4ab0885376","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["24ff7c4fec127d952f886cbfc13dbd18d1e77f6f"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["c72a217478b8fa40b34697477ecd97e00789579f"],"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"c72a217478b8fa40b34697477ecd97e00789579f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"24ff7c4fec127d952f886cbfc13dbd18d1e77f6f":["fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}