{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#assertSameKeys(NamedList,NamedList).mjava","commits":[{"id":"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e","date":1399316048,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#assertSameKeys(NamedList,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void assertSameKeys(NamedList object, NamedList object2) {\n    Iterator<Map.Entry<String,Object>> iteratorObj2 = ((NamedList)object2).iterator();\n    for (Map.Entry<String,Object> entry:(NamedList<Object>)object) {\n      assertTrue(iteratorObj2.hasNext());\n      Map.Entry<String,Object> entry2 = iteratorObj2.next();\n      assertEquals(entry.getKey(), entry2.getKey());\n      if (entry.getValue() instanceof NamedList) {\n        assertTrue(entry2.getValue() instanceof NamedList);\n        assertSameKeys((NamedList)entry.getValue(), (NamedList)entry2.getValue());\n      }\n    }\n    assertFalse(iteratorObj2.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#assertSameKeys(NamedList,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#assertSameKeys(NamedList,NamedList).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void assertSameKeys(NamedList object, NamedList object2) {\n    Iterator<Map.Entry<String,Object>> iteratorObj2 = (object2).iterator();\n    for (Map.Entry<String,Object> entry:(NamedList<Object>)object) {\n      assertTrue(iteratorObj2.hasNext());\n      Map.Entry<String,Object> entry2 = iteratorObj2.next();\n      assertEquals(entry.getKey(), entry2.getKey());\n      if (entry.getValue() instanceof NamedList) {\n        assertTrue(entry2.getValue() instanceof NamedList);\n        assertSameKeys((NamedList)entry.getValue(), (NamedList)entry2.getValue());\n      }\n    }\n    assertFalse(iteratorObj2.hasNext());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void assertSameKeys(NamedList object, NamedList object2) {\n    Iterator<Map.Entry<String,Object>> iteratorObj2 = ((NamedList)object2).iterator();\n    for (Map.Entry<String,Object> entry:(NamedList<Object>)object) {\n      assertTrue(iteratorObj2.hasNext());\n      Map.Entry<String,Object> entry2 = iteratorObj2.next();\n      assertEquals(entry.getKey(), entry2.getKey());\n      if (entry.getValue() instanceof NamedList) {\n        assertTrue(entry2.getValue() instanceof NamedList);\n        assertSameKeys((NamedList)entry.getValue(), (NamedList)entry2.getValue());\n      }\n    }\n    assertFalse(iteratorObj2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}