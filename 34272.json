{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    // Turn on spellcheck only only when retrieving fields\n    if (!params.getBool(COMPONENT_NAME, false)) return;\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      // fetch at least 5 suggestions from each shard\n      int count = sreq.params.getInt(SPELLCHECK_COUNT, 1);\n      if (count < 5)  count = 5;\n      sreq.params.set(SPELLCHECK_COUNT, count);\n      sreq.params.set(\"spellcheck\", \"true\");\n    } else  {\n      sreq.params.set(\"spellcheck\", \"false\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    // Turn on spellcheck only only when retrieving fields\n    if (!params.getBool(COMPONENT_NAME, false)) return;\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      // fetch at least 5 suggestions from each shard\n      int count = sreq.params.getInt(SPELLCHECK_COUNT, 1);\n      if (count < 5)  count = 5;\n      sreq.params.set(SPELLCHECK_COUNT, count);\n      sreq.params.set(\"spellcheck\", \"true\");\n    } else  {\n      sreq.params.set(\"spellcheck\", \"false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    // Turn on spellcheck only only when retrieving fields\n    if (!params.getBool(COMPONENT_NAME, false)) return;\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      // fetch at least 5 suggestions from each shard\n      int count = sreq.params.getInt(SPELLCHECK_COUNT, 1);\n      if (count < 5)  count = 5;\n      sreq.params.set(SPELLCHECK_COUNT, count);\n      sreq.params.set(\"spellcheck\", \"true\");\n    } else  {\n      sreq.params.set(\"spellcheck\", \"false\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    // Turn on spellcheck only only when retrieving fields\n    if (!params.getBool(COMPONENT_NAME, false)) return;\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      // fetch at least 5 suggestions from each shard\n      int count = sreq.params.getInt(SPELLCHECK_COUNT, 1);\n      if (count < 5)  count = 5;\n      sreq.params.set(SPELLCHECK_COUNT, count);\n      sreq.params.set(\"spellcheck\", \"true\");\n    } else  {\n      sreq.params.set(\"spellcheck\", \"false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    // Turn on spellcheck only only when retrieving fields\n    if (!params.getBool(COMPONENT_NAME, false)) return;\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      // fetch at least 5 suggestions from each shard\n      int count = sreq.params.getInt(SPELLCHECK_COUNT, 1);\n      if (count < 5)  count = 5;\n      sreq.params.set(SPELLCHECK_COUNT, count);\n      sreq.params.set(\"spellcheck\", \"true\");\n    } else  {\n      sreq.params.set(\"spellcheck\", \"false\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    // Turn on spellcheck only only when retrieving fields\n    if (!params.getBool(COMPONENT_NAME, false)) return;\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      // fetch at least 5 suggestions from each shard\n      int count = sreq.params.getInt(SPELLCHECK_COUNT, 1);\n      if (count < 5)  count = 5;\n      sreq.params.set(SPELLCHECK_COUNT, count);\n      sreq.params.set(\"spellcheck\", \"true\");\n    } else  {\n      sreq.params.set(\"spellcheck\", \"false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f53e30d1a17e72299f6e7a149cd1ca6d90b554c","date":1364838207,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) return;\n    int purpose = rb.grouping() ? ShardRequest.PURPOSE_GET_TOP_GROUPS : ShardRequest.PURPOSE_GET_TOP_IDS;   \n    if ((sreq.purpose & purpose) != 0) {\n      // fetch at least 5 suggestions from each shard\n      int count = sreq.params.getInt(SPELLCHECK_COUNT, 1);\n      if (count < 5)  count = 5;\n      sreq.params.set(SPELLCHECK_COUNT, count);\n      sreq.params.set(\"spellcheck\", \"true\");\n    } else  {\n      sreq.params.set(\"spellcheck\", \"false\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    // Turn on spellcheck only only when retrieving fields\n    if (!params.getBool(COMPONENT_NAME, false)) return;\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      // fetch at least 5 suggestions from each shard\n      int count = sreq.params.getInt(SPELLCHECK_COUNT, 1);\n      if (count < 5)  count = 5;\n      sreq.params.set(SPELLCHECK_COUNT, count);\n      sreq.params.set(\"spellcheck\", \"true\");\n    } else  {\n      sreq.params.set(\"spellcheck\", \"false\");\n    }\n  }\n\n","bugFix":["9079aceb3d611cfeb6922ebdf91003c30a08b745"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","date":1443533495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) return;\n    int purpose = rb.grouping() ? ShardRequest.PURPOSE_GET_TOP_GROUPS : ShardRequest.PURPOSE_GET_TOP_IDS;\n    if ((sreq.purpose & purpose) != 0) {\n      // fetch at least 5 suggestions from each shard\n      int count = sreq.params.getInt(SPELLCHECK_COUNT, 1);\n      if (count < 5)  count = 5;\n      sreq.params.set(SPELLCHECK_COUNT, count);\n      sreq.params.set(\"spellcheck\", \"true\");\n    } else  {\n      sreq.params.set(\"spellcheck\", \"false\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) return;\n    int purpose = rb.grouping() ? ShardRequest.PURPOSE_GET_TOP_GROUPS : ShardRequest.PURPOSE_GET_TOP_IDS;   \n    if ((sreq.purpose & purpose) != 0) {\n      // fetch at least 5 suggestions from each shard\n      int count = sreq.params.getInt(SPELLCHECK_COUNT, 1);\n      if (count < 5)  count = 5;\n      sreq.params.set(SPELLCHECK_COUNT, count);\n      sreq.params.set(\"spellcheck\", \"true\");\n    } else  {\n      sreq.params.set(\"spellcheck\", \"false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9f53e30d1a17e72299f6e7a149cd1ca6d90b554c":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["9f53e30d1a17e72299f6e7a149cd1ca6d90b554c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9f53e30d1a17e72299f6e7a149cd1ca6d90b554c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"9f53e30d1a17e72299f6e7a149cd1ca6d90b554c":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}