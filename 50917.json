{"path":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#getTFIT().mjava","commits":[{"id":"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","date":1282571040,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#getTFIT().mjava","pathOld":"/dev/null","sourceNew":"  private TermFreqIterator getTFIT() {\n    final int count = 100000;\n    TermFreqIterator tfit = new TermFreqIterator() {\n      Random r = new Random(1234567890L);\n      Random r1 = new Random(1234567890L);\n      int pos;\n\n      @Override\n      public float freq() {\n        return r1.nextInt(4);\n      }\n\n      @Override\n      public boolean hasNext() {\n        return pos < count;\n      }\n\n      @Override\n      public String next() {\n        pos++;\n        return Long.toString(r.nextLong());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    return tfit;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cd064fa4fc33438aaa550384d00adb31b7960f4","date":1282920434,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#getTFIT().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#getTFIT().mjava","sourceNew":"  private TermFreqIterator getTFIT() {\n    final int count = 100000;\n    TermFreqIterator tfit = new TermFreqIterator() {\n      Random r = new Random(1234567890L);\n      Random r1 = new Random(1234567890L);\n      int pos;\n\n      public float freq() {\n        return r1.nextInt(4);\n      }\n\n      public boolean hasNext() {\n        return pos < count;\n      }\n\n      public String next() {\n        pos++;\n        return Long.toString(r.nextLong());\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    return tfit;\n  }\n\n","sourceOld":"  private TermFreqIterator getTFIT() {\n    final int count = 100000;\n    TermFreqIterator tfit = new TermFreqIterator() {\n      Random r = new Random(1234567890L);\n      Random r1 = new Random(1234567890L);\n      int pos;\n\n      @Override\n      public float freq() {\n        return r1.nextInt(4);\n      }\n\n      @Override\n      public boolean hasNext() {\n        return pos < count;\n      }\n\n      @Override\n      public String next() {\n        pos++;\n        return Long.toString(r.nextLong());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    return tfit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#getTFIT().mjava","pathOld":"/dev/null","sourceNew":"  private TermFreqIterator getTFIT() {\n    final int count = 100000;\n    TermFreqIterator tfit = new TermFreqIterator() {\n      Random r = new Random(1234567890L);\n      Random r1 = new Random(1234567890L);\n      int pos;\n\n      public float freq() {\n        return r1.nextInt(4);\n      }\n\n      public boolean hasNext() {\n        return pos < count;\n      }\n\n      public String next() {\n        pos++;\n        return Long.toString(r.nextLong());\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    return tfit;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47ac88233e9e3019faa24a5184425ad60c23d70f","date":1302779803,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#getTFIT().mjava","sourceNew":null,"sourceOld":"  private TermFreqIterator getTFIT() {\n    final int count = 100000;\n    TermFreqIterator tfit = new TermFreqIterator() {\n      Random r = new Random(1234567890L);\n      Random r1 = new Random(1234567890L);\n      int pos;\n\n      public float freq() {\n        return r1.nextInt(4);\n      }\n\n      public boolean hasNext() {\n        return pos < count;\n      }\n\n      public String next() {\n        pos++;\n        return Long.toString(r.nextLong());\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    return tfit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#getTFIT().mjava","sourceNew":null,"sourceOld":"  private TermFreqIterator getTFIT() {\n    final int count = 100000;\n    TermFreqIterator tfit = new TermFreqIterator() {\n      Random r = new Random(1234567890L);\n      Random r1 = new Random(1234567890L);\n      int pos;\n\n      public float freq() {\n        return r1.nextInt(4);\n      }\n\n      public boolean hasNext() {\n        return pos < count;\n      }\n\n      public String next() {\n        pos++;\n        return Long.toString(r.nextLong());\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    return tfit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#getTFIT().mjava","sourceNew":null,"sourceOld":"  private TermFreqIterator getTFIT() {\n    final int count = 100000;\n    TermFreqIterator tfit = new TermFreqIterator() {\n      Random r = new Random(1234567890L);\n      Random r1 = new Random(1234567890L);\n      int pos;\n\n      public float freq() {\n        return r1.nextInt(4);\n      }\n\n      public boolean hasNext() {\n        return pos < count;\n      }\n\n      public String next() {\n        pos++;\n        return Long.toString(r.nextLong());\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    return tfit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#getTFIT().mjava","sourceNew":null,"sourceOld":"  private TermFreqIterator getTFIT() {\n    final int count = 100000;\n    TermFreqIterator tfit = new TermFreqIterator() {\n      Random r = new Random(1234567890L);\n      Random r1 = new Random(1234567890L);\n      int pos;\n\n      public float freq() {\n        return r1.nextInt(4);\n      }\n\n      public boolean hasNext() {\n        return pos < count;\n      }\n\n      public String next() {\n        pos++;\n        return Long.toString(r.nextLong());\n      }\n\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    return tfit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cd064fa4fc33438aaa550384d00adb31b7960f4":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"47ac88233e9e3019faa24a5184425ad60c23d70f":["9cd064fa4fc33438aaa550384d00adb31b7960f4"],"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eb46686a27187e42311e77666a2c7026f461ebc":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","47ac88233e9e3019faa24a5184425ad60c23d70f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9cd064fa4fc33438aaa550384d00adb31b7960f4","47ac88233e9e3019faa24a5184425ad60c23d70f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9cd064fa4fc33438aaa550384d00adb31b7960f4","47ac88233e9e3019faa24a5184425ad60c23d70f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9cd064fa4fc33438aaa550384d00adb31b7960f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47ac88233e9e3019faa24a5184425ad60c23d70f"]},"commit2Childs":{"9cd064fa4fc33438aaa550384d00adb31b7960f4":["47ac88233e9e3019faa24a5184425ad60c23d70f","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["9cd064fa4fc33438aaa550384d00adb31b7960f4"],"47ac88233e9e3019faa24a5184425ad60c23d70f":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1eb46686a27187e42311e77666a2c7026f461ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}