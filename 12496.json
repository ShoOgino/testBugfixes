{"path":"solr/core/src/java/org/apache/solr/core/LibListener.ExtHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/LibListener.ExtHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) {\n      int v = req.getParams().getInt(ConfigOverlay.ZNODEVER, -1);\n      if (v >= 0) {\n        log.debug(\"expected version : {} , my version {}\", v, libListener.myversion );\n        ZkStateReader zkStateReader = libListener.coreContainer.getZkController().getZkStateReader();\n        zkStateReader.forceRefreshClusterProps(v);\n      }\n      rsp.add(\"metadata\", (MapWriter) ew -> ew.putIfNotNull(VERSION,\n          libListener.coreContainer.getZkController().zkStateReader.getClusterPropsVersion()));\n      rsp.add(RuntimeLib.TYPE, libListener.runtimeLibs.values());\n      rsp.add(SolrRequestHandler.TYPE,\n          (IteratorWriter) iw -> customHandlers.forEach((s, h) -> iw.addNoEx(ImmutableMap.of(s, h.getClass().getName()))));\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PackageManager.ExtHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/LibListener.ExtHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Override\n    public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) {\n      int v = req.getParams().getInt(ConfigOverlay.ZNODEVER, -1);\n      if (v >= 0) {\n        log.debug(\"expected version : {} , my version {}\", v, packageManager.myversion);\n        ZkStateReader zkStateReader = packageManager.coreContainer.getZkController().getZkStateReader();\n        try {\n          zkStateReader.forceRefreshClusterProps(v);\n        } catch (SolrException e) {\n          log.error(\"Error refreshing state \", e);\n          throw e;\n        }\n      }\n      rsp.add(\"metadata\", (MapWriter) ew -> ew.putIfNotNull(VERSION,\n          packageManager.coreContainer.getZkController().zkStateReader.getClusterPropsVersion()));\n      rsp.add(RuntimeLib.TYPE, packageManager.pkgs.values());\n      rsp.add(SolrRequestHandler.TYPE, customHandlers.values());\n\n    }\n\n","sourceOld":"    @Override\n    public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) {\n      int v = req.getParams().getInt(ConfigOverlay.ZNODEVER, -1);\n      if (v >= 0) {\n        log.debug(\"expected version : {} , my version {}\", v, libListener.myversion );\n        ZkStateReader zkStateReader = libListener.coreContainer.getZkController().getZkStateReader();\n        zkStateReader.forceRefreshClusterProps(v);\n      }\n      rsp.add(\"metadata\", (MapWriter) ew -> ew.putIfNotNull(VERSION,\n          libListener.coreContainer.getZkController().zkStateReader.getClusterPropsVersion()));\n      rsp.add(RuntimeLib.TYPE, libListener.runtimeLibs.values());\n      rsp.add(SolrRequestHandler.TYPE,\n          (IteratorWriter) iw -> customHandlers.forEach((s, h) -> iw.addNoEx(ImmutableMap.of(s, h.getClass().getName()))));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}