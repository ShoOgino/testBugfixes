{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    bodyStoreVal = (bodyStored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    if (bodyTokenized) {\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    bodyStoreVal = (bodyStored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    if (bodyTokenized) {\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"/dev/null","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    bodyStoreVal = (bodyStored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    if (bodyTokenized) {\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    bodyStoreVal = (bodyStored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    if (bodyTokenized) {\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    bodyStoreVal = (bodyStored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    if (bodyTokenized) {\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType.setStored(stored);\n    bodyValType.setStored(bodyStored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    \n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    bodyStoreVal = (bodyStored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    if (bodyTokenized) {\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46512daf6ac1e4e32fde76609a8009353226427a","date":1314716714,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType.setStored(stored);\n    bodyValType.setStored(bodyStored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    \n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fa213e2e0dd99953e6b110fe2f801d00ae6a477","date":1329289301,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      if (source != null) {\n        source.close();\n      }\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ce1cc06c6223f50ada9261f064452650d65892a","date":1329289351,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n        if (source != null) {\n          source.close();\n        }\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      if (source != null) {\n        source.close();\n      }\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n        if (source != null) {\n          source.close();\n        }\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n        if (source != null) {\n          source.close();\n        }\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8fa213e2e0dd99953e6b110fe2f801d00ae6a477":["46512daf6ac1e4e32fde76609a8009353226427a"],"8ce1cc06c6223f50ada9261f064452650d65892a":["8fa213e2e0dd99953e6b110fe2f801d00ae6a477"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8ce1cc06c6223f50ada9261f064452650d65892a"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"46512daf6ac1e4e32fde76609a8009353226427a":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"8fa213e2e0dd99953e6b110fe2f801d00ae6a477":["8ce1cc06c6223f50ada9261f064452650d65892a"],"8ce1cc06c6223f50ada9261f064452650d65892a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","1509f151d7692d84fae414b2b799ac06ba60fcb4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["46512daf6ac1e4e32fde76609a8009353226427a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"46512daf6ac1e4e32fde76609a8009353226427a":["8fa213e2e0dd99953e6b110fe2f801d00ae6a477"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}