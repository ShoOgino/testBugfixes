{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","commits":[{"id":"40640359164f629dd440a47df2e145d084ce9645","date":1391711808,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(ValueSource).mjava","sourceNew":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString() {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final Bits fastMatchBits;\n        if (fastMatchFilter != null) {\n          DocIdSet dis = fastMatchFilter.getDocIdSet(context, null);\n          if (dis == null) {\n            // No documents match\n            return null;\n          }\n          fastMatchBits = dis.bits();\n          if (fastMatchBits == null) {\n            throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n          }\n        } else {\n          fastMatchBits = null;\n        }\n\n        return new DocIdSet() {\n\n          @Override\n          public Bits bits() {\n            return new Bits() {\n              @Override\n              public boolean get(int docID) {\n                if (acceptDocs != null && acceptDocs.get(docID) == false) {\n                  return false;\n                }\n                if (fastMatchBits != null && fastMatchBits.get(docID) == false) {\n                  return false;\n                }\n                return accept(values.doubleVal(docID));\n              }\n\n              @Override\n              public int length() {\n                return maxDoc;\n              }\n            };\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            throw new UnsupportedOperationException(\"this filter can only be accessed via bits()\");\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /** Returns a new {@link Filter} accepting only documents\n   *  in this range.  Note that this filter is not\n   *  efficient: it's a linear scan of all docs, testing\n   *  each value.  If the {@link ValueSource} is static,\n   *  e.g. an indexed numeric field, then it's more\n   *  efficient to use {@link NumericRangeFilter}. */\n  public Filter getFilter(final ValueSource valueSource) {\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        return new DocIdSet() {\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int doc = -1;\n\n              @Override\n              public int nextDoc() throws IOException {\n                while (true) {\n                  doc++;\n                  if (doc == maxDoc) {\n                    return doc = NO_MORE_DOCS;\n                  }\n                  if (acceptDocs != null && acceptDocs.get(doc) == false) {\n                    continue;\n                  }\n                  double v = values.doubleVal(doc);\n                  if (accept(v)) {\n                    return doc;\n                  }\n                }\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                doc = target-1;\n                return nextDoc();\n              }\n\n              @Override\n              public int docID() {\n                return doc;\n              }\n\n              @Override\n              public long cost() {\n                // Since we do a linear scan over all\n                // documents, our cost is O(maxDoc):\n                return maxDoc;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","date":1402659583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","sourceNew":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString() {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final Bits fastMatchBits;\n        if (fastMatchFilter != null) {\n          DocIdSet dis = fastMatchFilter.getDocIdSet(context, null);\n          if (dis == null) {\n            // No documents match\n            return null;\n          }\n          fastMatchBits = dis.bits();\n          if (fastMatchBits == null) {\n            throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n          }\n        } else {\n          fastMatchBits = null;\n        }\n\n        return new DocIdSet() {\n\n          @Override\n          public Bits bits() {\n            return new Bits() {\n              @Override\n              public boolean get(int docID) {\n                if (acceptDocs != null && acceptDocs.get(docID) == false) {\n                  return false;\n                }\n                if (fastMatchBits != null && fastMatchBits.get(docID) == false) {\n                  return false;\n                }\n                return accept(values.doubleVal(docID));\n              }\n\n              @Override\n              public int length() {\n                return maxDoc;\n              }\n            };\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            throw new UnsupportedOperationException(\"this filter can only be accessed via bits()\");\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString() {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final Bits fastMatchBits;\n        if (fastMatchFilter != null) {\n          DocIdSet dis = fastMatchFilter.getDocIdSet(context, null);\n          if (dis == null) {\n            // No documents match\n            return null;\n          }\n          fastMatchBits = dis.bits();\n          if (fastMatchBits == null) {\n            throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n          }\n        } else {\n          fastMatchBits = null;\n        }\n\n        return new DocIdSet() {\n\n          @Override\n          public Bits bits() {\n            return new Bits() {\n              @Override\n              public boolean get(int docID) {\n                if (acceptDocs != null && acceptDocs.get(docID) == false) {\n                  return false;\n                }\n                if (fastMatchBits != null && fastMatchBits.get(docID) == false) {\n                  return false;\n                }\n                return accept(values.doubleVal(docID));\n              }\n\n              @Override\n              public int length() {\n                return maxDoc;\n              }\n            };\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            throw new UnsupportedOperationException(\"this filter can only be accessed via bits()\");\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","sourceNew":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString() {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final Bits fastMatchBits;\n        if (fastMatchFilter != null) {\n          DocIdSet dis = fastMatchFilter.getDocIdSet(context, null);\n          if (dis == null) {\n            // No documents match\n            return null;\n          }\n          fastMatchBits = dis.bits();\n          if (fastMatchBits == null) {\n            throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n          }\n        } else {\n          fastMatchBits = null;\n        }\n\n        return new DocIdSet() {\n\n          @Override\n          public Bits bits() {\n            return new Bits() {\n              @Override\n              public boolean get(int docID) {\n                if (acceptDocs != null && acceptDocs.get(docID) == false) {\n                  return false;\n                }\n                if (fastMatchBits != null && fastMatchBits.get(docID) == false) {\n                  return false;\n                }\n                return accept(values.doubleVal(docID));\n              }\n\n              @Override\n              public int length() {\n                return maxDoc;\n              }\n            };\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            throw new UnsupportedOperationException(\"this filter can only be accessed via bits()\");\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString() {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final Bits fastMatchBits;\n        if (fastMatchFilter != null) {\n          DocIdSet dis = fastMatchFilter.getDocIdSet(context, null);\n          if (dis == null) {\n            // No documents match\n            return null;\n          }\n          fastMatchBits = dis.bits();\n          if (fastMatchBits == null) {\n            throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n          }\n        } else {\n          fastMatchBits = null;\n        }\n\n        return new DocIdSet() {\n\n          @Override\n          public Bits bits() {\n            return new Bits() {\n              @Override\n              public boolean get(int docID) {\n                if (acceptDocs != null && acceptDocs.get(docID) == false) {\n                  return false;\n                }\n                if (fastMatchBits != null && fastMatchBits.get(docID) == false) {\n                  return false;\n                }\n                return accept(values.doubleVal(docID));\n              }\n\n              @Override\n              public int length() {\n                return maxDoc;\n              }\n            };\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            throw new UnsupportedOperationException(\"this filter can only be accessed via bits()\");\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","sourceNew":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString() {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final Bits fastMatchBits;\n        if (fastMatchFilter != null) {\n          DocIdSet dis = fastMatchFilter.getDocIdSet(context, null);\n          if (dis == null) {\n            // No documents match\n            return null;\n          }\n          fastMatchBits = dis.bits();\n          if (fastMatchBits == null) {\n            throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n          }\n        } else {\n          fastMatchBits = null;\n        }\n\n        return new DocIdSet() {\n\n          @Override\n          public Bits bits() {\n            return new Bits() {\n              @Override\n              public boolean get(int docID) {\n                if (acceptDocs != null && acceptDocs.get(docID) == false) {\n                  return false;\n                }\n                if (fastMatchBits != null && fastMatchBits.get(docID) == false) {\n                  return false;\n                }\n                return accept(values.doubleVal(docID));\n              }\n\n              @Override\n              public int length() {\n                return maxDoc;\n              }\n            };\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            throw new UnsupportedOperationException(\"this filter can only be accessed via bits()\");\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString() {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final Bits fastMatchBits;\n        if (fastMatchFilter != null) {\n          DocIdSet dis = fastMatchFilter.getDocIdSet(context, null);\n          if (dis == null) {\n            // No documents match\n            return null;\n          }\n          fastMatchBits = dis.bits();\n          if (fastMatchBits == null) {\n            throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n          }\n        } else {\n          fastMatchBits = null;\n        }\n\n        return new DocIdSet() {\n\n          @Override\n          public Bits bits() {\n            return new Bits() {\n              @Override\n              public boolean get(int docID) {\n                if (acceptDocs != null && acceptDocs.get(docID) == false) {\n                  return false;\n                }\n                if (fastMatchBits != null && fastMatchBits.get(docID) == false) {\n                  return false;\n                }\n                return accept(values.doubleVal(docID));\n              }\n\n              @Override\n              public int length() {\n                return maxDoc;\n              }\n            };\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            throw new UnsupportedOperationException(\"this filter can only be accessed via bits()\");\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6","date":1424027250,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","sourceNew":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString(String field) {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final Bits fastMatchBits;\n        if (fastMatchFilter != null) {\n          DocIdSet dis = fastMatchFilter.getDocIdSet(context, null);\n          if (dis == null) {\n            // No documents match\n            return null;\n          }\n          fastMatchBits = dis.bits();\n          if (fastMatchBits == null) {\n            throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n          }\n        } else {\n          fastMatchBits = null;\n        }\n\n        return new DocIdSet() {\n\n          @Override\n          public Bits bits() {\n            return new Bits() {\n              @Override\n              public boolean get(int docID) {\n                if (acceptDocs != null && acceptDocs.get(docID) == false) {\n                  return false;\n                }\n                if (fastMatchBits != null && fastMatchBits.get(docID) == false) {\n                  return false;\n                }\n                return accept(values.doubleVal(docID));\n              }\n\n              @Override\n              public int length() {\n                return maxDoc;\n              }\n            };\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            throw new UnsupportedOperationException(\"this filter can only be accessed via bits()\");\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString() {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final Bits fastMatchBits;\n        if (fastMatchFilter != null) {\n          DocIdSet dis = fastMatchFilter.getDocIdSet(context, null);\n          if (dis == null) {\n            // No documents match\n            return null;\n          }\n          fastMatchBits = dis.bits();\n          if (fastMatchBits == null) {\n            throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n          }\n        } else {\n          fastMatchBits = null;\n        }\n\n        return new DocIdSet() {\n\n          @Override\n          public Bits bits() {\n            return new Bits() {\n              @Override\n              public boolean get(int docID) {\n                if (acceptDocs != null && acceptDocs.get(docID) == false) {\n                  return false;\n                }\n                if (fastMatchBits != null && fastMatchBits.get(docID) == false) {\n                  return false;\n                }\n                return accept(values.doubleVal(docID));\n              }\n\n              @Override\n              public int length() {\n                return maxDoc;\n              }\n            };\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            throw new UnsupportedOperationException(\"this filter can only be accessed via bits()\");\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["40640359164f629dd440a47df2e145d084ce9645"],"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"099c774ddd27f4ad437ca5df14d153bab0a3affe","date":1424527689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","sourceNew":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString(String field) {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final DocIdSet fastMatchDocs;\n        if (fastMatchFilter != null) {\n          fastMatchDocs = fastMatchFilter.getDocIdSet(context, null);\n          if (fastMatchDocs == null) {\n            // No documents match\n            return null;\n          }\n        } else {\n          fastMatchDocs = new DocIdSet() {\n            @Override\n            public long ramBytesUsed() {\n              return 0;\n            }\n            @Override\n            public DocIdSetIterator iterator() throws IOException {\n              return DocIdSetIterator.all(maxDoc);\n            }\n          };\n        }\n\n        return new FilteredDocIdSet(fastMatchDocs) {\n          @Override\n          protected boolean match(int docID) {\n            if (acceptDocs != null && acceptDocs.get(docID) == false) {\n              return false;\n            }\n            return accept(values.doubleVal(docID));\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString(String field) {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final Bits fastMatchBits;\n        if (fastMatchFilter != null) {\n          DocIdSet dis = fastMatchFilter.getDocIdSet(context, null);\n          if (dis == null) {\n            // No documents match\n            return null;\n          }\n          fastMatchBits = dis.bits();\n          if (fastMatchBits == null) {\n            throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n          }\n        } else {\n          fastMatchBits = null;\n        }\n\n        return new DocIdSet() {\n\n          @Override\n          public Bits bits() {\n            return new Bits() {\n              @Override\n              public boolean get(int docID) {\n                if (acceptDocs != null && acceptDocs.get(docID) == false) {\n                  return false;\n                }\n                if (fastMatchBits != null && fastMatchBits.get(docID) == false) {\n                  return false;\n                }\n                return accept(values.doubleVal(docID));\n              }\n\n              @Override\n              public int length() {\n                return maxDoc;\n              }\n            };\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            throw new UnsupportedOperationException(\"this filter can only be accessed via bits()\");\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8249072f13ea4354ab7635c2d7a59cc682806dab","date":1429649774,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","sourceNew":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new ValueSourceFilter(this, fastMatchFilter, valueSource);\n  }\n\n","sourceOld":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new Filter() {\n\n      @Override\n      public String toString(String field) {\n        return \"Filter(\" + DoubleRange.this.toString() + \")\";\n      }\n\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        final DocIdSet fastMatchDocs;\n        if (fastMatchFilter != null) {\n          fastMatchDocs = fastMatchFilter.getDocIdSet(context, null);\n          if (fastMatchDocs == null) {\n            // No documents match\n            return null;\n          }\n        } else {\n          fastMatchDocs = new DocIdSet() {\n            @Override\n            public long ramBytesUsed() {\n              return 0;\n            }\n            @Override\n            public DocIdSetIterator iterator() throws IOException {\n              return DocIdSetIterator.all(maxDoc);\n            }\n          };\n        }\n\n        return new FilteredDocIdSet(fastMatchDocs) {\n          @Override\n          protected boolean match(int docID) {\n            if (acceptDocs != null && acceptDocs.get(docID) == false) {\n              return false;\n            }\n            return accept(values.doubleVal(docID));\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6","c9fb5f46e264daf5ba3860defe623a89d202dd87","40640359164f629dd440a47df2e145d084ce9645","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","099c774ddd27f4ad437ca5df14d153bab0a3affe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(Filter,ValueSource).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {\n    return new ValueSourceFilter(this, fastMatchFilter, valueSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"099c774ddd27f4ad437ca5df14d153bab0a3affe":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["40640359164f629dd440a47df2e145d084ce9645"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8249072f13ea4354ab7635c2d7a59cc682806dab":["099c774ddd27f4ad437ca5df14d153bab0a3affe"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["40640359164f629dd440a47df2e145d084ce9645","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"40640359164f629dd440a47df2e145d084ce9645":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"]},"commit2Childs":{"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["099c774ddd27f4ad437ca5df14d153bab0a3affe"],"099c774ddd27f4ad437ca5df14d153bab0a3affe":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40640359164f629dd440a47df2e145d084ce9645"],"8249072f13ea4354ab7635c2d7a59cc682806dab":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"40640359164f629dd440a47df2e145d084ce9645":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}