{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.MaxValueHeap#lessThan(FacetResultNode,FacetResultNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.MaxValueHeap#lessThan(FacetResultNode,FacetResultNode).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.MaxValueHeap#lessThan(FacetResultNode,FacetResultNode).mjava","sourceNew":"    @Override\n    protected boolean lessThan(FacetResultNode arg0, FacetResultNode arg1) {\n      double value0 = arg0.getValue();\n      double value1 = arg1.getValue();\n\n      int valueCompare = Double.compare(value0, value1);\n      if (valueCompare == 0) { \n        return arg0.getOrdinal() > arg1.getOrdinal();\n      }\n\n      return valueCompare > 0;\n    }\n\n","sourceOld":"    @Override\n    protected boolean lessThan(FacetResultNode arg0, FacetResultNode arg1) {\n      double value0 = arg0.getValue();\n      double value1 = arg1.getValue();\n\n      int valueCompare = Double.compare(value0, value1);\n      if (valueCompare == 0) { \n        return arg0.getOrdinal() > arg1.getOrdinal();\n      }\n\n      return valueCompare > 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.MaxValueHeap#lessThan(FacetResultNode,FacetResultNode).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.MaxValueHeap#lessThan(FacetResultNode,FacetResultNode).mjava","sourceNew":"    @Override\n    protected boolean lessThan(FacetResultNode arg0, FacetResultNode arg1) {\n      double value0 = arg0.value;\n      double value1 = arg1.value;\n\n      int valueCompare = Double.compare(value0, value1);\n      if (valueCompare == 0) { \n        return arg0.ordinal > arg1.ordinal;\n      }\n\n      return valueCompare > 0;\n    }\n\n","sourceOld":"    @Override\n    protected boolean lessThan(FacetResultNode arg0, FacetResultNode arg1) {\n      double value0 = arg0.getValue();\n      double value1 = arg1.getValue();\n\n      int valueCompare = Double.compare(value0, value1);\n      if (valueCompare == 0) { \n        return arg0.getOrdinal() > arg1.getOrdinal();\n      }\n\n      return valueCompare > 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.MaxValueHeap#lessThan(FacetResultNode,FacetResultNode).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.MaxValueHeap#lessThan(FacetResultNode,FacetResultNode).mjava","sourceNew":"    @Override\n    protected boolean lessThan(FacetResultNode arg0, FacetResultNode arg1) {\n      double value0 = arg0.value;\n      double value1 = arg1.value;\n\n      int valueCompare = Double.compare(value0, value1);\n      if (valueCompare == 0) { \n        return arg0.ordinal > arg1.ordinal;\n      }\n\n      return valueCompare > 0;\n    }\n\n","sourceOld":"    @Override\n    protected boolean lessThan(FacetResultNode arg0, FacetResultNode arg1) {\n      double value0 = arg0.getValue();\n      double value1 = arg1.getValue();\n\n      int valueCompare = Double.compare(value0, value1);\n      if (valueCompare == 0) { \n        return arg0.getOrdinal() > arg1.getOrdinal();\n      }\n\n      return valueCompare > 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.MaxValueHeap#lessThan(FacetResultNode,FacetResultNode).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected boolean lessThan(FacetResultNode arg0, FacetResultNode arg1) {\n      double value0 = arg0.value;\n      double value1 = arg1.value;\n\n      int valueCompare = Double.compare(value0, value1);\n      if (valueCompare == 0) { \n        return arg0.ordinal > arg1.ordinal;\n      }\n\n      return valueCompare > 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.MaxValueHeap#lessThan(FacetResultNode,FacetResultNode).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected boolean lessThan(FacetResultNode arg0, FacetResultNode arg1) {\n      double value0 = arg0.value;\n      double value1 = arg1.value;\n\n      int valueCompare = Double.compare(value0, value1);\n      if (valueCompare == 0) { \n        return arg0.ordinal > arg1.ordinal;\n      }\n\n      return valueCompare > 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["811cdb4a80352766eb0c762e48972707a924e5cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["811cdb4a80352766eb0c762e48972707a924e5cd","d33e19a97046248623a7591aeaa6547233fd15e2"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["07155cdd910937cdf6877e48884d5782845c8b8b","811cdb4a80352766eb0c762e48972707a924e5cd"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"811cdb4a80352766eb0c762e48972707a924e5cd":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}