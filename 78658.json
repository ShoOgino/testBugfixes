{"path":"lucene/src/test/org/apache/lucene/util/TestBitVector#testSparseWrite().mjava","commits":[{"id":"f0f277693790b6ff2e44509d1b5a1ca5a18f16de","date":1310325911,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#testSparseWrite().mjava","pathOld":"/dev/null","sourceNew":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random.nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random.nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a73b15d807e41306466aec106b4cb85b8d5335","date":1326993385,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testSparseWrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#testSparseWrite().mjava","sourceNew":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random.nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random.nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","sourceOld":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random.nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random.nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testSparseWrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#testSparseWrite().mjava","sourceNew":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random.nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random.nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","sourceOld":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random.nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random.nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testSparseWrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#testSparseWrite().mjava","sourceNew":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random.nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random.nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","sourceOld":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random.nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random.nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","e3a73b15d807e41306466aec106b4cb85b8d5335"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"]},"commit2Childs":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["e3a73b15d807e41306466aec106b4cb85b8d5335","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}