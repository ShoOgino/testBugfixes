{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","commits":[{"id":"961a14d298363c1efe0c3135a9f8b762dafd0d99","date":1496035169,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx, String key) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(key, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx, String key) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(key, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx, String key) throws KeeperException, InterruptedException {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    try {\n      if (roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n      cacheRoles(solrNode, ctx, key, roles);\n    } catch (KeeperException.NoNodeException e) {\n      cacheRoles(solrNode, ctx, key, Collections.emptyMap());\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx, String key) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(key, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","pathOld":"/dev/null","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx, String key) throws KeeperException, InterruptedException {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    try {\n      if (roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n      cacheRoles(solrNode, ctx, key, roles);\n    } catch (KeeperException.NoNodeException e) {\n      cacheRoles(solrNode, ctx, key, Collections.emptyMap());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx, String key) throws KeeperException, InterruptedException {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    try {\n      if (roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n      cacheRoles(solrNode, ctx, key, roles);\n    } catch (KeeperException.NoNodeException e) {\n      cacheRoles(solrNode, ctx, key, Collections.emptyMap());\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx, String key) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(key, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","pathOld":"/dev/null","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx, String key) throws KeeperException, InterruptedException {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    try {\n      if (roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n      cacheRoles(solrNode, ctx, key, roles);\n    } catch (KeeperException.NoNodeException e) {\n      cacheRoles(solrNode, ctx, key, Collections.emptyMap());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx, String key) throws KeeperException, InterruptedException {\n    @SuppressWarnings({\"rawtypes\"})\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    try {\n      if (roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n      cacheRoles(solrNode, ctx, key, roles);\n    } catch (KeeperException.NoNodeException e) {\n      cacheRoles(solrNode, ctx, key, Collections.emptyMap());\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx, String key) throws KeeperException, InterruptedException {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    try {\n      if (roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n      cacheRoles(solrNode, ctx, key, roles);\n    } catch (KeeperException.NoNodeException e) {\n      cacheRoles(solrNode, ctx, key, Collections.emptyMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"961a14d298363c1efe0c3135a9f8b762dafd0d99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["961a14d298363c1efe0c3135a9f8b762dafd0d99","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["a513b6a92751e54c76fb5447948c9e7d437163a7"]},"commit2Childs":{"961a14d298363c1efe0c3135a9f8b762dafd0d99":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["961a14d298363c1efe0c3135a9f8b762dafd0d99","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}