{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","commits":[{"id":"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d","date":1491310508,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    ServerSnitchContext snitchContext = (ServerSnitchContext) ctx;\n    List<String> groups = new ArrayList<>();\n    List<String> prefixes = new ArrayList<>();\n    if (requestedTags.contains(DISK)) {\n      groups.add(\"solr.node\");\n      prefixes.add(\"CONTAINER.fs.usableSpace\");\n    }\n    if (requestedTags.contains(CORES)) {\n      groups.add(\"solr.core\");\n      prefixes.add(\"CORE.coreName\");\n    }\n    if(groups.isEmpty() || prefixes.isEmpty()) return;\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"group\", StrUtils.join(groups, ','));\n    params.add(\"prefix\", StrUtils.join(prefixes,','));\n\n    try {\n      SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      Map m = rsp.nl.asMap(4);\n      if(requestedTags.contains(DISK)){\n        Number n = (Number) Utils.getObjectByPath(m,true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n        if(n != null) ctx.getTags().put(DISK, n.longValue());\n      }\n      if(requestedTags.contains(CORES)){\n        int count = 0;\n        Map cores  = (Map) m.get(\"metrics\");\n        for (Object o : cores.keySet()) {\n          if(o.toString().startsWith(\"solr.core.\")) count++;\n        }\n        ctx.getTags().put(CORES, count);\n      }\n\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862864c0fab5449b10f29b4eee94a380d27d787f","date":1491552584,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    ServerSnitchContext snitchContext = (ServerSnitchContext) ctx;\n    List<String> groups = new ArrayList<>();\n    List<String> prefixes = new ArrayList<>();\n    if (requestedTags.contains(DISK)) {\n      groups.add(\"solr.node\");\n      prefixes.add(\"CONTAINER.fs.usableSpace\");\n    }\n    if (requestedTags.contains(CORES)) {\n      groups.add(\"solr.core\");\n      prefixes.add(\"CORE.coreName\");\n    }\n    if(groups.isEmpty() || prefixes.isEmpty()) return;\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"group\", StrUtils.join(groups, ','));\n    params.add(\"prefix\", StrUtils.join(prefixes,','));\n\n    try {\n      SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      Map m = rsp.nl.asMap(4);\n      if(requestedTags.contains(DISK)){\n        Number n = (Number) Utils.getObjectByPath(m,true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n        if(n != null) ctx.getTags().put(DISK, n.longValue());\n      }\n      if(requestedTags.contains(CORES)){\n        int count = 0;\n        Map cores  = (Map) m.get(\"metrics\");\n        for (Object o : cores.keySet()) {\n          if(o.toString().startsWith(\"solr.core.\")) count++;\n        }\n        ctx.getTags().put(CORES, count);\n      }\n\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"862864c0fab5449b10f29b4eee94a380d27d787f":["cd7cebd53a1b7af73c5ca163a8a64808c9cf159d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd7cebd53a1b7af73c5ca163a8a64808c9cf159d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d":["862864c0fab5449b10f29b4eee94a380d27d787f"],"862864c0fab5449b10f29b4eee94a380d27d787f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["862864c0fab5449b10f29b4eee94a380d27d787f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}