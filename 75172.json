{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/FiniteStringsIteratorTest#testRandomFiniteStrings1().mjava","commits":[{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/FiniteStringsIteratorTest#testRandomFiniteStrings1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testRandomFiniteStrings1().mjava","sourceNew":"  public void testRandomFiniteStrings1() {\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<>();\n    List<Automaton> automata = new ArrayList<>();\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(Automata.makeString(s));\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch.toIntsRef());\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = Operations.union(automata);\n    if (random().nextBoolean()) {\n      a = MinimizationOperations.minimize(a, 1000000);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a = Operations.determinize(a, 1000000);\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.removeDeadStates\");\n      }\n      a = Operations.removeDeadStates(a);\n    }\n\n    FiniteStringsIterator iterator = new FiniteStringsIterator(a);\n    List<IntsRef> actual = getFiniteStrings(iterator);\n    assertFiniteStringsRecursive(a, actual);\n\n    if (!strings.equals(new HashSet<>(actual))) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","sourceOld":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<Automaton> automata = new ArrayList<>();\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(Automata.makeString(s));\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch.toIntsRef());\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = Operations.union(automata);\n    if (random().nextBoolean()) {\n      a = MinimizationOperations.minimize(a, 1000000);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a = Operations.determinize(a, 1000000);\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.removeDeadStates\");\n      }\n      a = Operations.removeDeadStates(a);\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fe7b787ed0db819df248d4f5dab0ac208c82b73","date":1436191426,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/FiniteStringsIteratorTest#testRandomFiniteStrings1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/FiniteStringsIteratorTest#testRandomFiniteStrings1().mjava","sourceNew":"  public void testRandomFiniteStrings1() {\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<>();\n    List<Automaton> automata = new ArrayList<>();\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      if (strings.add(scratch.toIntsRef())) {\n        automata.add(Automata.makeString(s));\n        if (VERBOSE) {\n          System.out.println(\"  add string=\" + s);\n        }\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = Operations.union(automata);\n    if (random().nextBoolean()) {\n      a = MinimizationOperations.minimize(a, 1000000);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a = Operations.determinize(a, 1000000);\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.removeDeadStates\");\n      }\n      a = Operations.removeDeadStates(a);\n    }\n\n    FiniteStringsIterator iterator = new FiniteStringsIterator(a);\n    List<IntsRef> actual = getFiniteStrings(iterator);\n    assertFiniteStringsRecursive(a, actual);\n\n    if (!strings.equals(new HashSet<>(actual))) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","sourceOld":"  public void testRandomFiniteStrings1() {\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<>();\n    List<Automaton> automata = new ArrayList<>();\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(Automata.makeString(s));\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch.toIntsRef());\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = Operations.union(automata);\n    if (random().nextBoolean()) {\n      a = MinimizationOperations.minimize(a, 1000000);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a = Operations.determinize(a, 1000000);\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.removeDeadStates\");\n      }\n      a = Operations.removeDeadStates(a);\n    }\n\n    FiniteStringsIterator iterator = new FiniteStringsIterator(a);\n    List<IntsRef> actual = getFiniteStrings(iterator);\n    assertFiniteStringsRecursive(a, actual);\n\n    if (!strings.equals(new HashSet<>(actual))) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1fe7b787ed0db819df248d4f5dab0ac208c82b73"],"1fe7b787ed0db819df248d4f5dab0ac208c82b73":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["1fe7b787ed0db819df248d4f5dab0ac208c82b73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1fe7b787ed0db819df248d4f5dab0ac208c82b73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}