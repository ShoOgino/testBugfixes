{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#toDot().mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#toDot().mjava","pathOld":"/dev/null","sourceNew":"  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = getNumTransitions(state);\n      initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#toDot().mjava","sourceNew":"  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = getNumTransitions(state);\n      initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = getNumTransitions(state);\n      initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}