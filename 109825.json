{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#strcmp(String,char[],int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#strcmp(String,char[],int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#strcmp(String,char[],int).mjava","sourceNew":"  /**\n   * Compares a string with null terminated char array\n   */\n  public static int strcmp(String str, char[] a, int start) {\n    int i, d, len = str.length();\n    for (i = 0; i < len; i++) {\n      d = (int) str.charAt(i) - a[start + i];\n      if (d != 0) {\n        return d;\n      }\n      if (a[start + i] == 0) {\n        return d;\n      }\n    }\n    if (a[start + i] != 0) {\n      return (int) -a[start + i];\n    }\n    return 0;\n\n  }\n\n","sourceOld":"  /**\n   * Compares a string with null terminated char array\n   */\n  public static int strcmp(String str, char[] a, int start) {\n    int i, d, len = str.length();\n    for (i = 0; i < len; i++) {\n      d = (int) str.charAt(i) - a[start + i];\n      if (d != 0) {\n        return d;\n      }\n      if (a[start + i] == 0) {\n        return d;\n      }\n    }\n    if (a[start + i] != 0) {\n      return (int) -a[start + i];\n    }\n    return 0;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6902e3c0b41ce8c66cdb27e527c92befff5e7eb5","date":1286058026,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#strcmp(String,char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#strcmp(String,char[],int).mjava","sourceNew":"  /**\n   * Compares a string with null terminated char array\n   */\n  public static int strcmp(String str, char[] a, int start) {\n    int i, d, len = str.length();\n    for (i = 0; i < len; i++) {\n      d = (int) str.charAt(i) - a[start + i];\n      if (d != 0) {\n        return d;\n      }\n      if (a[start + i] == 0) {\n        return d;\n      }\n    }\n    if (a[start + i] != 0) {\n      return -a[start + i];\n    }\n    return 0;\n\n  }\n\n","sourceOld":"  /**\n   * Compares a string with null terminated char array\n   */\n  public static int strcmp(String str, char[] a, int start) {\n    int i, d, len = str.length();\n    for (i = 0; i < len; i++) {\n      d = (int) str.charAt(i) - a[start + i];\n      if (d != 0) {\n        return d;\n      }\n      if (a[start + i] == 0) {\n        return d;\n      }\n    }\n    if (a[start + i] != 0) {\n      return (int) -a[start + i];\n    }\n    return 0;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#strcmp(String,char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#strcmp(String,char[],int).mjava","sourceNew":"  /**\n   * Compares a string with null terminated char array\n   */\n  public static int strcmp(String str, char[] a, int start) {\n    int i, d, len = str.length();\n    for (i = 0; i < len; i++) {\n      d = (int) str.charAt(i) - a[start + i];\n      if (d != 0) {\n        return d;\n      }\n      if (a[start + i] == 0) {\n        return d;\n      }\n    }\n    if (a[start + i] != 0) {\n      return -a[start + i];\n    }\n    return 0;\n\n  }\n\n","sourceOld":"  /**\n   * Compares a string with null terminated char array\n   */\n  public static int strcmp(String str, char[] a, int start) {\n    int i, d, len = str.length();\n    for (i = 0; i < len; i++) {\n      d = (int) str.charAt(i) - a[start + i];\n      if (d != 0) {\n        return d;\n      }\n      if (a[start + i] == 0) {\n        return d;\n      }\n    }\n    if (a[start + i] != 0) {\n      return (int) -a[start + i];\n    }\n    return 0;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#strcmp(String,char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#strcmp(String,char[],int).mjava","sourceNew":"  /**\n   * Compares a string with null terminated char array\n   */\n  public static int strcmp(String str, char[] a, int start) {\n    int i, d, len = str.length();\n    for (i = 0; i < len; i++) {\n      d = (int) str.charAt(i) - a[start + i];\n      if (d != 0) {\n        return d;\n      }\n      if (a[start + i] == 0) {\n        return d;\n      }\n    }\n    if (a[start + i] != 0) {\n      return -a[start + i];\n    }\n    return 0;\n\n  }\n\n","sourceOld":"  /**\n   * Compares a string with null terminated char array\n   */\n  public static int strcmp(String str, char[] a, int start) {\n    int i, d, len = str.length();\n    for (i = 0; i < len; i++) {\n      d = (int) str.charAt(i) - a[start + i];\n      if (d != 0) {\n        return d;\n      }\n      if (a[start + i] == 0) {\n        return d;\n      }\n    }\n    if (a[start + i] != 0) {\n      return -a[start + i];\n    }\n    return 0;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6902e3c0b41ce8c66cdb27e527c92befff5e7eb5"],"6902e3c0b41ce8c66cdb27e527c92befff5e7eb5":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","6902e3c0b41ce8c66cdb27e527c92befff5e7eb5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6902e3c0b41ce8c66cdb27e527c92befff5e7eb5":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["6902e3c0b41ce8c66cdb27e527c92befff5e7eb5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}