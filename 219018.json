{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  public void load(byte[] bytes) throws IOException {\n    String stringRep = new String(bytes, \"UTF-8\");\n    String[] lines = stringRep.split(\"\\n\");\n    for (String line : lines) {\n      int sepIndex = line.indexOf('=');\n      String key = line.substring(0, sepIndex);\n      String value = line.substring(sepIndex + 1, line.length());\n      put(key, value);\n    }\n  }\n\n","sourceOld":"  public void load(byte[] bytes) throws IOException {\n    String stringRep = new String(bytes, \"UTF-8\");\n    String[] lines = stringRep.split(\"\\n\");\n    for (String line : lines) {\n      int sepIndex = line.indexOf('=');\n      String key = line.substring(0, sepIndex);\n      String value = line.substring(sepIndex + 1, line.length());\n      put(key, value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  public void load(byte[] bytes) throws IOException {\n    String stringRep = new String(bytes, \"UTF-8\");\n    String[] lines = stringRep.split(\"\\n\");\n    for (String line : lines) {\n      int sepIndex = line.indexOf('=');\n      String key = line.substring(0, sepIndex);\n      String value = line.substring(sepIndex + 1, line.length());\n      put(key, value);\n    }\n  }\n\n","sourceOld":"  public void load(byte[] bytes) throws IOException {\n    String stringRep = new String(bytes, \"UTF-8\");\n    String[] lines = stringRep.split(\"\\n\");\n    for (String line : lines) {\n      int sepIndex = line.indexOf('=');\n      String key = line.substring(0, sepIndex);\n      String value = line.substring(sepIndex + 1, line.length());\n      put(key, value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  public void load(byte[] bytes) throws IOException {\n    String stringRep = new String(bytes, \"UTF-8\");\n    String[] lines = stringRep.split(\"\\n\");\n    for (String line : lines) {\n      int sepIndex = line.indexOf('=');\n      String key = line.substring(0, sepIndex);\n      String value = line.substring(sepIndex + 1, line.length());\n      put(key, value);\n    }\n  }\n\n","sourceOld":"  public void load(byte[] bytes) throws IOException {\n    String stringRep = new String(bytes, \"UTF-8\");\n    String[] lines = stringRep.split(\"\\n\");\n    for (String line : lines) {\n      int sepIndex = line.indexOf('=');\n      String key = line.substring(0, sepIndex);\n      String value = line.substring(sepIndex + 1, line.length());\n      put(key, value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, String> props = (Map<String, String>) ZkStateReader.fromJSON(bytes);\n    return new ZkNodeProps(props);\n  }\n\n","sourceOld":"  public void load(byte[] bytes) throws IOException {\n    String stringRep = new String(bytes, \"UTF-8\");\n    String[] lines = stringRep.split(\"\\n\");\n    for (String line : lines) {\n      int sepIndex = line.indexOf('=');\n      String key = line.substring(0, sepIndex);\n      String value = line.substring(sepIndex + 1, line.length());\n      put(key, value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, String> props = (Map<String, String>) ZkStateReader.fromJSON(bytes);\n    return new ZkNodeProps(props);\n  }\n\n","sourceOld":"  public void load(byte[] bytes) throws IOException {\n    String stringRep = new String(bytes, \"UTF-8\");\n    String[] lines = stringRep.split(\"\\n\");\n    for (String line : lines) {\n      int sepIndex = line.indexOf('=');\n      String key = line.substring(0, sepIndex);\n      String value = line.substring(sepIndex + 1, line.length());\n      put(key, value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, String> props = (Map<String, String>) ZkStateReader.fromJSON(bytes);\n    return new ZkNodeProps(props);\n  }\n\n","sourceOld":"  public void load(byte[] bytes) throws IOException {\n    String stringRep = new String(bytes, \"UTF-8\");\n    String[] lines = stringRep.split(\"\\n\");\n    for (String line : lines) {\n      int sepIndex = line.indexOf('=');\n      String key = line.substring(0, sepIndex);\n      String value = line.substring(sepIndex + 1, line.length());\n      put(key, value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81363494a48d3b6215bf1e37c1fe754c3e67f3fe","date":1338972402,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  /**\n   * Create ZkNodeProps from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, String> props = (Map<String, String>) ZkStateReader.fromJSON(bytes);\n    return new ZkNodeProps(props);\n  }\n\n","sourceOld":"  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, String> props = (Map<String, String>) ZkStateReader.fromJSON(bytes);\n    return new ZkNodeProps(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    return new ZkNodeProps(props);\n  }\n\n","sourceOld":"  /**\n   * Create ZkNodeProps from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, String> props = (Map<String, String>) ZkStateReader.fromJSON(bytes);\n    return new ZkNodeProps(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = (Map<String, Object>) Utils.fromJSON(bytes);\n    return new ZkNodeProps(props);\n  }\n\n","sourceOld":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    return new ZkNodeProps(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf","date":1542784803,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = null;\n    if (bytes[0] == 2) {\n      try {\n        props = (Map<String, Object>) new JavaBinCodec().unmarshal(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Unable to parse javabin content\");\n      }\n    } else {\n      props = (Map<String, Object>) Utils.fromJSON(bytes);\n    }\n    return new ZkNodeProps(props);\n  }\n\n","sourceOld":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = (Map<String, Object>) Utils.fromJSON(bytes);\n    return new ZkNodeProps(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = null;\n    if (bytes[0] == 2) {\n      try (JavaBinCodec jbc = new JavaBinCodec()) {\n        props = (Map<String, Object>) jbc.unmarshal(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Unable to parse javabin content\");\n      }\n    } else {\n      props = (Map<String, Object>) Utils.fromJSON(bytes);\n    }\n    return new ZkNodeProps(props);\n  }\n\n","sourceOld":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = null;\n    if (bytes[0] == 2) {\n      try {\n        props = (Map<String, Object>) new JavaBinCodec().unmarshal(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Unable to parse javabin content\");\n      }\n    } else {\n      props = (Map<String, Object>) Utils.fromJSON(bytes);\n    }\n    return new ZkNodeProps(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = null;\n    if (bytes[0] == 2) {\n      try (JavaBinCodec jbc = new JavaBinCodec()) {\n        props = (Map<String, Object>) jbc.unmarshal(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Unable to parse javabin content\");\n      }\n    } else {\n      props = (Map<String, Object>) Utils.fromJSON(bytes);\n    }\n    return new ZkNodeProps(props);\n  }\n\n","sourceOld":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = null;\n    if (bytes[0] == 2) {\n      try {\n        props = (Map<String, Object>) new JavaBinCodec().unmarshal(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Unable to parse javabin content\");\n      }\n    } else {\n      props = (Map<String, Object>) Utils.fromJSON(bytes);\n    }\n    return new ZkNodeProps(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#load(byte[]).mjava","sourceNew":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = null;\n    if (bytes[0] == 2) {\n      try (JavaBinCodec jbc = new JavaBinCodec()) {\n        props = (Map<String, Object>) jbc.unmarshal(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Unable to parse javabin content\");\n      }\n    } else {\n      props = (Map<String, Object>) Utils.fromJSON(bytes);\n    }\n    return new ZkNodeProps(props);\n  }\n\n","sourceOld":"  /**\n   * Create Replica from json string that is typically stored in zookeeper.\n   */\n  public static ZkNodeProps load(byte[] bytes) {\n    Map<String, Object> props = null;\n    if (bytes[0] == 2) {\n      try (JavaBinCodec jbc = new JavaBinCodec()) {\n        props = (Map<String, Object>) jbc.unmarshal(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Unable to parse javabin content\");\n      }\n    } else {\n      props = (Map<String, Object>) Utils.fromJSON(bytes);\n    }\n    return new ZkNodeProps(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81363494a48d3b6215bf1e37c1fe754c3e67f3fe":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fa64435b5902ce266c23755a4a00691a3285dab8":["81363494a48d3b6215bf1e37c1fe754c3e67f3fe"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["8c5cdabe00d4d433e6a831e18f68201284973eef"],"1da93834e39ce341a13e42b611d0a83bd3114bba":["668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf","8c5cdabe00d4d433e6a831e18f68201284973eef"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["fa64435b5902ce266c23755a4a00691a3285dab8"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"81363494a48d3b6215bf1e37c1fe754c3e67f3fe":["fa64435b5902ce266c23755a4a00691a3285dab8"],"fa64435b5902ce266c23755a4a00691a3285dab8":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["a7dfea4f7c80813344b0152e37fc18b31369e8ff","1da93834e39ce341a13e42b611d0a83bd3114bba"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["81363494a48d3b6215bf1e37c1fe754c3e67f3fe","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"668f7f7ae5b1ce73b7bbf33f7f25d916d08ec0cf":["8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}