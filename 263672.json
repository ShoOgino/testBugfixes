{"path":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","commits":[{"id":"cf4e43a4d7a969632d4bec76fd5bba149cb81487","date":1342043143,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        TEST_HOME() + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.get(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        TEST_HOME() + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.get(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96c692b5bdca33a6392254cacfbe5a5136a19209","date":1342993627,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.get(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        TEST_HOME() + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.get(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.get(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        TEST_HOME() + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.get(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.get(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.get(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"096d8770ecc7af747320979ed1e4ff71d3237b8f","date":1368405025,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir,null,true);\n    for (File sourceFile :sourceFiles){\n      if (!sourceFile.isHidden()){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1/conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(\"Make sure we did download each file in the original configuration\",downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n\n      }\n      \n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8849474e6bd0a4987e10f07edc92ce9369f11244","date":1368440202,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir,null,true);\n    for (File sourceFile :sourceFiles){\n      if (!sourceFile.isHidden()){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1/conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n      }\n      \n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir,null,true);\n    for (File sourceFile :sourceFiles){\n      if (!sourceFile.isHidden()){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1/conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(\"Make sure we did download each file in the original configuration\",downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n\n      }\n      \n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca47ae4fb4cad9005130f53a9e3b505aee9a0642","date":1368462580,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1/conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir,null,true);\n    for (File sourceFile :sourceFiles){\n      if (!sourceFile.isHidden()){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1/conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n      }\n      \n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cc0da8e166384c46c1c9b3972345df837369e67","date":1368641105,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1/conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName()), \"solrtest-confdropspot\");\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(dataDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TEMP_DIR,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName()), \"solrtest-confdropspot\");\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(dataDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    \n    assertFalse(confDir.exists());\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e25c332f157326faecb36f76173033c1284776a5","date":1414729852,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.TECHPRODUCTS_CONFIGSET, \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.EXAMPLE_HOME + File.separator + \"collection1\"\n            + File.separator + \"conf\");\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"collection1\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 17, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.TECHPRODUCTS_CONFIGSET, \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.TECHPRODUCTS_CONFIGSET, \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkController.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.TECHPRODUCTS_CONFIGSET, \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.TECHPRODUCTS_CONFIGSET, \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.currentTimeMillis());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"198966886b1666a28e299aeb05a224d8579ee1da","date":1460030082,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    final String[] upconfigArgs;\n    if (random().nextBoolean()) {\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    } else {\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          \"-\"+ZkCLI.EXCLUDE_REGEX, ZkCLI.EXCLUDE_REGEX_DEFAULT,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    }\n    ZkCLI.main(upconfigArgs);\n    \n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        if (ZkConfigManager.UPLOAD_FILENAME_EXCLUDE_PATTERN.matcher(relativePathofFile).matches()) {\n          assertFalse(sourceFile.getAbsolutePath() + \" exists in ZK, downloaded:\" + downloadedFile.getAbsolutePath(), downloadedFile.exists());\n        } else {\n          assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n          assertTrue(relativePathofFile+\" content changed\",FileUtils.contentEquals(sourceFile,downloadedFile));\n        }\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    String[] args = new String[] {\n        \"-zkhost\",\n        zkServer.getZkAddress(),\n        \"-cmd\",\n        \"upconfig\",\n        \"-confdir\",\n        ExternalPaths.TECHPRODUCTS_CONFIGSET, \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n        assertTrue(\"Content didn't change\",FileUtils.contentEquals(sourceFile,downloadedFile));\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dae68c5bb580df181adfdab7a117ffc1103fbca","date":1460731973,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    final String[] upconfigArgs;\n    if (random().nextBoolean()) {\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    } else {\n      final String excluderegexOption = (random().nextBoolean() ? \"--\"+ZkCLI.EXCLUDE_REGEX : \"-\"+ZkCLI.EXCLUDE_REGEX_SHORT);\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          excluderegexOption, ZkCLI.EXCLUDE_REGEX_DEFAULT,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    }\n    ZkCLI.main(upconfigArgs);\n    \n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        if (ZkConfigManager.UPLOAD_FILENAME_EXCLUDE_PATTERN.matcher(relativePathofFile).matches()) {\n          assertFalse(sourceFile.getAbsolutePath() + \" exists in ZK, downloaded:\" + downloadedFile.getAbsolutePath(), downloadedFile.exists());\n        } else {\n          assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n          assertTrue(relativePathofFile+\" content changed\",FileUtils.contentEquals(sourceFile,downloadedFile));\n        }\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    final String[] upconfigArgs;\n    if (random().nextBoolean()) {\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    } else {\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          \"-\"+ZkCLI.EXCLUDE_REGEX, ZkCLI.EXCLUDE_REGEX_DEFAULT,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    }\n    ZkCLI.main(upconfigArgs);\n    \n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        if (ZkConfigManager.UPLOAD_FILENAME_EXCLUDE_PATTERN.matcher(relativePathofFile).matches()) {\n          assertFalse(sourceFile.getAbsolutePath() + \" exists in ZK, downloaded:\" + downloadedFile.getAbsolutePath(), downloadedFile.exists());\n        } else {\n          assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n          assertTrue(relativePathofFile+\" content changed\",FileUtils.contentEquals(sourceFile,downloadedFile));\n        }\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73457c9372b4f2f962ca916788a5fe9e1f644a9f","date":1460794059,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    final String[] upconfigArgs;\n    if (random().nextBoolean()) {\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    } else {\n      final String excluderegexOption = (random().nextBoolean() ? \"--\"+ZkCLI.EXCLUDE_REGEX : \"-\"+ZkCLI.EXCLUDE_REGEX_SHORT);\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          excluderegexOption, ZkCLI.EXCLUDE_REGEX_DEFAULT,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    }\n    ZkCLI.main(upconfigArgs);\n    \n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        if (ZkConfigManager.UPLOAD_FILENAME_EXCLUDE_PATTERN.matcher(relativePathofFile).matches()) {\n          assertFalse(sourceFile.getAbsolutePath() + \" exists in ZK, downloaded:\" + downloadedFile.getAbsolutePath(), downloadedFile.exists());\n        } else {\n          assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n          assertTrue(relativePathofFile+\" content changed\",FileUtils.contentEquals(sourceFile,downloadedFile));\n        }\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    final String[] upconfigArgs;\n    if (random().nextBoolean()) {\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    } else {\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          \"-\"+ZkCLI.EXCLUDE_REGEX, ZkCLI.EXCLUDE_REGEX_DEFAULT,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    }\n    ZkCLI.main(upconfigArgs);\n    \n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        if (ZkConfigManager.UPLOAD_FILENAME_EXCLUDE_PATTERN.matcher(relativePathofFile).matches()) {\n          assertFalse(sourceFile.getAbsolutePath() + \" exists in ZK, downloaded:\" + downloadedFile.getAbsolutePath(), downloadedFile.exists());\n        } else {\n          assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n          assertTrue(relativePathofFile+\" content changed\",FileUtils.contentEquals(sourceFile,downloadedFile));\n        }\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpConfigLinkConfigClearZk().mjava","sourceNew":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n\n    // test upconfig\n    String confsetname = \"confsetone\";\n    final String[] upconfigArgs;\n    if (random().nextBoolean()) {\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    } else {\n      final String excluderegexOption = (random().nextBoolean() ? \"--\"+ZkCLI.EXCLUDE_REGEX : \"-\"+ZkCLI.EXCLUDE_REGEX_SHORT);\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          excluderegexOption, ZkCLI.EXCLUDE_REGEX_DEFAULT,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    }\n    ZkCLI.main(upconfigArgs);\n\n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n\n    // test linkconfig\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n\n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n\n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n\n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n\n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        if (ZkConfigManager.UPLOAD_FILENAME_EXCLUDE_PATTERN.matcher(relativePathofFile).matches()) {\n          assertFalse(sourceFile.getAbsolutePath() + \" exists in ZK, downloaded:\" + downloadedFile.getAbsolutePath(), downloadedFile.exists());\n        } else {\n          assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n          assertTrue(relativePathofFile+\" content changed\",FileUtils.contentEquals(sourceFile,downloadedFile));\n        }\n    }\n\n\n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpConfigLinkConfigClearZk() throws Exception {\n    File tmpDir = createTempDir().toFile();\n    \n    // test upconfig\n    String confsetname = \"confsetone\";\n    final String[] upconfigArgs;\n    if (random().nextBoolean()) {\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    } else {\n      final String excluderegexOption = (random().nextBoolean() ? \"--\"+ZkCLI.EXCLUDE_REGEX : \"-\"+ZkCLI.EXCLUDE_REGEX_SHORT);\n      upconfigArgs = new String[] {\n          \"-zkhost\", zkServer.getZkAddress(),\n          \"-cmd\", ZkCLI.UPCONFIG,\n          excluderegexOption, ZkCLI.EXCLUDE_REGEX_DEFAULT,\n          \"-confdir\", ExternalPaths.TECHPRODUCTS_CONFIGSET,\n          \"-confname\", confsetname};\n    }\n    ZkCLI.main(upconfigArgs);\n    \n    assertTrue(zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, true));\n\n    // print help\n    // ZkCLI.main(new String[0]);\n    \n    // test linkconfig\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"linkconfig\", \"-collection\", \"collection1\", \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    ZkNodeProps collectionProps = ZkNodeProps.load(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", null, null, true));\n    assertTrue(collectionProps.containsKey(\"configName\"));\n    assertEquals(confsetname, collectionProps.getStr(\"configName\"));\n    \n    // test down config\n    File confDir = new File(tmpDir,\n        \"solrtest-confdropspot-\" + this.getClass().getName() + \"-\" + System.nanoTime());\n    assertFalse(confDir.exists());\n\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"downconfig\", \"-confdir\", confDir.getAbsolutePath(), \"-confname\", confsetname};\n    ZkCLI.main(args);\n    \n    File[] files = confDir.listFiles();\n    List<String> zkFiles = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + confsetname, null, true);\n    assertEquals(files.length, zkFiles.size());\n    \n    File sourceConfDir = new File(ExternalPaths.TECHPRODUCTS_CONFIGSET);\n    // filter out all directories starting with . (e.g. .svn)\n    Collection<File> sourceFiles = FileUtils.listFiles(sourceConfDir, TrueFileFilter.INSTANCE, new RegexFileFilter(\"[^\\\\.].*\"));\n    for (File sourceFile :sourceFiles){\n        int indexOfRelativePath = sourceFile.getAbsolutePath().lastIndexOf(\"sample_techproducts_configs\" + File.separator + \"conf\");\n        String relativePathofFile = sourceFile.getAbsolutePath().substring(indexOfRelativePath + 33, sourceFile.getAbsolutePath().length());\n        File downloadedFile = new File(confDir,relativePathofFile);\n        if (ZkConfigManager.UPLOAD_FILENAME_EXCLUDE_PATTERN.matcher(relativePathofFile).matches()) {\n          assertFalse(sourceFile.getAbsolutePath() + \" exists in ZK, downloaded:\" + downloadedFile.getAbsolutePath(), downloadedFile.exists());\n        } else {\n          assertTrue(downloadedFile.getAbsolutePath() + \" does not exist source:\" + sourceFile.getAbsolutePath(), downloadedFile.exists());\n          assertTrue(relativePathofFile+\" content changed\",FileUtils.contentEquals(sourceFile,downloadedFile));\n        }\n    }\n    \n   \n    // test reset zk\n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"clear\", \"/\"};\n    ZkCLI.main(args);\n\n    assertEquals(0, zkClient.getChildren(\"/\", null, true).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"fa64435b5902ce266c23755a4a00691a3285dab8":["96c692b5bdca33a6392254cacfbe5a5136a19209"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["e25c332f157326faecb36f76173033c1284776a5"],"198966886b1666a28e299aeb05a224d8579ee1da":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"8849474e6bd0a4987e10f07edc92ce9369f11244":["096d8770ecc7af747320979ed1e4ff71d3237b8f"],"e25c332f157326faecb36f76173033c1284776a5":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["2cc0da8e166384c46c1c9b3972345df837369e67"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","96c692b5bdca33a6392254cacfbe5a5136a19209"],"ca47ae4fb4cad9005130f53a9e3b505aee9a0642":["8849474e6bd0a4987e10f07edc92ce9369f11244"],"96c692b5bdca33a6392254cacfbe5a5136a19209":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2cc0da8e166384c46c1c9b3972345df837369e67"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"096d8770ecc7af747320979ed1e4ff71d3237b8f":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0dae68c5bb580df181adfdab7a117ffc1103fbca":["198966886b1666a28e299aeb05a224d8579ee1da"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","96c692b5bdca33a6392254cacfbe5a5136a19209"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["198966886b1666a28e299aeb05a224d8579ee1da","0dae68c5bb580df181adfdab7a117ffc1103fbca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"2cc0da8e166384c46c1c9b3972345df837369e67":["ca47ae4fb4cad9005130f53a9e3b505aee9a0642"]},"commit2Childs":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"fa64435b5902ce266c23755a4a00691a3285dab8":["096d8770ecc7af747320979ed1e4ff71d3237b8f"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"198966886b1666a28e299aeb05a224d8579ee1da":["0dae68c5bb580df181adfdab7a117ffc1103fbca","73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"8849474e6bd0a4987e10f07edc92ce9369f11244":["ca47ae4fb4cad9005130f53a9e3b505aee9a0642"],"e25c332f157326faecb36f76173033c1284776a5":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["e25c332f157326faecb36f76173033c1284776a5"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"96c692b5bdca33a6392254cacfbe5a5136a19209":["fa64435b5902ce266c23755a4a00691a3285dab8","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"ca47ae4fb4cad9005130f53a9e3b505aee9a0642":["2cc0da8e166384c46c1c9b3972345df837369e67"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["96c692b5bdca33a6392254cacfbe5a5136a19209","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"096d8770ecc7af747320979ed1e4ff71d3237b8f":["8849474e6bd0a4987e10f07edc92ce9369f11244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","cf4e43a4d7a969632d4bec76fd5bba149cb81487","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0dae68c5bb580df181adfdab7a117ffc1103fbca":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["198966886b1666a28e299aeb05a224d8579ee1da"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"2cc0da8e166384c46c1c9b3972345df837369e67":["d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}