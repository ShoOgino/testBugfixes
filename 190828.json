{"path":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = CoalescedDeletes.mergedIterator(subs);\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = CoalescedDeletes.mergedIterator(subs);\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = new MergedIterator<Term>(subs.toArray(new Iterator[0]));\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = CoalescedDeletes.mergedIterator(subs);\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = new MergedIterator<Term>(subs.toArray(new Iterator[0]));\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = CoalescedDeletes.mergedIterator(subs);\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = new MergedIterator<Term>(subs.toArray(new Iterator[0]));\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = CoalescedDeletes.mergedIterator(subs);\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c7a37580e62e8384ea11b972c15c00221cf64fa","date":1344870636,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    Iterator<Term> merged = new MergedIterator<Term>(pb1.iterator(), pb2.iterator());\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = new MergedIterator<Term>(subs.toArray(new Iterator[0]));\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    Iterator<Term> merged = new MergedIterator<Term>(pb1.iterator(), pb2.iterator());\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = new MergedIterator<Term>(subs.toArray(new Iterator[0]));\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    Iterator<Term> merged = new MergedIterator<Term>(pb1.iterator(), pb2.iterator());\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = new MergedIterator<Term>(subs.toArray(new Iterator[0]));\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = new MergedIterator<Term>(subs.toArray(new Iterator[0]));\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    Iterator<Term> merged = new MergedIterator<Term>(pb1.iterator(), pb2.iterator());\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    Iterator<Term> merged = new MergedIterator<Term>(pb1.iterator(), pb2.iterator());\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = new MergedIterator<Term>(subs.toArray(new Iterator[0]));\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    Iterator<Term> merged = new MergedIterator<>(pb1.iterator(), pb2.iterator());\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    Iterator<Term> merged = new MergedIterator<Term>(pb1.iterator(), pb2.iterator());\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n\n    MergedPrefixCodedTermsIterator merged = new MergedPrefixCodedTermsIterator(Arrays.asList(new PrefixCodedTerms[] {pb1, pb2}));\n    assertTrue(merged.next());\n    assertEquals(\"foo\", merged.field());\n    assertEquals(\"a\", merged.term().utf8ToString());\n    assertFalse(merged.next());\n    assertEquals(\"b\", merged.term().utf8ToString());\n    assertTrue(merged.next());\n    assertNull(merged.field());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    Iterator<Term> merged = new MergedIterator<>(pb1.iterator(), pb2.iterator());\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"258f227b48a4dbfc180f6ec70f172469d6a2bef8","date":1428687213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n\n    MergedPrefixCodedTermsIterator merged = new MergedPrefixCodedTermsIterator(Arrays.asList(new PrefixCodedTerms[] {pb1, pb2}));\n    BytesRef term = merged.next();\n    assertNotNull(term);\n    assertEquals(\"foo\", merged.field());\n    assertEquals(\"a\", term.utf8ToString());\n    term = merged.next();\n    assertNotNull(term);\n    assertEquals(\"b\", term.utf8ToString());\n    assertNull(merged.next());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n\n    MergedPrefixCodedTermsIterator merged = new MergedPrefixCodedTermsIterator(Arrays.asList(new PrefixCodedTerms[] {pb1, pb2}));\n    assertTrue(merged.next());\n    assertEquals(\"foo\", merged.field());\n    assertEquals(\"a\", merged.term().utf8ToString());\n    assertFalse(merged.next());\n    assertEquals(\"b\", merged.term().utf8ToString());\n    assertTrue(merged.next());\n    assertNull(merged.field());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n\n    MergedPrefixCodedTermsIterator merged = new MergedPrefixCodedTermsIterator(Arrays.asList(new PrefixCodedTerms[] {pb1, pb2}));\n    BytesRef term = merged.next();\n    assertNotNull(term);\n    assertEquals(\"foo\", merged.field());\n    assertEquals(\"a\", term.utf8ToString());\n    term = merged.next();\n    assertNotNull(term);\n    assertEquals(\"b\", term.utf8ToString());\n    assertNull(merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n\n    MergedPrefixCodedTermsIterator merged = new MergedPrefixCodedTermsIterator(Arrays.asList(new PrefixCodedTerms[] {pb1, pb2}));\n    BytesRef term = merged.next();\n    assertNotNull(term);\n    assertEquals(\"foo\", merged.field());\n    assertEquals(\"a\", term.utf8ToString());\n    term = merged.next();\n    assertNotNull(term);\n    assertEquals(\"b\", term.utf8ToString());\n    assertNull(merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n\n    MergedPrefixCodedTermsIterator merged = new MergedPrefixCodedTermsIterator(Arrays.asList(new PrefixCodedTerms[] {pb1, pb2}));\n    BytesRef term = merged.next();\n    assertNotNull(term);\n    assertEquals(\"foo\", merged.field());\n    assertEquals(\"a\", term.utf8ToString());\n    term = merged.next();\n    assertNotNull(term);\n    assertEquals(\"b\", term.utf8ToString());\n    assertNull(merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0c7a37580e62e8384ea11b972c15c00221cf64fa"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","0c7a37580e62e8384ea11b972c15c00221cf64fa"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["258f227b48a4dbfc180f6ec70f172469d6a2bef8"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","0c7a37580e62e8384ea11b972c15c00221cf64fa"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["258f227b48a4dbfc180f6ec70f172469d6a2bef8","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["258f227b48a4dbfc180f6ec70f172469d6a2bef8","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"0c7a37580e62e8384ea11b972c15c00221cf64fa":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"258f227b48a4dbfc180f6ec70f172469d6a2bef8":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb07ab105350b80ed9d63ca64b117084ed7391bc","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["0c7a37580e62e8384ea11b972c15c00221cf64fa","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c7a37580e62e8384ea11b972c15c00221cf64fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"258f227b48a4dbfc180f6ec70f172469d6a2bef8":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["258f227b48a4dbfc180f6ec70f172469d6a2bef8"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}