{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = TestUtil.createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = TestUtil.createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":null,"sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = TestUtil.alwaysPostingsFormat(new Pulsing41PostingsFormat(1));\n    \n    File f = createTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbaae1c00d39df2c872bbe043af26d02d3818313"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","db4fdbf3d262768eabc027cd8321edca0cd11fa8","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}