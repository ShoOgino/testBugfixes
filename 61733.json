{"path":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        reader.norms(fieldName, b, 0);\n        ++status.totFields;\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        reader.norms(fieldName, b, 0);\n        ++status.totFields;\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e08f7ee31b98bff4e908c76d6d5009c859589987","date":1288980729,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          reader.norms(fieldName, b, 0);\n        }\n        ++status.totFields;\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        reader.norms(fieldName, b, 0);\n        ++status.totFields;\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7820f0ee059417b603ff0cab05ee7f2bdaaf3bfd","date":1288981026,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          reader.norms(fieldName, b, 0);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          reader.norms(fieldName, b, 0);\n        }\n        ++status.totFields;\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":["433ef5e0ff3fa18d549774f572b36aae2ae64232"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          reader.norms(fieldName, b, 0);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        reader.norms(fieldName, b, 0);\n        ++status.totFields;\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          reader.norms(fieldName, b, 0);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        reader.norms(fieldName, b, 0);\n        ++status.totFields;\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      byte[] b;\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          b = reader.norms(fieldName);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          reader.norms(fieldName, b, 0);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      byte[] b;\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          b = reader.norms(fieldName);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          reader.norms(fieldName, b, 0);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      byte[] b;\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          b = reader.norms(fieldName);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      final byte[] b = new byte[reader.maxDoc()];\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          reader.norms(fieldName, b, 0);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c385b88a2532c3fbcb9082d04be2a1433f2762","date":1323553474,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      FieldInfos infos = reader.fieldInfos();\n      byte[] b;\n      for (final String fieldName : fieldNames) {\n        FieldInfo info = infos.fieldInfo(fieldName);\n        if (reader.hasNorms(fieldName)) {\n          b = reader.norms(fieldName);\n          if (b.length != reader.maxDoc()) {\n            throw new RuntimeException(\"norms for field: \" + fieldName + \" are of the wrong size\");\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.norms(fieldName) != null) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          if (info.isIndexed && !info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      byte[] b;\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          b = reader.norms(fieldName);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":["381d580ec52adb3c6976ebe95b15943af3af7dcb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      FieldInfos infos = reader.fieldInfos();\n      byte[] b;\n      for (final String fieldName : fieldNames) {\n        FieldInfo info = infos.fieldInfo(fieldName);\n        if (reader.hasNorms(fieldName)) {\n          b = reader.norms(fieldName);\n          if (b.length != reader.maxDoc()) {\n            throw new RuntimeException(\"norms for field: \" + fieldName + \" are of the wrong size\");\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.norms(fieldName) != null) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          if (info.isIndexed && !info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      byte[] b;\n      for (final String fieldName : fieldNames) {\n        if (reader.hasNorms(fieldName)) {\n          b = reader.norms(fieldName);\n          ++status.totFields;\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","date":1325789720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      FieldInfos infos = reader.fieldInfos();\n      DocValues dv;\n      for (final String fieldName : fieldNames) {\n        FieldInfo info = infos.fieldInfo(fieldName);\n        if (reader.hasNorms(fieldName)) {\n          dv = reader.normValues(fieldName);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + fieldName + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(fieldName) != null) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          if (info.isIndexed && !info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      FieldInfos infos = reader.fieldInfos();\n      byte[] b;\n      for (final String fieldName : fieldNames) {\n        FieldInfo info = infos.fieldInfo(fieldName);\n        if (reader.hasNorms(fieldName)) {\n          b = reader.norms(fieldName);\n          if (b.length != reader.maxDoc()) {\n            throw new RuntimeException(\"norms for field: \" + fieldName + \" are of the wrong size\");\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.norms(fieldName) != null) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          if (info.isIndexed && !info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":["381d580ec52adb3c6976ebe95b15943af3af7dcb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.isIndexed && !info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      FieldInfos infos = reader.fieldInfos();\n      DocValues dv;\n      for (final String fieldName : fieldNames) {\n        FieldInfo info = infos.fieldInfo(fieldName);\n        if (reader.hasNorms(fieldName)) {\n          dv = reader.normValues(fieldName);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + fieldName + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(fieldName) != null) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          if (info.isIndexed && !info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":["381d580ec52adb3c6976ebe95b15943af3af7dcb"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["7820f0ee059417b603ff0cab05ee7f2bdaaf3bfd"],"85a883878c0af761245ab048babc63d099f835f3":["9454a6510e2db155fb01faa5c049b06ece95fab9","7820f0ee059417b603ff0cab05ee7f2bdaaf3bfd"],"a1c385b88a2532c3fbcb9082d04be2a1433f2762":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","7820f0ee059417b603ff0cab05ee7f2bdaaf3bfd"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","a1c385b88a2532c3fbcb9082d04be2a1433f2762"],"7820f0ee059417b603ff0cab05ee7f2bdaaf3bfd":["e08f7ee31b98bff4e908c76d6d5009c859589987"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["85a883878c0af761245ab048babc63d099f835f3","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"e08f7ee31b98bff4e908c76d6d5009c859589987":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["a1c385b88a2532c3fbcb9082d04be2a1433f2762","d638301ad1cfcae567b681b893bc8781f0ee48a5","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"85a883878c0af761245ab048babc63d099f835f3":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"a1c385b88a2532c3fbcb9082d04be2a1433f2762":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"7820f0ee059417b603ff0cab05ee7f2bdaaf3bfd":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"e08f7ee31b98bff4e908c76d6d5009c859589987":["7820f0ee059417b603ff0cab05ee7f2bdaaf3bfd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e08f7ee31b98bff4e908c76d6d5009c859589987"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}