{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].RangeEndpointCalculator#getGap(String).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].RangeEndpointCalculator#getGap(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Parses a String param into a value that represents the gap and\n     * can be included in the response, throwing\n     * a useful exception if not possible.\n     *\n     * Note: uses Object as the return type instead of T for things like\n     * Date where gap is just a DateMathParser string\n     */\n    public final Object getGap(final String gap) {\n      try {\n        return parseGap(gap);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't parse gap \"+gap+\" for field: \" +\n                field.getName(), e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].RangeEndpointCalculator#getGap(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Parses a String param into a value that represents the gap and\n     * can be included in the response, throwing\n     * a useful exception if not possible.\n     *\n     * Note: uses Object as the return type instead of T for things like\n     * Date where gap is just a DateMathParser string\n     */\n    public final Object getGap(final String gap) {\n      try {\n        return parseGap(gap);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't parse gap \"+gap+\" for field: \" +\n                field.getName(), e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"330e80d31a51e837b9cc906035e114377c0501dc","date":1429994103,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#getGap(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].RangeEndpointCalculator#getGap(String).mjava","sourceNew":"    /**\n     * Parses a String param into a value that represents the gap and\n     * can be included in the response, throwing\n     * a useful exception if not possible.\n     *\n     * Note: uses Object as the return type instead of T for things like\n     * Date where gap is just a DateMathParser string\n     */\n    public final Object getGap(final String gap) {\n      try {\n        return parseGap(gap);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't parse gap \"+gap+\" for field: \" +\n                field.getName(), e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Parses a String param into a value that represents the gap and\n     * can be included in the response, throwing\n     * a useful exception if not possible.\n     *\n     * Note: uses Object as the return type instead of T for things like\n     * Date where gap is just a DateMathParser string\n     */\n    public final Object getGap(final String gap) {\n      try {\n        return parseGap(gap);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't parse gap \"+gap+\" for field: \" +\n                field.getName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"330e80d31a51e837b9cc906035e114377c0501dc":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["330e80d31a51e837b9cc906035e114377c0501dc"]},"commit2Childs":{"330e80d31a51e837b9cc906035e114377c0501dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["330e80d31a51e837b9cc906035e114377c0501dc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}