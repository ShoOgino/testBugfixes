{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#testSortedSubFacetRefinementWhenParentOnlyReturnedByOneShard().mjava","commits":[{"id":"84a99d9041ffa5585158e5a283ea1736b6b8b473","date":1532019928,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#testSortedSubFacetRefinementWhenParentOnlyReturnedByOneShard().mjava","pathOld":"/dev/null","sourceNew":"  /** @see #testSortedSubFacetRefinementWhenParentOnlyReturnedByOneShardProcessEmpty */\n  @Test\n  public void testSortedSubFacetRefinementWhenParentOnlyReturnedByOneShard() throws Exception {\n    final int numDocs = initSomeDocsWhere1ShardHasOnlyParentFacetField();\n    final Client client = servers.getClient(random().nextInt());\n    final List<SolrClient> clients = client.getClientProvider().all();\n    \n    assertTrue(clients.size() >= 3); // we only use 2, but assert at least 3 to also test empty shard\n    final SolrClient c0 = clients.get(0);\n    final SolrClient c1 = clients.get(1);\n    \n    // during the initial request...\n    // - shard1 should return \"high\" count pX & pY w/o any child buckets (no \"more\" child)\n    // - shard2 should return \"lower\" count pA & pB w/some child buckets\n    // - any other shards should indicate they have no parent buckets (no \"more\" parent)\n    // during refinement:\n    // - shard2 should be asked to backfill any known children of pX&pY\n    // - these children from shard2 will be the only (possibly) contributors to the child buckets\n    //\n    // - the numShards for all parent buckets should be 2, but for the child buckets it should be 1\n    client.testJQ(params(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{\"\n                         + \"parent:{ type:terms, field:parent_s, limit:2, overrequest:0, refine:true, facet:{\"\n                         + \"  debug:'debug(numShards)',\"\n                         + \"  child:{ type:terms, field:child_s, limit:2, overrequest:0, refine: true,\"\n                         + \"          facet:{ debug:'debug(numShards)' } }\"\n                         + \"} } }\")\n                  , \"facets=={ count: \"+numDocs+\",\"\n                  + \"  parent:{ buckets:[ \"\n                  + \"    { val:pY, count: 24,\"\n                  + \"      debug:2, \"\n                  + \"      child:{ buckets:[ \"\n                  + \"                   {val:c1,count:3, debug:1},\"\n                  + \"                   {val:c0,count:1, debug:1},\"\n                  + \"      ] } },\"\n                  + \"    { val:pX, count: 13,\"\n                  + \"      debug:2, \"\n                  + \"      child:{ buckets:[ \"\n                  + \"                   {val:c0,count:2, debug:1},\"\n                  + \"                   {val:c1,count:1, debug:1},\"\n                  + \"      ] } },\"\n                  + \"  ] } }\"\n                  );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84a99d9041ffa5585158e5a283ea1736b6b8b473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84a99d9041ffa5585158e5a283ea1736b6b8b473"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84a99d9041ffa5585158e5a283ea1736b6b8b473"],"84a99d9041ffa5585158e5a283ea1736b6b8b473":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}