{"path":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","commits":[{"id":"d94d6afa51157e490fc169e192a154ffc4cdad0b","date":1283184289,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","0b96ebf39aa5127497a01b3456891ab9a50957ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["d94d6afa51157e490fc169e192a154ffc4cdad0b","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d94d6afa51157e490fc169e192a154ffc4cdad0b","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d94d6afa51157e490fc169e192a154ffc4cdad0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d94d6afa51157e490fc169e192a154ffc4cdad0b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}