{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,TokenStream,float,int,int,DocValuesType,Object,int,int,BytesRef).mjava","commits":[{"id":"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275","date":1458043999,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,TokenStream,float,int,int,DocValuesType,Object,int,int,BytesRef).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,TokenStream,float,int,int,DocValuesType,Object).mjava","sourceNew":"  private void addField(String fieldName, TokenStream tokenStream, float boost, int positionIncrementGap, int offsetGap,\n                        DocValuesType docValuesType, Object docValuesValue, int pointDimensionCount, int pointNumBytes,\n                        BytesRef pointValue) {\n\n    if (frozen) {\n      throw new IllegalArgumentException(\"Cannot call addField() when MemoryIndex is frozen\");\n    }\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    }\n    if (boost <= 0.0f) {\n      throw new IllegalArgumentException(\"boost factor must be greater than 0.0\");\n    }\n\n    Info info = fields.get(fieldName);\n    if (info == null) {\n      IndexOptions indexOptions = storeOffsets ? IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      FieldInfo fieldInfo = new FieldInfo(fieldName, fields.size(), true, false, storePayloads, indexOptions, docValuesType, -1, Collections.emptyMap(), 0, 0);\n      fields.put(fieldName, info = new Info(fieldInfo, byteBlockPool));\n    }\n    if (pointDimensionCount > 0) {\n      storePointValues(info, pointDimensionCount, pointNumBytes, pointValue);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      storeDocValues(info, docValuesType, docValuesValue);\n    }\n    if (tokenStream != null) {\n      storeTerms(info, tokenStream, boost, positionIncrementGap, offsetGap);\n    }\n  }\n\n","sourceOld":"  private void addField(String fieldName, TokenStream tokenStream, float boost, int positionIncrementGap, int offsetGap,\n                        DocValuesType docValuesType, Object docValuesValue) {\n\n    if (frozen) {\n      throw new IllegalArgumentException(\"Cannot call addField() when MemoryIndex is frozen\");\n    }\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    }\n    if (boost <= 0.0f) {\n      throw new IllegalArgumentException(\"boost factor must be greater than 0.0\");\n    }\n\n    Info info = fields.get(fieldName);\n    if (info == null) {\n      IndexOptions indexOptions = storeOffsets ? IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      FieldInfo fieldInfo = new FieldInfo(fieldName, fields.size(), true, false, storePayloads, indexOptions, docValuesType, -1, Collections.emptyMap(), 0, 0);\n      fields.put(fieldName, info = new Info(fieldInfo, byteBlockPool));\n    }\n\n    if (docValuesType != DocValuesType.NONE) {\n      storeDocValues(info, docValuesType, docValuesValue);\n    }\n    if (tokenStream != null) {\n      storeTerms(info, tokenStream, boost, positionIncrementGap, offsetGap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89b68d01c34172936f1aa2a8b9abf0e1bc68415f","date":1486637198,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,TokenStream,float,int,int,DocValuesType,Object,int,int,BytesRef).mjava","sourceNew":null,"sourceOld":"  private void addField(String fieldName, TokenStream tokenStream, float boost, int positionIncrementGap, int offsetGap,\n                        DocValuesType docValuesType, Object docValuesValue, int pointDimensionCount, int pointNumBytes,\n                        BytesRef pointValue) {\n\n    if (frozen) {\n      throw new IllegalArgumentException(\"Cannot call addField() when MemoryIndex is frozen\");\n    }\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    }\n    if (boost <= 0.0f) {\n      throw new IllegalArgumentException(\"boost factor must be greater than 0.0\");\n    }\n\n    Info info = fields.get(fieldName);\n    if (info == null) {\n      IndexOptions indexOptions = storeOffsets ? IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      FieldInfo fieldInfo = new FieldInfo(fieldName, fields.size(), true, false, storePayloads, indexOptions, docValuesType, -1, Collections.emptyMap(), 0, 0);\n      fields.put(fieldName, info = new Info(fieldInfo, byteBlockPool));\n    }\n    if (pointDimensionCount > 0) {\n      storePointValues(info, pointDimensionCount, pointNumBytes, pointValue);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      storeDocValues(info, docValuesType, docValuesValue);\n    }\n    if (tokenStream != null) {\n      storeTerms(info, tokenStream, boost, positionIncrementGap, offsetGap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89b68d01c34172936f1aa2a8b9abf0e1bc68415f":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"]},"commit2Childs":{"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275"],"89b68d01c34172936f1aa2a8b9abf0e1bc68415f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}