{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","commits":[{"id":"d983fa75c434f797e96c920fc932218caf2641dd","date":1391253179,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleSimpleGroupResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","sourceNew":"  @Test\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleSimpleGroupResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleSimpleGroupResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","sourceNew":"  @Test\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleSimpleGroupResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleSimpleGroupResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","sourceNew":"  @Test\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleSimpleGroupResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleSimpleGroupResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","sourceNew":"  @Test\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleSimpleGroupResponse.xml\")) {\n      assertNotNull(is);\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleSimpleGroupResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleSimpleGroupResponse.xml\")) {\n      assertNotNull(is);\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleSimpleGroupResponse.xml\")) {\n      assertNotNull(is);\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testSimpleGroupResponse().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleSimpleGroupResponse.xml\")) {\n      assertNotNull(is);\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSimpleGroupResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleSimpleGroupResponse.xml\")) {\n      assertNotNull(is);\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n    GroupResponse groupResponse = qr.getGroupResponse();\n    assertNotNull(groupResponse);\n    List<GroupCommand> commands = groupResponse.getValues();\n    assertNotNull(commands);\n    assertEquals(1, commands.size());\n\n    GroupCommand fieldCommand = commands.get(0);\n    assertEquals(\"acco_id\", fieldCommand.getName());\n    assertEquals(30000000, fieldCommand.getMatches());\n    assertEquals(5687, fieldCommand.getNGroups().intValue());\n    List<Group> fieldCommandGroups = fieldCommand.getValues();\n    assertEquals(1, fieldCommandGroups.size());\n    \n    assertEquals(\"acco_id\", fieldCommandGroups.get(0).getGroupValue());\n    SolrDocumentList documents = fieldCommandGroups.get(0).getResult();\n    assertNotNull(documents);\n    \n    assertEquals(10, documents.size());\n    assertEquals(\"116_AR\", documents.get(0).getFieldValue(\"acco_id\"));\n    assertEquals(\"116_HI\", documents.get(1).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_AR\", documents.get(2).getFieldValue(\"acco_id\"));\n    assertEquals(\"953_HI\", documents.get(3).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_AR\", documents.get(4).getFieldValue(\"acco_id\"));\n    assertEquals(\"954_HI\", documents.get(5).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_AR\", documents.get(6).getFieldValue(\"acco_id\"));\n    assertEquals(\"546_HI\", documents.get(7).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_AR\", documents.get(8).getFieldValue(\"acco_id\"));\n    assertEquals(\"708_HI\", documents.get(9).getFieldValue(\"acco_id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d983fa75c434f797e96c920fc932218caf2641dd","9d3d365762604952e436b51980101dfc84cc1b3e"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["9d3d365762604952e436b51980101dfc84cc1b3e"],"d983fa75c434f797e96c920fc932218caf2641dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d3d365762604952e436b51980101dfc84cc1b3e":["d983fa75c434f797e96c920fc932218caf2641dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d983fa75c434f797e96c920fc932218caf2641dd":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","a626ec4d1c92e59fe390724d6220081047b03ce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d983fa75c434f797e96c920fc932218caf2641dd"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["4cba13865da71de3b9b0937fcbc66d726089356d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}