{"path":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,ScorerContext).mjava","commits":[{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scorercontext the {@link ScorerContext} holding the scores context variables\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these methods is required.\n   * @param topScorer\n   *          if true, {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scorercontext the {@link ScorerContext} holding the scores context variables\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"222732b340fa4abddab2ad1d69e32e5388d490b3","date":1295299546,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scorerContext the {@link ScorerContext} holding the scores context variables\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scorercontext the {@link ScorerContext} holding the scores context variables\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scorerContext the {@link ScorerContext} holding the scores context variables\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scorercontext the {@link ScorerContext} holding the scores context variables\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scorerContext the {@link ScorerContext} holding the scores context variables\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these methods is required.\n   * @param topScorer\n   *          if true, {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scorerContext the {@link ScorerContext} holding the scores context variables\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["222732b340fa4abddab2ad1d69e32e5388d490b3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","222732b340fa4abddab2ad1d69e32e5388d490b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"222732b340fa4abddab2ad1d69e32e5388d490b3":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","222732b340fa4abddab2ad1d69e32e5388d490b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"]},"commit2Childs":{"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","dc63f17f42c64d6ccc8c361cfcdf074f115f770c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"222732b340fa4abddab2ad1d69e32e5388d490b3":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["222732b340fa4abddab2ad1d69e32e5388d490b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}