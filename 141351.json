{"path":"src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiSegmentReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}