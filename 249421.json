{"path":"solr/core/src/java/org/apache/solr/handler/component/ShardRequestor#call().mjava","commits":[{"id":"6df9c9814bf0485db9001f5d37a2528bfc5f1970","date":1591077658,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardRequestor#call().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ShardResponse call() throws Exception {\n\n    ShardResponse srsp = new ShardResponse();\n    if (sreq.nodeName != null) {\n      srsp.setNodeName(sreq.nodeName);\n    }\n    srsp.setShardRequest(sreq);\n    srsp.setShard(shard);\n    SimpleSolrResponse ssr = new SimpleSolrResponse();\n    srsp.setSolrResponse(ssr);\n    long startTime = System.nanoTime();\n\n    try {\n      params.remove(CommonParams.WT); // use default (currently javabin)\n      params.remove(CommonParams.VERSION);\n\n      QueryRequest req = httpShardHandler.makeQueryRequest(sreq, params, shard);\n      if (tracer != null && span != null) {\n        tracer.inject(span.context(), Format.Builtin.HTTP_HEADERS, new SolrRequestCarrier(req));\n      }\n      req.setMethod(SolrRequest.METHOD.POST);\n      SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      if (requestInfo != null) req.setUserPrincipal(requestInfo.getReq().getUserPrincipal());\n\n      // no need to set the response parser as binary is the defaultJab\n      // req.setResponseParser(new BinaryResponseParser());\n\n      // if there are no shards available for a slice, urls.size()==0\n      if (urls.size() == 0) {\n        // TODO: what's the right error code here? We should use the same thing when\n        // all of the servers for a shard are down.\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\n      }\n\n      if (urls.size() <= 1) {\n        String url = urls.get(0);\n        srsp.setShardAddress(url);\n        ssr.nl = httpShardHandler.request(url, req);\n      } else {\n        LBSolrClient.Rsp rsp = httpShardHandler.httpShardHandlerFactory.makeLoadBalancedRequest(req, urls);\n        ssr.nl = rsp.getResponse();\n        srsp.setShardAddress(rsp.getServer());\n      }\n    } catch (ConnectException cex) {\n      srsp.setException(cex); //????\n    } catch (Exception th) {\n      srsp.setException(th);\n      if (th instanceof SolrException) {\n        srsp.setResponseCode(((SolrException) th).code());\n      } else {\n        srsp.setResponseCode(-1);\n      }\n    }\n\n    ssr.elapsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n\n    return httpShardHandler.transfomResponse(sreq, srsp, shard);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardRequestor#call().mjava","sourceNew":null,"sourceOld":"  @Override\n  public ShardResponse call() throws Exception {\n\n    ShardResponse srsp = new ShardResponse();\n    if (sreq.nodeName != null) {\n      srsp.setNodeName(sreq.nodeName);\n    }\n    srsp.setShardRequest(sreq);\n    srsp.setShard(shard);\n    SimpleSolrResponse ssr = new SimpleSolrResponse();\n    srsp.setSolrResponse(ssr);\n    long startTime = System.nanoTime();\n\n    try {\n      params.remove(CommonParams.WT); // use default (currently javabin)\n      params.remove(CommonParams.VERSION);\n\n      QueryRequest req = httpShardHandler.makeQueryRequest(sreq, params, shard);\n      if (tracer != null && span != null) {\n        tracer.inject(span.context(), Format.Builtin.HTTP_HEADERS, new SolrRequestCarrier(req));\n      }\n      req.setMethod(SolrRequest.METHOD.POST);\n      SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      if (requestInfo != null) req.setUserPrincipal(requestInfo.getReq().getUserPrincipal());\n\n      // no need to set the response parser as binary is the defaultJab\n      // req.setResponseParser(new BinaryResponseParser());\n\n      // if there are no shards available for a slice, urls.size()==0\n      if (urls.size() == 0) {\n        // TODO: what's the right error code here? We should use the same thing when\n        // all of the servers for a shard are down.\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"no servers hosting shard: \" + shard);\n      }\n\n      if (urls.size() <= 1) {\n        String url = urls.get(0);\n        srsp.setShardAddress(url);\n        ssr.nl = httpShardHandler.request(url, req);\n      } else {\n        LBSolrClient.Rsp rsp = httpShardHandler.httpShardHandlerFactory.makeLoadBalancedRequest(req, urls);\n        ssr.nl = rsp.getResponse();\n        srsp.setShardAddress(rsp.getServer());\n      }\n    } catch (ConnectException cex) {\n      srsp.setException(cex); //????\n    } catch (Exception th) {\n      srsp.setException(th);\n      if (th instanceof SolrException) {\n        srsp.setResponseCode(((SolrException) th).code());\n      } else {\n        srsp.setResponseCode(-1);\n      }\n    }\n\n    ssr.elapsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n\n    return httpShardHandler.transfomResponse(sreq, srsp, shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["6df9c9814bf0485db9001f5d37a2528bfc5f1970"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6df9c9814bf0485db9001f5d37a2528bfc5f1970":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6df9c9814bf0485db9001f5d37a2528bfc5f1970"],"6df9c9814bf0485db9001f5d37a2528bfc5f1970":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}