{"path":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"/dev/null","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":null,"sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"/dev/null","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}