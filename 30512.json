{"path":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrServer,List[String],String,long).mjava","commits":[{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrServer,List[String],String,long).mjava","pathOld":"/dev/null","sourceNew":"  public static void testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrServer cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, true, jsonPath))) {\n        success = true;\n        break;\n        /*Map map = getRespMap(\"/x?wt=json\",harness);\n        if(map.containsKey(\"params\")) {\n          success = true;\n          break;\n        }*/\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue( \"Could not add/change requestHandler  \", success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrServer,List[String],String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrServer,List[String],String,long).mjava","sourceNew":"  public static void testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrServer cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, new String(ZkStateReader.toJSON(m), StandardCharsets.UTF_8)), success);\n  }\n\n","sourceOld":"  public static void testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrServer cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, true, jsonPath))) {\n        success = true;\n        break;\n        /*Map map = getRespMap(\"/x?wt=json\",harness);\n        if(map.containsKey(\"params\")) {\n          success = true;\n          break;\n        }*/\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue( \"Could not add/change requestHandler  \", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrServer,List[String],String,long).mjava","sourceNew":"  public static void testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, new String(ZkStateReader.toJSON(m), StandardCharsets.UTF_8)), success);\n  }\n\n","sourceOld":"  public static void testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrServer cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, new String(ZkStateReader.toJSON(m), StandardCharsets.UTF_8)), success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}