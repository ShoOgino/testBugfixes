{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments.CheckSegmentCount#run().mjava","commits":[{"id":"06663b933cd6a92982d79726136b07915bc86aef","date":1399473227,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments.CheckSegmentCount#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      try {\n        int oldSegmentCount = r.leaves().size();\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        assertNotNull(r2);\n        r.close();\n        r = r2;\n        int maxThreadStates = w.getConfig().getMaxThreadStates();\n        int maxExpectedSegments = oldSegmentCount + Math.min(maxThreadStates, maxThreadCountPerIter.get());\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter done; now verify oldSegCount=\" + oldSegmentCount + \" newSegCount=\" + r2.leaves().size() + \" maxExpected=\" + maxExpectedSegments);\n        }\n        // NOTE: it won't necessarily be ==, in case some threads were strangely scheduled and never conflicted with one another (should be uncommon...?):\n        assertTrue(r.leaves().size() <= maxExpectedSegments);\n        setNextIterThreadCount();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments.CheckSegmentCount#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments.CheckSegmentCount#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        int oldSegmentCount = r.leaves().size();\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        assertNotNull(r2);\n        r.close();\n        r = r2;\n        int maxExpectedSegments = oldSegmentCount + maxThreadCountPerIter.get();\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter done; now verify oldSegCount=\" + oldSegmentCount + \" newSegCount=\" + r2.leaves().size() + \" maxExpected=\" + maxExpectedSegments);\n        }\n        // NOTE: it won't necessarily be ==, in case some threads were strangely scheduled and never conflicted with one another (should be uncommon...?):\n        assertTrue(r.leaves().size() <= maxExpectedSegments);\n        setNextIterThreadCount();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        int oldSegmentCount = r.leaves().size();\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        assertNotNull(r2);\n        r.close();\n        r = r2;\n        int maxThreadStates = w.getConfig().getMaxThreadStates();\n        int maxExpectedSegments = oldSegmentCount + Math.min(maxThreadStates, maxThreadCountPerIter.get());\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter done; now verify oldSegCount=\" + oldSegmentCount + \" newSegCount=\" + r2.leaves().size() + \" maxExpected=\" + maxExpectedSegments);\n        }\n        // NOTE: it won't necessarily be ==, in case some threads were strangely scheduled and never conflicted with one another (should be uncommon...?):\n        assertTrue(r.leaves().size() <= maxExpectedSegments);\n        setNextIterThreadCount();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["06663b933cd6a92982d79726136b07915bc86aef"],"06663b933cd6a92982d79726136b07915bc86aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06663b933cd6a92982d79726136b07915bc86aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c02b804ab16489b95429791a2d8fb0e0728354d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06663b933cd6a92982d79726136b07915bc86aef":["c02b804ab16489b95429791a2d8fb0e0728354d4"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}