{"path":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","pathOld":"/dev/null","sourceNew":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      tlogOutStream.hflush();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      //raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d9da6af0d6e0b9ee92e3adbfd2796792453afbef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","pathOld":"/dev/null","sourceNew":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      tlogOutStream.hflush();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      //raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9da6af0d6e0b9ee92e3adbfd2796792453afbef","date":1472233199,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","sourceNew":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      ensureFlushed();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","sourceOld":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      tlogOutStream.hflush();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      //raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","sourceNew":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      ensureFlushed();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","sourceOld":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      tlogOutStream.hflush();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      //raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","sourceNew":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      ensureFlushed();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","sourceOld":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      tlogOutStream.hflush();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      //raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","sourceNew":null,"sourceOld":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      ensureFlushed();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","sourceNew":null,"sourceOld":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      ensureFlushed();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#rollback(long).mjava","sourceNew":null,"sourceOld":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  @Override\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      ensureFlushed();\n      // TODO: how do we rollback with hdfs?? We need HDFS-3107\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9da6af0d6e0b9ee92e3adbfd2796792453afbef":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["849494cf2f3a96af5c8c84995108ddd8456fcd04","d9da6af0d6e0b9ee92e3adbfd2796792453afbef"],"b70042a8a492f7054d480ccdd2be9796510d4327":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1455c941cc4ce652efc776fc23471b0e499246f6"],"f592209545c71895260367152601e9200399776d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1455c941cc4ce652efc776fc23471b0e499246f6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["849494cf2f3a96af5c8c84995108ddd8456fcd04","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"],"1455c941cc4ce652efc776fc23471b0e499246f6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["d9da6af0d6e0b9ee92e3adbfd2796792453afbef","37a0f60745e53927c4c876cfe5b5a58170f0646c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d9da6af0d6e0b9ee92e3adbfd2796792453afbef":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1455c941cc4ce652efc776fc23471b0e499246f6"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}