{"path":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriterImpl(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriterImpl(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriterImpl(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriterImpl(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriterImpl(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriterImpl(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriterImpl(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriterImpl(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriterImpl(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriter(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriterImpl(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriter(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new SepPostingsWriter(state, new MockIntFactory(blockSize));\n\n    boolean success = false;\n    TermsIndexWriterBase indexWriter;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["60ba444201d2570214b6fcf1d15600dc1a01f548","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}