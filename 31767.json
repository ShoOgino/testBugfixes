{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c95c612ce4bbe514ad92183698b5792a893569f","date":1538479042,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test is way to sensitive to timing, must be beasted before returned\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(30000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    \n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":["d9ccfe45460d496c5e5e1b70396521dac842d966","44dd40f6c2c1465aebf4677bab10f696c7ea18d8","042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test is way to sensitive to timing, must be beasted before returned\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(30000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    \n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test is way to sensitive to timing, must be beasted before returned\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(30000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    \n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test is way to sensitive to timing, must be beasted before returned\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(30000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    \n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test is way to sensitive to timing, must be beasted before returned\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(30000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    \n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b336749840ccc5e7c88aa0a787fc6e3730d6e7","date":1546960615,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\") // this test is way to sensitive to timing, must be beasted before returned\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(30000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    \n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test is way to sensitive to timing, must be beasted before returned\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(30000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    \n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3904abfa513b750aabc2b2fba5336ba86ed32490","date":1547515000,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    listenerEventLatch = new CountDownLatch(4);\n    \n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(30000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n\n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(10, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get(\"srt\"));\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(events.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\") // this test is way to sensitive to timing, must be beasted before returned\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n//    SolrParams query = params(CommonParams.Q, \"*:*\");\n//    for (int i = 0; i < 500; i++) {\n//      solrClient.query(COLL1, query);\n//    }\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(30000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    \n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"215b6316d63375fce4dfbf1f55967c739795a2f9","date":1551465498,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"searchRate testing collection creating\",\n                                COLL1, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    listenerEventLatch = new CountDownLatch(4);\n    \n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    assertTrue(\"The trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(\"The trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get(\"srt\"));\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(events.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, COLL1, 10, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    listenerEventLatch = new CountDownLatch(4);\n    \n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    boolean await = triggerStartedLatch.await(30000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not start in time\", await);\n    await = triggerFinishedLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not finish in time\", await);\n\n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(10, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get(\"srt\"));\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(events.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudUtil.waitForState(cluster, \"searchRate testing collection creating\",\n                                COLL1, CloudUtil.clusterShape(1, 2, false, true));\n\n    listenerEventLatch = new CountDownLatch(4);\n    \n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    assertTrue(\"The trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(\"The trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get(\"srt\"));\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(events.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"searchRate testing collection creating\",\n                                COLL1, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    listenerEventLatch = new CountDownLatch(4);\n    \n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    assertTrue(\"The trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(\"The trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get(\"srt\"));\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(events.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudUtil.waitForState(cluster, \"searchRate testing collection creating\",\n                                COLL1, CloudUtil.clusterShape(1, 2, false, true));\n\n    listenerEventLatch = new CountDownLatch(4);\n    \n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    assertTrue(\"The trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(\"The trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get(\"srt\"));\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(events.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudUtil.waitForState(cluster, \"searchRate testing collection creating\",\n                                COLL1, CloudUtil.clusterShape(1, 2, false, true));\n\n    listenerEventLatch = new CountDownLatch(4);\n    \n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    assertTrue(\"The trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(\"The trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get(\"srt\"));\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(events.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudUtil.waitForState(cluster, \"searchRate testing collection creating\",\n                                COLL1, CloudUtil.clusterShape(1, 2, false, true));\n\n    listenerEventLatch = new CountDownLatch(4);\n    \n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    assertTrue(\"The trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(\"The trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get(\"srt\"));\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(events.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<Replica> replicaRates = (List<Replica>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.get(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.get(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudUtil.waitForState(cluster, \"searchRate testing collection creating\",\n                                COLL1, CloudUtil.clusterShape(1, 2, false, true));\n\n    listenerEventLatch = new CountDownLatch(4);\n    \n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    assertTrue(\"The trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(\"The trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get(\"srt\"));\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(events.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testSearchRate().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudUtil.waitForState(cluster, \"searchRate testing collection creating\",\n                                COLL1, CloudUtil.clusterShape(1, 2, false, true));\n\n    listenerEventLatch = new CountDownLatch(4);\n    \n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'actions' : [\" +\n       \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n       \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n       \"{'name':'finish','class':'\" + FinishTriggerAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute', 'test'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n\n    cluster.getSimClusterStateProvider().simSetCollectionValue(COLL1, \"QUERY./select.requestTimes:1minRate\", 500, false, true);\n\n    assertTrue(\"The trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(\"The trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get(\"srt\"));\n    assertNotNull(\"Could not find events for srt\", events);\n    assertEquals(events.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = cluster.getTimeSource().getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<Replica> replicaRates = (List<Replica>)ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.get(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.get(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 100.0);\n    assertTrue(totalNodeRate.get() > 100.0);\n    assertTrue(totalShardRate.get() > 100.0);\n    assertTrue(totalReplicaRate.get() > 100.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\", null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["7c95c612ce4bbe514ad92183698b5792a893569f"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["914270355efc1f9583010cb165bb031a1e698f84"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"7c95c612ce4bbe514ad92183698b5792a893569f":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"914270355efc1f9583010cb165bb031a1e698f84":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["7c95c612ce4bbe514ad92183698b5792a893569f"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"7c95c612ce4bbe514ad92183698b5792a893569f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"914270355efc1f9583010cb165bb031a1e698f84":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"89948af0461fead48f44ba8fb7866f107ce83f22":["914270355efc1f9583010cb165bb031a1e698f84"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}