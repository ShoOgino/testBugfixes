{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,String,String,double).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,String,String,double).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointStats(String field, String dvField, String[] numbers, double min, double max, String count, String missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>='\" + minMin + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<='\" + maxMin+ \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>='\" + minMax + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<='\" + maxMax + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,String,String,double).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointStats(String field, String dvField, String[] numbers, double min, double max, String count, String missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>='\" + minMin + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<='\" + maxMin+ \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>='\" + minMax + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<='\" + maxMax + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,int,int,double).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,String,String,double).mjava","sourceNew":"  private void testPointStats(String field, String dvField, String[] numbers, double min, double max, int count, int missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>=\" + minMin + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<=\" + maxMin+ \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>=\" + minMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<=\" + maxMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointStats(String field, String dvField, String[] numbers, double min, double max, String count, String missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>='\" + minMin + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<='\" + maxMin+ \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>='\" + minMax + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<='\" + maxMax + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,int,int,double).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,String,String,double).mjava","sourceNew":"  private void testPointStats(String field, String dvField, String[] numbers, double min, double max, int count, int missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='\" + (numbers.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>=\" + minMin + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<=\" + maxMin+ \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>=\" + minMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<=\" + maxMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointStats(String field, String dvField, String[] numbers, double min, double max, String count, String missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>='\" + minMin + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<='\" + maxMin+ \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>='\" + minMax + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<='\" + maxMax + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,int,int,double).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,String,String,double).mjava","sourceNew":"  private void testPointStats(String field, String dvField, String[] numbers, double min, double max, int count, int missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='\" + (numbers.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>=\" + minMin + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<=\" + maxMin+ \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>=\" + minMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<=\" + maxMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointStats(String field, String dvField, String[] numbers, double min, double max, String count, String missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>='\" + minMin + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<='\" + maxMin+ \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>='\" + minMax + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<='\" + maxMax + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["46dc9ac8b3e748407baaef82453138ff3974480c","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["46dc9ac8b3e748407baaef82453138ff3974480c"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["46dc9ac8b3e748407baaef82453138ff3974480c","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac5a6354a5800dd1ade225010d614eeb8acf9152"]},"commit2Childs":{"46dc9ac8b3e748407baaef82453138ff3974480c":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","ac5a6354a5800dd1ade225010d614eeb8acf9152","f9a989a32a073c55e3aef6f807a3474184bbcf49","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}