{"path":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","pathOld":"/dev/null","sourceNew":"    private void searchFor(int n, Searcher searcher)\n      throws Exception {\n      System.out.println(\"Searching for \" + n);\n      Hits hits =\n\tsearcher.search(QueryParser.parse(intToEnglish(n), \"contents\",\n\t\t\t\t\t  ANALYZER));\n      System.out.println(\"Search for \" + n + \": total=\" + hits.length());\n      for (int j = 0; j < Math.min(3, hits.length()); j++) {\n\tSystem.out.println(\"Hit for \" + n + \": \" + hits.doc(j).get(\"id\"));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","sourceNew":"    private void searchFor(int n, Searcher searcher)\n      throws Exception {\n      System.out.println(\"Searching for \" + n);\n      Hits hits =\n        searcher.search(QueryParser.parse(intToEnglish(n), \"contents\",\n                                          ANALYZER));\n      System.out.println(\"Search for \" + n + \": total=\" + hits.length());\n      for (int j = 0; j < Math.min(3, hits.length()); j++) {\n        System.out.println(\"Hit for \" + n + \": \" + hits.doc(j).get(\"id\"));\n      }\n    }\n\n","sourceOld":"    private void searchFor(int n, Searcher searcher)\n      throws Exception {\n      System.out.println(\"Searching for \" + n);\n      Hits hits =\n\tsearcher.search(QueryParser.parse(intToEnglish(n), \"contents\",\n\t\t\t\t\t  ANALYZER));\n      System.out.println(\"Search for \" + n + \": total=\" + hits.length());\n      for (int j = 0; j < Math.min(3, hits.length()); j++) {\n\tSystem.out.println(\"Hit for \" + n + \": \" + hits.doc(j).get(\"id\"));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","sourceNew":"    private void searchFor(int n, Searcher searcher)\n      throws Exception {\n      System.out.println(\"Searching for \" + n);\n      Hits hits =\n        searcher.search(QueryParser.parse(English.intToEnglish(n), \"contents\",\n                                          ANALYZER));\n      System.out.println(\"Search for \" + n + \": total=\" + hits.length());\n      for (int j = 0; j < Math.min(3, hits.length()); j++) {\n        System.out.println(\"Hit for \" + n + \": \" + hits.doc(j).get(\"id\"));\n      }\n    }\n\n","sourceOld":"    private void searchFor(int n, Searcher searcher)\n      throws Exception {\n      System.out.println(\"Searching for \" + n);\n      Hits hits =\n        searcher.search(QueryParser.parse(intToEnglish(n), \"contents\",\n                                          ANALYZER));\n      System.out.println(\"Search for \" + n + \": total=\" + hits.length());\n      for (int j = 0; j < Math.min(3, hits.length()); j++) {\n        System.out.println(\"Hit for \" + n + \": \" + hits.doc(j).get(\"id\"));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","sourceNew":"    private void searchFor(int n, Searcher searcher)\n      throws Exception {\n      System.out.println(\"Searching for \" + n);\n        QueryParser parser = new QueryParser(\"contents\", ANALYZER);\n      Hits hits =\n        searcher.search(parser.parse(English.intToEnglish(n)));\n      System.out.println(\"Search for \" + n + \": total=\" + hits.length());\n      for (int j = 0; j < Math.min(3, hits.length()); j++) {\n        System.out.println(\"Hit for \" + n + \": \" + hits.doc(j).get(\"id\"));\n      }\n    }\n\n","sourceOld":"    private void searchFor(int n, Searcher searcher)\n      throws Exception {\n      System.out.println(\"Searching for \" + n);\n      Hits hits =\n        searcher.search(QueryParser.parse(English.intToEnglish(n), \"contents\",\n                                          ANALYZER));\n      System.out.println(\"Search for \" + n + \": total=\" + hits.length());\n      for (int j = 0; j < Math.min(3, hits.length()); j++) {\n        System.out.println(\"Hit for \" + n + \": \" + hits.doc(j).get(\"id\"));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","sourceNew":"    private void searchFor(int n, Searcher searcher)\n      throws Exception {\n      System.out.println(\"Searching for \" + n);\n        QueryParser parser = new QueryParser(\"contents\", ANALYZER);\n      ScoreDoc[] hits =\n        searcher.search(parser.parse(English.intToEnglish(n)), null, 1000).scoreDocs;\n      System.out.println(\"Search for \" + n + \": total=\" + hits.length);\n      for (int j = 0; j < Math.min(3, hits.length); j++) {\n        System.out.println(\"Hit for \" + n + \": \" + searcher.doc(hits[j].doc).get(\"id\"));\n      }\n    }\n\n","sourceOld":"    private void searchFor(int n, Searcher searcher)\n      throws Exception {\n      System.out.println(\"Searching for \" + n);\n        QueryParser parser = new QueryParser(\"contents\", ANALYZER);\n      Hits hits =\n        searcher.search(parser.parse(English.intToEnglish(n)));\n      System.out.println(\"Search for \" + n + \": total=\" + hits.length());\n      for (int j = 0; j < Math.min(3, hits.length()); j++) {\n        System.out.println(\"Hit for \" + n + \": \" + hits.doc(j).get(\"id\"));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520d06488b13c8ef837dd0815b77a80fff8779e1","date":1240950232,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.SearcherThread#searchFor(int,Searcher).mjava","sourceNew":null,"sourceOld":"    private void searchFor(int n, Searcher searcher)\n      throws Exception {\n      System.out.println(\"Searching for \" + n);\n        QueryParser parser = new QueryParser(\"contents\", ANALYZER);\n      ScoreDoc[] hits =\n        searcher.search(parser.parse(English.intToEnglish(n)), null, 1000).scoreDocs;\n      System.out.println(\"Search for \" + n + \": total=\" + hits.length);\n      for (int j = 0; j < Math.min(3, hits.length); j++) {\n        System.out.println(\"Hit for \" + n + \": \" + searcher.doc(hits[j].doc).get(\"id\"));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["15c469602973ef1a33c9a07367a380d278ffab20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["520d06488b13c8ef837dd0815b77a80fff8779e1"],"15c469602973ef1a33c9a07367a380d278ffab20":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["520d06488b13c8ef837dd0815b77a80fff8779e1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["15c469602973ef1a33c9a07367a380d278ffab20"],"15c469602973ef1a33c9a07367a380d278ffab20":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}