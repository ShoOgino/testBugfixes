{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(ValueType,DocState,FieldInfo).mjava","commits":[{"id":"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05","date":1323284809,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(ValueType,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(ValueType valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n    boolean success = false;\n    DocValuesConsumer docValuesConsumer = null;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(ValueType,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(ValueType valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05"],"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":[],"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}