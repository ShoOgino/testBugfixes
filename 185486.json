{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#fetchIndex(SolrParams,SolrQueryResponse).mjava","commits":[{"id":"5cb65c1c2f90852e718f86c8be09beb1c4dba408","date":1543785784,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#fetchIndex(SolrParams,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void fetchIndex(SolrParams solrParams, SolrQueryResponse rsp) throws InterruptedException {\n    String masterUrl = solrParams.get(MASTER_URL);\n    if (!isSlave && masterUrl == null) {\n      reportErrorOnResponse(rsp, \"No slave configured or no 'masterUrl' specified\", null);\n      return;\n    }\n    final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n    final IndexFetchResult[] results = new IndexFetchResult[1];\n    Thread fetchThread = new Thread(() -> {\n      IndexFetchResult result = doFetch(paramsCopy, false);\n      results[0] = result;\n    }, \"explicit-fetchindex-cmd\") ;\n    fetchThread.setDaemon(false);\n    fetchThread.start();\n    if (solrParams.getBool(WAIT, false)) {\n      fetchThread.join();\n      if (results[0] == null) {\n        reportErrorOnResponse(rsp, \"Unable to determine result of synchronous index fetch\", null);\n      } else if (results[0].getSuccessful()) {\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        reportErrorOnResponse(rsp, results[0].getMessage(), null);\n      }\n    } else {\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#fetchIndex(SolrParams,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#fetchIndex(SolrParams,SolrQueryResponse).mjava","sourceNew":"  private void fetchIndex(SolrParams solrParams, SolrQueryResponse rsp) throws InterruptedException {\n    String leaderUrl = getObjectWithBackwardCompatibility(solrParams, LEADER_URL, LEGACY_LEADER_URL, null);\n    if (!isFollower && leaderUrl == null) {\n      reportErrorOnResponse(rsp, \"No follower configured or no 'leaderUrl' specified\", null);\n      return;\n    }\n    final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n    final IndexFetchResult[] results = new IndexFetchResult[1];\n    Thread fetchThread = new Thread(() -> {\n      IndexFetchResult result = doFetch(paramsCopy, false);\n      results[0] = result;\n    }, \"explicit-fetchindex-cmd\") ;\n    fetchThread.setDaemon(false);\n    fetchThread.start();\n    if (solrParams.getBool(WAIT, false)) {\n      fetchThread.join();\n      if (results[0] == null) {\n        reportErrorOnResponse(rsp, \"Unable to determine result of synchronous index fetch\", null);\n      } else if (results[0].getSuccessful()) {\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        reportErrorOnResponse(rsp, results[0].getMessage(), null);\n      }\n    } else {\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  private void fetchIndex(SolrParams solrParams, SolrQueryResponse rsp) throws InterruptedException {\n    String masterUrl = solrParams.get(MASTER_URL);\n    if (!isSlave && masterUrl == null) {\n      reportErrorOnResponse(rsp, \"No slave configured or no 'masterUrl' specified\", null);\n      return;\n    }\n    final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n    final IndexFetchResult[] results = new IndexFetchResult[1];\n    Thread fetchThread = new Thread(() -> {\n      IndexFetchResult result = doFetch(paramsCopy, false);\n      results[0] = result;\n    }, \"explicit-fetchindex-cmd\") ;\n    fetchThread.setDaemon(false);\n    fetchThread.start();\n    if (solrParams.getBool(WAIT, false)) {\n      fetchThread.join();\n      if (results[0] == null) {\n        reportErrorOnResponse(rsp, \"Unable to determine result of synchronous index fetch\", null);\n      } else if (results[0].getSuccessful()) {\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        reportErrorOnResponse(rsp, results[0].getMessage(), null);\n      }\n    } else {\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}