{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"\t/**\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\n\t *\n\t * @param a\t\t\tthe Analyzer to test\n\t * @param input\t\tan input String to analyze\n\t * @param output\ta String[] with the results of the analysis\n\t * @throws Exception in case an error occurs\n\t */\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n                final Token reusableToken = new Token();\n\t\tfor (int i=0; i<output.length; i++) {\n\t\t        Token nextToken = ts.next(reusableToken);\n\t\t\tassertNotNull(nextToken);\n\t\t\tassertEquals(nextToken.term(), output[i]);\n\t\t}\n\t\tassertNull(ts.next(reusableToken));\n\t\tts.close();\n\t}\n\n","sourceOld":"\t/**\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\n\t *\n\t * @param a\t\t\tthe Analyzer to test\n\t * @param input\t\tan input String to analyze\n\t * @param output\ta String[] with the results of the analysis\n\t * @throws Exception in case an error occurs\n\t */\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n                final Token reusableToken = new Token();\n\t\tfor (int i=0; i<output.length; i++) {\n\t\t        Token nextToken = ts.next(reusableToken);\n\t\t\tassertNotNull(nextToken);\n\t\t\tassertEquals(nextToken.term(), output[i]);\n\t\t}\n\t\tassertNull(ts.next(reusableToken));\n\t\tts.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"\t/**\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\n\t *\n\t * @param a\t\t\tthe Analyzer to test\n\t * @param input\t\tan input String to analyze\n\t * @param output\ta String[] with the results of the analysis\n\t * @throws Exception in case an error occurs\n\t */\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n\t\tTermAttribute termAtt = (TermAttribute) ts.getAttribute(TermAttribute.class);\n\t\tfor (int i=0; i<output.length; i++) {\n\t\t\tassertTrue(ts.incrementToken());\n\t\t\tassertEquals(termAtt.term(), output[i]);\n\t\t}\n\t\tassertFalse(ts.incrementToken());\n\t\tts.close();\n\t}\n\n","sourceOld":"\t/**\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\n\t *\n\t * @param a\t\t\tthe Analyzer to test\n\t * @param input\t\tan input String to analyze\n\t * @param output\ta String[] with the results of the analysis\n\t * @throws Exception in case an error occurs\n\t */\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n                final Token reusableToken = new Token();\n\t\tfor (int i=0; i<output.length; i++) {\n\t\t        Token nextToken = ts.next(reusableToken);\n\t\t\tassertNotNull(nextToken);\n\t\t\tassertEquals(nextToken.term(), output[i]);\n\t\t}\n\t\tassertNull(ts.next(reusableToken));\n\t\tts.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\n\t *\n\t * @param a\t\t\tthe Analyzer to test\n\t * @param input\t\tan input String to analyze\n\t * @param output\ta String[] with the results of the analysis\n\t * @throws Exception in case an error occurs\n\t */\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n\t\tTermAttribute termAtt = (TermAttribute) ts.getAttribute(TermAttribute.class);\n\t\tfor (int i=0; i<output.length; i++) {\n\t\t\tassertTrue(ts.incrementToken());\n\t\t\tassertEquals(termAtt.term(), output[i]);\n\t\t}\n\t\tassertFalse(ts.incrementToken());\n\t\tts.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}