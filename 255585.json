{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testQueryString().mjava","commits":[{"id":"6122889c0d9dbc6211cd4ab44633264fb906e74d","date":1411769054,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testQueryString().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4f5b5d0516cf5176e9577e3adaeda6803f3b76e","date":1411813593,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testQueryString().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2cb68c00dbca95047d023c1885c85ffc344a53d","date":1412884832,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params with single stream\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    req.add(new SolrInputDocument());\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    // NOTE: single stream requests send all the params\n    // as part of the query string.  So add \"neither\" to the request\n    // so it passes the verification step.\n    req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n    verifyServletState(server, req);\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params with single stream\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    req.add(new SolrInputDocument());\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    // NOTE: single stream requests send all the params\n    // as part of the query string.  So add \"neither\" to the request\n    // so it passes the verification step.\n    req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n    verifyServletState(server, req);\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    client.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      client.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(client, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    client.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      client.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(client, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      client.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(client, req);\n\n    // test with both request and server query params with single stream\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    req.add(new SolrInputDocument());\n    client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      client.request(req);\n    } catch (Throwable t) {}\n    // NOTE: single stream requests send all the params\n    // as part of the query string.  So add \"neither\" to the request\n    // so it passes the verification step.\n    req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n    verifyServletState(client, req);\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params with single stream\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    req.add(new SolrInputDocument());\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    // NOTE: single stream requests send all the params\n    // as part of the query string.  So add \"neither\" to the request\n    // so it passes the verification step.\n    req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n    verifyServletState(server, req);\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["a4f5b5d0516cf5176e9577e3adaeda6803f3b76e","c2cb68c00dbca95047d023c1885c85ffc344a53d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["c2cb68c00dbca95047d023c1885c85ffc344a53d"],"c2cb68c00dbca95047d023c1885c85ffc344a53d":["6122889c0d9dbc6211cd4ab44633264fb906e74d"],"6122889c0d9dbc6211cd4ab44633264fb906e74d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4f5b5d0516cf5176e9577e3adaeda6803f3b76e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6122889c0d9dbc6211cd4ab44633264fb906e74d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6122889c0d9dbc6211cd4ab44633264fb906e74d","a4f5b5d0516cf5176e9577e3adaeda6803f3b76e"],"c2cb68c00dbca95047d023c1885c85ffc344a53d":["55980207f1977bd1463465de1659b821347e2fa8","bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6122889c0d9dbc6211cd4ab44633264fb906e74d":["c2cb68c00dbca95047d023c1885c85ffc344a53d","a4f5b5d0516cf5176e9577e3adaeda6803f3b76e"],"a4f5b5d0516cf5176e9577e3adaeda6803f3b76e":["55980207f1977bd1463465de1659b821347e2fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}