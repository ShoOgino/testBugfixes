{"path":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be5cd4bcb73378e3d5f06021287a5edc79995e4e","date":1312299232,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":["908c8e2c79736122e37d47d73a053999c24bac65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"251f2ea0d985ea4779dd1d940baf62d4a628faec","date":1315326440,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"251f2ea0d985ea4779dd1d940baf62d4a628faec":["be5cd4bcb73378e3d5f06021287a5edc79995e4e"],"042e4d934397657ba04c82b46cc5665076bc5c58":["251f2ea0d985ea4779dd1d940baf62d4a628faec"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"be5cd4bcb73378e3d5f06021287a5edc79995e4e":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"251f2ea0d985ea4779dd1d940baf62d4a628faec":["042e4d934397657ba04c82b46cc5665076bc5c58"],"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"be5cd4bcb73378e3d5f06021287a5edc79995e4e":["251f2ea0d985ea4779dd1d940baf62d4a628faec"],"c26f00b574427b55127e869b935845554afde1fa":["be5cd4bcb73378e3d5f06021287a5edc79995e4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}