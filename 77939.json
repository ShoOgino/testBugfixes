{"path":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","pathOld":"/dev/null","sourceNew":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    TermAttribute term = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.term());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","sourceNew":null,"sourceOld":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    TermAttribute term = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.term());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","pathOld":"src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    TermAttribute term = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.term());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    TermAttribute term = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.term());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","pathOld":"/dev/null","sourceNew":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    TermAttribute term = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.term());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c8b12bda3f5864b27e3e04df1be4f6736ec067a","date":1270088127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    TermAttribute term = ts.addAttribute(TermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.term());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    TermAttribute term = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.term());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d085fb336a7208eea2214e5ffcc803960819b60b","date":1270981894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    CharTermAttribute term = ts.addAttribute(CharTermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.toString());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.toString());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.toString());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    TermAttribute term = ts.addAttribute(TermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.term());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.term());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4fb2da5489b4a308da34d68590b31e9e5bc7e7","date":1295267679,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","sourceNew":null,"sourceOld":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    CharTermAttribute term = ts.addAttribute(CharTermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.toString());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.toString());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.toString());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","sourceNew":null,"sourceOld":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    CharTermAttribute term = ts.addAttribute(CharTermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.toString());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.toString());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.toString());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestBufferedTokenStream#testReset().mjava","sourceNew":null,"sourceOld":"  public void testReset() throws Exception {\n    final String input = \"How now A B brown A cow B like A B thing?\";\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input));\n    TokenStream ts = new AB_AAB_Stream(tokenizer);\n    CharTermAttribute term = ts.addAttribute(CharTermAttribute.class);\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.toString());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"now\", term.toString());\n    assertTrue(ts.incrementToken());\n    assertEquals(\"A\", term.toString());\n    // reset back to input, \n    // if reset() does not work correctly then previous buffered tokens will remain \n    tokenizer.reset(new StringReader(input));\n    ts.reset();\n    assertTrue(ts.incrementToken());\n    assertEquals(\"How\", term.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d085fb336a7208eea2214e5ffcc803960819b60b","2d4fb2da5489b4a308da34d68590b31e9e5bc7e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2d4fb2da5489b4a308da34d68590b31e9e5bc7e7":["d085fb336a7208eea2214e5ffcc803960819b60b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d085fb336a7208eea2214e5ffcc803960819b60b":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["d085fb336a7208eea2214e5ffcc803960819b60b","2d4fb2da5489b4a308da34d68590b31e9e5bc7e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d4fb2da5489b4a308da34d68590b31e9e5bc7e7"]},"commit2Childs":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["d085fb336a7208eea2214e5ffcc803960819b60b"],"1da8d55113b689b06716246649de6f62430f15c0":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"2d4fb2da5489b4a308da34d68590b31e9e5bc7e7":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d085fb336a7208eea2214e5ffcc803960819b60b":["29ef99d61cda9641b6250bf9567329a6e65f901d","2d4fb2da5489b4a308da34d68590b31e9e5bc7e7","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}