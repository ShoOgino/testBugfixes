{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream#open().mjava","commits":[{"id":"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233","date":1543335722,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new CloudSolrClient.Builder(hosts, Optional.empty()).build();\n    }\n\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63","date":1544462572,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new CloudSolrClient.Builder(hosts, Optional.empty()).build();\n    }\n\n\n    QueryRequest request = new QueryRequest(params, SolrRequest.METHOD.POST);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new CloudSolrClient.Builder(hosts, Optional.empty()).build();\n    }\n\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}