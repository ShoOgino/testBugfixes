{"path":"contrib/extraction/src/main/java/org/apache/solr/handler/SolrContentHandler#transformValue(String,SchemaField).mjava","commits":[{"id":"868e0ed16bb29556f95c00e989da33ab5c9dfe56","date":1228568666,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/main/java/org/apache/solr/handler/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        //TODO: error or log?\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46dfcd540005e76a7db876d494ac74e82c476523","date":1229095104,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        //TODO: error or log?\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        //TODO: error or log?\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"46dfcd540005e76a7db876d494ac74e82c476523":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["46dfcd540005e76a7db876d494ac74e82c476523"],"46dfcd540005e76a7db876d494ac74e82c476523":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["46dfcd540005e76a7db876d494ac74e82c476523","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}