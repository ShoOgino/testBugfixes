{"path":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","commits":[{"id":"ae3be3418aea9954be27a83315087f67c0c2201e","date":1361023362,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","pathOld":"/dev/null","sourceNew":"  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      final long base = minValues[block] + (long) (averages[block] * (long) element);\n      if (deltas[block] == null) {\n        return base;\n      } else {\n        return base + zigZagDecode(deltas[block].get(element));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","pathOld":"/dev/null","sourceNew":"  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      final long base = minValues[block] + (long) (averages[block] * (long) element);\n      if (deltas[block] == null) {\n        return base;\n      } else {\n        return base + zigZagDecode(deltas[block].get(element));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22344cc5c695683a5a6cecff291f840d71c20d25","date":1370561415,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","sourceNew":"  @Override\n  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      final long base = minValues[block] + (long) (averages[block] * (long) element);\n      if (deltas[block] == null) {\n        return base;\n      } else {\n        return base + zigZagDecode(deltas[block].get(element));\n      }\n    }\n  }\n\n","sourceOld":"  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      final long base = minValues[block] + (long) (averages[block] * (long) element);\n      if (deltas[block] == null) {\n        return base;\n      } else {\n        return base + zigZagDecode(deltas[block].get(element));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb240aebd5a347d79f642127ad9255dd9a979f06","date":1375188159,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","sourceNew":"  @Override\n  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      final long base = minValues[block] + (long) (averages[block] * (long) element);\n      if (values[block] == null) {\n        return base;\n      } else {\n        return base + zigZagDecode(values[block].get(element));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      final long base = minValues[block] + (long) (averages[block] * (long) element);\n      if (deltas[block] == null) {\n        return base;\n      } else {\n        return base + zigZagDecode(deltas[block].get(element));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","sourceNew":"  @Override\n  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      final long base = minValues[block] + (long) (averages[block] * (long) element);\n      if (values[block] == null) {\n        return base;\n      } else {\n        return base + zigZagDecode(values[block].get(element));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      final long base = minValues[block] + (long) (averages[block] * (long) element);\n      if (deltas[block] == null) {\n        return base;\n      } else {\n        return base + zigZagDecode(deltas[block].get(element));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","sourceNew":"  @Override\n  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      return expected(minValues[block], averages[block], element) + values[block].get(element);\n    }\n  }\n\n","sourceOld":"  @Override\n  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      final long base = minValues[block] + (long) (averages[block] * (long) element);\n      if (values[block] == null) {\n        return base;\n      } else {\n        return base + zigZagDecode(values[block].get(element));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  long get(int block, int element) {\n    if (block == valuesOff) {\n      return pending[element];\n    } else {\n      return expected(minValues[block], averages[block], element) + values[block].get(element);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db1893644d5f20456c9524b28e826293d767db65":["cb240aebd5a347d79f642127ad9255dd9a979f06"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["22344cc5c695683a5a6cecff291f840d71c20d25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["22344cc5c695683a5a6cecff291f840d71c20d25"],"22344cc5c695683a5a6cecff291f840d71c20d25":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae3be3418aea9954be27a83315087f67c0c2201e"],"ae3be3418aea9954be27a83315087f67c0c2201e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["db1893644d5f20456c9524b28e826293d767db65"]},"commit2Childs":{"db1893644d5f20456c9524b28e826293d767db65":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["db1893644d5f20456c9524b28e826293d767db65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddbb72a33557d2b5bc22ee95daf3281c43560502","ae3be3418aea9954be27a83315087f67c0c2201e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"22344cc5c695683a5a6cecff291f840d71c20d25":["cb240aebd5a347d79f642127ad9255dd9a979f06","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["22344cc5c695683a5a6cecff291f840d71c20d25"],"ae3be3418aea9954be27a83315087f67c0c2201e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}