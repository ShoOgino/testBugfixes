{"path":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","commits":[{"id":"feb75c13cdf6b27b36407e4b15b35cf3142ab619","date":1310465075,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    String coreName = h.getCore().getName();\n    if (coreName.length() == 0) {\n      coreName = h.getCoreContainer().getDefaultCoreName().length() > 0 ? h.getCoreContainer().getDefaultCoreName() : \"\";\n    }\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = oldBeans.size();\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = newBeans.size();\n\n    assertEquals(\"Number of registered MBeans is not the same after Solr core reload\", oldNumberOfObjects, newNumberOfObjects);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291","d3f93d2089f87ac620b6f189197220b00b4c0bf1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"971c36528e9394e6a97c8703e4663f578e765eff","date":1310679787,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    String coreName = h.getCore().getName();\n    if (coreName.length() == 0) {\n      coreName = h.getCoreContainer().getDefaultCoreName().length() > 0 ? h.getCoreContainer().getDefaultCoreName() : \"\";\n    }\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = oldBeans.size();\n    h.getCoreContainer().reload(coreName);\n    \n    // chill for a moment, so our beans can get ready\n    Thread.sleep(1000);\n    \n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = newBeans.size();\n\n    assertEquals(\"Number of registered MBeans is not the same after Solr core reload\", oldNumberOfObjects, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    String coreName = h.getCore().getName();\n    if (coreName.length() == 0) {\n      coreName = h.getCoreContainer().getDefaultCoreName().length() > 0 ? h.getCoreContainer().getDefaultCoreName() : \"\";\n    }\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = oldBeans.size();\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = newBeans.size();\n\n    assertEquals(\"Number of registered MBeans is not the same after Solr core reload\", oldNumberOfObjects, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":["d3f93d2089f87ac620b6f189197220b00b4c0bf1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3f93d2089f87ac620b6f189197220b00b4c0bf1","date":1311156719,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    String coreName = h.getCore().getName();\n    if (coreName.length() == 0) {\n      coreName = h.getCoreContainer().getDefaultCoreName().length() > 0 ? h.getCoreContainer().getDefaultCoreName() : \"\";\n    }\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    String coreName = h.getCore().getName();\n    if (coreName.length() == 0) {\n      coreName = h.getCoreContainer().getDefaultCoreName().length() > 0 ? h.getCoreContainer().getDefaultCoreName() : \"\";\n    }\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = oldBeans.size();\n    h.getCoreContainer().reload(coreName);\n    \n    // chill for a moment, so our beans can get ready\n    Thread.sleep(1000);\n    \n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = newBeans.size();\n\n    assertEquals(\"Number of registered MBeans is not the same after Solr core reload\", oldNumberOfObjects, newNumberOfObjects);\n  }\n\n","bugFix":["971c36528e9394e6a97c8703e4663f578e765eff","feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8d7e01f151b8405582ce8e63be536d1eec03fca","date":1319631267,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test @Ignore(\"fix me\")\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    String coreName = h.getCore().getName();\n    if (coreName.length() == 0) {\n      coreName = h.getCoreContainer().getDefaultCoreName().length() > 0 ? h.getCoreContainer().getDefaultCoreName() : \"\";\n    }\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    String coreName = h.getCore().getName();\n    if (coreName.length() == 0) {\n      coreName = h.getCoreContainer().getDefaultCoreName().length() > 0 ? h.getCoreContainer().getDefaultCoreName() : \"\";\n    }\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ead1ddcc970bc32057099a2ca25be8dae15f2ac","date":1320169273,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    String coreName = h.getCore().getName();\n    if (coreName.length() == 0) {\n      coreName = h.getCoreContainer().getDefaultCoreName().length() > 0 ? h.getCoreContainer().getDefaultCoreName() : \"\";\n    }\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test @Ignore(\"fix me\")\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    String coreName = h.getCore().getName();\n    if (coreName.length() == 0) {\n      coreName = h.getCoreContainer().getDefaultCoreName().length() > 0 ? h.getCoreContainer().getDefaultCoreName() : \"\";\n    }\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e635cfcf66f9e8b914c54c24d337820e475f44a5","date":1335303739,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    String coreName = h.getCore().getName();\n    if (coreName.length() == 0) {\n      coreName = h.getCoreContainer().getDefaultCoreName().length() > 0 ? h.getCoreContainer().getDefaultCoreName() : \"\";\n    }\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1d6d844f3b4061aedc283b5e71ff1d19aeae291","date":1375221534,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    SolrCore core = h.getCoreContainer().getCore(coreName);\n    try {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    } finally {\n      core.close();\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd6823c6c7eafe59318f17d9457708536d4f75d","date":1500978590,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-2715\") // timing problem?\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-2715\") // timing problem?\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-2715\") // timing problem?\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test @Ignore(\"timing problem? https://issues.apache.org/jira/browse/SOLR-2715\")\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-2715\") // timing problem?\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-2715\") // timing problem?\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc0288a6452293dcaa562210b708e58f19b7c3c5","date":1520861290,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = String.valueOf(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = String.valueOf(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, newNumberOfObjects);\n  }\n\n","sourceOld":"  @Test @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-2715\") // timing problem?\n  public void testJmxOnCoreReload() throws Exception {\n\n    String coreName = h.getCore().getName();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    log.info(\"Before Reload: Size of infoRegistry: \" + h.getCore().getInfoRegistry().size() + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);\n\n    h.getCoreContainer().reload(coreName);\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    int registrySize = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      registrySize = core.getInfoRegistry().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), \"coreHashCode\"))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: Size of infoRegistry: \" + registrySize + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as info registry size\", registrySize, newNumberOfObjects);\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a","668e14f5e98b3208d823267273045ecd8acdc05d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"668e14f5e98b3208d823267273045ecd8acdc05d","date":1520953227,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    // make sure searcher beans are registered\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = String.valueOf(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = String.valueOf(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    Set<String> metricNames = new TreeSet<>();\n    Set<String> beanNames = new TreeSet<>();\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      MetricRegistry registry = mgr.registry(registryName);\n      metricNames.addAll(registry.getNames());\n      totalCoreMetrics = registry.getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            String[] name = bean.getObjectName().toString().substring(32).split(\",\");\n            StringBuilder sb = new StringBuilder();\n            for (String n : name) {\n              if (sb.length() > 0) {\n                sb.append(\".\");\n              }\n              sb.append(n.split(\"=\")[1]);\n            }\n            beanNames.add(sb.toString());\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + newNumberOfObjects);\n    if (totalCoreMetrics != newNumberOfObjects) {\n      Set<String> errors = new TreeSet<>(beanNames);\n      errors.removeAll(metricNames);\n      log.error(\"Unexpected bean names: \" + errors);\n      errors = new TreeSet<>(metricNames);\n      errors.removeAll(beanNames);\n      log.error(\"Unexpected metric names: \" + errors);\n      fail(\"Number of registered MBeans is not the same as the number of core metrics: \" + totalCoreMetrics + \" != \" + newNumberOfObjects);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = String.valueOf(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = String.valueOf(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + newNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, newNumberOfObjects);\n  }\n\n","bugFix":["fc0288a6452293dcaa562210b708e58f19b7c3c5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    // make sure searcher beans are registered\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    Set<String> metricNames = new TreeSet<>();\n    Set<String> beanNames = new TreeSet<>();\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      MetricRegistry registry = mgr.registry(registryName);\n      metricNames.addAll(registry.getNames());\n      totalCoreMetrics = registry.getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            String[] name = bean.getObjectName().toString().substring(32).split(\",\");\n            StringBuilder sb = new StringBuilder();\n            for (String n : name) {\n              if (sb.length() > 0) {\n                sb.append(\".\");\n              }\n              sb.append(n.split(\"=\")[1]);\n            }\n            beanNames.add(sb.toString());\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + newNumberOfObjects);\n    if (totalCoreMetrics != newNumberOfObjects) {\n      Set<String> errors = new TreeSet<>(beanNames);\n      errors.removeAll(metricNames);\n      log.error(\"Unexpected bean names: \" + errors);\n      errors = new TreeSet<>(metricNames);\n      errors.removeAll(beanNames);\n      log.error(\"Unexpected metric names: \" + errors);\n      fail(\"Number of registered MBeans is not the same as the number of core metrics: \" + totalCoreMetrics + \" != \" + newNumberOfObjects);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    // make sure searcher beans are registered\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = String.valueOf(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = String.valueOf(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    Set<String> metricNames = new TreeSet<>();\n    Set<String> beanNames = new TreeSet<>();\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      MetricRegistry registry = mgr.registry(registryName);\n      metricNames.addAll(registry.getNames());\n      totalCoreMetrics = registry.getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            String[] name = bean.getObjectName().toString().substring(32).split(\",\");\n            StringBuilder sb = new StringBuilder();\n            for (String n : name) {\n              if (sb.length() > 0) {\n                sb.append(\".\");\n              }\n              sb.append(n.split(\"=\")[1]);\n            }\n            beanNames.add(sb.toString());\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + newNumberOfObjects);\n    if (totalCoreMetrics != newNumberOfObjects) {\n      Set<String> errors = new TreeSet<>(beanNames);\n      errors.removeAll(metricNames);\n      log.error(\"Unexpected bean names: \" + errors);\n      errors = new TreeSet<>(metricNames);\n      errors.removeAll(beanNames);\n      log.error(\"Unexpected metric names: \" + errors);\n      fail(\"Number of registered MBeans is not the same as the number of core metrics: \" + totalCoreMetrics + \" != \" + newNumberOfObjects);\n    }\n  }\n\n","bugFix":["fc0288a6452293dcaa562210b708e58f19b7c3c5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    // make sure searcher beans are registered\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    Set<String> metricNames = new TreeSet<>();\n    Set<String> beanNames = new TreeSet<>();\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      MetricRegistry registry = mgr.registry(registryName);\n      metricNames.addAll(registry.getNames());\n      totalCoreMetrics = registry.getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            String[] name = bean.getObjectName().toString().substring(32).split(\",\");\n            StringBuilder sb = new StringBuilder();\n            for (String n : name) {\n              if (sb.length() > 0) {\n                sb.append(\".\");\n              }\n              sb.append(n.split(\"=\")[1]);\n            }\n            beanNames.add(sb.toString());\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + newNumberOfObjects);\n    if (totalCoreMetrics != newNumberOfObjects) {\n      Set<String> errors = new TreeSet<>(beanNames);\n      errors.removeAll(metricNames);\n      log.error(\"Unexpected bean names: \" + errors);\n      errors = new TreeSet<>(metricNames);\n      errors.removeAll(beanNames);\n      log.error(\"Unexpected metric names: \" + errors);\n      fail(\"Number of registered MBeans is not the same as the number of core metrics: \" + totalCoreMetrics + \" != \" + newNumberOfObjects);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    // make sure searcher beans are registered\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = String.valueOf(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = String.valueOf(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    Set<String> metricNames = new TreeSet<>();\n    Set<String> beanNames = new TreeSet<>();\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      MetricRegistry registry = mgr.registry(registryName);\n      metricNames.addAll(registry.getNames());\n      totalCoreMetrics = registry.getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            String[] name = bean.getObjectName().toString().substring(32).split(\",\");\n            StringBuilder sb = new StringBuilder();\n            for (String n : name) {\n              if (sb.length() > 0) {\n                sb.append(\".\");\n              }\n              sb.append(n.split(\"=\")[1]);\n            }\n            beanNames.add(sb.toString());\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + newNumberOfObjects);\n    if (totalCoreMetrics != newNumberOfObjects) {\n      Set<String> errors = new TreeSet<>(beanNames);\n      errors.removeAll(metricNames);\n      log.error(\"Unexpected bean names: \" + errors);\n      errors = new TreeSet<>(metricNames);\n      errors.removeAll(beanNames);\n      log.error(\"Unexpected metric names: \" + errors);\n      fail(\"Number of registered MBeans is not the same as the number of core metrics: \" + totalCoreMetrics + \" != \" + newNumberOfObjects);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    // make sure searcher beans are registered\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: {} MBeans: {}\", totalCoreMetrics, oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    Set<String> metricNames = new TreeSet<>();\n    Set<String> beanNames = new TreeSet<>();\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      MetricRegistry registry = mgr.registry(registryName);\n      metricNames.addAll(registry.getNames());\n      totalCoreMetrics = registry.getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            String[] name = bean.getObjectName().toString().substring(32).split(\",\");\n            StringBuilder sb = new StringBuilder();\n            for (String n : name) {\n              if (sb.length() > 0) {\n                sb.append(\".\");\n              }\n              sb.append(n.split(\"=\")[1]);\n            }\n            beanNames.add(sb.toString());\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: {} MBeans: {}\", totalCoreMetrics, newNumberOfObjects);\n    if (totalCoreMetrics != newNumberOfObjects) {\n      Set<String> errors = new TreeSet<>(beanNames);\n      errors.removeAll(metricNames);\n      log.error(\"Unexpected bean names: {}\", errors);\n      errors = new TreeSet<>(metricNames);\n      errors.removeAll(beanNames);\n      log.error(\"Unexpected metric names: {}\", errors);\n      fail(\"Number of registered MBeans is not the same as the number of core metrics: \" + totalCoreMetrics + \" != \" + newNumberOfObjects);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    // make sure searcher beans are registered\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    Set<String> metricNames = new TreeSet<>();\n    Set<String> beanNames = new TreeSet<>();\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      MetricRegistry registry = mgr.registry(registryName);\n      metricNames.addAll(registry.getNames());\n      totalCoreMetrics = registry.getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            String[] name = bean.getObjectName().toString().substring(32).split(\",\");\n            StringBuilder sb = new StringBuilder();\n            for (String n : name) {\n              if (sb.length() > 0) {\n                sb.append(\".\");\n              }\n              sb.append(n.split(\"=\")[1]);\n            }\n            beanNames.add(sb.toString());\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: \" + totalCoreMetrics + \" MBeans: \" + newNumberOfObjects);\n    if (totalCoreMetrics != newNumberOfObjects) {\n      Set<String> errors = new TreeSet<>(beanNames);\n      errors.removeAll(metricNames);\n      log.error(\"Unexpected bean names: \" + errors);\n      errors = new TreeSet<>(metricNames);\n      errors.removeAll(beanNames);\n      log.error(\"Unexpected metric names: \" + errors);\n      fail(\"Number of registered MBeans is not the same as the number of core metrics: \" + totalCoreMetrics + \" != \" + newNumberOfObjects);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxOnCoreReload().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"try\"})\n  public void testJmxOnCoreReload() throws Exception {\n    // make sure searcher beans are registered\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: {} MBeans: {}\", totalCoreMetrics, oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    Set<String> metricNames = new TreeSet<>();\n    Set<String> beanNames = new TreeSet<>();\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      MetricRegistry registry = mgr.registry(registryName);\n      metricNames.addAll(registry.getNames());\n      totalCoreMetrics = registry.getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            String[] name = bean.getObjectName().toString().substring(32).split(\",\");\n            StringBuilder sb = new StringBuilder();\n            for (String n : name) {\n              if (sb.length() > 0) {\n                sb.append(\".\");\n              }\n              sb.append(n.split(\"=\")[1]);\n            }\n            beanNames.add(sb.toString());\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: {} MBeans: {}\", totalCoreMetrics, newNumberOfObjects);\n    if (totalCoreMetrics != newNumberOfObjects) {\n      Set<String> errors = new TreeSet<>(beanNames);\n      errors.removeAll(metricNames);\n      log.error(\"Unexpected bean names: {}\", errors);\n      errors = new TreeSet<>(metricNames);\n      errors.removeAll(beanNames);\n      log.error(\"Unexpected metric names: {}\", errors);\n      fail(\"Number of registered MBeans is not the same as the number of core metrics: \" + totalCoreMetrics + \" != \" + newNumberOfObjects);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxOnCoreReload() throws Exception {\n    // make sure searcher beans are registered\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();\n    String registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    String coreName = h.getCore().getName();\n    String coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);\n    // take first JMX reporter\n    SolrJmxReporter reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    String tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);\n    int oldNumberOfObjects = 0;\n    for (ObjectInstance bean : oldBeans) {\n      try {\n        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n          oldNumberOfObjects++;\n        }\n      } catch (AttributeNotFoundException e) {\n        // expected\n      }\n    }\n\n    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();\n    log.info(\"Before Reload: size of all core metrics: {} MBeans: {}\", totalCoreMetrics, oldNumberOfObjects);\n    assertEquals(\"Number of registered MBeans is not the same as the number of core metrics\", totalCoreMetrics, oldNumberOfObjects);\n    h.getCoreContainer().reload(coreName);\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    reporters = mgr.getReporters(registryName);\n    coreHashCode = Integer.toHexString(h.getCore().hashCode());\n    // take first JMX reporter\n    reporter = null;\n    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {\n      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {\n        reporter = (SolrJmxReporter)e.getValue();\n        break;\n      }\n    }\n    assertNotNull(\"could not find JMX reporter for \" + registryName, reporter);\n    tag = reporter.getInstanceTag();\n\n    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);\n    int newNumberOfObjects = 0;\n    Set<String> metricNames = new TreeSet<>();\n    Set<String> beanNames = new TreeSet<>();\n    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {\n      MetricRegistry registry = mgr.registry(registryName);\n      metricNames.addAll(registry.getNames());\n      totalCoreMetrics = registry.getMetrics().size();\n      for (ObjectInstance bean : newBeans) {\n        try {\n          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {\n            String[] name = bean.getObjectName().toString().substring(32).split(\",\");\n            StringBuilder sb = new StringBuilder();\n            for (String n : name) {\n              if (sb.length() > 0) {\n                sb.append(\".\");\n              }\n              sb.append(n.split(\"=\")[1]);\n            }\n            beanNames.add(sb.toString());\n            newNumberOfObjects++;\n          }\n        } catch (AttributeNotFoundException e) {\n          // expected\n        }\n      }\n    }\n\n    log.info(\"After Reload: size of all core metrics: {} MBeans: {}\", totalCoreMetrics, newNumberOfObjects);\n    if (totalCoreMetrics != newNumberOfObjects) {\n      Set<String> errors = new TreeSet<>(beanNames);\n      errors.removeAll(metricNames);\n      log.error(\"Unexpected bean names: {}\", errors);\n      errors = new TreeSet<>(metricNames);\n      errors.removeAll(beanNames);\n      log.error(\"Unexpected metric names: {}\", errors);\n      fail(\"Number of registered MBeans is not the same as the number of core metrics: \" + totalCoreMetrics + \" != \" + newNumberOfObjects);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["e635cfcf66f9e8b914c54c24d337820e475f44a5","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"c1d6d844f3b4061aedc283b5e71ff1d19aeae291":["e635cfcf66f9e8b914c54c24d337820e475f44a5"],"d8d7e01f151b8405582ce8e63be536d1eec03fca":["d3f93d2089f87ac620b6f189197220b00b4c0bf1"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["a52341299179de5479672f7cf518bf4b173f34b3"],"43564cbb30b064675027cfb569564e8531096e97":["668e14f5e98b3208d823267273045ecd8acdc05d","bfc52860e6d13d034226a760813c59d984c6817a"],"d3f93d2089f87ac620b6f189197220b00b4c0bf1":["971c36528e9394e6a97c8703e4663f578e765eff"],"2ead1ddcc970bc32057099a2ca25be8dae15f2ac":["d8d7e01f151b8405582ce8e63be536d1eec03fca"],"971c36528e9394e6a97c8703e4663f578e765eff":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["43564cbb30b064675027cfb569564e8531096e97"],"668e14f5e98b3208d823267273045ecd8acdc05d":["fc0288a6452293dcaa562210b708e58f19b7c3c5"],"e98520789adb1d5ad05afb4956eca0944a929688":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"fc0288a6452293dcaa562210b708e58f19b7c3c5":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"a52341299179de5479672f7cf518bf4b173f34b3":["e332392bbbdd01cb69ad6a89051f483cda38e15e","7cd6823c6c7eafe59318f17d9457708536d4f75d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e332392bbbdd01cb69ad6a89051f483cda38e15e","a52341299179de5479672f7cf518bf4b173f34b3"],"bfc52860e6d13d034226a760813c59d984c6817a":["668e14f5e98b3208d823267273045ecd8acdc05d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"e635cfcf66f9e8b914c54c24d337820e475f44a5":["2ead1ddcc970bc32057099a2ca25be8dae15f2ac"],"7cd6823c6c7eafe59318f17d9457708536d4f75d":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["971c36528e9394e6a97c8703e4663f578e765eff"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c1d6d844f3b4061aedc283b5e71ff1d19aeae291":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","e332392bbbdd01cb69ad6a89051f483cda38e15e"],"d8d7e01f151b8405582ce8e63be536d1eec03fca":["2ead1ddcc970bc32057099a2ca25be8dae15f2ac"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["fc0288a6452293dcaa562210b708e58f19b7c3c5"],"43564cbb30b064675027cfb569564e8531096e97":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"d3f93d2089f87ac620b6f189197220b00b4c0bf1":["d8d7e01f151b8405582ce8e63be536d1eec03fca"],"971c36528e9394e6a97c8703e4663f578e765eff":["d3f93d2089f87ac620b6f189197220b00b4c0bf1"],"2ead1ddcc970bc32057099a2ca25be8dae15f2ac":["e635cfcf66f9e8b914c54c24d337820e475f44a5"],"668e14f5e98b3208d823267273045ecd8acdc05d":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a52341299179de5479672f7cf518bf4b173f34b3":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"fc0288a6452293dcaa562210b708e58f19b7c3c5":["668e14f5e98b3208d823267273045ecd8acdc05d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["a52341299179de5479672f7cf518bf4b173f34b3","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","7cd6823c6c7eafe59318f17d9457708536d4f75d"],"e635cfcf66f9e8b914c54c24d337820e475f44a5":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"7cd6823c6c7eafe59318f17d9457708536d4f75d":["a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}