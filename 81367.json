{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","commits":[{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean,boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n      throws IOException {\n    return threadPool.executeAllThreads(new DocumentsWriterThreadPool.AllThreadsTask<Boolean>() {\n      @Override\n      public Boolean process(Iterator<DocumentsWriterPerThread> threadsIterator) throws IOException {\n        boolean anythingFlushed = false;\n        \n        if (flushDeletes) {\n          if (applyDeletes(indexWriter.segmentInfos)) {\n            indexWriter.checkpoint();\n          }\n        }\n\n        while (threadsIterator.hasNext()) {\n          DocumentsWriterPerThread perThread = threadsIterator.next();\n          final int numDocs = perThread.getNumDocsInRAM();\n          \n          // Always flush docs if there are any\n          boolean flushDocs = numDocs > 0;\n          \n          String segment = perThread.getSegment();\n\n          // If we are flushing docs, segment must not be null:\n          assert segment != null || !flushDocs;\n    \n          if (flushDocs) {\n            SegmentInfo newSegment = perThread.flush();\n            \n            if (newSegment != null) {\n              anythingFlushed = true;\n              \n              IndexWriter.setDiagnostics(newSegment, \"flush\");\n              finishFlushedSegment(newSegment, perThread);\n            }\n          }\n        }\n\n        if (anythingFlushed) {\n          clearThreadBindings();\n\n          sequenceIDLock.lock();\n          try {\n            flushedSequenceID = sequenceID;\n          } finally {\n            sequenceIDLock.unlock();\n          }\n          numDocsInRAM.set(0);\n        }\n        \n        if (flushDeletes) {\n          deletesInRAM.clear();\n        }\n\n\n        return anythingFlushed;\n      }\n    });\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDocStores, final boolean flushDeletes)\n      throws IOException {\n    return threadPool.executeAllThreads(new DocumentsWriterThreadPool.AllThreadsTask<Boolean>() {\n      @Override\n      public Boolean process(Iterator<DocumentsWriterPerThread> threadsIterator) throws IOException {\n        boolean anythingFlushed = false;\n        \n        if (flushDeletes) {\n          synchronized (indexWriter) {\n            if (applyDeletes(indexWriter.segmentInfos)) {\n              indexWriter.checkpoint();\n            }\n          }\n        }\n\n        while (threadsIterator.hasNext()) {\n          boolean perThreadFlushDocStores = flushDocStores;\n          DocumentsWriterPerThread perThread = threadsIterator.next();\n          final int numDocs = perThread.getNumDocsInRAM();\n          \n          // Always flush docs if there are any\n          boolean flushDocs = numDocs > 0;\n          \n          String docStoreSegment = perThread.getDocStoreSegment();\n          if (docStoreSegment == null) {\n            perThreadFlushDocStores = false;\n          }\n          int docStoreOffset = perThread.getDocStoreOffset();\n          boolean docStoreIsCompoundFile = false;\n          if (perThreadFlushDocStores\n              && (!flushDocs || !perThread.getSegment().equals(perThread.getDocStoreSegment()))) {\n            // We must separately flush the doc store\n            if (infoStream != null) {\n              message(\"  flush shared docStore segment \" + docStoreSegment);\n            }\n            docStoreIsCompoundFile = flushDocStores(perThread);\n            flushDocStores(perThread);\n            perThreadFlushDocStores = false;\n          }\n\n          String segment = perThread.getSegment();\n\n          // If we are flushing docs, segment must not be null:\n          assert segment != null || !flushDocs;\n    \n          if (flushDocs) {\n            SegmentInfo newSegment = perThread.flush(perThreadFlushDocStores);\n            \n            if (newSegment != null) {\n              anythingFlushed = true;\n              \n              if (0 == docStoreOffset && perThreadFlushDocStores) {\n                // This means we are flushing private doc stores\n                // with this segment, so it will not be shared\n                // with other segments\n                assert docStoreSegment != null;\n                assert docStoreSegment.equals(segment);\n                docStoreOffset = -1;\n                docStoreSegment = null;\n                docStoreIsCompoundFile = false;\n              }\n              newSegment.setDocStore(docStoreOffset, docStoreSegment, docStoreIsCompoundFile);\n              \n              IndexWriter.setDiagnostics(newSegment, \"flush\");\n              finishFlushedSegment(newSegment, perThread);\n            }\n          }\n        }\n\n        if (anythingFlushed) {\n          clearThreadBindings();\n\n          sequenceIDLock.lock();\n          try {\n            flushedSequenceID = sequenceID;\n          } finally {\n            sequenceIDLock.unlock();\n          }\n          numDocsInRAM.set(0);\n        }\n        \n        if (flushDeletes) {\n          deletesInRAM.clear();\n        }\n\n\n        return anythingFlushed;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n      throws IOException {\n    \n    return threadPool.executeAllThreads(this, new DocumentsWriterThreadPool.AllThreadsTask<Boolean>() {\n      @Override\n      public Boolean process(Iterator<DocumentsWriterPerThread> threadsIterator) throws IOException {\n        boolean anythingFlushed = false;\n        \n        while (threadsIterator.hasNext()) {\n          DocumentsWriterPerThread perThread = threadsIterator.next();\n          final int numDocs = perThread.getNumDocsInRAM();\n          \n          // Always flush docs if there are any\n          boolean flushDocs = numDocs > 0;\n          \n          String segment = perThread.getSegment();\n\n          // If we are flushing docs, segment must not be null:\n          assert segment != null || !flushDocs;\n    \n          if (flushDocs) {\n            SegmentInfo newSegment = perThread.flush();\n            newSegment.dir = indexWriter.getDirectory();\n            \n            if (newSegment != null) {\n              anythingFlushed = true;\n              \n              IndexWriter.setDiagnostics(newSegment, \"flush\");\n              finishFlushedSegment(newSegment, perThread);\n            }\n          }\n        }\n\n        if (anythingFlushed) {\n          clearThreadBindings();\n\n          sequenceIDLock.lock();\n          try {\n            flushedSequenceID = sequenceID;\n          } finally {\n            sequenceIDLock.unlock();\n          }\n          numDocsInRAM.set(0);\n        }\n        \n        if (flushDeletes) {\n          deletesInRAM.clear();\n        }\n\n\n        return anythingFlushed;\n      }\n    });\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n      throws IOException {\n    return threadPool.executeAllThreads(new DocumentsWriterThreadPool.AllThreadsTask<Boolean>() {\n      @Override\n      public Boolean process(Iterator<DocumentsWriterPerThread> threadsIterator) throws IOException {\n        boolean anythingFlushed = false;\n        \n        if (flushDeletes) {\n          if (applyDeletes(indexWriter.segmentInfos)) {\n            indexWriter.checkpoint();\n          }\n        }\n\n        while (threadsIterator.hasNext()) {\n          DocumentsWriterPerThread perThread = threadsIterator.next();\n          final int numDocs = perThread.getNumDocsInRAM();\n          \n          // Always flush docs if there are any\n          boolean flushDocs = numDocs > 0;\n          \n          String segment = perThread.getSegment();\n\n          // If we are flushing docs, segment must not be null:\n          assert segment != null || !flushDocs;\n    \n          if (flushDocs) {\n            SegmentInfo newSegment = perThread.flush();\n            \n            if (newSegment != null) {\n              anythingFlushed = true;\n              \n              IndexWriter.setDiagnostics(newSegment, \"flush\");\n              finishFlushedSegment(newSegment, perThread);\n            }\n          }\n        }\n\n        if (anythingFlushed) {\n          clearThreadBindings();\n\n          sequenceIDLock.lock();\n          try {\n            flushedSequenceID = sequenceID;\n          } finally {\n            sequenceIDLock.unlock();\n          }\n          numDocsInRAM.set(0);\n        }\n        \n        if (flushDeletes) {\n          deletesInRAM.clear();\n        }\n\n\n        return anythingFlushed;\n      }\n    });\n  }\n\n","bugFix":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    return threadPool.executeAllThreads(this, new DocumentsWriterThreadPool.AllThreadsTask<Boolean>() {\n      @Override\n      public Boolean process(Iterator<DocumentsWriterPerThread> threadsIterator) throws IOException {\n        boolean anythingFlushed = false;\n\n        while (threadsIterator.hasNext()) {\n          DocumentsWriterPerThread perThread = threadsIterator.next();\n          final int numDocs = perThread.getNumDocsInRAM();\n\n          // Always flush docs if there are any\n          boolean flushDocs = numDocs > 0;\n\n          String segment = perThread.getSegment();\n\n          // If we are flushing docs, segment must not be null:\n          assert segment != null || !flushDocs;\n\n          if (flushDocs) {\n            SegmentInfo newSegment = perThread.flush();\n            newSegment.dir = indexWriter.getDirectory();\n\n            if (newSegment != null) {\n              anythingFlushed = true;\n\n              IndexWriter.setDiagnostics(newSegment, \"flush\");\n              finishFlushedSegment(newSegment, perThread);\n            }\n          } else if (flushDeletes) {\n            perThread.pushDeletes(null, indexWriter.segmentInfos);\n          }\n        }\n\n        if (anythingFlushed) {\n          clearThreadBindings();\n          numDocsInRAM.set(0);\n        }\n\n        return anythingFlushed;\n      }\n    });\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n      throws IOException {\n    \n    return threadPool.executeAllThreads(this, new DocumentsWriterThreadPool.AllThreadsTask<Boolean>() {\n      @Override\n      public Boolean process(Iterator<DocumentsWriterPerThread> threadsIterator) throws IOException {\n        boolean anythingFlushed = false;\n        \n        while (threadsIterator.hasNext()) {\n          DocumentsWriterPerThread perThread = threadsIterator.next();\n          final int numDocs = perThread.getNumDocsInRAM();\n          \n          // Always flush docs if there are any\n          boolean flushDocs = numDocs > 0;\n          \n          String segment = perThread.getSegment();\n\n          // If we are flushing docs, segment must not be null:\n          assert segment != null || !flushDocs;\n    \n          if (flushDocs) {\n            SegmentInfo newSegment = perThread.flush();\n            newSegment.dir = indexWriter.getDirectory();\n            \n            if (newSegment != null) {\n              anythingFlushed = true;\n              \n              IndexWriter.setDiagnostics(newSegment, \"flush\");\n              finishFlushedSegment(newSegment, perThread);\n            }\n          }\n        }\n\n        if (anythingFlushed) {\n          clearThreadBindings();\n\n          sequenceIDLock.lock();\n          try {\n            flushedSequenceID = sequenceID;\n          } finally {\n            sequenceIDLock.unlock();\n          }\n          numDocsInRAM.set(0);\n        }\n        \n        if (flushDeletes) {\n          deletesInRAM.clear();\n        }\n\n\n        return anythingFlushed;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      if (indexWriter.segmentInfos.size() > 0 && pendingDeletes.any()) {\n        bufferedDeletes.pushDeletes(pendingDeletes, indexWriter.segmentInfos.lastElement(), true);\n        pendingDeletes.clear();\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      Collection<String> flushedFiles = null;\n      SegmentInfo newSegment = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            IndexWriter.setDiagnostics(newSegment, \"flush\");\n            flushedFiles = new HashSet<String>();\n            flushedFiles.addAll(dwpt.flushState.flushedFiles);\n            dwpt.pushDeletes(newSegment, indexWriter.segmentInfos);\n            anythingFlushed = true;\n            perThreadPool.clearThreadBindings(perThread);\n          }\n        } else if (flushDeletes) {\n          dwpt.pushDeletes(null, indexWriter.segmentInfos);\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        finishFlushedSegment(newSegment, flushedFiles);\n      }\n    }\n\n    numDocsInRAM.set(0);\n    return anythingFlushed;\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    return threadPool.executeAllThreads(this, new DocumentsWriterThreadPool.AllThreadsTask<Boolean>() {\n      @Override\n      public Boolean process(Iterator<DocumentsWriterPerThread> threadsIterator) throws IOException {\n        boolean anythingFlushed = false;\n\n        while (threadsIterator.hasNext()) {\n          DocumentsWriterPerThread perThread = threadsIterator.next();\n          final int numDocs = perThread.getNumDocsInRAM();\n\n          // Always flush docs if there are any\n          boolean flushDocs = numDocs > 0;\n\n          String segment = perThread.getSegment();\n\n          // If we are flushing docs, segment must not be null:\n          assert segment != null || !flushDocs;\n\n          if (flushDocs) {\n            SegmentInfo newSegment = perThread.flush();\n            newSegment.dir = indexWriter.getDirectory();\n\n            if (newSegment != null) {\n              anythingFlushed = true;\n\n              IndexWriter.setDiagnostics(newSegment, \"flush\");\n              finishFlushedSegment(newSegment, perThread);\n            }\n          } else if (flushDeletes) {\n            perThread.pushDeletes(null, indexWriter.segmentInfos);\n          }\n        }\n\n        if (anythingFlushed) {\n          clearThreadBindings();\n          numDocsInRAM.set(0);\n        }\n\n        return anythingFlushed;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      if (indexWriter.segmentInfos.size() > 0 && pendingDeletes.any()) {\n        bufferedDeletes.pushDeletes(pendingDeletes, indexWriter.segmentInfos.lastElement(), true);\n        pendingDeletes.clear();\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      SegmentInfo newSegment = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            IndexWriter.setDiagnostics(newSegment, \"flush\");\n            dwpt.pushDeletes(newSegment, indexWriter.segmentInfos);\n            anythingFlushed = true;\n            perThreadPool.clearThreadBindings(perThread);\n          }\n        } else if (flushDeletes) {\n          dwpt.pushDeletes(null, indexWriter.segmentInfos);\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        finishFlushedSegment(newSegment);\n      }\n    }\n\n    numDocsInRAM.set(0);\n    return anythingFlushed;\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      if (indexWriter.segmentInfos.size() > 0 && pendingDeletes.any()) {\n        bufferedDeletes.pushDeletes(pendingDeletes, indexWriter.segmentInfos.lastElement(), true);\n        pendingDeletes.clear();\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      Collection<String> flushedFiles = null;\n      SegmentInfo newSegment = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            IndexWriter.setDiagnostics(newSegment, \"flush\");\n            flushedFiles = new HashSet<String>();\n            flushedFiles.addAll(dwpt.flushState.flushedFiles);\n            dwpt.pushDeletes(newSegment, indexWriter.segmentInfos);\n            anythingFlushed = true;\n            perThreadPool.clearThreadBindings(perThread);\n          }\n        } else if (flushDeletes) {\n          dwpt.pushDeletes(null, indexWriter.segmentInfos);\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        finishFlushedSegment(newSegment, flushedFiles);\n      }\n    }\n\n    numDocsInRAM.set(0);\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14975dba6846360ff627c6797726fa4899a3413d","date":1295174738,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      pushToLastSegment(pendingDeletes);\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      SegmentInfo newSegment = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            anythingFlushed = true;\n            perThreadPool.clearThreadBindings(perThread);\n            if (dwpt.pendingDeletes.any()) {\n              bufferedDeletes.pushDeletes(dwpt.pendingDeletes, newSegment);\n              dwpt.pendingDeletes = new SegmentDeletes();\n            }\n          }\n        }\n        else if (flushDeletes && dwpt.pendingDeletes.any()) {\n          pushToLastSegment(dwpt.pendingDeletes);\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        finishFlushedSegment(newSegment);\n      }\n    }\n\n    numDocsInRAM.set(0);\n    return anythingFlushed;\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      if (indexWriter.segmentInfos.size() > 0 && pendingDeletes.any()) {\n        bufferedDeletes.pushDeletes(pendingDeletes, indexWriter.segmentInfos.lastElement(), true);\n        pendingDeletes.clear();\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      SegmentInfo newSegment = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            IndexWriter.setDiagnostics(newSegment, \"flush\");\n            dwpt.pushDeletes(newSegment, indexWriter.segmentInfos);\n            anythingFlushed = true;\n            perThreadPool.clearThreadBindings(perThread);\n          }\n        } else if (flushDeletes) {\n          dwpt.pushDeletes(null, indexWriter.segmentInfos);\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        finishFlushedSegment(newSegment);\n      }\n    }\n\n    numDocsInRAM.set(0);\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86c34ea6a885f625f2e464756450d45b72653ef3","date":1295256222,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      synchronized (this) {\n        pushDeletes(null, pendingDeletes);\n        pendingDeletes = new SegmentDeletes();\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      SegmentInfo newSegment = null;\n      SegmentDeletes segmentDeletes = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            fieldInfos.update(dwpt.getFieldInfos());\n            anythingFlushed = true;\n            perThreadPool.clearThreadBindings(perThread);\n            if (dwpt.pendingDeletes.any()) {\n              segmentDeletes = dwpt.pendingDeletes;\n              dwpt.pendingDeletes = new SegmentDeletes();\n            }\n          }\n        } else if (flushDeletes && dwpt.pendingDeletes.any()) {\n          segmentDeletes = dwpt.pendingDeletes;\n          dwpt.pendingDeletes = new SegmentDeletes();\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (segmentDeletes != null) {\n          pushDeletes(newSegment, segmentDeletes);\n      }\n\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        indexWriter.addFlushedSegment(newSegment);\n      }\n    }\n\n    return anythingFlushed;\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      pushToLastSegment(pendingDeletes);\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      SegmentInfo newSegment = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            anythingFlushed = true;\n            perThreadPool.clearThreadBindings(perThread);\n            if (dwpt.pendingDeletes.any()) {\n              bufferedDeletes.pushDeletes(dwpt.pendingDeletes, newSegment);\n              dwpt.pendingDeletes = new SegmentDeletes();\n            }\n          }\n        }\n        else if (flushDeletes && dwpt.pendingDeletes.any()) {\n          pushToLastSegment(dwpt.pendingDeletes);\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        finishFlushedSegment(newSegment);\n      }\n    }\n\n    numDocsInRAM.set(0);\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeb75d1685f27b55c20770200a5a24a8251ce9d5","date":1295257851,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      synchronized (this) {\n        pushDeletes(null, pendingDeletes);\n        pendingDeletes = new SegmentDeletes();\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      SegmentInfo newSegment = null;\n      SegmentDeletes segmentDeletes = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            fieldInfos.update(dwpt.getFieldInfos());\n            anythingFlushed = true;\n            perThreadPool.clearThreadBindings(perThread);\n            if (dwpt.pendingDeletes.any()) {\n              segmentDeletes = dwpt.pendingDeletes;\n              dwpt.pendingDeletes = new SegmentDeletes();\n            }\n          }\n        } else if (flushDeletes && dwpt.pendingDeletes.any()) {\n          segmentDeletes = dwpt.pendingDeletes;\n          dwpt.pendingDeletes = new SegmentDeletes();\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (segmentDeletes != null) {\n          pushDeletes(newSegment, segmentDeletes);\n      }\n\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        indexWriter.addFlushedSegment(newSegment);\n      }\n    }\n\n    return anythingFlushed;\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      synchronized (this) {\n        pushDeletes(null, pendingDeletes);\n        pendingDeletes = new SegmentDeletes();\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      SegmentInfo newSegment = null;\n      SegmentDeletes segmentDeletes = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            fieldInfos.update(dwpt.getFieldInfos());\n            anythingFlushed = true;\n            perThreadPool.clearThreadBindings(perThread);\n            if (dwpt.pendingDeletes.any()) {\n              segmentDeletes = dwpt.pendingDeletes;\n              dwpt.pendingDeletes = new SegmentDeletes();\n            }\n          }\n        } else if (flushDeletes && dwpt.pendingDeletes.any()) {\n          segmentDeletes = dwpt.pendingDeletes;\n          dwpt.pendingDeletes = new SegmentDeletes();\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (segmentDeletes != null) {\n          pushDeletes(newSegment, segmentDeletes);\n      }\n\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        indexWriter.addFlushedSegment(newSegment);\n      }\n    }\n\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      synchronized (this) {\n        pushDeletes(null, pendingDeletes);\n        pendingDeletes = new BufferedDeletes(false);\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      SegmentInfo newSegment = null;\n      BufferedDeletes segmentDeletes = null;\n      BitVector deletedDocs = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            anythingFlushed = true;\n            deletedDocs = dwpt.flushState.deletedDocs;\n            perThreadPool.clearThreadBindings(perThread);\n            if (dwpt.pendingDeletes.any()) {\n              segmentDeletes = dwpt.pendingDeletes;\n              dwpt.pendingDeletes = new BufferedDeletes(false);\n            }\n          }\n        } else if (flushDeletes && dwpt.pendingDeletes.any()) {\n          segmentDeletes = dwpt.pendingDeletes;\n          dwpt.pendingDeletes = new BufferedDeletes(false);\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (segmentDeletes != null) {\n          pushDeletes(newSegment, segmentDeletes);\n      }\n\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        indexWriter.addFlushedSegment(newSegment, deletedDocs);\n      }\n    }\n\n    return anythingFlushed;\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      synchronized (this) {\n        pushDeletes(null, pendingDeletes);\n        pendingDeletes = new SegmentDeletes();\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      SegmentInfo newSegment = null;\n      SegmentDeletes segmentDeletes = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            fieldInfos.update(dwpt.getFieldInfos());\n            anythingFlushed = true;\n            perThreadPool.clearThreadBindings(perThread);\n            if (dwpt.pendingDeletes.any()) {\n              segmentDeletes = dwpt.pendingDeletes;\n              dwpt.pendingDeletes = new SegmentDeletes();\n            }\n          }\n        } else if (flushDeletes && dwpt.pendingDeletes.any()) {\n          segmentDeletes = dwpt.pendingDeletes;\n          dwpt.pendingDeletes = new SegmentDeletes();\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (segmentDeletes != null) {\n          pushDeletes(newSegment, segmentDeletes);\n      }\n\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        indexWriter.addFlushedSegment(newSegment);\n      }\n    }\n\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf","date":1298618128,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      FlushedSegment newSegment = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            perThreadPool.clearThreadBindings(perThread);\n            }\n          }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (newSegment != null) {\n        anythingFlushed = true;\n        finishFlushedSegment(newSegment);\n      }\n    }\n\n    if (!anythingFlushed && flushDeletes) {\n      maybePushPendingDeletes();\n    }\n\n\n    return anythingFlushed;\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    if (flushDeletes) {\n      synchronized (this) {\n        pushDeletes(null, pendingDeletes);\n        pendingDeletes = new BufferedDeletes(false);\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      SegmentInfo newSegment = null;\n      BufferedDeletes segmentDeletes = null;\n      BitVector deletedDocs = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            anythingFlushed = true;\n            deletedDocs = dwpt.flushState.deletedDocs;\n            perThreadPool.clearThreadBindings(perThread);\n            if (dwpt.pendingDeletes.any()) {\n              segmentDeletes = dwpt.pendingDeletes;\n              dwpt.pendingDeletes = new BufferedDeletes(false);\n            }\n          }\n        } else if (flushDeletes && dwpt.pendingDeletes.any()) {\n          segmentDeletes = dwpt.pendingDeletes;\n          dwpt.pendingDeletes = new BufferedDeletes(false);\n        }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (segmentDeletes != null) {\n          pushDeletes(newSegment, segmentDeletes);\n      }\n\n\n      if (newSegment != null) {\n        // important do unlock the perThread before finishFlushedSegment\n        // is called to prevent deadlock on IndexWriter mutex\n        indexWriter.addFlushedSegment(newSegment, deletedDocs);\n      }\n    }\n\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    final Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      final ThreadState perThread = threadsIterator.next();\n      final DocumentsWriterPerThread flushingDWPT;\n      /*\n       * TODO: maybe we can leverage incoming / indexing threads here if we mark\n       * all active threads pending so that we don't need to block until we got\n       * the handle. Yet, we need to figure out how to identify that a certain\n       * DWPT has been flushed since they are simply replaced once checked out\n       * for flushing. This would give us another level of concurrency during\n       * commit.\n       * \n       * Maybe we simply iterate them and store the ThreadStates and mark\n       * all as flushPending and at the same time record the DWPT instance as a\n       * key for the pending ThreadState. This way we can easily iterate until\n       * all DWPT have changed.\n       */\n      perThread.lock(); \n      try {\n        if (!perThread.isActive()) {\n          assert closed;\n          continue; //this perThread is already done maybe by a concurrently indexing thread\n        }\n        final DocumentsWriterPerThread dwpt = perThread.perThread; \n        // Always flush docs if there are any\n        final boolean flushDocs =  dwpt.getNumDocsInRAM() > 0;\n        final String segment = dwpt.getSegment();\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n        if (flushDocs) {\n          // check out and set pending if not already set\n          flushingDWPT = flushControl.tryCheckoutForFlush(perThread, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          try {\n            final FlushedSegment newSegment = dwpt.flush();\n            anythingFlushed = true;\n            finishFlushedSegment(newSegment);\n          } finally {\n            flushControl.doAfterFlush(flushingDWPT);\n          }\n        }\n      } finally {\n        perThread.unlock();\n      }\n    }\n\n    if (!anythingFlushed && flushDeletes) {\n      maybePushPendingDeletes();\n    }\n\n\n    return anythingFlushed;\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      FlushedSegment newSegment = null;\n\n      ThreadState perThread = threadsIterator.next();\n      perThread.lock();\n      try {\n\n        DocumentsWriterPerThread dwpt = perThread.perThread;\n        final int numDocs = dwpt.getNumDocsInRAM();\n\n        // Always flush docs if there are any\n        boolean flushDocs = numDocs > 0;\n\n        String segment = dwpt.getSegment();\n\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n\n        if (flushDocs) {\n          newSegment = dwpt.flush();\n\n          if (newSegment != null) {\n            perThreadPool.clearThreadBindings(perThread);\n            }\n          }\n      } finally {\n        perThread.unlock();\n      }\n\n      if (newSegment != null) {\n        anythingFlushed = true;\n        finishFlushedSegment(newSegment);\n      }\n    }\n\n    if (!anythingFlushed && flushDeletes) {\n      maybePushPendingDeletes();\n    }\n\n\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n    synchronized (flushAllLock) {\n      final DocumentsWriterDeleteQueue flushingDeleteQueue;\n      synchronized (this) {\n        flushingDeleteQueue = deleteQueue;\n        deleteQueue = new DocumentsWriterDeleteQueue(new BufferedDeletes(false));\n        assert setFlushingDeleteQueue(flushingDeleteQueue);\n      }\n      assert flushingDeleteQueue == currentFlusingSession;\n      boolean anythingFlushed = false;\n      boolean success = false;\n      try {\n        flushControl.markForFullFlush();\n        DocumentsWriterPerThread flushingDWPT;\n        // now try help out with flushing\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          anythingFlushed |= doFlush(flushingDWPT);\n        }\n        // if a concurrent flush is still in flight wait for it\n        while (!flushControl.allFlushesDue()) {\n          flushControl.waitForFlush();  \n        }\n        if (!anythingFlushed && flushDeletes) {\n          synchronized (ticketQueue) {\n            ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n           }\n          applyFlushTickets(null, null);\n        }\n        success = true;\n        \n      } finally {\n        assert flushingDeleteQueue == currentFlusingSession;\n        assert setFlushingDeleteQueue(null);\n        if (!success) {\n          flushControl.abortFullFlushes();\n        } else {\n          // release the flush lock\n          flushControl.finishFullFlush();\n        }\n      }\n      return anythingFlushed;\n    }\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n\n    final Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n    boolean anythingFlushed = false;\n\n    while (threadsIterator.hasNext()) {\n      final ThreadState perThread = threadsIterator.next();\n      final DocumentsWriterPerThread flushingDWPT;\n      /*\n       * TODO: maybe we can leverage incoming / indexing threads here if we mark\n       * all active threads pending so that we don't need to block until we got\n       * the handle. Yet, we need to figure out how to identify that a certain\n       * DWPT has been flushed since they are simply replaced once checked out\n       * for flushing. This would give us another level of concurrency during\n       * commit.\n       * \n       * Maybe we simply iterate them and store the ThreadStates and mark\n       * all as flushPending and at the same time record the DWPT instance as a\n       * key for the pending ThreadState. This way we can easily iterate until\n       * all DWPT have changed.\n       */\n      perThread.lock(); \n      try {\n        if (!perThread.isActive()) {\n          assert closed;\n          continue; //this perThread is already done maybe by a concurrently indexing thread\n        }\n        final DocumentsWriterPerThread dwpt = perThread.perThread; \n        // Always flush docs if there are any\n        final boolean flushDocs =  dwpt.getNumDocsInRAM() > 0;\n        final String segment = dwpt.getSegment();\n        // If we are flushing docs, segment must not be null:\n        assert segment != null || !flushDocs;\n        if (flushDocs) {\n          // check out and set pending if not already set\n          flushingDWPT = flushControl.tryCheckoutForFlush(perThread, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          try {\n            final FlushedSegment newSegment = dwpt.flush();\n            anythingFlushed = true;\n            finishFlushedSegment(newSegment);\n          } finally {\n            flushControl.doAfterFlush(flushingDWPT);\n          }\n        }\n      } finally {\n        perThread.unlock();\n      }\n    }\n\n    if (!anythingFlushed && flushDeletes) {\n      maybePushPendingDeletes();\n    }\n\n\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d45e9e2ad7f57776540627c78f5e22e469ccdc1","date":1302784878,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  /*\n   * flushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operations, the caller must ensure that #finishFlush is called\n   * after this method to release the flush lock in DWFlushControl - use try /\n   * finally!\n   */\n  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* sets a new delete queue - this must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush();\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // now try help out with flushing\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // if a concurrent flush is still in flight wait for it\n      while (!flushControl.allFlushesDue()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed && flushDeletes) {\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n         }\n        applyFlushTickets(null, null);\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n    synchronized (flushAllLock) {\n      final DocumentsWriterDeleteQueue flushingDeleteQueue;\n      synchronized (this) {\n        flushingDeleteQueue = deleteQueue;\n        deleteQueue = new DocumentsWriterDeleteQueue(new BufferedDeletes(false));\n        assert setFlushingDeleteQueue(flushingDeleteQueue);\n      }\n      assert flushingDeleteQueue == currentFlusingSession;\n      boolean anythingFlushed = false;\n      boolean success = false;\n      try {\n        flushControl.markForFullFlush();\n        DocumentsWriterPerThread flushingDWPT;\n        // now try help out with flushing\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          anythingFlushed |= doFlush(flushingDWPT);\n        }\n        // if a concurrent flush is still in flight wait for it\n        while (!flushControl.allFlushesDue()) {\n          flushControl.waitForFlush();  \n        }\n        if (!anythingFlushed && flushDeletes) {\n          synchronized (ticketQueue) {\n            ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n           }\n          applyFlushTickets(null, null);\n        }\n        success = true;\n        \n      } finally {\n        assert flushingDeleteQueue == currentFlusingSession;\n        assert setFlushingDeleteQueue(null);\n        if (!success) {\n          flushControl.abortFullFlushes();\n        } else {\n          // release the flush lock\n          flushControl.finishFullFlush();\n        }\n      }\n      return anythingFlushed;\n    }\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b","ff78505662c0b741e2663a9f38a4889c12a32c9f"],"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1","c00afe74a80796ed1f30a9509b150ff104746a1f","33e096accda90a8bd2279f890efe2e287f47c743"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      // nocommit -- shouldn't we do this?:\n      // assert Thread.holdsLock(flushControl);\n      flushControl.markForFullFlush();\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed && flushDeletes) {\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets(null, null);\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * flushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operations, the caller must ensure that #finishFlush is called\n   * after this method to release the flush lock in DWFlushControl - use try /\n   * finally!\n   */\n  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* sets a new delete queue - this must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush();\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // now try help out with flushing\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // if a concurrent flush is still in flight wait for it\n      while (!flushControl.allFlushesDue()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed && flushDeletes) {\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n         }\n        applyFlushTickets(null, null);\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1","33e096accda90a8bd2279f890efe2e287f47c743"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","date":1303818069,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed && flushDeletes) {\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      // nocommit -- shouldn't we do this?:\n      // assert Thread.holdsLock(flushControl);\n      flushControl.markForFullFlush();\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed && flushDeletes) {\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets(null, null);\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":["33e096accda90a8bd2279f890efe2e287f47c743"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcef5771aee556e6c886946095ae4485a392526b","date":1304005192,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed && flushDeletes) {\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"eeb75d1685f27b55c20770200a5a24a8251ce9d5":["86c34ea6a885f625f2e464756450d45b72653ef3"],"ff78505662c0b741e2663a9f38a4889c12a32c9f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["f6f4cae61e16730201371ab7e9912721c19324e7"],"fcef5771aee556e6c886946095ae4485a392526b":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6f4cae61e16730201371ab7e9912721c19324e7":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86c34ea6a885f625f2e464756450d45b72653ef3":["14975dba6846360ff627c6797726fa4899a3413d"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"14975dba6846360ff627c6797726fa4899a3413d":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ff78505662c0b741e2663a9f38a4889c12a32c9f","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["eeb75d1685f27b55c20770200a5a24a8251ce9d5","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"eeb75d1685f27b55c20770200a5a24a8251ce9d5":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"ff78505662c0b741e2663a9f38a4889c12a32c9f":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["fcef5771aee556e6c886946095ae4485a392526b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"fcef5771aee556e6c886946095ae4485a392526b":[],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"f6f4cae61e16730201371ab7e9912721c19324e7":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["f6f4cae61e16730201371ab7e9912721c19324e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","868da859b43505d9d2a023bfeae6dd0c795f5295","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","833a7987bc1c94455fde83e3311f72bddedcfb93"],"86c34ea6a885f625f2e464756450d45b72653ef3":["eeb75d1685f27b55c20770200a5a24a8251ce9d5"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"14975dba6846360ff627c6797726fa4899a3413d":["86c34ea6a885f625f2e464756450d45b72653ef3"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["14975dba6846360ff627c6797726fa4899a3413d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fcef5771aee556e6c886946095ae4485a392526b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}