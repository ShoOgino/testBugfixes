{"path":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#makeSubFacet(Integer).mjava","commits":[{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#makeSubFacet(Integer).mjava","pathOld":"/dev/null","sourceNew":"  /** randomized helper */\n  private static final CharSequence makeSubFacet(final Integer subFacetLimit) {\n    if (null == subFacetLimit) {\n      return \"\";\n    }\n    final StringBuilder result = new StringBuilder(\", facet:{ bar:{ type:terms, refine:true, field:\"+STR_FIELD);\n    // constrain overrequesting to stress refiement, but still test those codepaths\n    final String overrequest = random().nextBoolean() ? \"0\" : \"1\";\n      \n    result.append(\", overrequest:\").append(overrequest).append(\", limit:\").append(subFacetLimit);\n    \n    // order should have no affect on our testing\n    if (random().nextBoolean()) {\n      result.append(\", sort:'\").append(SORTS.get(random().nextInt(SORTS.size()))).append(\"'\");\n    }\n    result.append(\"} }\");\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#makeSubFacet(Integer).mjava","pathOld":"/dev/null","sourceNew":"  /** randomized helper */\n  private static final CharSequence makeSubFacet(final Integer subFacetLimit) {\n    if (null == subFacetLimit) {\n      return \"\";\n    }\n    final StringBuilder result = new StringBuilder(\", facet:{ bar:{ type:terms, refine:true, field:\"+STR_FIELD);\n    // constrain overrequesting to stress refiement, but still test those codepaths\n    final String overrequest = random().nextBoolean() ? \"0\" : \"1\";\n      \n    result.append(\", overrequest:\").append(overrequest).append(\", limit:\").append(subFacetLimit);\n    \n    // order should have no affect on our testing\n    if (random().nextBoolean()) {\n      result.append(\", sort:'\").append(SORTS.get(random().nextInt(SORTS.size()))).append(\"'\");\n    }\n    result.append(\"} }\");\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#makeSubFacet(Integer).mjava","pathOld":"/dev/null","sourceNew":"  /** randomized helper */\n  private static final CharSequence makeSubFacet(final Integer subFacetLimit) {\n    if (null == subFacetLimit) {\n      return \"\";\n    }\n    final StringBuilder result = new StringBuilder(\", facet:{ bar:{ type:terms, refine:true, field:\"+STR_FIELD);\n    // constrain overrequesting to stress refiement, but still test those codepaths\n    final String overrequest = random().nextBoolean() ? \"0\" : \"1\";\n      \n    result.append(\", overrequest:\").append(overrequest).append(\", limit:\").append(subFacetLimit);\n    \n    // order should have no affect on our testing\n    if (random().nextBoolean()) {\n      result.append(\", sort:'\").append(SORTS.get(random().nextInt(SORTS.size()))).append(\"'\");\n    }\n    result.append(\"} }\");\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c05b634713ca09b2267477408773904d4c69dd9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c05b634713ca09b2267477408773904d4c69dd9d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}