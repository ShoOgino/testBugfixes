{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#opDelay(String,String).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#opDelay(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#opDelay(String,String).mjava","sourceNew":"  /**\n   * Delay an operation by a configured amount.\n   * @param collection collection name\n   * @param op operation name.\n   */\n  private void opDelay(String collection, String op) throws InterruptedException {\n    Map<String, Long> delays = opDelays.get(collection);\n    if (delays == null || delays.isEmpty() || !delays.containsKey(op)) {\n      return;\n    }\n    cloudManager.getTimeSource().sleep(delays.get(op));\n  }\n\n","sourceOld":"  /**\n   * Delay an operation by a configured amount.\n   * @param collection collection name\n   * @param op operation name.\n   */\n  private void opDelay(String collection, String op) throws InterruptedException {\n    Map<String, Long> delays = opDelays.get(collection);\n    if (delays == null || delays.isEmpty() || !delays.containsKey(op)) {\n      return;\n    }\n    cloudManager.getTimeSource().sleep(delays.get(op));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#opDelay(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Delay an operation by a configured amount.\n   * @param collection collection name\n   * @param op operation name.\n   */\n  private void opDelay(String collection, String op) throws InterruptedException {\n    Map<String, Long> delays = opDelays.get(collection);\n    if (delays == null || delays.isEmpty() || !delays.containsKey(op)) {\n      return;\n    }\n    cloudManager.getTimeSource().sleep(delays.get(op));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}