{"path":"src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","commits":[{"id":"8e796f3d2964cc40d369fa114f4b41f56d6d9d8a","date":1218654322,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"/dev/null","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new NamedListCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2307281f021c98102266052f57b7938614dbb30d","date":1229692925,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new NamedListCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new NamedListCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18a1b51b47d1035bf90ecfc7d16c739fe983647a","date":1229928361,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new NamedListCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8e796f3d2964cc40d369fa114f4b41f56d6d9d8a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["2307281f021c98102266052f57b7938614dbb30d"],"ad94625fb8d088209f46650c8097196fec67f00c":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"2307281f021c98102266052f57b7938614dbb30d":["8e796f3d2964cc40d369fa114f4b41f56d6d9d8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8e796f3d2964cc40d369fa114f4b41f56d6d9d8a":["2307281f021c98102266052f57b7938614dbb30d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8e796f3d2964cc40d369fa114f4b41f56d6d9d8a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2307281f021c98102266052f57b7938614dbb30d":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}