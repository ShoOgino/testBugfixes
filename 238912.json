{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","sourceNew":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(collatorClazz);\n    return ctor.newInstance(collator);\n  }\n\n","sourceOld":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(collatorClazz);\n    return ctor.newInstance(collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","sourceNew":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(collatorClazz);\n    return ctor.newInstance(collator);\n  }\n\n","sourceOld":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(collatorClazz);\n    return ctor.newInstance(collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","sourceNew":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(collatorClazz);\n    return ctor.newInstance(collator);\n  }\n\n","sourceOld":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(collatorClazz);\n    return ctor.newInstance(collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ee1234955aed9bd8fda17687719f1f1eb7b9796","date":1301618836,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","sourceNew":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class, collatorClazz);\n    return ctor.newInstance(Version.LUCENE_CURRENT, collator);\n  }\n\n","sourceOld":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(collatorClazz);\n    return ctor.newInstance(collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","sourceNew":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class, collatorClazz);\n    return ctor.newInstance(Version.LUCENE_CURRENT, collator);\n  }\n\n","sourceOld":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(collatorClazz);\n    return ctor.newInstance(collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","sourceNew":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class, collatorClazz);\n    return ctor.newInstance(Version.LUCENE_CURRENT, collator);\n  }\n\n","sourceOld":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(collatorClazz);\n    return ctor.newInstance(collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewCollationAnalyzerTask#createAnalyzer(Locale,Implementation).mjava","sourceNew":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class, collatorClazz);\n    return ctor.newInstance(Version.LUCENE_CURRENT, collator);\n  }\n\n","sourceOld":"  static Analyzer createAnalyzer(Locale locale, Implementation impl)\n      throws Exception {\n    final Class<?> collatorClazz = Class.forName(impl.collatorClassName);\n    Method collatorMethod = collatorClazz.getMethod(\"getInstance\",\n        new Class[] {Locale.class});\n    Object collator = collatorMethod.invoke(null, locale);\n    \n    final Class<? extends Analyzer> clazz = Class.forName(impl.className)\n        .asSubclass(Analyzer.class);\n    Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class, collatorClazz);\n    return ctor.newInstance(Version.LUCENE_CURRENT, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3ee1234955aed9bd8fda17687719f1f1eb7b9796"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3ee1234955aed9bd8fda17687719f1f1eb7b9796":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","3ee1234955aed9bd8fda17687719f1f1eb7b9796"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"45669a651c970812a680841b97a77cce06af559f":["868da859b43505d9d2a023bfeae6dd0c795f5295","3ee1234955aed9bd8fda17687719f1f1eb7b9796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","3ee1234955aed9bd8fda17687719f1f1eb7b9796","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3ee1234955aed9bd8fda17687719f1f1eb7b9796":["b89678825b68eccaf09e6ab71675fc0b0af1e099","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}