{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#printSeekState(PrintStream).mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#printSeekState(PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        Lucene40SegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.get().bytes, 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<< Lucene40BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<< Lucene40BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.byteAt(f.prefix-1)&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.byteAt(f.prefix-1)&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          BytesRef output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.bytes, output.offset, output.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << Lucene40BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#printSeekState(PrintStream).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#printSeekState(PrintStream).mjava","sourceNew":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        Lucene40SegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.get().bytes, 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<< Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<< Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.byteAt(f.prefix-1)&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.byteAt(f.prefix-1)&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          BytesRef output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.bytes, output.offset, output.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        Lucene40SegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.get().bytes, 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<< Lucene40BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<< Lucene40BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.byteAt(f.prefix-1)&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.byteAt(f.prefix-1)&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          BytesRef output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.bytes, output.offset, output.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << Lucene40BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#printSeekState(PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        Lucene40SegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.get().bytes, 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<< Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<< Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.byteAt(f.prefix-1)&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.byteAt(f.prefix-1)&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          BytesRef output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.bytes, output.offset, output.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#printSeekState(PrintStream).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        Lucene40SegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.get().bytes, 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<< Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<< Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.byteAt(f.prefix-1)&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.byteAt(f.prefix-1)&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          BytesRef output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.bytes, output.offset, output.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["0628077afea69a2955260949478afabab8e500d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}