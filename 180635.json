{"path":"lucene/backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  /**\n   * A search implementation which executes each \n   * {@link Searchable} in its own thread and waits for each search to complete and merge\n   * the results back together.\n   */\n  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs) throws IOException {\n    final HitQueue hq = new HitQueue(nDocs, false);\n    final Lock lock = new ReentrantLock();\n    @SuppressWarnings(\"unchecked\") final Future<TopDocs>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      searchThreads[i] = executor.submit(\n          new MultiSearcherCallableNoSort(lock, searchables[i], weight, filter, nDocs, hq, i, starts));\n    }\n\n    final CountTotalHits<TopDocs> func = new CountTotalHits<TopDocs>();\n    foreach(func, Arrays.asList(searchThreads));\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopDocs(func.totalHits, scoreDocs, func.maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation which executes each \n   * {@link Searchable} in its own thread and waits for each search to complete and merge\n   * the results back together.\n   */\n  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs) throws IOException {\n    final HitQueue hq = new HitQueue(nDocs, false);\n    final Lock lock = new ReentrantLock();\n    @SuppressWarnings(\"unchecked\") final Future<TopDocs>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      searchThreads[i] = executor.submit(\n          new MultiSearcherCallableNoSort(lock, searchables[i], weight, filter, nDocs, hq, i, starts));\n    }\n\n    final CountTotalHits<TopDocs> func = new CountTotalHits<TopDocs>();\n    foreach(func, Arrays.asList(searchThreads));\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopDocs(func.totalHits, scoreDocs, func.maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * A search implementation which executes each \n   * {@link Searchable} in its own thread and waits for each search to complete and merge\n   * the results back together.\n   */\n  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs) throws IOException {\n    final HitQueue hq = new HitQueue(nDocs, false);\n    final Lock lock = new ReentrantLock();\n    @SuppressWarnings(\"unchecked\") final Future<TopDocs>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      searchThreads[i] = executor.submit(\n          new MultiSearcherCallableNoSort(lock, searchables[i], weight, filter, nDocs, hq, i, starts));\n    }\n\n    final CountTotalHits<TopDocs> func = new CountTotalHits<TopDocs>();\n    foreach(func, Arrays.asList(searchThreads));\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopDocs(func.totalHits, scoreDocs, func.maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}