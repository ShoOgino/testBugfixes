{"path":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(DocsEnum).mjava","sourceNew":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    List<Integer> docs = new ArrayList<>();\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs.add(docID);\n    }\n    return ArrayUtil.toIntArray(docs);\n  }\n\n","sourceOld":"  public static int[] toArray(DocsEnum docsEnum) throws IOException {\n    List<Integer> docs = new ArrayList<>();\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = docsEnum.docID();\n      docs.add(docID);\n    }\n    return ArrayUtil.toIntArray(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","date":1464187721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","sourceNew":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    int[] docs = new int[0];\n    int numDocs = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs = ArrayUtil.grow(docs, numDocs + 1);\n      docs[numDocs + 1] = docID;\n    }\n    return Arrays.copyOf(docs, numDocs);\n  }\n\n","sourceOld":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    List<Integer> docs = new ArrayList<>();\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs.add(docID);\n    }\n    return ArrayUtil.toIntArray(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","sourceNew":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    int[] docs = new int[0];\n    int numDocs = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs = ArrayUtil.grow(docs, numDocs + 1);\n      docs[numDocs + 1] = docID;\n    }\n    return Arrays.copyOf(docs, numDocs);\n  }\n\n","sourceOld":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    List<Integer> docs = new ArrayList<>();\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs.add(docID);\n    }\n    return ArrayUtil.toIntArray(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","sourceNew":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    int[] docs = new int[0];\n    int numDocs = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs = ArrayUtil.grow(docs, numDocs + 1);\n      docs[numDocs + 1] = docID;\n    }\n    return Arrays.copyOf(docs, numDocs);\n  }\n\n","sourceOld":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    List<Integer> docs = new ArrayList<>();\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs.add(docID);\n    }\n    return ArrayUtil.toIntArray(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","sourceNew":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    int[] docs = new int[0];\n    int numDocs = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs = ArrayUtil.grow(docs, numDocs + 1);\n      docs[numDocs + 1] = docID;\n    }\n    return Arrays.copyOf(docs, numDocs);\n  }\n\n","sourceOld":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    List<Integer> docs = new ArrayList<>();\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs.add(docID);\n    }\n    return ArrayUtil.toIntArray(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","sourceNew":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    int[] docs = new int[0];\n    int numDocs = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs = ArrayUtil.grow(docs, numDocs + 1);\n      docs[numDocs + 1] = docID;\n    }\n    return ArrayUtil.copyOfSubArray(docs, 0, numDocs);\n  }\n\n","sourceOld":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    int[] docs = new int[0];\n    int numDocs = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs = ArrayUtil.grow(docs, numDocs + 1);\n      docs[numDocs + 1] = docID;\n    }\n    return Arrays.copyOf(docs, numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","sourceNew":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    int[] docs = new int[0];\n    int numDocs = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs = ArrayUtil.grow(docs, numDocs + 1);\n      docs[numDocs + 1] = docID;\n    }\n    return ArrayUtil.copyOfSubArray(docs, 0, numDocs);\n  }\n\n","sourceOld":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    int[] docs = new int[0];\n    int numDocs = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs = ArrayUtil.grow(docs, numDocs + 1);\n      docs[numDocs + 1] = docID;\n    }\n    return Arrays.copyOf(docs, numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes#toArray(PostingsEnum).mjava","sourceNew":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    int[] docs = new int[0];\n    int numDocs = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs = ArrayUtil.grow(docs, numDocs + 1);\n      docs[numDocs + 1] = docID;\n    }\n    return ArrayUtil.copyOfSubArray(docs, 0, numDocs);\n  }\n\n","sourceOld":"  public static int[] toArray(PostingsEnum postingsEnum) throws IOException {\n    int[] docs = new int[0];\n    int numDocs = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int docID = postingsEnum.docID();\n      docs = ArrayUtil.grow(docs, numDocs + 1);\n      docs[numDocs + 1] = docID;\n    }\n    return Arrays.copyOf(docs, numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["51f5280f31484820499077f41fcdfe92d527d9dc"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["51f5280f31484820499077f41fcdfe92d527d9dc","bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["0e121d43b5a10f2df530f406f935102656e9c4e8","9798d0818e7a880546802b509792d3f3d57babd2"],"83870855d82aba6819217abeff5a40779dbb28b4":["51f5280f31484820499077f41fcdfe92d527d9dc","0e121d43b5a10f2df530f406f935102656e9c4e8"],"9798d0818e7a880546802b509792d3f3d57babd2":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["51f5280f31484820499077f41fcdfe92d527d9dc","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["0e121d43b5a10f2df530f406f935102656e9c4e8","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["b70042a8a492f7054d480ccdd2be9796510d4327","83870855d82aba6819217abeff5a40779dbb28b4","9798d0818e7a880546802b509792d3f3d57babd2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"83870855d82aba6819217abeff5a40779dbb28b4":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"51f5280f31484820499077f41fcdfe92d527d9dc":["bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}