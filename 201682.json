{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addAddresses(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addAddresses(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  // writes addressing information as MONOTONIC_COMPRESSED integer\n  private void addAddresses(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    writer.add(addr);\n    for (Number v : values) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addAddresses(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  // writes addressing information as MONOTONIC_COMPRESSED integer\n  private void addAddresses(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    writer.add(addr);\n    for (Number v : values) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22895d92bc967fd16d7d69596268ad8254a7bd05","date":1435200722,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addAddresses(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addAddresses(FieldInfo,Iterable[Number]).mjava","sourceNew":"  // writes addressing information as MONOTONIC_COMPRESSED integer\n  private void addAddresses(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(MONOTONIC_BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, MONOTONIC_BLOCK_SIZE);\n    long addr = 0;\n    writer.add(addr);\n    for (Number v : values) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":"  // writes addressing information as MONOTONIC_COMPRESSED integer\n  private void addAddresses(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    writer.add(addr);\n    for (Number v : values) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addAddresses(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addAddresses(FieldInfo,Iterable[Number]).mjava","sourceNew":"  // writes addressing information as MONOTONIC_COMPRESSED integer\n  private void addAddresses(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(MONOTONIC_BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, MONOTONIC_BLOCK_SIZE);\n    long addr = 0;\n    writer.add(addr);\n    for (Number v : values) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":"  // writes addressing information as MONOTONIC_COMPRESSED integer\n  private void addAddresses(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(MONOTONIC_BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, MONOTONIC_BLOCK_SIZE);\n    long addr = 0;\n    writer.add(addr);\n    for (Number v : values) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22895d92bc967fd16d7d69596268ad8254a7bd05":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"a870f9917149dc600c4ad4417d615c1795de5864":["22895d92bc967fd16d7d69596268ad8254a7bd05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a870f9917149dc600c4ad4417d615c1795de5864"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"22895d92bc967fd16d7d69596268ad8254a7bd05":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["22895d92bc967fd16d7d69596268ad8254a7bd05"],"a870f9917149dc600c4ad4417d615c1795de5864":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}