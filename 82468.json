{"path":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","commits":[{"id":"c0a5c042827795d2f0b44db0cc8cd534b09d6d28","date":1319687600,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","pathOld":"/dev/null","sourceNew":"  /** Do a select query with the stream.url. Solr should NOT access that URL, and so the data should be there. */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    getSolrServer().query(query);\n    assertTrue(searchFindsIt());//still there\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43","date":1386062370,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","sourceNew":"  /** Do a select query with the stream.url. Solr should fail */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    try {\n      getSolrServer().query(query);\n      fail();\n    } catch (SolrException se) {\n      assertSame(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(se.code()));\n    }\n  }\n\n","sourceOld":"  /** Do a select query with the stream.url. Solr should NOT access that URL, and so the data should be there. */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    getSolrServer().query(query);\n    assertTrue(searchFindsIt());//still there\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","sourceNew":"  /** Do a select query with the stream.url. Solr should fail */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    try {\n      getSolrServer().query(query);\n      fail();\n    } catch (SolrException se) {\n      assertSame(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(se.code()));\n    }\n  }\n\n","sourceOld":"  /** Do a select query with the stream.url. Solr should NOT access that URL, and so the data should be there. */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    getSolrServer().query(query);\n    assertTrue(searchFindsIt());//still there\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","sourceNew":"  /** Do a select query with the stream.url. Solr should fail */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    try {\n      getSolrClient().query(query);\n      fail();\n    } catch (SolrException se) {\n      assertSame(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(se.code()));\n    }\n  }\n\n","sourceOld":"  /** Do a select query with the stream.url. Solr should fail */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    try {\n      getSolrServer().query(query);\n      fail();\n    } catch (SolrException se) {\n      assertSame(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(se.code()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","sourceNew":"  /** Do a select query with the stream.url. Solr should fail */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    SolrException se = expectThrows(SolrException.class, () -> getSolrClient().query(query));\n    assertSame(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(se.code()));\n  }\n\n","sourceOld":"  /** Do a select query with the stream.url. Solr should fail */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    try {\n      getSolrClient().query(query);\n      fail();\n    } catch (SolrException se) {\n      assertSame(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(se.code()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","sourceNew":"  /** Do a select query with the stream.url. Solr should fail */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    SolrException se = expectThrows(SolrException.class, () -> getSolrClient().query(query));\n    assertSame(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(se.code()));\n  }\n\n","sourceOld":"  /** Do a select query with the stream.url. Solr should fail */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    try {\n      getSolrClient().query(query);\n      fail();\n    } catch (SolrException se) {\n      assertSame(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(se.code()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testNoUrlAccess().mjava","sourceNew":"  /** Do a select query with the stream.url. Solr should fail */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    SolrException se = expectThrows(SolrException.class, () -> getSolrClient().query(query));\n    assertSame(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(se.code()));\n  }\n\n","sourceOld":"  /** Do a select query with the stream.url. Solr should fail */\n  @Test\n  public void testNoUrlAccess() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"stream.url\",makeDeleteAllUrl());\n    try {\n      getSolrClient().query(query);\n      fail();\n    } catch (SolrException se) {\n      assertSame(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(se.code()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43":["c0a5c042827795d2f0b44db0cc8cd534b09d6d28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c0a5c042827795d2f0b44db0cc8cd534b09d6d28","4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43"],"bafca15d8e408346a67f4282ad1143b88023893b":["4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["bafca15d8e408346a67f4282ad1143b88023893b"],"c0a5c042827795d2f0b44db0cc8cd534b09d6d28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["bafca15d8e408346a67f4282ad1143b88023893b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["bafca15d8e408346a67f4282ad1143b88023893b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0a5c042827795d2f0b44db0cc8cd534b09d6d28"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"c0a5c042827795d2f0b44db0cc8cd534b09d6d28":["4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}