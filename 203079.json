{"path":"src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","commits":[{"id":"b03b7626bae3b34032e501e74788f89a2f50058b","date":1260886439,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","pathOld":"/dev/null","sourceNew":"  private boolean prepareReplaceBlock() throws IOException {\n    while( true ){\n      if( replaceBlockBuffer != null && replaceBlockBuffer.length() > replaceBlockBufferOffset )\n        return true;\n      // prepare block buffer\n      blockBufferLength = 0;\n      while( true ){\n        int c = nextChar();\n        if( c == -1 ) break;\n        blockBuffer[blockBufferLength++] = (char)c;\n        // end of block?\n        boolean foundDelimiter =\n          ( blockDelimiters != null ) &&\n          ( blockDelimiters.length() > 0 ) &&\n          blockDelimiters.indexOf( c ) >= 0;\n        if( foundDelimiter ||\n            blockBufferLength >= maxBlockChars ) break;\n      }\n      // block buffer available?\n      if( blockBufferLength == 0 ) return false;\n      replaceBlockBuffer = getReplaceBlock( blockBuffer, 0, blockBufferLength );\n      replaceBlockBufferOffset = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","pathOld":"src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","sourceNew":"  private boolean prepareReplaceBlock() throws IOException {\n    while( true ){\n      if( replaceBlockBuffer != null && replaceBlockBuffer.length() > replaceBlockBufferOffset )\n        return true;\n      // prepare block buffer\n      blockBufferLength = 0;\n      while( true ){\n        int c = nextChar();\n        if( c == -1 ) break;\n        blockBuffer[blockBufferLength++] = (char)c;\n        // end of block?\n        boolean foundDelimiter =\n          ( blockDelimiters != null ) &&\n          ( blockDelimiters.length() > 0 ) &&\n          blockDelimiters.indexOf( c ) >= 0;\n        if( foundDelimiter ||\n            blockBufferLength >= maxBlockChars ) break;\n      }\n      // block buffer available?\n      if( blockBufferLength == 0 ) return false;\n      replaceBlockBuffer = getReplaceBlock( blockBuffer, 0, blockBufferLength );\n      replaceBlockBufferOffset = 0;\n    }\n  }\n\n","sourceOld":"  private boolean prepareReplaceBlock() throws IOException {\n    while( true ){\n      if( replaceBlockBuffer != null && replaceBlockBuffer.length() > replaceBlockBufferOffset )\n        return true;\n      // prepare block buffer\n      blockBufferLength = 0;\n      while( true ){\n        int c = nextChar();\n        if( c == -1 ) break;\n        blockBuffer[blockBufferLength++] = (char)c;\n        // end of block?\n        boolean foundDelimiter =\n          ( blockDelimiters != null ) &&\n          ( blockDelimiters.length() > 0 ) &&\n          blockDelimiters.indexOf( c ) >= 0;\n        if( foundDelimiter ||\n            blockBufferLength >= maxBlockChars ) break;\n      }\n      // block buffer available?\n      if( blockBufferLength == 0 ) return false;\n      replaceBlockBuffer = getReplaceBlock( blockBuffer, 0, blockBufferLength );\n      replaceBlockBufferOffset = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b03b7626bae3b34032e501e74788f89a2f50058b"],"b03b7626bae3b34032e501e74788f89a2f50058b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b03b7626bae3b34032e501e74788f89a2f50058b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b03b7626bae3b34032e501e74788f89a2f50058b":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}