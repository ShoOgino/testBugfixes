{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish().mjava","commits":[{"id":"31c8c009cea52067b0cf34f2ea666147e80b1461","date":1406233016,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish(BytesRef,BytesRef).mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW.finish pending.size()=\" + pending.size());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish(BytesRef minTerm, BytesRef maxTerm) throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW.finish pending.size()=\" + pending.size());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW.finish pending.size()=\" + pending.size());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     minTerm, maxTerm));\n      } else {\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW.finish pending.size()=\" + pending.size());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW.finish pending.size()=\" + pending.size());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW.finish pending.size()=\" + pending.size());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     minTerm, maxTerm));\n      } else {\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW.finish pending.size()=\" + pending.size());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     minTerm, maxTerm));\n      } else {\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW.finish pending.size()=\" + pending.size());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99f06f5dd087b1829e7b4139e4d014c786b92572","date":1592312728,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW.finish pending.size()=\" + pending.size());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut, indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     minTerm, maxTerm));\n      } else {\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW.finish pending.size()=\" + pending.size());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     minTerm, maxTerm));\n      } else {\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99f06f5dd087b1829e7b4139e4d014c786b92572":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99f06f5dd087b1829e7b4139e4d014c786b92572"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"99f06f5dd087b1829e7b4139e4d014c786b92572":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["99f06f5dd087b1829e7b4139e4d014c786b92572"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}