{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String).mjava","commits":[{"id":"6e02c0d6a64df9c63897458b31d88b5ec3b854a5","date":1454964111,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static Method findSetter(Class<?> clazz, String setterName, String key) {\n    for (Method m : clazz.getMethods()) {\n      if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n        return m;\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e40457c1de3323920c40a4ef9bdd3d0b8c762f2e","date":1464372426,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String,Class[#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String).mjava","sourceNew":"  private static Method findSetter(Class<?> clazz, String setterName, String key, Class<?> paramClazz) {\n    try {\n      return clazz.getMethod(setterName, new Class<?>[] { paramClazz });\n    } catch (NoSuchMethodException e) {\n      for (Method m : clazz.getMethods()) {\n        if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n          return m;\n        }\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","sourceOld":"  private static Method findSetter(Class<?> clazz, String setterName, String key) {\n    for (Method m : clazz.getMethods()) {\n      if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n        return m;\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String,Class[#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String).mjava","sourceNew":"  private static Method findSetter(Class<?> clazz, String setterName, String key, Class<?> paramClazz) {\n    try {\n      return clazz.getMethod(setterName, new Class<?>[] { paramClazz });\n    } catch (NoSuchMethodException e) {\n      for (Method m : clazz.getMethods()) {\n        if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n          return m;\n        }\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","sourceOld":"  private static Method findSetter(Class<?> clazz, String setterName, String key) {\n    for (Method m : clazz.getMethods()) {\n      if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n        return m;\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"492da3bdf5b2efd7bb71165413a8c5017d4930ba","date":1464800307,"type":1,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String,Class[#]).mjava","sourceNew":"  private static Method findSetter(Class<?> clazz, String setterName, String key) {\n    for (Method m : clazz.getMethods()) {\n      if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n        return m;\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","sourceOld":"  private static Method findSetter(Class<?> clazz, String setterName, String key, Class<?> paramClazz) {\n    try {\n      return clazz.getMethod(setterName, new Class<?>[] { paramClazz });\n    } catch (NoSuchMethodException e) {\n      for (Method m : clazz.getMethods()) {\n        if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n          return m;\n        }\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String,Class[#]).mjava","sourceNew":"  private static Method findSetter(Class<?> clazz, String setterName, String key) {\n    for (Method m : clazz.getMethods()) {\n      if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n        return m;\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","sourceOld":"  private static Method findSetter(Class<?> clazz, String setterName, String key, Class<?> paramClazz) {\n    try {\n      return clazz.getMethod(setterName, new Class<?>[] { paramClazz });\n    } catch (NoSuchMethodException e) {\n      for (Method m : clazz.getMethods()) {\n        if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n          return m;\n        }\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String,Class[#]).mjava","sourceNew":"  private static Method findSetter(Class<?> clazz, String setterName, String key) {\n    for (Method m : clazz.getMethods()) {\n      if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n        return m;\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","sourceOld":"  private static Method findSetter(Class<?> clazz, String setterName, String key, Class<?> paramClazz) {\n    try {\n      return clazz.getMethod(setterName, new Class<?>[] { paramClazz });\n    } catch (NoSuchMethodException e) {\n      for (Method m : clazz.getMethods()) {\n        if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n          return m;\n        }\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"985e4be82ca11f73b80fb7dc43bc2c8816a892a5","date":1465819508,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String).mjava","sourceNew":null,"sourceOld":"  private static Method findSetter(Class<?> clazz, String setterName, String key) {\n    for (Method m : clazz.getMethods()) {\n      if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n        return m;\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String).mjava","sourceNew":null,"sourceOld":"  private static Method findSetter(Class<?> clazz, String setterName, String key) {\n    for (Method m : clazz.getMethods()) {\n      if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n        return m;\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String).mjava","sourceNew":null,"sourceOld":"  private static Method findSetter(Class<?> clazz, String setterName, String key) {\n    for (Method m : clazz.getMethods()) {\n      if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n        return m;\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8a02bef7458089240404614139b53c9f875ec7":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5","e40457c1de3323920c40a4ef9bdd3d0b8c762f2e"],"985e4be82ca11f73b80fb7dc43bc2c8816a892a5":["1f69e96b07e265f3e18957be540909b01fae36f8"],"e40457c1de3323920c40a4ef9bdd3d0b8c762f2e":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"492da3bdf5b2efd7bb71165413a8c5017d4930ba":["e40457c1de3323920c40a4ef9bdd3d0b8c762f2e"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["e40457c1de3323920c40a4ef9bdd3d0b8c762f2e","492da3bdf5b2efd7bb71165413a8c5017d4930ba"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["1f69e96b07e265f3e18957be540909b01fae36f8","985e4be82ca11f73b80fb7dc43bc2c8816a892a5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["da8a02bef7458089240404614139b53c9f875ec7","6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"da8a02bef7458089240404614139b53c9f875ec7":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"985e4be82ca11f73b80fb7dc43bc2c8816a892a5":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"e40457c1de3323920c40a4ef9bdd3d0b8c762f2e":["da8a02bef7458089240404614139b53c9f875ec7","492da3bdf5b2efd7bb71165413a8c5017d4930ba","1f69e96b07e265f3e18957be540909b01fae36f8"],"492da3bdf5b2efd7bb71165413a8c5017d4930ba":["1f69e96b07e265f3e18957be540909b01fae36f8"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["da8a02bef7458089240404614139b53c9f875ec7","e40457c1de3323920c40a4ef9bdd3d0b8c762f2e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"1f69e96b07e265f3e18957be540909b01fae36f8":["985e4be82ca11f73b80fb7dc43bc2c8816a892a5","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}