{"path":"solr/core/src/java/org/apache/solr/core/SolrProperties#addPersistCore(String,Properties,Map[String,String]).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrProperties#addPersistCore(String,Properties,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * given a core and attributes, find the core.properties file from whence it came and update it with the current\n   * <p/>\n   * Note, when the cores were discovered, we stored away the path that it came from for reference later. Remember\n   * that these cores aren't necessarily loaded all the time, they may be transient.\n   * It's not clear what the magic is that the calling methods (see CoreContainer) are doing, but they seem to be\n   * \"doing the right thing\" so that the attribs properties are the ones that contain the correct data. All the\n   * tests pass, but it's magic at this point.\n   *\n   * @param coreName - the core whose attributes we are to change\n   * @param attribs  - the attribs to change to, see note above.\n   * @param props    - ignored, here to make the i'face work in combination with ConfigSolrXmlBackCompat\n   */\n\n  @Override\n  public void addPersistCore(String coreName, Properties attribs, Map<String, String> props) {\n    String val = container.getContainerProperties().getProperty(\"solr.persistent\", \"false\");\n    if (!Boolean.parseBoolean(val)) return;\n\n    CoreDescriptorPlus plus;\n    plus = coreDescriptorPlusMap.get(coreName);\n    if (plus == null) {\n      log.error(\"Expected to find core for persisting, but we did not. Core: \" + coreName);\n      return;\n    }\n\n    Properties outProps = new Properties();\n    // I don't quite get this, but somehow the attribs passed in are the originals (plus any newly-added ones). Never\n    // one to look a gift horse in the mouth I'll just use that.\n\n    // Take care NOT to write out properties like ${blah blah blah}\n    outProps.putAll(attribs);\n    Properties corePropsOrig = plus.getPropsOrig();\n    for (String prop : corePropsOrig.stringPropertyNames()) {\n      val = corePropsOrig.getProperty(prop);\n      if (val.indexOf(\"$\") != -1) { // it was originally a system property, keep it so\n        outProps.put(prop, val);\n        continue;\n      }\n      // Make sure anything that used to be in the properties file still is.\n      if (outProps.getProperty(prop) == null) {\n        outProps.put(prop, val);\n      }\n    }\n    // Any of our standard properties that weren't in the original properties file should NOT be persisted, I think\n    for (String prop : CoreDescriptor.standardPropNames) {\n      if (corePropsOrig.getProperty(prop) == null) {\n        outProps.remove(prop);\n      }\n    }\n\n    try {\n      outProps.store(new FileOutputStream(plus.getFilePath()), null);\n    } catch (IOException e) {\n      log.error(\"Failed to persist core {}, filepath {}\", coreName, plus.getFilePath());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f932f4f1026b6902f7a69ce428340678e26a6a0","date":1362349021,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrProperties#addPersistCore(String,Properties,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrProperties#addPersistCore(String,Properties,Map[String,String]).mjava","sourceNew":"  /**\n   * given a core and attributes, find the core.properties file from whence it came and update it with the current\n   * <p/>\n   * Note, when the cores were discovered, we stored away the path that it came from for reference later. Remember\n   * that these cores aren't necessarily loaded all the time, they may be transient.\n   * It's not clear what the magic is that the calling methods (see CoreContainer) are doing, but they seem to be\n   * \"doing the right thing\" so that the attribs properties are the ones that contain the correct data. All the\n   * tests pass, but it's magic at this point.\n   *\n   * @param coreName - the core whose attributes we are to change\n   * @param attribs  - the attribs to change to, see note above.\n   * @param props    - ignored, here to make the i'face work in combination with ConfigSolrXmlBackCompat\n   */\n\n  @Override\n  public void addPersistCore(String coreName, Properties attribs, Map<String, String> props) {\n    String val = container.getContainerProperties().getProperty(\"solr.persistent\", \"false\");\n    if (!Boolean.parseBoolean(val)) return;\n\n    CoreDescriptorPlus plus;\n    plus = coreDescriptorPlusMap.get(coreName);\n    if (plus == null) {\n      log.error(\"Expected to find core for persisting, but we did not. Core: \" + coreName);\n      return;\n    }\n\n    Properties outProps = new Properties();\n    // I don't quite get this, but somehow the attribs passed in are the originals (plus any newly-added ones). Never\n    // one to look a gift horse in the mouth I'll just use that.\n\n    // Take care NOT to write out properties like ${blah blah blah}\n    outProps.putAll(attribs);\n    Properties corePropsOrig = plus.getPropsOrig();\n    for (String prop : corePropsOrig.stringPropertyNames()) {\n      val = corePropsOrig.getProperty(prop);\n      if (val.indexOf(\"$\") != -1) { // it was originally a system property, keep it so\n        outProps.put(prop, val);\n        continue;\n      }\n      // Make sure anything that used to be in the properties file still is.\n      if (outProps.getProperty(prop) == null) {\n        outProps.put(prop, val);\n      }\n    }\n    // Any of our standard properties that weren't in the original properties file should NOT be persisted, I think\n    for (String prop : CoreDescriptor.standardPropNames) {\n      if (corePropsOrig.getProperty(prop) == null) {\n        outProps.remove(prop);\n      }\n    }\n\n    OutputStream os = null;\n    try {\n      os = new FileOutputStream(plus.getFilePath());\n      outProps.store(os, null);\n    } catch (IOException e) {\n      log.error(\"Failed to persist core {}, filepath {}\", coreName, plus.getFilePath());\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * given a core and attributes, find the core.properties file from whence it came and update it with the current\n   * <p/>\n   * Note, when the cores were discovered, we stored away the path that it came from for reference later. Remember\n   * that these cores aren't necessarily loaded all the time, they may be transient.\n   * It's not clear what the magic is that the calling methods (see CoreContainer) are doing, but they seem to be\n   * \"doing the right thing\" so that the attribs properties are the ones that contain the correct data. All the\n   * tests pass, but it's magic at this point.\n   *\n   * @param coreName - the core whose attributes we are to change\n   * @param attribs  - the attribs to change to, see note above.\n   * @param props    - ignored, here to make the i'face work in combination with ConfigSolrXmlBackCompat\n   */\n\n  @Override\n  public void addPersistCore(String coreName, Properties attribs, Map<String, String> props) {\n    String val = container.getContainerProperties().getProperty(\"solr.persistent\", \"false\");\n    if (!Boolean.parseBoolean(val)) return;\n\n    CoreDescriptorPlus plus;\n    plus = coreDescriptorPlusMap.get(coreName);\n    if (plus == null) {\n      log.error(\"Expected to find core for persisting, but we did not. Core: \" + coreName);\n      return;\n    }\n\n    Properties outProps = new Properties();\n    // I don't quite get this, but somehow the attribs passed in are the originals (plus any newly-added ones). Never\n    // one to look a gift horse in the mouth I'll just use that.\n\n    // Take care NOT to write out properties like ${blah blah blah}\n    outProps.putAll(attribs);\n    Properties corePropsOrig = plus.getPropsOrig();\n    for (String prop : corePropsOrig.stringPropertyNames()) {\n      val = corePropsOrig.getProperty(prop);\n      if (val.indexOf(\"$\") != -1) { // it was originally a system property, keep it so\n        outProps.put(prop, val);\n        continue;\n      }\n      // Make sure anything that used to be in the properties file still is.\n      if (outProps.getProperty(prop) == null) {\n        outProps.put(prop, val);\n      }\n    }\n    // Any of our standard properties that weren't in the original properties file should NOT be persisted, I think\n    for (String prop : CoreDescriptor.standardPropNames) {\n      if (corePropsOrig.getProperty(prop) == null) {\n        outProps.remove(prop);\n      }\n    }\n\n    try {\n      outProps.store(new FileOutputStream(plus.getFilePath()), null);\n    } catch (IOException e) {\n      log.error(\"Failed to persist core {}, filepath {}\", coreName, plus.getFilePath());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrProperties#addPersistCore(String,Properties,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * given a core and attributes, find the core.properties file from whence it came and update it with the current\n   * <p/>\n   * Note, when the cores were discovered, we stored away the path that it came from for reference later. Remember\n   * that these cores aren't necessarily loaded all the time, they may be transient.\n   * It's not clear what the magic is that the calling methods (see CoreContainer) are doing, but they seem to be\n   * \"doing the right thing\" so that the attribs properties are the ones that contain the correct data. All the\n   * tests pass, but it's magic at this point.\n   *\n   * @param coreName - the core whose attributes we are to change\n   * @param attribs  - the attribs to change to, see note above.\n   * @param props    - ignored, here to make the i'face work in combination with ConfigSolrXmlBackCompat\n   */\n\n  @Override\n  public void addPersistCore(String coreName, Properties attribs, Map<String, String> props) {\n    String val = container.getContainerProperties().getProperty(\"solr.persistent\", \"false\");\n    if (!Boolean.parseBoolean(val)) return;\n\n    CoreDescriptorPlus plus;\n    plus = coreDescriptorPlusMap.get(coreName);\n    if (plus == null) {\n      log.error(\"Expected to find core for persisting, but we did not. Core: \" + coreName);\n      return;\n    }\n\n    Properties outProps = new Properties();\n    // I don't quite get this, but somehow the attribs passed in are the originals (plus any newly-added ones). Never\n    // one to look a gift horse in the mouth I'll just use that.\n\n    // Take care NOT to write out properties like ${blah blah blah}\n    outProps.putAll(attribs);\n    Properties corePropsOrig = plus.getPropsOrig();\n    for (String prop : corePropsOrig.stringPropertyNames()) {\n      val = corePropsOrig.getProperty(prop);\n      if (val.indexOf(\"$\") != -1) { // it was originally a system property, keep it so\n        outProps.put(prop, val);\n        continue;\n      }\n      // Make sure anything that used to be in the properties file still is.\n      if (outProps.getProperty(prop) == null) {\n        outProps.put(prop, val);\n      }\n    }\n    // Any of our standard properties that weren't in the original properties file should NOT be persisted, I think\n    for (String prop : CoreDescriptor.standardPropNames) {\n      if (corePropsOrig.getProperty(prop) == null) {\n        outProps.remove(prop);\n      }\n    }\n\n    OutputStream os = null;\n    try {\n      os = new FileOutputStream(plus.getFilePath());\n      outProps.store(os, null);\n    } catch (IOException e) {\n      log.error(\"Failed to persist core {}, filepath {}\", coreName, plus.getFilePath());\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["4f932f4f1026b6902f7a69ce428340678e26a6a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f932f4f1026b6902f7a69ce428340678e26a6a0":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"4f932f4f1026b6902f7a69ce428340678e26a6a0":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"a837c064b67fa63a9394136e31218b908cdcf783":["4f932f4f1026b6902f7a69ce428340678e26a6a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}