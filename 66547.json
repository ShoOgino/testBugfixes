{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        QueryWeight w = (QueryWeight) iter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          return null;\n        } else if (subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Weight w = (Weight) iter.next();\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer == null) {\n          return null;\n        } else if (subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a9900b2c2df4909dc735d4042e21e453057db47","date":1246040088,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        QueryWeight w = (QueryWeight) iter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        QueryWeight w = (QueryWeight) iter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          return null;\n        } else if (subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Weight w = (Weight) iter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        QueryWeight w = (QueryWeight) iter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator<Weight> iter = weights.iterator(); iter.hasNext();) {\n        Weight w = (Weight) iter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Weight w = (Weight) iter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df43e6d101500e53fc5fffcae05a916e1fece0cf","date":1255710619,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator<Weight> iter = weights.iterator(); iter.hasNext();) {\n        Weight w = (Weight) iter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e0d3ac29cb12b76130b702427d6bcd355e68d126":["fe941135bdfc28c81e20b4d21422f8726af34925"],"df43e6d101500e53fc5fffcae05a916e1fece0cf":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a9900b2c2df4909dc735d4042e21e453057db47":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe941135bdfc28c81e20b4d21422f8726af34925":["0a9900b2c2df4909dc735d4042e21e453057db47"],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["df43e6d101500e53fc5fffcae05a916e1fece0cf"]},"commit2Childs":{"e0d3ac29cb12b76130b702427d6bcd355e68d126":["df43e6d101500e53fc5fffcae05a916e1fece0cf"],"df43e6d101500e53fc5fffcae05a916e1fece0cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"0a9900b2c2df4909dc735d4042e21e453057db47":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"052fac7830290bd38a04cddee1a121ee07656b56":["0a9900b2c2df4909dc735d4042e21e453057db47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}