{"path":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"/dev/null","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":null,"sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"/dev/null","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98a8a68e6714cb8742c790308b9f5180d63417d4","date":1272554039,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d51babee7caaf2812d53ab9c523438b2afaea1e3","date":1295546303,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) { // TODO Cut over to an Enum here\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) { // TODO Cut over to an Enum here\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) { // TODO Cut over to an Enum here\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) { // TODO Cut over to an Enum here\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) { // TODO Cut over to an Enum here\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) { // TODO Cut over to an Enum here\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) { // TODO Cut over to an Enum here\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) { // TODO Cut over to an Enum here\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n    threads = -1;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) { // TODO Cut over to an Enum here\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    String threadStr = localParams.get(CommonParams.THREADS);\n    if (threadStr != null) {\n      threads = Integer.parseInt(threadStr);\n    }\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d51babee7caaf2812d53ab9c523438b2afaea1e3":["98a8a68e6714cb8742c790308b9f5180d63417d4"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["98a8a68e6714cb8742c790308b9f5180d63417d4","d51babee7caaf2812d53ab9c523438b2afaea1e3"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["d51babee7caaf2812d53ab9c523438b2afaea1e3","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["98a8a68e6714cb8742c790308b9f5180d63417d4","d51babee7caaf2812d53ab9c523438b2afaea1e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98a8a68e6714cb8742c790308b9f5180d63417d4":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["d51babee7caaf2812d53ab9c523438b2afaea1e3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["29ef99d61cda9641b6250bf9567329a6e65f901d","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d51babee7caaf2812d53ab9c523438b2afaea1e3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"1da8d55113b689b06716246649de6f62430f15c0":["98a8a68e6714cb8742c790308b9f5180d63417d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"98a8a68e6714cb8742c790308b9f5180d63417d4":["d51babee7caaf2812d53ab9c523438b2afaea1e3","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}