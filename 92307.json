{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","sourceNew":"  //TODO convert to internal\n  /*\n   * Stemms the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuffer.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","sourceOld":"  //TODO convert to internal\n  /*\n   * Stemms the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuffer.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","sourceNew":"  //TODO convert to internal\n  /*\n   * Stems the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuffer.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","sourceOld":"  //TODO convert to internal\n  /*\n   * Stemms the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuffer.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","sourceNew":"  //TODO convert to internal\n  /*\n   * Stems the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuilder.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","sourceOld":"  //TODO convert to internal\n  /*\n   * Stems the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuffer.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","sourceNew":"  //TODO convert to internal\n  /*\n   * Stems the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuilder.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","sourceOld":"  //TODO convert to internal\n  /*\n   * Stems the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuilder.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}