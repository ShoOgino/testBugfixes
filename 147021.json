{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testNumericUpdates().mjava","commits":[{"id":"79091fb8a01635e0319c11e7ffbac106831b23cb","date":1409574060,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testNumericUpdates().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumericUpdates() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.close();\n\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"f\", 4L);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback();\n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2daae254c28b627693692fbf8f14d2f36c3591c1","date":1409582110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testNumericUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testNumericUpdates().mjava","sourceNew":"  public void testNumericUpdates() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.close();\n\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"f\", 4L);\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericUpdates() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.close();\n\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"f\", 4L);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback();\n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testNumericUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateOldSegments().mjava","sourceNew":"  public void testNumericUpdates() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.close();\n\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"f\", 4L);\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateOldSegments() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n    \n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.close();\n    \n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"f\", 4L);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback(); \n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testNumericUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testNumericUpdates().mjava","sourceNew":"  public void testNumericUpdates() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    \n    for (Codec codec : oldCodecs) {\n      Directory dir = newDirectory();\n      \n      // create a segment with an old Codec\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      conf.setCodec(codec);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"f\", 5));\n      writer.addDocument(doc);\n      writer.close();\n      \n      conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      writer = new IndexWriter(dir, conf);\n      writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"f\", 4L);\n      try {\n        writer.close();\n        fail(\"should not have succeeded to update a segment written with an old Codec\");\n      } catch (UnsupportedOperationException e) {\n        writer.rollback();\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericUpdates() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.close();\n\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"f\", 4L);\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testNumericUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testNumericUpdates().mjava","sourceNew":"  public void testNumericUpdates() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    \n    for (Codec codec : oldCodecs) {\n      Directory dir = newDirectory();\n      \n      // create a segment with an old Codec\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      conf.setCodec(codec);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"f\", 5));\n      writer.addDocument(doc);\n      writer.close();\n      \n      conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      writer = new IndexWriter(dir, conf);\n      writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"f\", 4L);\n      try {\n        writer.close();\n        fail(\"should not have succeeded to update a segment written with an old Codec\");\n      } catch (UnsupportedOperationException e) {\n        writer.rollback();\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericUpdates() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.close();\n\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"f\", 4L);\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testNumericUpdates().mjava","sourceNew":null,"sourceOld":"  public void testNumericUpdates() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    \n    for (Codec codec : oldCodecs) {\n      Directory dir = newDirectory();\n      \n      // create a segment with an old Codec\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      conf.setCodec(codec);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"f\", 5));\n      writer.addDocument(doc);\n      writer.close();\n      \n      conf = newIndexWriterConfig(new MockAnalyzer(random()));\n      writer = new IndexWriter(dir, conf);\n      writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"f\", 4L);\n      try {\n        writer.close();\n        fail(\"should not have succeeded to update a segment written with an old Codec\");\n      } catch (UnsupportedOperationException e) {\n        writer.rollback();\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"79091fb8a01635e0319c11e7ffbac106831b23cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2daae254c28b627693692fbf8f14d2f36c3591c1"],"2daae254c28b627693692fbf8f14d2f36c3591c1":["79091fb8a01635e0319c11e7ffbac106831b23cb"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79091fb8a01635e0319c11e7ffbac106831b23cb","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79091fb8a01635e0319c11e7ffbac106831b23cb":["2daae254c28b627693692fbf8f14d2f36c3591c1"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2daae254c28b627693692fbf8f14d2f36c3591c1":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}