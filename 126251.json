{"path":"backwards/src/demo/org/apache/lucene/demo/html/HTMLParserTokenManager#getNextToken().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/demo/org/apache/lucene/demo/html/HTMLParserTokenManager#getNextToken().mjava","pathOld":"/dev/null","sourceNew":"/** Get the next Token. */\npublic Token getNextToken() \n{\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {\n   try\n   {\n      curChar = input_stream.BeginToken();\n   }\n   catch(java.io.IOException e)\n   {\n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   switch(curLexState)\n   {\n     case 0:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_0();\n       if (jjmatchedPos == 0 && jjmatchedKind > 13)\n       {\n          jjmatchedKind = 13;\n       }\n       break;\n     case 1:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_1();\n       break;\n     case 2:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_2();\n       break;\n     case 3:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_3();\n       break;\n     case 4:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_4();\n       break;\n     case 5:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_5();\n       break;\n     case 6:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_6();\n       break;\n     case 7:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_7();\n       break;\n   }\n     if (jjmatchedKind != 0x7fffffff)\n     {\n        if (jjmatchedPos + 1 < curPos)\n           input_stream.backup(curPos - jjmatchedPos - 1);\n        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n        {\n           matchedToken = jjFillToken();\n       if (jjnewLexState[jjmatchedKind] != -1)\n         curLexState = jjnewLexState[jjmatchedKind];\n           return matchedToken;\n        }\n        else\n        {\n         if (jjnewLexState[jjmatchedKind] != -1)\n           curLexState = jjnewLexState[jjmatchedKind];\n           continue EOFLoop;\n        }\n     }\n     int error_line = input_stream.getEndLine();\n     int error_column = input_stream.getEndColumn();\n     String error_after = null;\n     boolean EOFSeen = false;\n     try { input_stream.readChar(); input_stream.backup(1); }\n     catch (java.io.IOException e1) {\n        EOFSeen = true;\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n        if (curChar == '\\n' || curChar == '\\r') {\n           error_line++;\n           error_column = 0;\n        }\n        else\n           error_column++;\n     }\n     if (!EOFSeen) {\n        input_stream.backup(1);\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n     }\n     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/demo/org/apache/lucene/demo/html/HTMLParserTokenManager#getNextToken().mjava","pathOld":"backwards/src/demo/org/apache/lucene/demo/html/HTMLParserTokenManager#getNextToken().mjava","sourceNew":"/** Get the next Token. */\npublic Token getNextToken() \n{\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {\n   try\n   {\n      curChar = input_stream.BeginToken();\n   }\n   catch(java.io.IOException e)\n   {\n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   switch(curLexState)\n   {\n     case 0:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_0();\n       if (jjmatchedPos == 0 && jjmatchedKind > 13)\n       {\n          jjmatchedKind = 13;\n       }\n       break;\n     case 1:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_1();\n       break;\n     case 2:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_2();\n       break;\n     case 3:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_3();\n       break;\n     case 4:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_4();\n       break;\n     case 5:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_5();\n       break;\n     case 6:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_6();\n       break;\n     case 7:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_7();\n       break;\n   }\n     if (jjmatchedKind != 0x7fffffff)\n     {\n        if (jjmatchedPos + 1 < curPos)\n           input_stream.backup(curPos - jjmatchedPos - 1);\n        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n        {\n           matchedToken = jjFillToken();\n       if (jjnewLexState[jjmatchedKind] != -1)\n         curLexState = jjnewLexState[jjmatchedKind];\n           return matchedToken;\n        }\n        else\n        {\n         if (jjnewLexState[jjmatchedKind] != -1)\n           curLexState = jjnewLexState[jjmatchedKind];\n           continue EOFLoop;\n        }\n     }\n     int error_line = input_stream.getEndLine();\n     int error_column = input_stream.getEndColumn();\n     String error_after = null;\n     boolean EOFSeen = false;\n     try { input_stream.readChar(); input_stream.backup(1); }\n     catch (java.io.IOException e1) {\n        EOFSeen = true;\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n        if (curChar == '\\n' || curChar == '\\r') {\n           error_line++;\n           error_column = 0;\n        }\n        else\n           error_column++;\n     }\n     if (!EOFSeen) {\n        input_stream.backup(1);\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n     }\n     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}\n\n","sourceOld":"/** Get the next Token. */\npublic Token getNextToken() \n{\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {\n   try\n   {\n      curChar = input_stream.BeginToken();\n   }\n   catch(java.io.IOException e)\n   {\n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   switch(curLexState)\n   {\n     case 0:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_0();\n       if (jjmatchedPos == 0 && jjmatchedKind > 13)\n       {\n          jjmatchedKind = 13;\n       }\n       break;\n     case 1:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_1();\n       break;\n     case 2:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_2();\n       break;\n     case 3:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_3();\n       break;\n     case 4:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_4();\n       break;\n     case 5:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_5();\n       break;\n     case 6:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_6();\n       break;\n     case 7:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_7();\n       break;\n   }\n     if (jjmatchedKind != 0x7fffffff)\n     {\n        if (jjmatchedPos + 1 < curPos)\n           input_stream.backup(curPos - jjmatchedPos - 1);\n        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n        {\n           matchedToken = jjFillToken();\n       if (jjnewLexState[jjmatchedKind] != -1)\n         curLexState = jjnewLexState[jjmatchedKind];\n           return matchedToken;\n        }\n        else\n        {\n         if (jjnewLexState[jjmatchedKind] != -1)\n           curLexState = jjnewLexState[jjmatchedKind];\n           continue EOFLoop;\n        }\n     }\n     int error_line = input_stream.getEndLine();\n     int error_column = input_stream.getEndColumn();\n     String error_after = null;\n     boolean EOFSeen = false;\n     try { input_stream.readChar(); input_stream.backup(1); }\n     catch (java.io.IOException e1) {\n        EOFSeen = true;\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n        if (curChar == '\\n' || curChar == '\\r') {\n           error_line++;\n           error_column = 0;\n        }\n        else\n           error_column++;\n     }\n     if (!EOFSeen) {\n        input_stream.backup(1);\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n     }\n     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}