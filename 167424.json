{"path":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary == true) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      if (compressed) {\n        //was: doc.add(new Fieldable(fi.name, uncompress(b), Fieldable.Store.COMPRESS));\n        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer));\n      } else {\n        //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer));\n      }\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        fieldsStream.skipChars(length);\n        f = new LazyField(fi.name, store, index, termVector, length, pointer);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e","date":1205362958,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      if (compressed) {\n        //was: doc.add(new Fieldable(fi.name, uncompress(b), Fieldable.Store.COMPRESS));\n        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer, binary));\n      } else {\n        //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      }\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        fieldsStream.skipChars(length);\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary == true) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      if (compressed) {\n        //was: doc.add(new Fieldable(fi.name, uncompress(b), Fieldable.Store.COMPRESS));\n        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer));\n      } else {\n        //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer));\n      }\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        fieldsStream.skipChars(length);\n        f = new LazyField(fi.name, store, index, termVector, length, pointer);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n\n  }\n\n","bugFix":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      if (compressed) {\n        //was: doc.add(new Fieldable(fi.name, uncompress(b), Fieldable.Store.COMPRESS));\n        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer, binary));\n      } else {\n        //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      }\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n          fieldsStream.seek(pointer+length);\n        else\n          fieldsStream.skipChars(length);\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      if (compressed) {\n        //was: doc.add(new Fieldable(fi.name, uncompress(b), Fieldable.Store.COMPRESS));\n        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer, binary));\n      } else {\n        //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      }\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        fieldsStream.skipChars(length);\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6b4065cdaf7d1be530c926dc327494bee4ffa","date":1239273470,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      if (compressed) {\n        //was: doc.add(new Fieldable(fi.name, uncompress(b), Fieldable.Store.COMPRESS));\n        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer, binary));\n      } else {\n        //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      }\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n          fieldsStream.seek(pointer+length);\n        else\n          fieldsStream.skipChars(length);\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n      }\n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      if (compressed) {\n        //was: doc.add(new Fieldable(fi.name, uncompress(b), Fieldable.Store.COMPRESS));\n        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer, binary));\n      } else {\n        //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      }\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n          fieldsStream.seek(pointer+length);\n        else\n          fieldsStream.skipChars(length);\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"437d1054f9dc950ab4824757a6fc0f49e17071fc","date":1240824845,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      if (compressed) {\n        //was: doc.add(new Fieldable(fi.name, uncompress(b), Fieldable.Store.COMPRESS));\n        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer, binary));\n      } else {\n        //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      }\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      AbstractField f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n          fieldsStream.seek(pointer+length);\n        else\n          fieldsStream.skipChars(length);\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      }\n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      if (compressed) {\n        //was: doc.add(new Fieldable(fi.name, uncompress(b), Fieldable.Store.COMPRESS));\n        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer, binary));\n      } else {\n        //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      }\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n          fieldsStream.seek(pointer+length);\n        else\n          fieldsStream.skipChars(length);\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n      }\n      doc.add(f);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      if (compressed) {\n        //was: doc.add(new Fieldable(fi.name, uncompress(b), Fieldable.Store.COMPRESS));\n        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer, binary));\n      } else {\n        //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      }\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      AbstractField f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n          fieldsStream.seek(pointer+length);\n        else\n          fieldsStream.skipChars(length);\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      }\n      doc.add(f);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab50480bb5a7c7abad9762badcf87f8b69efeabe","date":1256591817,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary, compressed));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary, compressed);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n          fieldsStream.seek(pointer+length);\n        } else {\n          fieldsStream.skipChars(length);\n        }\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary, compressed);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      }\n      \n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      int length = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //Skip ahead of where we are by the length of what is stored\n      if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        fieldsStream.seek(pointer+length);\n      else\n        fieldsStream.skipChars(length);\n      f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n      f.setOmitNorms(fi.omitNorms);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      doc.add(f);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary, compressed));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary, compressed);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n          fieldsStream.seek(pointer+length);\n        } else {\n          fieldsStream.skipChars(length);\n        }\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary, compressed);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      }\n      \n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary, compressed));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary, compressed);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n          fieldsStream.seek(pointer+length);\n        } else {\n          fieldsStream.skipChars(length);\n        }\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary, compressed);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      }\n      \n      doc.add(f);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["e0c804f7aa477229414a7e12882af490c241f64d"],"437d1054f9dc950ab4824757a6fc0f49e17071fc":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0c804f7aa477229414a7e12882af490c241f64d":["437d1054f9dc950ab4824757a6fc0f49e17071fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"]},"commit2Childs":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"437d1054f9dc950ab4824757a6fc0f49e17071fc":["e0c804f7aa477229414a7e12882af490c241f64d"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["437d1054f9dc950ab4824757a6fc0f49e17071fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"e0c804f7aa477229414a7e12882af490c241f64d":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}