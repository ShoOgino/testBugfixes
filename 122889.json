{"path":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#distributedProcess(ResponseBuilder).mjava","commits":[{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** Dispatch shard request in <code>STAGE_EXECUTE_QUERY</code> stage */\n  @Override\n  public int distributedProcess(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"Suggester distributedProcess with : \" + params);\n    if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY) \n      return ResponseBuilder.STAGE_EXECUTE_QUERY;\n    if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n      sreq.params = new ModifiableSolrParams(rb.req.getParams());\n      sreq.params.remove(ShardParams.SHARDS);\n      rb.addRequest(this, sreq);\n      return ResponseBuilder.STAGE_GET_FIELDS;\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf2ccf302186b563c9549824a4d45db1e8cf8a0d","date":1387322051,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  /** Dispatch shard request in <code>STAGE_EXECUTE_QUERY</code> stage */\n  @Override\n  public int distributedProcess(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent distributedProcess with : \" + params);\n    if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY) \n      return ResponseBuilder.STAGE_EXECUTE_QUERY;\n    if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n      sreq.params = new ModifiableSolrParams(rb.req.getParams());\n      sreq.params.remove(ShardParams.SHARDS);\n      rb.addRequest(this, sreq);\n      return ResponseBuilder.STAGE_GET_FIELDS;\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  /** Dispatch shard request in <code>STAGE_EXECUTE_QUERY</code> stage */\n  @Override\n  public int distributedProcess(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"Suggester distributedProcess with : \" + params);\n    if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY) \n      return ResponseBuilder.STAGE_EXECUTE_QUERY;\n    if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n      sreq.params = new ModifiableSolrParams(rb.req.getParams());\n      sreq.params.remove(ShardParams.SHARDS);\n      rb.addRequest(this, sreq);\n      return ResponseBuilder.STAGE_GET_FIELDS;\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** Dispatch shard request in <code>STAGE_EXECUTE_QUERY</code> stage */\n  @Override\n  public int distributedProcess(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent distributedProcess with : \" + params);\n    if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY) \n      return ResponseBuilder.STAGE_EXECUTE_QUERY;\n    if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n      sreq.params = new ModifiableSolrParams(rb.req.getParams());\n      sreq.params.remove(ShardParams.SHARDS);\n      rb.addRequest(this, sreq);\n      return ResponseBuilder.STAGE_GET_FIELDS;\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  /** Dispatch shard request in <code>STAGE_EXECUTE_QUERY</code> stage */\n  @Override\n  public int distributedProcess(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent distributedProcess with : \" + params);\n    if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY) \n      return ResponseBuilder.STAGE_EXECUTE_QUERY;\n    if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n      sreq.params = new ModifiableSolrParams(rb.req.getParams());\n      sreq.params.remove(ShardParams.SHARDS);\n      rb.addRequest(this, sreq);\n      return ResponseBuilder.STAGE_GET_FIELDS;\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  /** Dispatch shard request in <code>STAGE_EXECUTE_QUERY</code> stage */\n  @Override\n  public int distributedProcess(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent distributedProcess with : \" + params);\n    if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY) \n      return ResponseBuilder.STAGE_EXECUTE_QUERY;\n    if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n      sreq.params = new ModifiableSolrParams(rb.req.getParams());\n      sreq.params.remove(ShardParams.SHARDS);\n      rb.addRequest(this, sreq);\n      return ResponseBuilder.STAGE_GET_FIELDS;\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  /** Dispatch shard request in <code>STAGE_EXECUTE_QUERY</code> stage */\n  @Override\n  public int distributedProcess(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent distributedProcess with : {}\", params);\n    if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY) \n      return ResponseBuilder.STAGE_EXECUTE_QUERY;\n    if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n      sreq.params = new ModifiableSolrParams(rb.req.getParams());\n      sreq.params.remove(ShardParams.SHARDS);\n      rb.addRequest(this, sreq);\n      return ResponseBuilder.STAGE_GET_FIELDS;\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  /** Dispatch shard request in <code>STAGE_EXECUTE_QUERY</code> stage */\n  @Override\n  public int distributedProcess(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent distributedProcess with : \" + params);\n    if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY) \n      return ResponseBuilder.STAGE_EXECUTE_QUERY;\n    if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n      sreq.params = new ModifiableSolrParams(rb.req.getParams());\n      sreq.params.remove(ShardParams.SHARDS);\n      rb.addRequest(this, sreq);\n      return ResponseBuilder.STAGE_GET_FIELDS;\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f2e96099703c24c0c63d27806ba7020626b649b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"bf2ccf302186b563c9549824a4d45db1e8cf8a0d":["7f2e96099703c24c0c63d27806ba7020626b649b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["bf2ccf302186b563c9549824a4d45db1e8cf8a0d"]},"commit2Childs":{"7f2e96099703c24c0c63d27806ba7020626b649b":["bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf2ccf302186b563c9549824a4d45db1e8cf8a0d":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}