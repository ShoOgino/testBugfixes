{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d0ee734a67ae20fd4c683458847aebde606bb02","date":1352490740,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":null,"sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":null,"sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"407687e67faf6e1f02a211ca078d8e3eed631027":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d0ee734a67ae20fd4c683458847aebde606bb02"],"4d0ee734a67ae20fd4c683458847aebde606bb02":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d0ee734a67ae20fd4c683458847aebde606bb02"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["407687e67faf6e1f02a211ca078d8e3eed631027","4d0ee734a67ae20fd4c683458847aebde606bb02"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"4d0ee734a67ae20fd4c683458847aebde606bb02":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}