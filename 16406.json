{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor == -1) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor != -1) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytes.finish();\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor == -1) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor != -1) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytes.finish();\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor == -1) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor != -1) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytes.finish();\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor == -1) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor != -1) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze();\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor == -1) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor != -1) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytes.finish();\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87697f76828e4cfc6dc898262de8898e5010703f","date":1276817002,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor == -1) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor != -1) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor == -1) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor != -1) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze();\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor == -1) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor != -1) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6066dbe072ec5334ff5824f474e9d3abd1620fb7","date":1278709584,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      CodecUtil.checkHeader(in, SimpleStandardTermsIndexWriter.CODEC_NAME, SimpleStandardTermsIndexWriter.VERSION_START);\n\n      final long dirOffset = in.readLong();\n\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor == -1) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n\n      // Read directory\n      in.seek(dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor != -1) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze();\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":null,"sourceOld":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"87697f76828e4cfc6dc898262de8898e5010703f":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"08932c793647a36953d1816b1060121f48820d3f":["87697f76828e4cfc6dc898262de8898e5010703f"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["08932c793647a36953d1816b1060121f48820d3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"]},"commit2Childs":{"87697f76828e4cfc6dc898262de8898e5010703f":["08932c793647a36953d1816b1060121f48820d3f"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["87697f76828e4cfc6dc898262de8898e5010703f","5f4e87790277826a2aea119328600dfb07761f32"],"08932c793647a36953d1816b1060121f48820d3f":["6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["5f4e87790277826a2aea119328600dfb07761f32","b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}