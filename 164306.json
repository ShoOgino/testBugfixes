{"path":"dev-tools/validation/src/main/java/org/apache/lucene/validation/DependencyChecker#main(String[]).mjava","commits":[{"id":"97825e47a3aef513c04447ab47a1acb85129f1ba","date":1300376061,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"dev-tools/validation/src/main/java/org/apache/lucene/validation/DependencyChecker#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws IOException {\n    Options options = new Options();\n    Option dumpOpt = OptionBuilder.withLongOpt(\"dump\").hasArg().withDescription(\"Print the JAR and it's license to a file.  Arg is the name of the file\").create(\"d\");\n    options.addOption(dumpOpt);\n    Option checkOpt = OptionBuilder.withLongOpt(\"check\").isRequired().hasArgs().withDescription(\"Check that every jar in the specified dir has an associated license file\").create(\"c\");\n    options.addOption(checkOpt);\n    CommandLine cmdLine = null;\n    try {\n      PosixParser parser = new PosixParser();\n      cmdLine = parser.parse(options, args);\n\n      boolean dump = cmdLine.hasOption(dumpOpt.getOpt());\n      FileWriter writer = null;\n      if (dump == true) {\n        File out = new File(cmdLine.getOptionValue(dumpOpt.getOpt()));\n        System.out.println(\"Dumping to \" + out);\n        writer = new FileWriter(out);\n      }\n      boolean check = cmdLine.hasOption(checkOpt.getOpt());\n      //TODO: put in NOTICE checks\n      if (check) {\n        String[] checkDirs = cmdLine.getOptionValues(checkOpt.getOpt());\n        for (int k = 0; k < checkDirs.length; k++) {\n          String checkDir = checkDirs[k];\n          File dir = new File(checkDir);\n          if (dir.exists()) {\n            System.out.println(\"----------------------\");\n            System.out.println(\"Starting on dir: \" + dir);\n            int numFailed = 0;\n            File[] list = dir.listFiles();\n            File[] licFiles = dir.listFiles(new FileFilter() {\n              public boolean accept(File file) {\n                return file.getName().indexOf(\"-LICENSE\") != -1 && file.getName().endsWith(\".txt\");//check for a consistent end, so that we aren't fooled by emacs ~ files or other temp files\n              }\n            });\n            File[] noticeFiles = dir.listFiles(new FileFilter() {\n              public boolean accept(File file) {\n                return file.getName().indexOf(\"-NOTICE\") != -1 && file.getName().endsWith(\".txt\");\n              }\n            });\n            File[] jarFiles = dir.listFiles(new FileFilter() {\n              public boolean accept(File file) {\n                return file.getName().endsWith(\".jar\");\n              }\n            });\n            if (licFiles.length == 0 && jarFiles.length != 0) {\n              System.out.println(\"No license files found: \" + dir);\n              numFailed++;\n            }\n            if (jarFiles.length != licFiles.length) {\n              System.out.println(\"WARNING: There are missing LICENSE files in: \" + dir + \" Jar file count: \" + jarFiles.length + \" License Count: \" + licFiles.length);\n              printDiffs(jarFiles, licFiles);\n              numFailed++;\n            }\n            if (jarFiles.length != noticeFiles.length) {\n              System.out.println(\"WARNING: There may be missing NOTICE files in: \" + dir + \".  Note, not all files require a NOTICE. Jar file count: \" + jarFiles.length + \" Notice Count: \" + noticeFiles.length);\n              //printDiffs(jarFiles, noticeFiles);\n            }\n            Map<String, UpdateableInt> licenseNames = new HashMap<String, UpdateableInt>();\n            for (int i = 0; i < licFiles.length; i++) {\n              licenseNames.put(licFiles[i].getName(), new UpdateableInt());\n            }\n            Map<String, UpdateableInt> noticeNames = new HashMap<String, UpdateableInt>();\n            for (int i = 0; i < noticeFiles.length; i++) {\n              noticeNames.put(noticeFiles[i].getName(), new UpdateableInt());\n            }\n\n\n            for (int i = 0; i < list.length; i++) {\n              File file = list[i];\n              String fileName = file.getName();\n              if (fileName.endsWith(\".jar\") && excludes.contains(fileName) == false) {\n                File licFile = getLicenseFile(file, licenseNames);\n                if (licFile != null && licFile.exists()) {\n                  String licName = licFile.getName();\n                  LicenseType[] types = getLicenseTypes(licName);\n                  if (types != null && types.length > 0) {\n                    for (int j = 0; j < types.length; j++) {\n                      LicenseType type = types[j];\n                      if (dump == true) {\n                        writer.write(file.getName() + \",\" + type.getDisplay() + LINE_SEPARATOR);\n                      }\n                      if (type.isNoticeRequired()) {\n                        File noticeFile = getNoticeFile(file, noticeNames);\n                        if (noticeFile != null && noticeFile.exists()) {\n\n                        } else {\n                          System.out.println(\"!!!!!! Missing NOTICE file for \" + file + \" and license type: \" + type.getDisplay());\n                          if (dump){\n                            writer.write(\"Missing NOTICE file for \" + file + LINE_SEPARATOR);\n                          }\n                          numFailed++;\n                        }\n                      }\n                    }\n                  } else {\n                    System.out.println(\"!!!!!! Couldn't determine license type for file: \" + file);\n                    if (dump == true) {\n                      writer.write(\"Invalid license for file: \" + file + LINE_SEPARATOR);\n                    }\n                    numFailed++;\n                  }\n                } else {\n                  System.out.println(\"!!!!!!! Couldn't get license file for \" + file);\n                  if (dump == true) {\n                    writer.write(\"Couldn't get license file for \" + file + LINE_SEPARATOR);\n                  }\n                  numFailed++;\n                }\n              }\n            }\n            if (dump == true) {\n              writer.write(LINE_SEPARATOR + LINE_SEPARATOR);\n              writer.write(\"Other Licenses (installer, javascript, etc.\" + LINE_SEPARATOR);\n            }\n\n            if (dump == true) {\n              for (Map.Entry<String, UpdateableInt> entry : licenseNames.entrySet()) {\n                if (entry.getValue().theInt == 0) {\n                  LicenseType[] types = getLicenseTypes(entry.getKey());\n                  if (types != null && types.length > 0) {\n                    for (int i = 0; i < types.length; i++) {\n                      writer.write(entry.getKey() + \",\" + types[i].getDisplay() + LINE_SEPARATOR);\n                    }\n                  } else {\n                    System.out.println(\"Couldn't determine license for: \" + entry.getKey());\n                  }\n                }\n              }\n            }\n            if (writer != null) {\n              writer.close();\n            }\n            if (numFailed > 0) {\n              System.out.println(\"At least one file does not have a license, or it's license name is not in the proper format.  See the logs.\");\n              System.exit(-1);\n            } else {\n              System.out.println(\"Found a license for every file in \" + dir);\n            }\n          } else {\n            System.out.println(\"Could not find directory:\" + dir);\n          }\n        }\n\n      }\n    } catch (ParseException exp) {\n      exp.printStackTrace(System.err);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a927cd1ea78b52305eb3092a878a993c89c84b0","date":1300473602,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"dev-tools/validation/src/main/java/org/apache/lucene/validation/DependencyChecker#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws IOException {\n    Options options = new Options();\n    Option dumpOpt = OptionBuilder.withLongOpt(\"dump\").hasArg().withDescription(\"Print the JAR and it's license to a file.  Arg is the name of the file\").create(\"d\");\n    options.addOption(dumpOpt);\n    Option checkOpt = OptionBuilder.withLongOpt(\"check\").isRequired().hasArgs().withDescription(\"Check that every jar in the specified dir has an associated license file\").create(\"c\");\n    options.addOption(checkOpt);\n    CommandLine cmdLine = null;\n    try {\n      PosixParser parser = new PosixParser();\n      cmdLine = parser.parse(options, args);\n\n      boolean dump = cmdLine.hasOption(dumpOpt.getOpt());\n      FileWriter writer = null;\n      if (dump == true) {\n        File out = new File(cmdLine.getOptionValue(dumpOpt.getOpt()));\n        System.out.println(\"Dumping to \" + out);\n        writer = new FileWriter(out);\n      }\n      boolean check = cmdLine.hasOption(checkOpt.getOpt());\n      //TODO: put in NOTICE checks\n      if (check) {\n        String[] checkDirs = cmdLine.getOptionValues(checkOpt.getOpt());\n        for (int k = 0; k < checkDirs.length; k++) {\n          String checkDir = checkDirs[k];\n          File dir = new File(checkDir);\n          if (dir.exists()) {\n            System.out.println(\"----------------------\");\n            System.out.println(\"Starting on dir: \" + dir);\n            int numFailed = 0;\n            File[] list = dir.listFiles();\n            File[] licFiles = dir.listFiles(new FileFilter() {\n              public boolean accept(File file) {\n                return file.getName().indexOf(\"-LICENSE\") != -1 && file.getName().endsWith(\".txt\");//check for a consistent end, so that we aren't fooled by emacs ~ files or other temp files\n              }\n            });\n            File[] noticeFiles = dir.listFiles(new FileFilter() {\n              public boolean accept(File file) {\n                return file.getName().indexOf(\"-NOTICE\") != -1 && file.getName().endsWith(\".txt\");\n              }\n            });\n            File[] jarFiles = dir.listFiles(new FileFilter() {\n              public boolean accept(File file) {\n                return file.getName().endsWith(\".jar\");\n              }\n            });\n            if (licFiles.length == 0 && jarFiles.length != 0) {\n              System.out.println(\"No license files found: \" + dir);\n              numFailed++;\n            }\n            if (jarFiles.length != licFiles.length) {\n              System.out.println(\"WARNING: There are missing LICENSE files in: \" + dir + \" Jar file count: \" + jarFiles.length + \" License Count: \" + licFiles.length);\n              printDiffs(jarFiles, licFiles);\n              numFailed++;\n            }\n            if (jarFiles.length != noticeFiles.length) {\n              System.out.println(\"WARNING: There may be missing NOTICE files in: \" + dir + \".  Note, not all files require a NOTICE. Jar file count: \" + jarFiles.length + \" Notice Count: \" + noticeFiles.length);\n              //printDiffs(jarFiles, noticeFiles);\n            }\n            Map<String, UpdateableInt> licenseNames = new HashMap<String, UpdateableInt>();\n            for (int i = 0; i < licFiles.length; i++) {\n              licenseNames.put(licFiles[i].getName(), new UpdateableInt());\n            }\n            Map<String, UpdateableInt> noticeNames = new HashMap<String, UpdateableInt>();\n            for (int i = 0; i < noticeFiles.length; i++) {\n              noticeNames.put(noticeFiles[i].getName(), new UpdateableInt());\n            }\n\n\n            for (int i = 0; i < list.length; i++) {\n              File file = list[i];\n              String fileName = file.getName();\n              if (fileName.endsWith(\".jar\") && excludes.contains(fileName) == false) {\n                File licFile = getLicenseFile(file, licenseNames);\n                if (licFile != null && licFile.exists()) {\n                  String licName = licFile.getName();\n                  LicenseType[] types = getLicenseTypes(licName);\n                  if (types != null && types.length > 0) {\n                    for (int j = 0; j < types.length; j++) {\n                      LicenseType type = types[j];\n                      if (dump == true) {\n                        writer.write(file.getName() + \",\" + type.getDisplay() + LINE_SEPARATOR);\n                      }\n                      if (type.isNoticeRequired()) {\n                        File noticeFile = getNoticeFile(file, noticeNames);\n                        if (noticeFile != null && noticeFile.exists()) {\n\n                        } else {\n                          System.out.println(\"!!!!!! Missing NOTICE file for \" + file + \" and license type: \" + type.getDisplay());\n                          if (dump){\n                            writer.write(\"Missing NOTICE file for \" + file + LINE_SEPARATOR);\n                          }\n                          numFailed++;\n                        }\n                      }\n                    }\n                  } else {\n                    System.out.println(\"!!!!!! Couldn't determine license type for file: \" + file);\n                    if (dump == true) {\n                      writer.write(\"Invalid license for file: \" + file + LINE_SEPARATOR);\n                    }\n                    numFailed++;\n                  }\n                } else {\n                  System.out.println(\"!!!!!!! Couldn't get license file for \" + file);\n                  if (dump == true) {\n                    writer.write(\"Couldn't get license file for \" + file + LINE_SEPARATOR);\n                  }\n                  numFailed++;\n                }\n              }\n            }\n            if (dump == true) {\n              writer.write(LINE_SEPARATOR + LINE_SEPARATOR);\n              writer.write(\"Other Licenses (installer, javascript, etc.\" + LINE_SEPARATOR);\n            }\n\n            if (dump == true) {\n              for (Map.Entry<String, UpdateableInt> entry : licenseNames.entrySet()) {\n                if (entry.getValue().theInt == 0) {\n                  LicenseType[] types = getLicenseTypes(entry.getKey());\n                  if (types != null && types.length > 0) {\n                    for (int i = 0; i < types.length; i++) {\n                      writer.write(entry.getKey() + \",\" + types[i].getDisplay() + LINE_SEPARATOR);\n                    }\n                  } else {\n                    System.out.println(\"Couldn't determine license for: \" + entry.getKey());\n                  }\n                }\n              }\n            }\n            if (writer != null) {\n              writer.close();\n            }\n            if (numFailed > 0) {\n              System.out.println(\"At least one file does not have a license, or it's license name is not in the proper format.  See the logs.\");\n              System.exit(-1);\n            } else {\n              System.out.println(\"Found a license for every file in \" + dir);\n            }\n          } else {\n            System.out.println(\"Could not find directory:\" + dir);\n          }\n        }\n\n      }\n    } catch (ParseException exp) {\n      exp.printStackTrace(System.err);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97825e47a3aef513c04447ab47a1acb85129f1ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a927cd1ea78b52305eb3092a878a993c89c84b0":["97825e47a3aef513c04447ab47a1acb85129f1ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a927cd1ea78b52305eb3092a878a993c89c84b0"]},"commit2Childs":{"97825e47a3aef513c04447ab47a1acb85129f1ba":["3a927cd1ea78b52305eb3092a878a993c89c84b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97825e47a3aef513c04447ab47a1acb85129f1ba"],"3a927cd1ea78b52305eb3092a878a993c89c84b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}