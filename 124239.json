{"path":"solr/src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":null,"sourceOld":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}