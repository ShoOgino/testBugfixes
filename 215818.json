{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","commits":[{"id":"29df09ecb6b96d58f34447be89f88a0c067fb3a9","date":1225344078,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(DataConfig.Entity,Map[String,DataConfig.Field]).mjava","sourceNew":"  private String verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      FieldType fieldType = null;\n\n      try {\n        fieldType = schema.getDynamicFieldType(fld.name);\n      } catch (RuntimeException ex) {\n        // Ignore because it may not be a dynamic field\n      }\n\n      if (fld.name != null) {\n        if (schema.getFields().get(fld.name) == null && fieldType == null) {\n          errors\n                  .add(\"The field :\"\n                          + fld.name\n                          + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      } else if (schema.getFields().get(fld.column) == null\n              && fieldType == null) {\n        LOG.info(\"Column : \" + fld.column + \" is not a schema field\");\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuffer sb = new StringBuffer(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","sourceOld":"  private String verifyWithSchema(DataConfig.Entity e, Map<String, DataConfig.Field> fields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n        DataConfig.Field field = new DataConfig.Field(sf.getName(), sf.multiValued());\n        e.implicitFields.add(field);\n        e.colNameVsField.put(field.column, field);\n        e.lowercaseColNameVsField.put(field.column.toLowerCase(), field);\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      FieldType fieldType = null;\n\n      try {\n        fieldType = schema.getDynamicFieldType(fld.name);\n      } catch (RuntimeException ex) {\n        // Ignore because it may not be a dynamic field\n      }\n\n      if (fld.name != null) {\n        if (schema.getFields().get(fld.name) == null && fieldType == null) {\n          errors\n                  .add(\"The field :\"\n                          + fld.name\n                          + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      } else if (schema.getFields().get(fld.column) == null\n              && fieldType == null) {\n        LOG.info(\"Column : \" + fld.column + \" is not a schema field\");\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuffer sb = new StringBuffer(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78ba4a4cc84cf69e69a7a156d7180ff65606ca93","date":1227165581,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","sourceNew":"  private String verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase());\n        if (field == null)  {\n          errors.add(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuffer sb = new StringBuffer(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","sourceOld":"  private String verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      FieldType fieldType = null;\n\n      try {\n        fieldType = schema.getDynamicFieldType(fld.name);\n      } catch (RuntimeException ex) {\n        // Ignore because it may not be a dynamic field\n      }\n\n      if (fld.name != null) {\n        if (schema.getFields().get(fld.name) == null && fieldType == null) {\n          errors\n                  .add(\"The field :\"\n                          + fld.name\n                          + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      } else if (schema.getFields().get(fld.column) == null\n              && fieldType == null) {\n        LOG.info(\"Column : \" + fld.column + \" is not a schema field\");\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuffer sb = new StringBuffer(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","e46bf22400b9cd12540418cd46bfa17c100f983a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd42c8ecc9f8a8e590c5526544a77258089ca23f","date":1229189880,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","sourceNew":"  private String verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase());\n        if (field == null) {\n          errors.add(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuffer sb = new StringBuffer(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","sourceOld":"  private String verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase());\n        if (field == null)  {\n          errors.add(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuffer sb = new StringBuffer(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2e5bfa22b27d858fb940b70befda09798b82dd2","date":1233862915,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","sourceNew":"  private String verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase());\n        if (field == null) {\n          errors.add(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuilder sb = new StringBuilder(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","sourceOld":"  private String verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase());\n        if (field == null) {\n          errors.add(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuffer sb = new StringBuffer(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be21b70688b510ce9b71baca540e637755819715","date":1237458453,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","sourceNew":"  private void verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase());\n        if (field == null) {\n          LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  private String verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase());\n        if (field == null) {\n          errors.add(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuilder sb = new StringBuilder(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","sourceNew":"  private void verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase());\n        if (field == null) {\n          LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  private void verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase());\n        if (field == null) {\n          LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78ba4a4cc84cf69e69a7a156d7180ff65606ca93":["29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"be21b70688b510ce9b71baca540e637755819715":["c2e5bfa22b27d858fb940b70befda09798b82dd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29df09ecb6b96d58f34447be89f88a0c067fb3a9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["be21b70688b510ce9b71baca540e637755819715"],"dd42c8ecc9f8a8e590c5526544a77258089ca23f":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93"],"c2e5bfa22b27d858fb940b70befda09798b82dd2":["dd42c8ecc9f8a8e590c5526544a77258089ca23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"78ba4a4cc84cf69e69a7a156d7180ff65606ca93":["dd42c8ecc9f8a8e590c5526544a77258089ca23f"],"be21b70688b510ce9b71baca540e637755819715":["ad94625fb8d088209f46650c8097196fec67f00c"],"29df09ecb6b96d58f34447be89f88a0c067fb3a9":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"dd42c8ecc9f8a8e590c5526544a77258089ca23f":["c2e5bfa22b27d858fb940b70befda09798b82dd2"],"c2e5bfa22b27d858fb940b70befda09798b82dd2":["be21b70688b510ce9b71baca540e637755819715"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}