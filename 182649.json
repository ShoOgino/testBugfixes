{"path":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#readHeader(FastInputStream).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#readHeader(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"  private void readHeader(FastInputStream fis) throws IOException {\n    // read existing header\n    boolean closeFis = false;\n    if (fis == null) closeFis = true;\n    fis = fis != null ? fis : new FSDataFastInputStream(fs.open(tlogFile), 0);\n    Map header = null;\n    try {\n      LogCodec codec = new LogCodec(resolver);\n      header = (Map) codec.unmarshal(fis);\n      \n      fis.readInt(); // skip size\n    } finally {\n      if (fis != null && closeFis) {\n        fis.close();\n      }\n    }\n    // needed to read other records\n\n    synchronized (this) {\n      globalStringList = (List<String>)header.get(\"strings\");\n      globalStringMap = new HashMap<String, Integer>(globalStringList.size());\n      for (int i=0; i<globalStringList.size(); i++) {\n        globalStringMap.put( globalStringList.get(i), i+1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#readHeader(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"  private void readHeader(FastInputStream fis) throws IOException {\n    // read existing header\n    boolean closeFis = false;\n    if (fis == null) closeFis = true;\n    fis = fis != null ? fis : new FSDataFastInputStream(fs.open(tlogFile), 0);\n    Map header = null;\n    try {\n      LogCodec codec = new LogCodec(resolver);\n      header = (Map) codec.unmarshal(fis);\n      \n      fis.readInt(); // skip size\n    } finally {\n      if (fis != null && closeFis) {\n        fis.close();\n      }\n    }\n    // needed to read other records\n\n    synchronized (this) {\n      globalStringList = (List<String>)header.get(\"strings\");\n      globalStringMap = new HashMap<String, Integer>(globalStringList.size());\n      for (int i=0; i<globalStringList.size(); i++) {\n        globalStringMap.put( globalStringList.get(i), i+1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#readHeader(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#readHeader(FastInputStream).mjava","sourceNew":"  private void readHeader(FastInputStream fis) throws IOException {\n    // read existing header\n    boolean closeFis = false;\n    if (fis == null) closeFis = true;\n    fis = fis != null ? fis : new FSDataFastInputStream(fs.open(tlogFile), 0);\n    Map header = null;\n    try {\n      LogCodec codec = new LogCodec(resolver);\n      header = (Map) codec.unmarshal(fis);\n      \n      fis.readInt(); // skip size\n    } finally {\n      if (fis != null && closeFis) {\n        fis.close();\n      }\n    }\n    // needed to read other records\n\n    synchronized (this) {\n      globalStringList = (List<String>)header.get(\"strings\");\n      globalStringMap = new HashMap<>(globalStringList.size());\n      for (int i=0; i<globalStringList.size(); i++) {\n        globalStringMap.put( globalStringList.get(i), i+1);\n      }\n    }\n  }\n\n","sourceOld":"  private void readHeader(FastInputStream fis) throws IOException {\n    // read existing header\n    boolean closeFis = false;\n    if (fis == null) closeFis = true;\n    fis = fis != null ? fis : new FSDataFastInputStream(fs.open(tlogFile), 0);\n    Map header = null;\n    try {\n      LogCodec codec = new LogCodec(resolver);\n      header = (Map) codec.unmarshal(fis);\n      \n      fis.readInt(); // skip size\n    } finally {\n      if (fis != null && closeFis) {\n        fis.close();\n      }\n    }\n    // needed to read other records\n\n    synchronized (this) {\n      globalStringList = (List<String>)header.get(\"strings\");\n      globalStringMap = new HashMap<String, Integer>(globalStringList.size());\n      for (int i=0; i<globalStringList.size(); i++) {\n        globalStringMap.put( globalStringList.get(i), i+1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#readHeader(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#readHeader(FastInputStream).mjava","sourceNew":"  private void readHeader(FastInputStream fis) throws IOException {\n    // read existing header\n    boolean closeFis = false;\n    if (fis == null) closeFis = true;\n    fis = fis != null ? fis : new FSDataFastInputStream(fs.open(tlogFile), 0);\n    Map header = null;\n    try {\n      try (LogCodec codec = new LogCodec(resolver)) {\n        header = (Map) codec.unmarshal(fis);\n      }\n      \n      fis.readInt(); // skip size\n    } finally {\n      if (fis != null && closeFis) {\n        fis.close();\n      }\n    }\n    // needed to read other records\n\n    synchronized (this) {\n      globalStringList = (List<String>)header.get(\"strings\");\n      globalStringMap = new HashMap<>(globalStringList.size());\n      for (int i=0; i<globalStringList.size(); i++) {\n        globalStringMap.put( globalStringList.get(i), i+1);\n      }\n    }\n  }\n\n","sourceOld":"  private void readHeader(FastInputStream fis) throws IOException {\n    // read existing header\n    boolean closeFis = false;\n    if (fis == null) closeFis = true;\n    fis = fis != null ? fis : new FSDataFastInputStream(fs.open(tlogFile), 0);\n    Map header = null;\n    try {\n      LogCodec codec = new LogCodec(resolver);\n      header = (Map) codec.unmarshal(fis);\n      \n      fis.readInt(); // skip size\n    } finally {\n      if (fis != null && closeFis) {\n        fis.close();\n      }\n    }\n    // needed to read other records\n\n    synchronized (this) {\n      globalStringList = (List<String>)header.get(\"strings\");\n      globalStringMap = new HashMap<>(globalStringList.size());\n      for (int i=0; i<globalStringList.size(); i++) {\n        globalStringMap.put( globalStringList.get(i), i+1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#readHeader(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#readHeader(FastInputStream).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void readHeader(FastInputStream fis) throws IOException {\n    // read existing header\n    boolean closeFis = false;\n    if (fis == null) closeFis = true;\n    fis = fis != null ? fis : new FSDataFastInputStream(fs.open(tlogFile), 0);\n    Map header = null;\n    try {\n      try (LogCodec codec = new LogCodec(resolver)) {\n        header = (Map) codec.unmarshal(fis);\n      }\n      \n      fis.readInt(); // skip size\n    } finally {\n      if (fis != null && closeFis) {\n        fis.close();\n      }\n    }\n    // needed to read other records\n\n    synchronized (this) {\n      globalStringList = (List<String>)header.get(\"strings\");\n      globalStringMap = new HashMap<>(globalStringList.size());\n      for (int i=0; i<globalStringList.size(); i++) {\n        globalStringMap.put( globalStringList.get(i), i+1);\n      }\n    }\n  }\n\n","sourceOld":"  private void readHeader(FastInputStream fis) throws IOException {\n    // read existing header\n    boolean closeFis = false;\n    if (fis == null) closeFis = true;\n    fis = fis != null ? fis : new FSDataFastInputStream(fs.open(tlogFile), 0);\n    Map header = null;\n    try {\n      try (LogCodec codec = new LogCodec(resolver)) {\n        header = (Map) codec.unmarshal(fis);\n      }\n      \n      fis.readInt(); // skip size\n    } finally {\n      if (fis != null && closeFis) {\n        fis.close();\n      }\n    }\n    // needed to read other records\n\n    synchronized (this) {\n      globalStringList = (List<String>)header.get(\"strings\");\n      globalStringMap = new HashMap<>(globalStringList.size());\n      for (int i=0; i<globalStringList.size(); i++) {\n        globalStringMap.put( globalStringList.get(i), i+1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}