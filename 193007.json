{"path":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomLineQueries(IndexReader,Object...).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomLineQueries(IndexReader,Object...).mjava","pathOld":"/dev/null","sourceNew":"  /** test random generated lines */\n  protected void verifyRandomLineQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // line\n      Line queryLine = randomQueryLine(shapes);\n      Line2D queryLine2D = Line2D.create(queryLine);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), POINT_LINE_RELATIONS);\n      Query query = newLineQuery(FIELD_NAME, queryRelation, queryLine);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = getValidator(queryRelation).testLineQuery(queryLine2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryLine.toGeoJSON());\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cb1d3c28af553b906e024a8a705042fa072efbdd","5e8251ad51618827e557dd369f16921a666914b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb1d3c28af553b906e024a8a705042fa072efbdd","date":1547716211,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomLineQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomLineQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated lines */\n  protected void verifyRandomLineQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // line\n      Line queryLine = randomQueryLine(shapes);\n      Line2D queryLine2D = Line2D.create(queryLine);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), POINT_LINE_RELATIONS);\n      Query query = newLineQuery(FIELD_NAME, queryRelation, queryLine);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = getValidator(queryRelation).testLineQuery(queryLine2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryLine.toGeoJSON());\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated lines */\n  protected void verifyRandomLineQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // line\n      Line queryLine = randomQueryLine(shapes);\n      Line2D queryLine2D = Line2D.create(queryLine);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), POINT_LINE_RELATIONS);\n      Query query = newLineQuery(FIELD_NAME, queryRelation, queryLine);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = getValidator(queryRelation).testLineQuery(queryLine2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryLine.toGeoJSON());\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":["e4fccad460342b1af30cb328cc8297751a218d78"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomLineQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomLineQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated lines */\n  protected void verifyRandomLineQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // line\n      Line queryLine = randomQueryLine(shapes);\n      Line2D queryLine2D = Line2D.create(queryLine);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), POINT_LINE_RELATIONS);\n      Query query = newLineQuery(FIELD_NAME, queryRelation, queryLine);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = getValidator(queryRelation).testLineQuery(queryLine2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryLine.toGeoJSON());\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated lines */\n  protected void verifyRandomLineQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // line\n      Line queryLine = randomQueryLine(shapes);\n      Line2D queryLine2D = Line2D.create(queryLine);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), POINT_LINE_RELATIONS);\n      Query query = newLineQuery(FIELD_NAME, queryRelation, queryLine);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = getValidator(queryRelation).testLineQuery(queryLine2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryLine.toGeoJSON());\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":["e4fccad460342b1af30cb328cc8297751a218d78"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomLineQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomLineQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated lines */\n  protected void verifyRandomLineQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // line\n      Line queryLine = randomQueryLine(shapes);\n      Line2D queryLine2D = Line2D.create(queryLine);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), POINT_LINE_RELATIONS);\n      Query query = newLineQuery(FIELD_NAME, queryRelation, queryLine);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = getValidator(queryRelation).testLineQuery(queryLine2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryLine.toGeoJSON());\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated lines */\n  protected void verifyRandomLineQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // line\n      Line queryLine = randomQueryLine(shapes);\n      Line2D queryLine2D = Line2D.create(queryLine);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), POINT_LINE_RELATIONS);\n      Query query = newLineQuery(FIELD_NAME, queryRelation, queryLine);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = getValidator(queryRelation).testLineQuery(queryLine2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryLine.toGeoJSON());\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomLineQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomLineQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated lines */\n  protected void verifyRandomLineQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // line\n      Object queryLine = randomQueryLine(shapes);\n      Line2D queryLine2D = toLine2D(queryLine);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), POINT_LINE_RELATIONS);\n      Query query = newLineQuery(FIELD_NAME, queryRelation, queryLine);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testLineQuery(queryLine2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryLine);\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated lines */\n  protected void verifyRandomLineQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // line\n      Line queryLine = randomQueryLine(shapes);\n      Line2D queryLine2D = Line2D.create(queryLine);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), POINT_LINE_RELATIONS);\n      Query query = newLineQuery(FIELD_NAME, queryRelation, queryLine);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = getValidator(queryRelation).testLineQuery(queryLine2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryLine.toGeoJSON());\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1d3c28af553b906e024a8a705042fa072efbdd":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5e8251ad51618827e557dd369f16921a666914b5"],"5e8251ad51618827e557dd369f16921a666914b5":["cb1d3c28af553b906e024a8a705042fa072efbdd"],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["cb1d3c28af553b906e024a8a705042fa072efbdd","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"cb1d3c28af553b906e024a8a705042fa072efbdd":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e8251ad51618827e557dd369f16921a666914b5":["c286b0d8c507a88b289407e2fe161effa275c6b0","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"e4fccad460342b1af30cb328cc8297751a218d78":["cb1d3c28af553b906e024a8a705042fa072efbdd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}