{"path":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if(\"POST\".equals(httpMethod)){\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if(!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n\n    } else {\n      handleGET(req, rsp);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b95b7a900f914658251ea859980db26d8bbec77","date":1423653028,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n\n    } else {\n      handleGET(req, rsp);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if(\"POST\".equals(httpMethod)){\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if(!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n\n    } else {\n      handleGET(req, rsp);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n\n    } else {\n      handleGET(req, rsp);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n\n    } else {\n      handleGET(req, rsp);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6466e433d7f5218e77c8115ed28176855fc3c143","date":1436824910,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      for (ContentStream stream : req.getContentStreams()) {\n        try {\n          List errs = new SchemaManager(req).performOperations(stream.getReader());\n          if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n        } catch (IOException e) {\n          rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n          rsp.setException(e);\n        }\n        break;\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8c611a68829ce670498db444c39975f66888dfd","date":1494922075,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    RequestHandlerUtils.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    RequestHandlerUtils.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    RequestHandlerUtils.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    RequestHandlerUtils.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrConfigHandler.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d29de0abdd3a2150c0dabfe1bf98024bbfa367","date":1515464714,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    RequestHandlerUtils.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ConfigSet is immutable\");\n      }\n      if (req.getContentStreams() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no stream\");\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty())\n          throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error reading input String \" + e.getMessage(), e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    RequestHandlerUtils.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    RequestHandlerUtils.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ConfigSet is immutable\");\n      }\n      if (req.getContentStreams() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no stream\");\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty())\n          throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error reading input String \" + e.getMessage(), e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    RequestHandlerUtils.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        rsp.add(\"errors\", \"ConfigSet is immutable\");\n        return;\n      }\n      if (req.getContentStreams() == null) {\n        rsp.add(\"errors\", \"no stream\");\n        return;\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty()) rsp.add(\"errors\", errs);\n      } catch (IOException e) {\n        rsp.add(\"errors\", Collections.singletonList(\"Error reading input String \" + e.getMessage()));\n        rsp.setException(e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    RequestHandlerUtils.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ConfigSet is immutable\");\n      }\n      if (req.getContentStreams() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no stream\");\n      }\n\n      try {\n        @SuppressWarnings({\"rawtypes\"})\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty())\n          throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error reading input String \" + e.getMessage(), e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    RequestHandlerUtils.setWt(req, JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"POST\".equals(httpMethod)) {\n      if (isImmutableConfigSet) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ConfigSet is immutable\");\n      }\n      if (req.getContentStreams() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no stream\");\n      }\n\n      try {\n        List errs = new SchemaManager(req).performOperations();\n        if (!errs.isEmpty())\n          throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error reading input String \" + e.getMessage(), e);\n      }\n    } else {\n      handleGET(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6466e433d7f5218e77c8115ed28176855fc3c143":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"7d72e80cee24be385c713864a9f1f90be3744482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["9b95b7a900f914658251ea859980db26d8bbec77"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["6466e433d7f5218e77c8115ed28176855fc3c143"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["6466e433d7f5218e77c8115ed28176855fc3c143","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"28288370235ed02234a64753cdbf0c6ec096304a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9b95b7a900f914658251ea859980db26d8bbec77","eeeea2295d6355a29e259130a5c48ace73022d7c"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a8c611a68829ce670498db444c39975f66888dfd":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"9b95b7a900f914658251ea859980db26d8bbec77":["7d72e80cee24be385c713864a9f1f90be3744482"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"6466e433d7f5218e77c8115ed28176855fc3c143":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"b94236357aaa22b76c10629851fe4e376e0cea82":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"7d72e80cee24be385c713864a9f1f90be3744482":["9b95b7a900f914658251ea859980db26d8bbec77"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","28288370235ed02234a64753cdbf0c6ec096304a","74aea047dff7f7c38a2d766827bd20d356f98c6a","a8c611a68829ce670498db444c39975f66888dfd","a513b6a92751e54c76fb5447948c9e7d437163a7"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a8c611a68829ce670498db444c39975f66888dfd":[],"1390137e395d2f07f9ba5b8c43d293befe84d563":["6466e433d7f5218e77c8115ed28176855fc3c143","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d72e80cee24be385c713864a9f1f90be3744482"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"9b95b7a900f914658251ea859980db26d8bbec77":["eeeea2295d6355a29e259130a5c48ace73022d7c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a8c611a68829ce670498db444c39975f66888dfd","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}