{"path":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd8367c3d48e4b63dee1895a261d4986c716bbb","date":1279637747,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9dc373b96fc96e6300e2f5af947f6998e6aa6a6","date":1295759448,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  public FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  public FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  public FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  public FieldsReader(Directory d, String segment, FieldInfos fn, IOContext context, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  public FieldsReader(Directory d, String segment, FieldInfos fn, IOContext context, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  public FieldsReader(Directory d, String segment, FieldInfos fn, IOContext context, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, readBufferSize);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9dc373b96fc96e6300e2f5af947f6998e6aa6a6":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b9dc373b96fc96e6300e2f5af947f6998e6aa6a6"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["5f4e87790277826a2aea119328600dfb07761f32","b9dc373b96fc96e6300e2f5af947f6998e6aa6a6"],"6267e1ce56c2eec111425690cd04e251b6f14952":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","b9dc373b96fc96e6300e2f5af947f6998e6aa6a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["b9dc373b96fc96e6300e2f5af947f6998e6aa6a6","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["b9dc373b96fc96e6300e2f5af947f6998e6aa6a6","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b9dc373b96fc96e6300e2f5af947f6998e6aa6a6":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["b9dc373b96fc96e6300e2f5af947f6998e6aa6a6","5f4e87790277826a2aea119328600dfb07761f32","29ef99d61cda9641b6250bf9567329a6e65f901d"],"5f4e87790277826a2aea119328600dfb07761f32":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["6267e1ce56c2eec111425690cd04e251b6f14952"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[],"6267e1ce56c2eec111425690cd04e251b6f14952":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","5f4e87790277826a2aea119328600dfb07761f32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}