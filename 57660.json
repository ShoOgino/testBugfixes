{"path":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}