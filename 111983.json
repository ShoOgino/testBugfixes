{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a43b8655231010bd8d9a1bea43acc6001df4b0dd","date":1327331998,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}