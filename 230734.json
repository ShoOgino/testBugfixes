{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","commits":[{"id":"32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f","date":1306408552,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName);\n    for (String file : files) {\n      String newFileName = segName + IndexFileNames.stripSegmentName(file);\n      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n          && !IndexFileNames.isSeparateNormsFile(file)) {\n        cfsWriter.addFile(file, info.dir);\n      } else {\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n        info.dir.copy(directory, file, newFileName);\n      }\n    }\n    \n    // Create the .cfs\n    cfsWriter.close();\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName);\n    for (String file : files) {\n      String newFileName = segName + IndexFileNames.stripSegmentName(file);\n      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n          && !IndexFileNames.isSeparateNormsFile(file)) {\n        cfsWriter.addFile(file, info.dir);\n      } else {\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n        info.dir.copy(directory, file, newFileName);\n      }\n    }\n    \n    // Create the .cfs\n    cfsWriter.close();\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName);\n    for (String file : files) {\n      String newFileName = segName + IndexFileNames.stripSegmentName(file);\n      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n          && !IndexFileNames.isSeparateNormsFile(file)) {\n        cfsWriter.addFile(file, info.dir);\n      } else {\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n        info.dir.copy(directory, file, newFileName);\n      }\n    }\n    \n    // Create the .cfs\n    cfsWriter.close();\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName, context);\n    for (String file : files) {\n      String newFileName = segName + IndexFileNames.stripSegmentName(file);\n      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n          && !IndexFileNames.isSeparateNormsFile(file)) {\n        cfsWriter.addFile(file, info.dir);\n      } else {\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n        info.dir.copy(directory, file, newFileName, context);\n      }\n    }\n    \n    // Create the .cfs\n    cfsWriter.close();\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName);\n    for (String file : files) {\n      String newFileName = segName + IndexFileNames.stripSegmentName(file);\n      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n          && !IndexFileNames.isSeparateNormsFile(file)) {\n        cfsWriter.addFile(file, info.dir);\n      } else {\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n        info.dir.copy(directory, file, newFileName);\n      }\n    }\n    \n    // Create the .cfs\n    cfsWriter.close();\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName);\n    for (String file : files) {\n      String newFileName = segName + IndexFileNames.stripSegmentName(file);\n      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n          && !IndexFileNames.isSeparateNormsFile(file)) {\n        cfsWriter.addFile(file, info.dir);\n      } else {\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n        info.dir.copy(directory, file, newFileName);\n      }\n    }\n    \n    // Create the .cfs\n    cfsWriter.close();\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":["733b83db0afdfe169b80c8580043ceca57967b19","733b83db0afdfe169b80c8580043ceca57967b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName);\n    for (String file : files) {\n      String newFileName = segName + IndexFileNames.stripSegmentName(file);\n      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n          && !IndexFileNames.isSeparateNormsFile(file)) {\n        cfsWriter.addFile(file, info.dir);\n      } else {\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n        info.dir.copy(directory, file, newFileName);\n      }\n    }\n    \n    // Create the .cfs\n    cfsWriter.close();\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName, context);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentIntoCFS(SegmentInfo,String).mjava","sourceNew":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName, IOContext context) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName, context);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file, context);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName, context);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","sourceOld":"  /** Copies the segment into the IndexWriter's directory, as a compound segment. */\n  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {\n    String segFileName = IndexFileNames.segmentFileName(segName, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    Collection<String> files = info.files();\n    final CompoundFileDirectory cfsdir = directory.createCompoundOutput(segFileName);\n    try {\n      for (String file : files) {\n        String newFileName = segName + IndexFileNames.stripSegmentName(file);\n        if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)\n            && !IndexFileNames.isSeparateNormsFile(file)) {\n          info.dir.copy(cfsdir, file, file);\n        } else {\n          assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n          info.dir.copy(directory, file, newFileName);\n        }\n      }\n    } finally {\n      IOUtils.closeSafely(true, cfsdir);\n    }\n    \n    info.dir = directory;\n    info.name = segName;\n    info.setUseCompoundFile(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"2553b00f699380c64959ccb27991289aae87be2e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"]},"commit2Childs":{"32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}