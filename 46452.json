{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n      }\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n      }\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n      }\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n      }\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n      }\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n      }\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679","date":1313702036,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n      }\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32c479cc61614dce1cba211e353e2cb8193e88ee","date":1329430818,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"477907bd8f3136042f56718399bbb45af95621d5","date":1346947398,"type":3,"author":"Stefan Matheis","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":["64dd09b29d9d8046920d09defbc90ae1791c725d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3fc0aa9a0ea3688c5b0fc6109449a008563be32","date":1355170793,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e34bec00f756799395cea45c68fcbeeba8252e56","date":1363285510,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.isZooKeeperAware()) {\n        if (coreContainer.getCoreNames().contains(name)) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getZkController() != null) {\n        if (coreContainer.getCore(name) != null) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.isZooKeeperAware()) {\n        if (coreContainer.getCoreNames().contains(name)) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.isZooKeeperAware()) {\n        if (coreContainer.getCoreNames().contains(name)) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.isZooKeeperAware()) {\n        if (coreContainer.getCoreNames().contains(name)) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.isZooKeeperAware()) {\n        if (coreContainer.getCoreNames().contains(name)) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before reading it?,\n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Re-creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n\n      String sameDirCore = coreContainer.checkUniqueDataDir(core.getDataDir());\n      if (sameDirCore != null) {\n        if (core != null) core.close();\n        log.warn(\"Creating a core that points to the same data dir as core {} is not allowed\", sameDirCore);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with same data dir '\" + sameDirCore + \"' already exists.\");\n      }\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before readding it?, \n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.isZooKeeperAware()) {\n        if (coreContainer.getCoreNames().contains(name)) {\n          log.info(\"Re-creating a core with existing name is not allowed in cloud mode\");\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core with name '\" + name + \"' already exists.\");\n        }\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n      \n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":["c3fc0aa9a0ea3688c5b0fc6109449a008563be32","e34bec00f756799395cea45c68fcbeeba8252e56","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      //for now, do not allow creating new core with same name when in cloud mode\n      //XXX perhaps it should just be unregistered from cloud before reading it?,\n      //XXX perhaps we should also check that cores are of same type before adding new core to collection?\n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Re-creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n\n      String sameDirCore = coreContainer.checkUniqueDataDir(core.getDataDir());\n      if (sameDirCore != null) {\n        if (core != null) core.close();\n        log.warn(\"Creating a core that points to the same data dir as core {} is not allowed\", sameDirCore);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with same data dir '\" + sameDirCore + \"' already exists.\");\n      }\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36f2b01395ef2bc334ebf2f94f2fe44e0f2921b1","date":1369336666,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","date":1370818281,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      \n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":["7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baf234f94640fa14a80771e4622d570e458c6540","date":1371134979,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          String parameterValue = params.get(parameterName);\n          dcore.addCreatedProperty(parameterName, parameterValue); // Need this junk for silly persistence\n\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n            String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n            coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90164923c8d1612badfdbea3fadc987a4e5bc7e6","date":1373121947,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      } else {\n        instanceDir = PropertiesUtil.substituteProperty(instanceDir, null);\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null) {\n        opts = PropertiesUtil.substituteProperty(opts, null);\n        dcore.setConfigName(opts);\n      }\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null) {\n        opts = PropertiesUtil.substituteProperty(opts, null);\n        dcore.setSchemaName(opts);\n      }\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null) {\n        opts = PropertiesUtil.substituteProperty(opts, null);\n        dcore.setDataDir(opts);\n      }\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          String parameterValue = params.get(parameterName);\n          dcore.addCreatedProperty(parameterName, parameterValue); // Need this junk for silly persistence\n\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n            String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n            coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          String parameterValue = params.get(parameterName);\n          dcore.addCreatedProperty(parameterName, parameterValue); // Need this junk for silly persistence\n\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n            String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n            coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(dcore.getName(), core, false);\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      } else {\n        instanceDir = PropertiesUtil.substituteProperty(instanceDir, null);\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null) {\n        opts = PropertiesUtil.substituteProperty(opts, null);\n        dcore.setConfigName(opts);\n      }\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null) {\n        opts = PropertiesUtil.substituteProperty(opts, null);\n        dcore.setSchemaName(opts);\n      }\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null) {\n        opts = PropertiesUtil.substituteProperty(opts, null);\n        dcore.setDataDir(opts);\n      }\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          String parameterValue = params.get(parameterName);\n          dcore.addCreatedProperty(parameterName, parameterValue); // Need this junk for silly persistence\n\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n            String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n            coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ff7f6ddd7c9fdf1a0b41b1c196eb2289cb65eeee","8bc9f3cab5bcaa03021a8677cda720596f0da2f8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(dcore.getName(), core, false);\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String name = params.get(CoreAdminParams.NAME);\n    if (null == name || \"\".equals(name)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Core name is mandatory to CREATE a SolrCore\");\n    }\n    CoreDescriptor dcore = null;\n    try {\n      \n      if (coreContainer.getAllCoreNames().contains(name)) {\n        log.warn(\"Creating a core with existing name is not allowed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Core with name '\" + name + \"' already exists.\");\n      }\n\n      String instanceDir = params.get(CoreAdminParams.INSTANCE_DIR);\n      if (instanceDir == null) {\n        // instanceDir = coreContainer.getSolrHome() + \"/\" + name;\n        instanceDir = name; // bare name is already relative to solr home\n      }\n\n      dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      opts = params.get(CoreAdminParams.ULOG_DIR);\n      if (opts != null)\n        dcore.setUlogDir(opts);\n\n      opts = params.get(CoreAdminParams.LOAD_ON_STARTUP);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setLoadOnStartup(value);\n      }\n      \n      opts = params.get(CoreAdminParams.TRANSIENT);\n      if (opts != null){\n        Boolean value = Boolean.valueOf(opts);\n        dcore.setTransient(value);\n      }\n      \n      CloudDescriptor cd = dcore.getCloudDescriptor();\n      if (cd != null) {\n        cd.setParams(req.getParams());\n\n        opts = params.get(CoreAdminParams.COLLECTION);\n        if (opts != null)\n          cd.setCollectionName(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD);\n        if (opts != null)\n          cd.setShardId(opts);\n        \n        opts = params.get(CoreAdminParams.SHARD_RANGE);\n        if (opts != null)\n          cd.setShardRange(opts);\n\n        opts = params.get(CoreAdminParams.SHARD_STATE);\n        if (opts != null)\n          cd.setShardState(opts);\n        \n        opts = params.get(CoreAdminParams.ROLES);\n        if (opts != null)\n          cd.setRoles(opts);\n        \n        opts = params.get(CoreAdminParams.CORE_NODE_NAME);\n        if (opts != null)\n          cd.setCoreNodeName(opts);\n                        \n        Integer numShards = params.getInt(ZkStateReader.NUM_SHARDS_PROP);\n        if (numShards != null)\n          cd.setNumShards(numShards);\n      }\n      \n      // Process all property.name=value parameters and set them as name=value core properties\n      Properties coreProperties = new Properties();\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while (parameterNamesIterator.hasNext()) {\n          String parameterName = parameterNamesIterator.next();\n          if(parameterName.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n              String parameterValue = params.get(parameterName);\n              String propertyName = parameterName.substring(CoreAdminParams.PROPERTY_PREFIX.length()); // skip prefix\n              coreProperties.put(propertyName, parameterValue);\n          }\n      }\n      dcore.setCoreProperties(coreProperties);\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      SolrCore core = coreContainer.create(dcore);\n\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(name, dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + name + \"': \" +\n                              ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7f6ddd7c9fdf1a0b41b1c196eb2289cb65eeee","date":1381454072,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(dcore.getName(), core, false);\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(dcore.getName(), core, false);\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n                              ex.getMessage(), ex);\n    }\n  }\n\n","bugFix":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1f0bd57ecabc3ff09b16b625797242ff05d0597","date":1381455444,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n\n      // make sure we can write out the descriptor first\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      coreContainer.register(dcore.getName(), core, false);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(dcore.getName(), core, false);\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bc9f3cab5bcaa03021a8677cda720596f0da2f8","date":1383747827,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n\n      // make sure we can write out the descriptor first\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      coreContainer.register(core, false);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n\n      // make sure we can write out the descriptor first\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      coreContainer.register(dcore.getName(), core, false);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"840fc95f31a25d020cd825e880018bcfa0bacc71","date":1393483822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        if(!Overseer.isLegacy(coreContainer.getZkController() .getZkStateReader().getClusterProps())){\n          if(dcore.getCloudDescriptor().getCoreNodeName() ==null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \"+ params);\n\n          }\n        }\n        coreContainer.preRegisterInZk(dcore);\n      }\n\n      // make sure we can write out the descriptor first\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      coreContainer.register(core, false);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n\n      // make sure we can write out the descriptor first\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      coreContainer.register(core, false);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        if(!Overseer.isLegacy(coreContainer.getZkController() .getZkStateReader().getClusterProps())){\n          if(dcore.getCloudDescriptor().getCoreNodeName() ==null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \"+ params);\n\n          }\n        }\n        coreContainer.preRegisterInZk(dcore);\n      }\n\n      // make sure we can write out the descriptor first\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      coreContainer.register(core, false);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        coreContainer.preRegisterInZk(dcore);\n      }\n\n      // make sure we can write out the descriptor first\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      coreContainer.register(core, false);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        if(!Overseer.isLegacy(coreContainer.getZkController() .getZkStateReader().getClusterProps())){\n          if(dcore.getCloudDescriptor().getCoreNodeName() ==null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \"+ params);\n\n          }\n        }\n      }\n\n      // make sure we can write out the descriptor first\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        if(!Overseer.isLegacy(coreContainer.getZkController() .getZkStateReader().getClusterProps())){\n          if(dcore.getCloudDescriptor().getCoreNodeName() ==null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \"+ params);\n\n          }\n        }\n        coreContainer.preRegisterInZk(dcore);\n      }\n\n      // make sure we can write out the descriptor first\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      coreContainer.register(core, false);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    boolean preExisitingZkEntry = false;\n    try {\n      if (coreContainer.getZkController() != null) {\n        if (!Overseer.isLegacy(coreContainer.getZkController().getZkStateReader().getClusterProps())) {\n          if (dcore.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \" + params);\n            \n          }\n        }\n        \n        preExisitingZkEntry = checkIfCoreNodeNameAlreadyExists(dcore);\n\n      }\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      // only write out the descriptor if the core is successfully created\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null && !preExisitingZkEntry) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    try {\n      if (coreContainer.getZkController() != null) {\n        if(!Overseer.isLegacy(coreContainer.getZkController() .getZkStateReader().getClusterProps())){\n          if(dcore.getCloudDescriptor().getCoreNodeName() ==null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \"+ params);\n\n          }\n        }\n      }\n\n      // make sure we can write out the descriptor first\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    boolean preExisitingZkEntry = false;\n    try {\n      if (coreContainer.getZkController() != null) {\n        if (!Overseer.isLegacy(coreContainer.getZkController().getZkStateReader().getClusterProps())) {\n          if (dcore.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \" + params);\n            \n          }\n        }\n        \n        preExisitingZkEntry = checkIfCoreNodeNameAlreadyExists(dcore);\n\n      }\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      // only write out the descriptor if the core is successfully created\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null && !preExisitingZkEntry) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore,null);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    boolean preExisitingZkEntry = false;\n    try {\n      if (coreContainer.getZkController() != null) {\n        if (!Overseer.isLegacy(coreContainer.getZkController().getZkStateReader().getClusterProps())) {\n          if (dcore.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \" + params);\n            \n          }\n        }\n        \n        preExisitingZkEntry = checkIfCoreNodeNameAlreadyExists(dcore);\n\n      }\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      // only write out the descriptor if the core is successfully created\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null && !preExisitingZkEntry) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    boolean preExisitingZkEntry = false;\n    try {\n      if (coreContainer.getZkController() != null) {\n        if (!Overseer.isLegacy(coreContainer.getZkController().getZkStateReader().getClusterProps())) {\n          if (dcore.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \" + params);\n            \n          }\n        }\n        \n        preExisitingZkEntry = checkIfCoreNodeNameAlreadyExists(dcore);\n\n      }\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      // only write out the descriptor if the core is successfully created\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null && !preExisitingZkEntry) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore,null);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    boolean preExisitingZkEntry = false;\n    try {\n      if (coreContainer.getZkController() != null) {\n        if (!Overseer.isLegacy(coreContainer.getZkController().getZkStateReader().getClusterProps())) {\n          if (dcore.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \" + params);\n            \n          }\n        }\n        \n        preExisitingZkEntry = checkIfCoreNodeNameAlreadyExists(dcore);\n\n      }\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      // only write out the descriptor if the core is successfully created\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n      \n      if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {\n        // hack - in this case we persist once more because a core create race might\n        // have dropped entries.\n        coreContainer.getCoresLocator().create(coreContainer);\n      }\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null && !preExisitingZkEntry) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore,null);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    boolean preExisitingZkEntry = false;\n    try {\n      if (coreContainer.getZkController() != null) {\n        if (!Overseer.isLegacy(coreContainer.getZkController().getZkStateReader().getClusterProps())) {\n          if (dcore.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \" + params);\n            \n          }\n        }\n        \n        preExisitingZkEntry = checkIfCoreNodeNameAlreadyExists(dcore);\n\n      }\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      // only write out the descriptor if the core is successfully created\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null && !preExisitingZkEntry) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    boolean preExisitingZkEntry = false;\n    try {\n      if (coreContainer.getZkController() != null) {\n        if (!Overseer.isLegacy(coreContainer.getZkController().getZkStateReader().getClusterProps())) {\n          if (dcore.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \" + params);\n            \n          }\n        }\n        \n        preExisitingZkEntry = checkIfCoreNodeNameAlreadyExists(dcore);\n\n      }\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      // only write out the descriptor if the core is successfully created\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null && !preExisitingZkEntry) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore,null);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    String coreName = params.required().get(CoreAdminParams.NAME);\n    Map<String, String> coreParams = buildCoreParams(params);\n\n    Path instancePath = coreContainer.getCoreRootDirectory().resolve(coreName);\n\n    // TODO: Should we nuke setting odd instance paths?  They break core discovery, generally\n    String instanceDir = req.getParams().get(CoreAdminParams.INSTANCE_DIR);\n    if (instanceDir == null)\n      instanceDir = req.getParams().get(\"property.instanceDir\");\n    if (instanceDir != null) {\n      instanceDir = PropertiesUtil.substituteProperty(instanceDir, coreContainer.getContainerProperties());\n      instancePath = coreContainer.getCoreRootDirectory().resolve(instanceDir).normalize();\n    }\n\n    coreContainer.create(coreName, instancePath, coreParams);\n\n    rsp.add(\"core\", coreName);\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    CoreDescriptor dcore = buildCoreDescriptor(params, coreContainer);\n\n    if (coreContainer.getAllCoreNames().contains(dcore.getName())) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Core with name '\" + dcore.getName() + \"' already exists.\");\n    }\n\n    // TODO this should be moved into CoreContainer, really...\n    boolean preExisitingZkEntry = false;\n    try {\n      if (coreContainer.getZkController() != null) {\n        if (!Overseer.isLegacy(coreContainer.getZkController().getZkStateReader().getClusterProps())) {\n          if (dcore.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"non legacy mode coreNodeName missing \" + params);\n            \n          }\n        }\n        \n        preExisitingZkEntry = checkIfCoreNodeNameAlreadyExists(dcore);\n\n      }\n      \n      SolrCore core = coreContainer.create(dcore);\n      \n      // only write out the descriptor if the core is successfully created\n      coreContainer.getCoresLocator().create(coreContainer, dcore);\n\n      rsp.add(\"core\", core.getName());\n    }\n    catch (Exception ex) {\n      if (coreContainer.isZooKeeperAware() && dcore != null && !preExisitingZkEntry) {\n        try {\n          coreContainer.getZkController().unregister(dcore.getName(), dcore);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n      \n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n      \n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + dcore.getName() + \"': \" +\n          ex.getMessage() + rootMsg, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0876236f0bd8be403747120d248bdd42b75a96","date":1451844229,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected void handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    log.info(\"core create command {}\", params);\n    String coreName = params.required().get(CoreAdminParams.NAME);\n    Map<String, String> coreParams = buildCoreParams(params);\n\n    Path instancePath = coreContainer.getCoreRootDirectory().resolve(coreName);\n\n    // TODO: Should we nuke setting odd instance paths?  They break core discovery, generally\n    String instanceDir = req.getParams().get(CoreAdminParams.INSTANCE_DIR);\n    if (instanceDir == null)\n      instanceDir = req.getParams().get(\"property.instanceDir\");\n    if (instanceDir != null) {\n      instanceDir = PropertiesUtil.substituteProperty(instanceDir, coreContainer.getContainerProperties());\n      instancePath = coreContainer.getCoreRootDirectory().resolve(instanceDir).normalize();\n    }\n\n    coreContainer.create(coreName, instancePath, coreParams);\n\n    rsp.add(\"core\", coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e1f0bd57ecabc3ff09b16b625797242ff05d0597":["ff7f6ddd7c9fdf1a0b41b1c196eb2289cb65eeee"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c3fc0aa9a0ea3688c5b0fc6109449a008563be32"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["baf234f94640fa14a80771e4622d570e458c6540","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["32c479cc61614dce1cba211e353e2cb8193e88ee","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce":["36f2b01395ef2bc334ebf2f94f2fe44e0f2921b1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ff7f6ddd7c9fdf1a0b41b1c196eb2289cb65eeee":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"36f2b01395ef2bc334ebf2f94f2fe44e0f2921b1":["9409650933cc688e77e565092a25e58adfc2e18d"],"32c479cc61614dce1cba211e353e2cb8193e88ee":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679":["c26f00b574427b55127e869b935845554afde1fa"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["8bc9f3cab5bcaa03021a8677cda720596f0da2f8","840fc95f31a25d020cd825e880018bcfa0bacc71"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"dc6e48afbb50ae0a22fa76e226f04fd585532938":["baf234f94640fa14a80771e4622d570e458c6540"],"9409650933cc688e77e565092a25e58adfc2e18d":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"baf234f94640fa14a80771e4622d570e458c6540":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"c3fc0aa9a0ea3688c5b0fc6109449a008563be32":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["477907bd8f3136042f56718399bbb45af95621d5"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"477907bd8f3136042f56718399bbb45af95621d5":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"e34bec00f756799395cea45c68fcbeeba8252e56":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"fa0876236f0bd8be403747120d248bdd42b75a96":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["32c479cc61614dce1cba211e353e2cb8193e88ee"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["e34bec00f756799395cea45c68fcbeeba8252e56"],"840fc95f31a25d020cd825e880018bcfa0bacc71":["8bc9f3cab5bcaa03021a8677cda720596f0da2f8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["85032ab568b3f50eabd577aaa994ba197db93758"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90164923c8d1612badfdbea3fadc987a4e5bc7e6":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"8bc9f3cab5bcaa03021a8677cda720596f0da2f8":["e1f0bd57ecabc3ff09b16b625797242ff05d0597"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["c3fc0aa9a0ea3688c5b0fc6109449a008563be32"],"85032ab568b3f50eabd577aaa994ba197db93758":["840fc95f31a25d020cd825e880018bcfa0bacc71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0876236f0bd8be403747120d248bdd42b75a96"]},"commit2Childs":{"e1f0bd57ecabc3ff09b16b625797242ff05d0597":["8bc9f3cab5bcaa03021a8677cda720596f0da2f8"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce":["baf234f94640fa14a80771e4622d570e458c6540"],"c26f00b574427b55127e869b935845554afde1fa":["7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679"],"ff7f6ddd7c9fdf1a0b41b1c196eb2289cb65eeee":["e1f0bd57ecabc3ff09b16b625797242ff05d0597"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"32c479cc61614dce1cba211e353e2cb8193e88ee":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"36f2b01395ef2bc334ebf2f94f2fe44e0f2921b1":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"7f74f355e3fbbcbb4ab4d7e4b2b91c61f2b95679":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["fa0876236f0bd8be403747120d248bdd42b75a96"],"dc6e48afbb50ae0a22fa76e226f04fd585532938":["90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"9409650933cc688e77e565092a25e58adfc2e18d":["36f2b01395ef2bc334ebf2f94f2fe44e0f2921b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"baf234f94640fa14a80771e4622d570e458c6540":["37a0f60745e53927c4c876cfe5b5a58170f0646c","dc6e48afbb50ae0a22fa76e226f04fd585532938"],"c3fc0aa9a0ea3688c5b0fc6109449a008563be32":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ff7f6ddd7c9fdf1a0b41b1c196eb2289cb65eeee"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c3fc0aa9a0ea3688c5b0fc6109449a008563be32"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["9409650933cc688e77e565092a25e58adfc2e18d"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"477907bd8f3136042f56718399bbb45af95621d5":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"e34bec00f756799395cea45c68fcbeeba8252e56":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"fa0876236f0bd8be403747120d248bdd42b75a96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["32c479cc61614dce1cba211e353e2cb8193e88ee"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","477907bd8f3136042f56718399bbb45af95621d5"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"840fc95f31a25d020cd825e880018bcfa0bacc71":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","85032ab568b3f50eabd577aaa994ba197db93758"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"90164923c8d1612badfdbea3fadc987a4e5bc7e6":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"8bc9f3cab5bcaa03021a8677cda720596f0da2f8":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","840fc95f31a25d020cd825e880018bcfa0bacc71"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["e34bec00f756799395cea45c68fcbeeba8252e56"],"85032ab568b3f50eabd577aaa994ba197db93758":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}