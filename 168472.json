{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n\n      //System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n      //for(int i=0;i<totalBytes;i++) {\n      //  System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n      //}\n\n      builder.add(Util.toIntsRef(text, scratchIntsRef), BytesRef.deepCopyOf(spare));\n      termCount++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n\n      //System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n      //for(int i=0;i<totalBytes;i++) {\n      //  System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n      //}\n\n      builder.add(Util.toIntsRef(text, scratchIntsRef), BytesRef.deepCopyOf(spare));\n      termCount++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    private void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      if (stats.docFreq == 0) {\n        return;\n      }\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n\n      //System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n      //for(int i=0;i<totalBytes;i++) {\n      //  System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n      //}\n\n      builder.add(Util.toIntsRef(text, scratchIntsRef), BytesRef.deepCopyOf(spare));\n      termCount++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n\n      //System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n      //for(int i=0;i<totalBytes;i++) {\n      //  System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n      //}\n\n      builder.add(Util.toIntsRef(text, scratchIntsRef), BytesRef.deepCopyOf(spare));\n      termCount++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    private void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      if (stats.docFreq == 0) {\n        return;\n      }\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.getIndexOptions() != IndexOptions.DOCS) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n\n      //System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n      //for(int i=0;i<totalBytes;i++) {\n      //  System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n      //}\n\n      builder.add(Util.toIntsRef(text, scratchIntsRef), BytesRef.deepCopyOf(spare));\n      termCount++;\n    }\n\n","sourceOld":"    private void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      if (stats.docFreq == 0) {\n        return;\n      }\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n\n      //System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n      //for(int i=0;i<totalBytes;i++) {\n      //  System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n      //}\n\n      builder.add(Util.toIntsRef(text, scratchIntsRef), BytesRef.deepCopyOf(spare));\n      termCount++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":null,"sourceOld":"    private void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      if (stats.docFreq == 0) {\n        return;\n      }\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.getIndexOptions() != IndexOptions.DOCS) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n\n      //System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n      //for(int i=0;i<totalBytes;i++) {\n      //  System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n      //}\n\n      builder.add(Util.toIntsRef(text, scratchIntsRef), BytesRef.deepCopyOf(spare));\n      termCount++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24f89e8a6aac05753cde4c83d62a74356098200d":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["24f89e8a6aac05753cde4c83d62a74356098200d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}