{"path":"solr/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basicWithGroupSortEqualToSort().mjava","commits":[{"id":"10d2f7af0975ac83900a2c970a62fe4c8667176b","date":1282358169,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basicWithGroupSortEqualToSort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basicWithGroupSortEqualToSort() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\")));\n    assertU(commit());\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\", \"sort\", \"score desc\", \"group.sort\", \"score desc\")\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //        ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["27e851527ef490dd0b790e19b7c62602b5778eb1","27e851527ef490dd0b790e19b7c62602b5778eb1","27e851527ef490dd0b790e19b7c62602b5778eb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basicWithGroupSortEqualToSort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basicWithGroupSortEqualToSort() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\")));\n    assertU(commit());\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\", \"sort\", \"score desc\", \"group.sort\", \"score desc\")\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //        ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basicWithGroupSortEqualToSort().mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basicWithGroupSortEqualToSort().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basicWithGroupSortEqualToSort() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\")));\n    assertU(commit());\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\", \"sort\", \"score desc\", \"group.sort\", \"score desc\")\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //        ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basicWithGroupSortEqualToSort() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\")));\n    assertU(commit());\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\", \"sort\", \"score desc\", \"group.sort\", \"score desc\")\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //        ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basicWithGroupSortEqualToSort().mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basicWithGroupSortEqualToSort().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basicWithGroupSortEqualToSort() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\")));\n    assertU(commit());\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\", \"sort\", \"score desc\", \"group.sort\", \"score desc\")\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //        ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basicWithGroupSortEqualToSort() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\")));\n    assertU(commit());\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\", \"sort\", \"score desc\", \"group.sort\", \"score desc\")\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //        ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basicWithGroupSortEqualToSort().mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#testGroupingGroupSortingScore_basicWithGroupSortEqualToSort().mjava","sourceNew":"  @Test\n  public void testGroupingGroupSortingScore_basicWithGroupSortEqualToSort() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\")));\n    assertU(commit());\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\", \"sort\", \"score desc\", \"group.sort\", \"score desc\")\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //        ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingGroupSortingScore_basicWithGroupSortEqualToSort() {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"author1\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"author1\", \"title\", \"the title\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"author2\", \"title\", \"a book title\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"author2\", \"title\", \"title\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"author3\", \"title\", \"the title of a title\")));\n    assertU(commit());\n\n    assertQ(req(\"q\",\"title:title\", \"group\", \"true\", \"group.field\",\"name\", \"sort\", \"score desc\", \"group.sort\", \"score desc\")\n            ,\"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']\"\n    //        ,\"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']\"\n\n            ,\"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']\"\n    //        ,\"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result[@numFound='2']\"\n            ,\"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']\"\n\n            ,\"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']\"\n    //        ,\"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result[@numFound='1']\"\n            ,\"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"10d2f7af0975ac83900a2c970a62fe4c8667176b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["10d2f7af0975ac83900a2c970a62fe4c8667176b"],"c26f00b574427b55127e869b935845554afde1fa":["10d2f7af0975ac83900a2c970a62fe4c8667176b","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["10d2f7af0975ac83900a2c970a62fe4c8667176b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10d2f7af0975ac83900a2c970a62fe4c8667176b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"10d2f7af0975ac83900a2c970a62fe4c8667176b":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10d2f7af0975ac83900a2c970a62fe4c8667176b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}