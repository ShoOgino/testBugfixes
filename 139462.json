{"path":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":null,"sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}