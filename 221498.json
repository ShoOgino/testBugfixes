{"path":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"/dev/null","sourceNew":"  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":null,"sourceOld":"  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","sourceOld":"  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"/dev/null","sourceNew":"  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","sourceOld":"  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8deebe9424cbabea4272c0e2bf9e1234b949658b","date":1271022038,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","bugFix":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3800dc8cdd8c46b4863712aacac0db52566f146","date":1307555993,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["8deebe9424cbabea4272c0e2bf9e1234b949658b","a3800dc8cdd8c46b4863712aacac0db52566f146"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["a3800dc8cdd8c46b4863712aacac0db52566f146","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a3800dc8cdd8c46b4863712aacac0db52566f146":["8deebe9424cbabea4272c0e2bf9e1234b949658b"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["8deebe9424cbabea4272c0e2bf9e1234b949658b","a3800dc8cdd8c46b4863712aacac0db52566f146"],"8deebe9424cbabea4272c0e2bf9e1234b949658b":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a3800dc8cdd8c46b4863712aacac0db52566f146"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a3800dc8cdd8c46b4863712aacac0db52566f146":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["8deebe9424cbabea4272c0e2bf9e1234b949658b"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"8deebe9424cbabea4272c0e2bf9e1234b949658b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","a3800dc8cdd8c46b4863712aacac0db52566f146","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}