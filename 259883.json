{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultTermVectorsWriter#merge(MergeState).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultTermVectorsWriter#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      DefaultTermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof DefaultTermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((DefaultTermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (DefaultTermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c95a819869502635864dac0a788f874787e3395b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultTermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      DefaultTermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof DefaultTermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((DefaultTermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (DefaultTermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}