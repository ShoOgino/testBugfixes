{"path":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Optimizer#merge(Row,Row).mjava","commits":[{"id":"67748b41458c73d49a48168362cc7f4c960a2542","date":1272890662,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Optimizer#merge(Row,Row).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merge the given rows and return the resulting Row.\n   * \n   * @param master the master Row\n   * @param existing the existing Row\n   * @return the resulting Row, or <tt>null</tt> if the operation cannot be\n   *         realized\n   */\n  public Row merge(Row master, Row existing) {\n    Iterator<Character> i = master.cells.keySet().iterator();\n    Row n = new Row();\n    for (; i.hasNext();) {\n      Character ch = i.next();\n      // XXX also must handle Cnt and Skip !!\n      Cell a = master.cells.get(ch);\n      Cell b = existing.cells.get(ch);\n      \n      Cell s = (b == null) ? new Cell(a) : merge(a, b);\n      if (s == null) {\n        return null;\n      }\n      n.cells.put(ch, s);\n    }\n    i = existing.cells.keySet().iterator();\n    for (; i.hasNext();) {\n      Character ch = i.next();\n      if (master.at(ch) != null) {\n        continue;\n      }\n      n.cells.put(ch, existing.at(ch));\n    }\n    return n;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/java/org/egothor/stemmer/Optimizer#merge(Row,Row).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Optimizer#merge(Row,Row).mjava","sourceNew":"  /**\n   * Merge the given rows and return the resulting Row.\n   * \n   * @param master the master Row\n   * @param existing the existing Row\n   * @return the resulting Row, or <tt>null</tt> if the operation cannot be\n   *         realized\n   */\n  public Row merge(Row master, Row existing) {\n    Iterator<Character> i = master.cells.keySet().iterator();\n    Row n = new Row();\n    for (; i.hasNext();) {\n      Character ch = i.next();\n      // XXX also must handle Cnt and Skip !!\n      Cell a = master.cells.get(ch);\n      Cell b = existing.cells.get(ch);\n      \n      Cell s = (b == null) ? new Cell(a) : merge(a, b);\n      if (s == null) {\n        return null;\n      }\n      n.cells.put(ch, s);\n    }\n    i = existing.cells.keySet().iterator();\n    for (; i.hasNext();) {\n      Character ch = i.next();\n      if (master.at(ch) != null) {\n        continue;\n      }\n      n.cells.put(ch, existing.at(ch));\n    }\n    return n;\n  }\n\n","sourceOld":"  /**\n   * Merge the given rows and return the resulting Row.\n   * \n   * @param master the master Row\n   * @param existing the existing Row\n   * @return the resulting Row, or <tt>null</tt> if the operation cannot be\n   *         realized\n   */\n  public Row merge(Row master, Row existing) {\n    Iterator<Character> i = master.cells.keySet().iterator();\n    Row n = new Row();\n    for (; i.hasNext();) {\n      Character ch = i.next();\n      // XXX also must handle Cnt and Skip !!\n      Cell a = master.cells.get(ch);\n      Cell b = existing.cells.get(ch);\n      \n      Cell s = (b == null) ? new Cell(a) : merge(a, b);\n      if (s == null) {\n        return null;\n      }\n      n.cells.put(ch, s);\n    }\n    i = existing.cells.keySet().iterator();\n    for (; i.hasNext();) {\n      Character ch = i.next();\n      if (master.at(ch) != null) {\n        continue;\n      }\n      n.cells.put(ch, existing.at(ch));\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67748b41458c73d49a48168362cc7f4c960a2542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["67748b41458c73d49a48168362cc7f4c960a2542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67748b41458c73d49a48168362cc7f4c960a2542"],"67748b41458c73d49a48168362cc7f4c960a2542":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}