{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#restoreDefaults().mjava","commits":[{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#restoreDefaults().mjava","pathOld":"/dev/null","sourceNew":"  @After\n  public void restoreDefaults() throws Exception {\n    if (cloudManager instanceof SimCloudManager) {\n      log.info(((SimCloudManager) cloudManager).dumpClusterState(true));\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simDeleteAllCollections();\n      ((SimCloudManager) cloudManager).simResetOpCounts();\n    } else {\n      cluster.deleteAllCollections();\n    }\n    cloudManager.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cloudManager.getTimeSource().sleep(5000);\n    listenerEvents.clear();\n    listenerCreated = new CountDownLatch(1);\n    finished = new CountDownLatch(1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#restoreDefaults().mjava","pathOld":"/dev/null","sourceNew":"  @After\n  public void restoreDefaults() throws Exception {\n    if (cloudManager instanceof SimCloudManager) {\n      log.info(((SimCloudManager) cloudManager).dumpClusterState(true));\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simDeleteAllCollections();\n      ((SimCloudManager) cloudManager).simResetOpCounts();\n    } else {\n      cluster.deleteAllCollections();\n    }\n    cloudManager.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cloudManager.getTimeSource().sleep(5000);\n    listenerEvents.clear();\n    listenerCreated = new CountDownLatch(1);\n    finished = new CountDownLatch(1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#restoreDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#restoreDefaults().mjava","sourceNew":"  @After\n  public void restoreDefaults() throws Exception {\n    if (cloudManager instanceof SimCloudManager) {\n      log.info(((SimCloudManager) cloudManager).dumpClusterState(true));\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simDeleteAllCollections();\n      ((SimCloudManager) cloudManager).simClearSystemCollection();\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simResetLeaderThrottles();\n      ((SimCloudManager) cloudManager).simRestartOverseer(null);\n      cloudManager.getTimeSource().sleep(500);\n      ((SimCloudManager) cloudManager).simResetOpCounts();\n    } else {\n      cluster.deleteAllCollections();\n    }\n    cloudManager.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cloudManager.getTimeSource().sleep(5000);\n    listenerEvents.clear();\n    listenerCreated = new CountDownLatch(1);\n    finished = new CountDownLatch(1);\n  }\n\n","sourceOld":"  @After\n  public void restoreDefaults() throws Exception {\n    if (cloudManager instanceof SimCloudManager) {\n      log.info(((SimCloudManager) cloudManager).dumpClusterState(true));\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simDeleteAllCollections();\n      ((SimCloudManager) cloudManager).simResetOpCounts();\n    } else {\n      cluster.deleteAllCollections();\n    }\n    cloudManager.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cloudManager.getTimeSource().sleep(5000);\n    listenerEvents.clear();\n    listenerCreated = new CountDownLatch(1);\n    finished = new CountDownLatch(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d80c1ad9241ae005a167d7ee8ac473601b0e57c","date":1559036097,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#restoreDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#restoreDefaults().mjava","sourceNew":"  @After\n  public void restoreDefaults() throws Exception {\n    if (!realCluster) {\n      log.info(((SimCloudManager) cloudManager).dumpClusterState(true));\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simDeleteAllCollections();\n      ((SimCloudManager) cloudManager).simClearSystemCollection();\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simResetLeaderThrottles();\n      ((SimCloudManager) cloudManager).simRestartOverseer(null);\n      cloudManager.getTimeSource().sleep(500);\n      ((SimCloudManager) cloudManager).simResetOpCounts();\n    } else {\n      cluster.deleteAllCollections();\n    }\n    cloudManager.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cloudManager.getTimeSource().sleep(5000);\n    listenerEvents.clear();\n    listenerCreated = new CountDownLatch(1);\n    finished = new CountDownLatch(1);\n  }\n\n","sourceOld":"  @After\n  public void restoreDefaults() throws Exception {\n    if (cloudManager instanceof SimCloudManager) {\n      log.info(((SimCloudManager) cloudManager).dumpClusterState(true));\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simDeleteAllCollections();\n      ((SimCloudManager) cloudManager).simClearSystemCollection();\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simResetLeaderThrottles();\n      ((SimCloudManager) cloudManager).simRestartOverseer(null);\n      cloudManager.getTimeSource().sleep(500);\n      ((SimCloudManager) cloudManager).simResetOpCounts();\n    } else {\n      cluster.deleteAllCollections();\n    }\n    cloudManager.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cloudManager.getTimeSource().sleep(5000);\n    listenerEvents.clear();\n    listenerCreated = new CountDownLatch(1);\n    finished = new CountDownLatch(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#restoreDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#restoreDefaults().mjava","sourceNew":"  @After\n  public void restoreDefaults() throws Exception {\n    if (!realCluster) {\n      if (log.isInfoEnabled()) {\n        log.info(((SimCloudManager) cloudManager).dumpClusterState(true));\n      }\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simDeleteAllCollections();\n      ((SimCloudManager) cloudManager).simClearSystemCollection();\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simResetLeaderThrottles();\n      ((SimCloudManager) cloudManager).simRestartOverseer(null);\n      cloudManager.getTimeSource().sleep(500);\n      ((SimCloudManager) cloudManager).simResetOpCounts();\n    } else {\n      cluster.deleteAllCollections();\n    }\n    cloudManager.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cloudManager.getTimeSource().sleep(5000);\n    listenerEvents.clear();\n    listenerCreated = new CountDownLatch(1);\n    finished = new CountDownLatch(1);\n  }\n\n","sourceOld":"  @After\n  public void restoreDefaults() throws Exception {\n    if (!realCluster) {\n      log.info(((SimCloudManager) cloudManager).dumpClusterState(true));\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simDeleteAllCollections();\n      ((SimCloudManager) cloudManager).simClearSystemCollection();\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simResetLeaderThrottles();\n      ((SimCloudManager) cloudManager).simRestartOverseer(null);\n      cloudManager.getTimeSource().sleep(500);\n      ((SimCloudManager) cloudManager).simResetOpCounts();\n    } else {\n      cluster.deleteAllCollections();\n    }\n    cloudManager.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cloudManager.getTimeSource().sleep(5000);\n    listenerEvents.clear();\n    listenerCreated = new CountDownLatch(1);\n    finished = new CountDownLatch(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#restoreDefaults().mjava","sourceNew":null,"sourceOld":"  @After\n  public void restoreDefaults() throws Exception {\n    if (!realCluster) {\n      if (log.isInfoEnabled()) {\n        log.info(((SimCloudManager) cloudManager).dumpClusterState(true));\n      }\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simDeleteAllCollections();\n      ((SimCloudManager) cloudManager).simClearSystemCollection();\n      ((SimCloudManager) cloudManager).getSimClusterStateProvider().simResetLeaderThrottles();\n      ((SimCloudManager) cloudManager).simRestartOverseer(null);\n      cloudManager.getTimeSource().sleep(500);\n      ((SimCloudManager) cloudManager).simResetOpCounts();\n    } else {\n      cluster.deleteAllCollections();\n    }\n    cloudManager.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cloudManager.getTimeSource().sleep(5000);\n    listenerEvents.clear();\n    listenerCreated = new CountDownLatch(1);\n    finished = new CountDownLatch(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"3f504512a03d978990cbff30db0522b354e846db":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["2d80c1ad9241ae005a167d7ee8ac473601b0e57c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d80c1ad9241ae005a167d7ee8ac473601b0e57c":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["2d80c1ad9241ae005a167d7ee8ac473601b0e57c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"2d80c1ad9241ae005a167d7ee8ac473601b0e57c":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}