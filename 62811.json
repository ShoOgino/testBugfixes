{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/PathArgumentType#convert(ArgumentParser,Argument,String).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/PathArgumentType#convert(ArgumentParser,Argument,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Path convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {\n    Path file = new Path(value);\n    try {\n      fs = file.getFileSystem(conf);\n      if (verifyHasScheme && !isSystemIn(file)) {\n        verifyHasScheme(parser, file);\n      }        \n      if (verifyScheme != null && !isSystemIn(file)) {\n        verifyScheme(parser, file);\n      }        \n      if (verifyIsAbsolute && !isSystemIn(file)) {\n        verifyIsAbsolute(parser, file);\n      }\n      if (verifyExists && !isSystemIn(file)) {\n        verifyExists(parser, file);\n      }\n      if (verifyNotExists && !isSystemIn(file)) {\n        verifyNotExists(parser, file);\n      }\n      if (verifyIsFile && !isSystemIn(file)) {\n        verifyIsFile(parser, file);\n      }\n      if (verifyIsDirectory && !isSystemIn(file)) {\n        verifyIsDirectory(parser, file);\n      }\n      if (verifyCanRead && !isSystemIn(file)) {\n        verifyCanRead(parser, file);\n      }\n      if (verifyCanWrite && !isSystemIn(file)) {\n        verifyCanWrite(parser, file);\n      }\n      if (verifyCanWriteParent && !isSystemIn(file)) {\n        verifyCanWriteParent(parser, file);\n      }\n      if (verifyCanExecute && !isSystemIn(file)) {\n        verifyCanExecute(parser, file);\n      }\n    } catch (IOException e) {\n      throw new ArgumentParserException(e, parser);\n    }\n    return file;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/PathArgumentType#convert(ArgumentParser,Argument,String).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/PathArgumentType#convert(ArgumentParser,Argument,String).mjava","sourceNew":"  @Override\n  public Path convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {\n    Path file = new Path(value);\n    try {\n      fs = file.getFileSystem(conf);\n      if (verifyHasScheme && !isSystemIn(file)) {\n        verifyHasScheme(parser, file);\n      }        \n      if (verifyScheme != null && !isSystemIn(file)) {\n        verifyScheme(parser, file);\n      }        \n      if (verifyIsAbsolute && !isSystemIn(file)) {\n        verifyIsAbsolute(parser, file);\n      }\n      if (verifyExists && !isSystemIn(file)) {\n        verifyExists(parser, file);\n      }\n      if (verifyNotExists && !isSystemIn(file)) {\n        verifyNotExists(parser, file);\n      }\n      if (verifyIsFile && !isSystemIn(file)) {\n        verifyIsFile(parser, file);\n      }\n      if (verifyIsDirectory && !isSystemIn(file)) {\n        verifyIsDirectory(parser, file);\n      }\n      if (verifyCanRead && !isSystemIn(file)) {\n        verifyCanRead(parser, file);\n      }\n      if (verifyCanWrite && !isSystemIn(file)) {\n        verifyCanWrite(parser, file);\n      }\n      if (verifyCanWriteParent && !isSystemIn(file)) {\n        verifyCanWriteParent(parser, file);\n      }\n      if (verifyCanExecute && !isSystemIn(file)) {\n        verifyCanExecute(parser, file);\n      }\n    } catch (IOException e) {\n      throw new ArgumentParserException(e, parser);\n    }\n    return file;\n  }\n\n","sourceOld":"  @Override\n  public Path convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {\n    Path file = new Path(value);\n    try {\n      fs = file.getFileSystem(conf);\n      if (verifyHasScheme && !isSystemIn(file)) {\n        verifyHasScheme(parser, file);\n      }        \n      if (verifyScheme != null && !isSystemIn(file)) {\n        verifyScheme(parser, file);\n      }        \n      if (verifyIsAbsolute && !isSystemIn(file)) {\n        verifyIsAbsolute(parser, file);\n      }\n      if (verifyExists && !isSystemIn(file)) {\n        verifyExists(parser, file);\n      }\n      if (verifyNotExists && !isSystemIn(file)) {\n        verifyNotExists(parser, file);\n      }\n      if (verifyIsFile && !isSystemIn(file)) {\n        verifyIsFile(parser, file);\n      }\n      if (verifyIsDirectory && !isSystemIn(file)) {\n        verifyIsDirectory(parser, file);\n      }\n      if (verifyCanRead && !isSystemIn(file)) {\n        verifyCanRead(parser, file);\n      }\n      if (verifyCanWrite && !isSystemIn(file)) {\n        verifyCanWrite(parser, file);\n      }\n      if (verifyCanWriteParent && !isSystemIn(file)) {\n        verifyCanWriteParent(parser, file);\n      }\n      if (verifyCanExecute && !isSystemIn(file)) {\n        verifyCanExecute(parser, file);\n      }\n    } catch (IOException e) {\n      throw new ArgumentParserException(e, parser);\n    }\n    return file;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}