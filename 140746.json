{"path":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","commits":[{"id":"167133992e7b384ce97f83ddb1dd2ddd09daf7aa","date":1420315776,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \"}\"),\n          tests);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7280772020b860cd9a473ed847c5b79251a850d7","date":1489283281,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = randomScoreMode();\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c939830c5ef00597037daf5dde07e64e5df61e2a","date":1497546065,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\") | fieldName.equalsIgnoreCase(\"pbbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = randomScoreMode();\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = randomScoreMode();\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed602796f18796570ef57efb019278af50cbba92","date":1497547748,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && isBBoxField(fieldName)) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = randomScoreMode();\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\") | fieldName.equalsIgnoreCase(\"pbbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = randomScoreMode();\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && isBBoxField(fieldName)) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = randomScoreMode();\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = randomScoreMode();\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && isBBoxField(fieldName)) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = randomScoreMode();\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = randomScoreMode();\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7280772020b860cd9a473ed847c5b79251a850d7":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c939830c5ef00597037daf5dde07e64e5df61e2a":["7280772020b860cd9a473ed847c5b79251a850d7"],"28288370235ed02234a64753cdbf0c6ec096304a":["7280772020b860cd9a473ed847c5b79251a850d7","ed602796f18796570ef57efb019278af50cbba92"],"ed602796f18796570ef57efb019278af50cbba92":["c939830c5ef00597037daf5dde07e64e5df61e2a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7280772020b860cd9a473ed847c5b79251a850d7","ed602796f18796570ef57efb019278af50cbba92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"7280772020b860cd9a473ed847c5b79251a850d7":["c939830c5ef00597037daf5dde07e64e5df61e2a","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["7280772020b860cd9a473ed847c5b79251a850d7"],"c939830c5ef00597037daf5dde07e64e5df61e2a":["ed602796f18796570ef57efb019278af50cbba92"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ed602796f18796570ef57efb019278af50cbba92":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}