{"path":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testKeepAllDocsAcrossMerges().mjava","commits":[{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testKeepAllDocsAcrossMerges().mjava","pathOld":"/dev/null","sourceNew":"  public void testKeepAllDocsAcrossMerges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    indexWriterConfig.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n        () -> new MatchAllDocsQuery(),\n        indexWriterConfig.getMergePolicy()));\n    indexWriterConfig.setSoftDeletesField(\"soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n\n    writer.commit();\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n\n    writer.commit();\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"soft_delete\", 1)); // already deleted\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(0, reader.numDocs());\n    assertEquals(3, reader.maxDoc());\n    assertEquals(0, writer.numDocs());\n    assertEquals(3, writer.maxDoc());\n    assertEquals(3, reader.leaves().size());\n    reader.close();\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    assertEquals(0, reader.numDocs());\n    assertEquals(3, reader.maxDoc());\n    assertEquals(0, writer.numDocs());\n    assertEquals(3, writer.maxDoc());\n    assertEquals(1, reader.leaves().size());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50ad3cc363b18d0e65570df1a669e05977ca24ca","date":1522923821,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testKeepAllDocsAcrossMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testKeepAllDocsAcrossMerges().mjava","sourceNew":"  public void testKeepAllDocsAcrossMerges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    indexWriterConfig.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n        () -> new MatchAllDocsQuery(),\n        new LogDocMergePolicy()));\n    indexWriterConfig.setSoftDeletesField(\"soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n\n    writer.commit();\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n\n    writer.commit();\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"soft_delete\", 1)); // already deleted\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(0, reader.numDocs());\n    assertEquals(3, reader.maxDoc());\n    assertEquals(0, writer.numDocs());\n    assertEquals(3, writer.maxDoc());\n    assertEquals(3, reader.leaves().size());\n    reader.close();\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    assertEquals(0, reader.numDocs());\n    assertEquals(3, reader.maxDoc());\n    assertEquals(0, writer.numDocs());\n    assertEquals(3, writer.maxDoc());\n    assertEquals(1, reader.leaves().size());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testKeepAllDocsAcrossMerges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    indexWriterConfig.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n        () -> new MatchAllDocsQuery(),\n        indexWriterConfig.getMergePolicy()));\n    indexWriterConfig.setSoftDeletesField(\"soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n\n    writer.commit();\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n\n    writer.commit();\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"soft_delete\", 1)); // already deleted\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(0, reader.numDocs());\n    assertEquals(3, reader.maxDoc());\n    assertEquals(0, writer.numDocs());\n    assertEquals(3, writer.maxDoc());\n    assertEquals(3, reader.leaves().size());\n    reader.close();\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    assertEquals(0, reader.numDocs());\n    assertEquals(3, reader.maxDoc());\n    assertEquals(0, writer.numDocs());\n    assertEquals(3, writer.maxDoc());\n    assertEquals(1, reader.leaves().size());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testKeepAllDocsAcrossMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testKeepAllDocsAcrossMerges().mjava","sourceNew":"  public void testKeepAllDocsAcrossMerges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    indexWriterConfig.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n        () -> new MatchAllDocsQuery(),\n        new LogDocMergePolicy()));\n    indexWriterConfig.setSoftDeletesField(\"soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n\n    writer.commit();\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n\n    writer.commit();\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"soft_delete\", 1)); // already deleted\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(0, reader.numDocs());\n    assertEquals(3, reader.maxDoc());\n    assertEquals(0, writer.getDocStats().numDocs);\n    assertEquals(3, writer.getDocStats().maxDoc);\n    assertEquals(3, reader.leaves().size());\n    reader.close();\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    assertEquals(0, reader.numDocs());\n    assertEquals(3, reader.maxDoc());\n    assertEquals(0, writer.getDocStats().numDocs);\n    assertEquals(3, writer.getDocStats().maxDoc);\n    assertEquals(1, reader.leaves().size());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testKeepAllDocsAcrossMerges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    indexWriterConfig.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n        () -> new MatchAllDocsQuery(),\n        new LogDocMergePolicy()));\n    indexWriterConfig.setSoftDeletesField(\"soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n\n    writer.commit();\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n\n    writer.commit();\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"soft_delete\", 1)); // already deleted\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"soft_delete\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(0, reader.numDocs());\n    assertEquals(3, reader.maxDoc());\n    assertEquals(0, writer.numDocs());\n    assertEquals(3, writer.maxDoc());\n    assertEquals(3, reader.leaves().size());\n    reader.close();\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    assertEquals(0, reader.numDocs());\n    assertEquals(3, reader.maxDoc());\n    assertEquals(0, writer.numDocs());\n    assertEquals(3, writer.maxDoc());\n    assertEquals(1, reader.leaves().size());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"feb4029567b43f074ed7b6eb8fb126d355075dfd":["50ad3cc363b18d0e65570df1a669e05977ca24ca"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"50ad3cc363b18d0e65570df1a669e05977ca24ca":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["50ad3cc363b18d0e65570df1a669e05977ca24ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"50ad3cc363b18d0e65570df1a669e05977ca24ca":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}