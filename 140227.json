{"path":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#_benchmark(Lookup,Map[String,Integer],boolean,Bench).mjava","commits":[{"id":"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","date":1282571040,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#_benchmark(Lookup,Map[String,Integer],boolean,Bench).mjava","pathOld":"/dev/null","sourceNew":"  private void _benchmark(Lookup lookup, Map<String,Integer> ref, boolean estimate, Bench bench) throws Exception {\n    long start = System.currentTimeMillis();\n    lookup.build(getTFIT());\n    long buildTime = System.currentTimeMillis() - start;\n    TermFreqIterator tfit = getTFIT();\n    long elapsed = 0;\n    while (tfit.hasNext()) {\n      String key = tfit.next();\n      // take only the first part of the key\n      int len = key.length() > 4 ? key.length() / 3 : 2;\n      String prefix = key.substring(0, len);\n      start = System.nanoTime();\n      List<LookupResult> res = lookup.lookup(prefix, true, 10);\n      elapsed += System.nanoTime() - start;\n      assertTrue(res.size() > 0);\n      for (LookupResult lr : res) {\n        assertTrue(lr.key.startsWith(prefix));\n      }\n      if (ref != null) { // verify the counts\n        Integer Cnt = ref.get(key);\n        if (Cnt == null) { // first pass\n          ref.put(key, res.size());\n        } else {\n          assertEquals(key + \", prefix: \" + prefix, Cnt.intValue(), res.size());\n        }\n      }\n    }\n    if (estimate) {\n      RamUsageEstimator rue = new RamUsageEstimator();\n      long size = rue.estimateRamUsage(lookup);\n      System.err.println(lookup.getClass().getSimpleName() + \" - size=\" + size);\n    }\n    if (bench != null) {\n      bench.buildTime += buildTime;\n      bench.lookupTime +=  elapsed;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#_benchmark(Lookup,Map[String,Integer],boolean,Bench).mjava","pathOld":"/dev/null","sourceNew":"  private void _benchmark(Lookup lookup, Map<String,Integer> ref, boolean estimate, Bench bench) throws Exception {\n    long start = System.currentTimeMillis();\n    lookup.build(getTFIT());\n    long buildTime = System.currentTimeMillis() - start;\n    TermFreqIterator tfit = getTFIT();\n    long elapsed = 0;\n    while (tfit.hasNext()) {\n      String key = tfit.next();\n      // take only the first part of the key\n      int len = key.length() > 4 ? key.length() / 3 : 2;\n      String prefix = key.substring(0, len);\n      start = System.nanoTime();\n      List<LookupResult> res = lookup.lookup(prefix, true, 10);\n      elapsed += System.nanoTime() - start;\n      assertTrue(res.size() > 0);\n      for (LookupResult lr : res) {\n        assertTrue(lr.key.startsWith(prefix));\n      }\n      if (ref != null) { // verify the counts\n        Integer Cnt = ref.get(key);\n        if (Cnt == null) { // first pass\n          ref.put(key, res.size());\n        } else {\n          assertEquals(key + \", prefix: \" + prefix, Cnt.intValue(), res.size());\n        }\n      }\n    }\n    if (estimate) {\n      RamUsageEstimator rue = new RamUsageEstimator();\n      long size = rue.estimateRamUsage(lookup);\n      System.err.println(lookup.getClass().getSimpleName() + \" - size=\" + size);\n    }\n    if (bench != null) {\n      bench.buildTime += buildTime;\n      bench.lookupTime +=  elapsed;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce3d278891029d7b03fa19c78ad8a08bf75d13c","date":1301656390,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#singleBenchmark(Class[#-extends-Lookup],Bench).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#_benchmark(Lookup,Map[String,Integer],boolean,Bench).mjava","sourceNew":"  private Lookup singleBenchmark(Class<? extends Lookup> cls, Bench bench) throws Exception {\n    Lookup lookup = cls.newInstance();\n\n    long start = System.currentTimeMillis();\n    lookup.build(getTFIT());\n    long buildTime = System.currentTimeMillis() - start;\n\n    TermFreqIterator tfit = getTFIT();\n    long elapsed = 0;\n    while (tfit.hasNext()) {\n      String key = tfit.next();\n      // take only the first part of the key\n      int len = key.length() > 4 ? key.length() / 3 : 2;\n      String prefix = key.substring(0, len);\n      start = System.nanoTime();\n      List<LookupResult> res = lookup.lookup(prefix, true, 10);\n      elapsed += System.nanoTime() - start;\n      assertTrue(res.size() > 0);\n      for (LookupResult lr : res) {\n        assertTrue(lr.key.startsWith(prefix));\n      }\n    }\n\n    if (bench != null) {\n      bench.buildTime += buildTime;\n      bench.lookupTime +=  elapsed;\n    }\n\n    return lookup;\n  }\n\n","sourceOld":"  private void _benchmark(Lookup lookup, Map<String,Integer> ref, boolean estimate, Bench bench) throws Exception {\n    long start = System.currentTimeMillis();\n    lookup.build(getTFIT());\n    long buildTime = System.currentTimeMillis() - start;\n    TermFreqIterator tfit = getTFIT();\n    long elapsed = 0;\n    while (tfit.hasNext()) {\n      String key = tfit.next();\n      // take only the first part of the key\n      int len = key.length() > 4 ? key.length() / 3 : 2;\n      String prefix = key.substring(0, len);\n      start = System.nanoTime();\n      List<LookupResult> res = lookup.lookup(prefix, true, 10);\n      elapsed += System.nanoTime() - start;\n      assertTrue(res.size() > 0);\n      for (LookupResult lr : res) {\n        assertTrue(lr.key.startsWith(prefix));\n      }\n      if (ref != null) { // verify the counts\n        Integer Cnt = ref.get(key);\n        if (Cnt == null) { // first pass\n          ref.put(key, res.size());\n        } else {\n          assertEquals(key + \", prefix: \" + prefix, Cnt.intValue(), res.size());\n        }\n      }\n    }\n    if (estimate) {\n      RamUsageEstimator rue = new RamUsageEstimator();\n      long size = rue.estimateRamUsage(lookup);\n      System.err.println(lookup.getClass().getSimpleName() + \" - size=\" + size);\n    }\n    if (bench != null) {\n      bench.buildTime += buildTime;\n      bench.lookupTime +=  elapsed;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#singleBenchmark(Class[#-extends-Lookup],Bench).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#_benchmark(Lookup,Map[String,Integer],boolean,Bench).mjava","sourceNew":"  private Lookup singleBenchmark(Class<? extends Lookup> cls, Bench bench) throws Exception {\n    Lookup lookup = cls.newInstance();\n\n    long start = System.currentTimeMillis();\n    lookup.build(getTFIT());\n    long buildTime = System.currentTimeMillis() - start;\n\n    TermFreqIterator tfit = getTFIT();\n    long elapsed = 0;\n    while (tfit.hasNext()) {\n      String key = tfit.next();\n      // take only the first part of the key\n      int len = key.length() > 4 ? key.length() / 3 : 2;\n      String prefix = key.substring(0, len);\n      start = System.nanoTime();\n      List<LookupResult> res = lookup.lookup(prefix, true, 10);\n      elapsed += System.nanoTime() - start;\n      assertTrue(res.size() > 0);\n      for (LookupResult lr : res) {\n        assertTrue(lr.key.startsWith(prefix));\n      }\n    }\n\n    if (bench != null) {\n      bench.buildTime += buildTime;\n      bench.lookupTime +=  elapsed;\n    }\n\n    return lookup;\n  }\n\n","sourceOld":"  private void _benchmark(Lookup lookup, Map<String,Integer> ref, boolean estimate, Bench bench) throws Exception {\n    long start = System.currentTimeMillis();\n    lookup.build(getTFIT());\n    long buildTime = System.currentTimeMillis() - start;\n    TermFreqIterator tfit = getTFIT();\n    long elapsed = 0;\n    while (tfit.hasNext()) {\n      String key = tfit.next();\n      // take only the first part of the key\n      int len = key.length() > 4 ? key.length() / 3 : 2;\n      String prefix = key.substring(0, len);\n      start = System.nanoTime();\n      List<LookupResult> res = lookup.lookup(prefix, true, 10);\n      elapsed += System.nanoTime() - start;\n      assertTrue(res.size() > 0);\n      for (LookupResult lr : res) {\n        assertTrue(lr.key.startsWith(prefix));\n      }\n      if (ref != null) { // verify the counts\n        Integer Cnt = ref.get(key);\n        if (Cnt == null) { // first pass\n          ref.put(key, res.size());\n        } else {\n          assertEquals(key + \", prefix: \" + prefix, Cnt.intValue(), res.size());\n        }\n      }\n    }\n    if (estimate) {\n      RamUsageEstimator rue = new RamUsageEstimator();\n      long size = rue.estimateRamUsage(lookup);\n      System.err.println(lookup.getClass().getSimpleName() + \" - size=\" + size);\n    }\n    if (bench != null) {\n      bench.buildTime += buildTime;\n      bench.lookupTime +=  elapsed;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#_benchmark(Lookup,Map[String,Integer],boolean,Bench).mjava","sourceNew":null,"sourceOld":"  private void _benchmark(Lookup lookup, Map<String,Integer> ref, boolean estimate, Bench bench) throws Exception {\n    long start = System.currentTimeMillis();\n    lookup.build(getTFIT());\n    long buildTime = System.currentTimeMillis() - start;\n    TermFreqIterator tfit = getTFIT();\n    long elapsed = 0;\n    while (tfit.hasNext()) {\n      String key = tfit.next();\n      // take only the first part of the key\n      int len = key.length() > 4 ? key.length() / 3 : 2;\n      String prefix = key.substring(0, len);\n      start = System.nanoTime();\n      List<LookupResult> res = lookup.lookup(prefix, true, 10);\n      elapsed += System.nanoTime() - start;\n      assertTrue(res.size() > 0);\n      for (LookupResult lr : res) {\n        assertTrue(lr.key.startsWith(prefix));\n      }\n      if (ref != null) { // verify the counts\n        Integer Cnt = ref.get(key);\n        if (Cnt == null) { // first pass\n          ref.put(key, res.size());\n        } else {\n          assertEquals(key + \", prefix: \" + prefix, Cnt.intValue(), res.size());\n        }\n      }\n    }\n    if (estimate) {\n      RamUsageEstimator rue = new RamUsageEstimator();\n      long size = rue.estimateRamUsage(lookup);\n      System.err.println(lookup.getClass().getSimpleName() + \" - size=\" + size);\n    }\n    if (bench != null) {\n      bench.buildTime += buildTime;\n      bench.lookupTime +=  elapsed;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#_benchmark(Lookup,Map[String,Integer],boolean,Bench).mjava","sourceNew":null,"sourceOld":"  private void _benchmark(Lookup lookup, Map<String,Integer> ref, boolean estimate, Bench bench) throws Exception {\n    long start = System.currentTimeMillis();\n    lookup.build(getTFIT());\n    long buildTime = System.currentTimeMillis() - start;\n    TermFreqIterator tfit = getTFIT();\n    long elapsed = 0;\n    while (tfit.hasNext()) {\n      String key = tfit.next();\n      // take only the first part of the key\n      int len = key.length() > 4 ? key.length() / 3 : 2;\n      String prefix = key.substring(0, len);\n      start = System.nanoTime();\n      List<LookupResult> res = lookup.lookup(prefix, true, 10);\n      elapsed += System.nanoTime() - start;\n      assertTrue(res.size() > 0);\n      for (LookupResult lr : res) {\n        assertTrue(lr.key.startsWith(prefix));\n      }\n      if (ref != null) { // verify the counts\n        Integer Cnt = ref.get(key);\n        if (Cnt == null) { // first pass\n          ref.put(key, res.size());\n        } else {\n          assertEquals(key + \", prefix: \" + prefix, Cnt.intValue(), res.size());\n        }\n      }\n    }\n    if (estimate) {\n      RamUsageEstimator rue = new RamUsageEstimator();\n      long size = rue.estimateRamUsage(lookup);\n      System.err.println(lookup.getClass().getSimpleName() + \" - size=\" + size);\n    }\n    if (bench != null) {\n      bench.buildTime += buildTime;\n      bench.lookupTime +=  elapsed;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","0ce3d278891029d7b03fa19c78ad8a08bf75d13c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","0ce3d278891029d7b03fa19c78ad8a08bf75d13c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"45669a651c970812a680841b97a77cce06af559f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","0ce3d278891029d7b03fa19c78ad8a08bf75d13c"],"0ce3d278891029d7b03fa19c78ad8a08bf75d13c":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ce3d278891029d7b03fa19c78ad8a08bf75d13c"]},"commit2Childs":{"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","0ce3d278891029d7b03fa19c78ad8a08bf75d13c"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"0ce3d278891029d7b03fa19c78ad8a08bf75d13c":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}