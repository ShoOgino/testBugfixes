{"path":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#add(String,SolrParams,Collection[SolrInputDocument]).mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#add(String,SolrParams,Collection[SolrInputDocument]).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrQueryResponse add(final String chain, SolrParams requestParams, final Collection<SolrInputDocument> docs) throws IOException {\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain pc = core.getUpdateProcessingChain(chain);\n    assertNotNull(\"No Chain named: \" + chain, pc);\n    \n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    \n    if(requestParams == null) {\n      requestParams = new ModifiableSolrParams();\n    }\n    \n    SolrQueryRequest req = new LocalSolrQueryRequest(core, requestParams);\n    try {\n      UpdateRequestProcessor processor = pc.createProcessor(req, rsp);\n      for(SolrInputDocument doc:docs) {\n        AddUpdateCommand cmd = new AddUpdateCommand(req);\n        cmd.solrDoc = doc;\n        processor.processAdd(cmd);\n      }\n      processor.finish();\n      \n    } finally {\n      req.close();\n    }\n    return rsp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6","date":1487775028,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#add(String,SolrParams,Collection[SolrInputDocument]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#add(String,SolrParams,Collection[SolrInputDocument]).mjava","sourceNew":"  protected SolrQueryResponse add(final String chain, SolrParams requestParams, final Collection<SolrInputDocument> docs) throws IOException {\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain pc = core.getUpdateProcessingChain(chain);\n    assertNotNull(\"No Chain named: \" + chain, pc);\n    \n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    \n    if(requestParams == null) {\n      requestParams = new ModifiableSolrParams();\n    }\n    \n    SolrQueryRequest req = new LocalSolrQueryRequest(core, requestParams);\n    UpdateRequestProcessor processor = null;\n    try {\n      processor = pc.createProcessor(req, rsp);\n      for(SolrInputDocument doc:docs) {\n        AddUpdateCommand cmd = new AddUpdateCommand(req);\n        cmd.solrDoc = doc;\n        processor.processAdd(cmd);\n      }\n      processor.finish();\n      \n    } finally {\n      IOUtils.closeQuietly(processor);\n      req.close();\n    }\n    return rsp;\n  }\n\n","sourceOld":"  protected SolrQueryResponse add(final String chain, SolrParams requestParams, final Collection<SolrInputDocument> docs) throws IOException {\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain pc = core.getUpdateProcessingChain(chain);\n    assertNotNull(\"No Chain named: \" + chain, pc);\n    \n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    \n    if(requestParams == null) {\n      requestParams = new ModifiableSolrParams();\n    }\n    \n    SolrQueryRequest req = new LocalSolrQueryRequest(core, requestParams);\n    try {\n      UpdateRequestProcessor processor = pc.createProcessor(req, rsp);\n      for(SolrInputDocument doc:docs) {\n        AddUpdateCommand cmd = new AddUpdateCommand(req);\n        cmd.solrDoc = doc;\n        processor.processAdd(cmd);\n      }\n      processor.finish();\n      \n    } finally {\n      req.close();\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6"],"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}