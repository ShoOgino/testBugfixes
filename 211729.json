{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeBinary(BytesRef).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeBinary(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * binary term.\n   */\n  public static Automaton makeBinary(BytesRef term) {\n    Automaton a = new Automaton();\n    int lastState = a.createState();\n    for (int i=0;i<term.length;i++) {\n      int state = a.createState();\n      int label = term.bytes[term.offset+i] & 0xff;\n      a.addTransition(lastState, state, label);\n      lastState = state;\n    }\n\n    a.setAccept(lastState, true);\n    a.finishState();\n\n    assert a.isDeterministic();\n    assert Operations.hasDeadStates(a) == false;\n\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeBinary(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * binary term.\n   */\n  public static Automaton makeBinary(BytesRef term) {\n    Automaton a = new Automaton();\n    int lastState = a.createState();\n    for (int i=0;i<term.length;i++) {\n      int state = a.createState();\n      int label = term.bytes[term.offset+i] & 0xff;\n      a.addTransition(lastState, state, label);\n      lastState = state;\n    }\n\n    a.setAccept(lastState, true);\n    a.finishState();\n\n    assert a.isDeterministic();\n    assert Operations.hasDeadStates(a) == false;\n\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}