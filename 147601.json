{"path":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      final Random rnd = newRandom();\n\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50; i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      final Random rnd = newRandom();\n\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50; i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      final Random rnd = newRandom();\n\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      final Random rnd = newRandom();\n\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50; i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      final Random rnd = newRandom();\n\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      final Random rnd = newRandom();\n\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = (TEST_NIGHTLY ? 50 : 10) * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = (TEST_NIGHTLY ? 50 : 10) * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = (TEST_NIGHTLY ? 50 : 10) * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":["af549b45614d869371e17e0b5b4ca47535d552c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = (TEST_NIGHTLY ? 50 : 10) * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"144475829aa689d13ad3bf9cf0bc5c6f2b1afb31","date":1318290920,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, 1.0e-6f);\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":["af549b45614d869371e17e0b5b4ca47535d552c0","d003d57a476a4e85db6c82f68f156017e5e91e2d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d003d57a476a4e85db6c82f68f156017e5e91e2d","date":1318299106,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, CheckHits.explainToleranceDelta(score, otherScore));\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, 1.0e-6f);\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":["144475829aa689d13ad3bf9cf0bc5c6f2b1afb31"],"bugIntro":["af549b45614d869371e17e0b5b4ca47535d552c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, CheckHits.explainToleranceDelta(score, otherScore));\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, CheckHits.explainToleranceDelta(score, otherScore));\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["c084e47df29de3330311d69dabf515ceaa989512"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["53a31399f2471493d67b19a95c028a74e0113b6a"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["1f653cfcf159baeaafe5d01682a911e95bba4012","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d003d57a476a4e85db6c82f68f156017e5e91e2d"],"d003d57a476a4e85db6c82f68f156017e5e91e2d":["144475829aa689d13ad3bf9cf0bc5c6f2b1afb31"],"144475829aa689d13ad3bf9cf0bc5c6f2b1afb31":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"2aafd88401639311b0404e67c94e829e123a0e45":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","53a31399f2471493d67b19a95c028a74e0113b6a"],"c084e47df29de3330311d69dabf515ceaa989512":["2aafd88401639311b0404e67c94e829e123a0e45"],"53a31399f2471493d67b19a95c028a74e0113b6a":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"79c2cb24929f2649a8875fb629086171f914d5ce":["53a31399f2471493d67b19a95c028a74e0113b6a","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","144475829aa689d13ad3bf9cf0bc5c6f2b1afb31","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f83af14a2a8131b14d7aee6274c740334e0363d3","79c2cb24929f2649a8875fb629086171f914d5ce"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d003d57a476a4e85db6c82f68f156017e5e91e2d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"144475829aa689d13ad3bf9cf0bc5c6f2b1afb31":["d003d57a476a4e85db6c82f68f156017e5e91e2d"],"2aafd88401639311b0404e67c94e829e123a0e45":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"c084e47df29de3330311d69dabf515ceaa989512":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"53a31399f2471493d67b19a95c028a74e0113b6a":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","79c2cb24929f2649a8875fb629086171f914d5ce"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2aafd88401639311b0404e67c94e829e123a0e45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}