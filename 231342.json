{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof IntPointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof IntPointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof IntPointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof IntPointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    doTestIntPointFieldMultiValuedRangeFacet(\"number_p_i_mv_dv\", \"number_p_i_mv\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof IntPointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof IntPointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    doTestIntPointFieldMultiValuedRangeFacet(\"number_p_i_mv_dv\", \"number_p_i_mv\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof IntPointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof IntPointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof IntPointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof IntPointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    doTestIntPointFieldMultiValuedRangeFacet(\"number_p_i_mv_dv\", \"number_p_i_mv\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    doTestIntPointFieldMultiValuedRangeFacet(\"number_p_i_mv_dv\", \"number_p_i_mv\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof IntPointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof IntPointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10'][.='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Integer> values;\n    List<PosVal<Integer>> sortedValues;\n    int max;\n    do {\n      values = getRandomInts(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Integer.MAX_VALUE - numValues); // leave room for rounding\n    int min = sortedValues.get(0).val;\n    int gap = (int)(((long)(max + numValues) - (long)min) / (long)numBuckets);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    int minBucketVal = min;\n    for (PosVal<Integer> value : sortedValues) {\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    doTestIntPointFieldMultiValuedRangeFacet(\"number_p_i_mv_dv\", \"number_p_i_mv\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Integer> values;\n    List<PosVal<Integer>> sortedValues;\n    int max;\n    do {\n      values = getRandomInts(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Integer.MAX_VALUE - numValues); // leave room for rounding\n    int min = sortedValues.get(0).val;\n    int gap = (int)(((long)(max + numValues) - (long)min) / (long)numBuckets);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    int minBucketVal = min;\n    for (PosVal<Integer> value : sortedValues) {\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    doTestIntPointFieldMultiValuedRangeFacet(\"number_p_i_mv_dv\", \"number_p_i_mv\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIntPointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Integer> values;\n    List<PosVal<Integer>> sortedValues;\n    int max;\n    do {\n      values = getRandomInts(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Integer.MAX_VALUE - numValues); // leave room for rounding\n    int min = sortedValues.get(0).val;\n    int gap = (int)(((long)(max + numValues) - (long)min) / (long)numBuckets);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    int minBucketVal = min;\n    for (PosVal<Integer> value : sortedValues) {\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    doTestIntPointFieldMultiValuedRangeFacet(\"number_p_i_mv_dv\", \"number_p_i_mv\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["46dc9ac8b3e748407baaef82453138ff3974480c","744b111b17d15d490a648eb021bfa240e7f11556"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["897b06b1364bd1f658a8be7591e43f0851458e7f","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"744b111b17d15d490a648eb021bfa240e7f11556":["46dc9ac8b3e748407baaef82453138ff3974480c"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["897b06b1364bd1f658a8be7591e43f0851458e7f","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac5a6354a5800dd1ade225010d614eeb8acf9152"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","ac5a6354a5800dd1ade225010d614eeb8acf9152","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"46dc9ac8b3e748407baaef82453138ff3974480c":["022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}