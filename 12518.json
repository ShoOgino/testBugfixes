{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void matchHits (Searcher searcher, Sort sort)\n  throws IOException {\n      // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, 1000).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n        Map resultMap = new TreeMap();\n        // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten\n        for(int hitid=0;hitid<hitsByRank.length; ++hitid) {\n            resultMap.put(\n                    Integer.valueOf(hitsByRank[hitid].doc),  // Key:   Lucene Document ID\n                    Integer.valueOf(hitid));\t\t\t\t// Value: Hits-Objekt Index\n        }\n        \n        // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search (query, null, 1000, sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n        // besides the sorting both sets of hits must be identical\n        for(int hitid=0;hitid<resultSort.length; ++hitid) {\n            Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID from sorted search\n            if(!resultMap.containsKey(idHitDate)) {\n                log(\"ID \"+idHitDate+\" not found. Possibliy a duplicate.\");\n            }\n            assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the Map from the rank-sorted search\n            // every hit must appear once in both result sets --> remove it from the Map.\n            // At the end the Map must be empty!\n            resultMap.remove(idHitDate);\n        }\n        if(resultMap.size()==0) {\n            // log(\"All hits matched\");\n        } else {\n        log(\"Couldn't match \"+resultMap.size()+\" hits.\");\n        }\n        assertEquals(resultMap.size(), 0);\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits (Searcher searcher, Sort sort)\n  throws IOException {\n      // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, 1000).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n        Map resultMap = new TreeMap();\n        // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten\n        for(int hitid=0;hitid<hitsByRank.length; ++hitid) {\n            resultMap.put(\n                    Integer.valueOf(hitsByRank[hitid].doc),  // Key:   Lucene Document ID\n                    Integer.valueOf(hitid));\t\t\t\t// Value: Hits-Objekt Index\n        }\n        \n        // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search (query, null, 1000, sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n        // besides the sorting both sets of hits must be identical\n        for(int hitid=0;hitid<resultSort.length; ++hitid) {\n            Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID from sorted search\n            if(!resultMap.containsKey(idHitDate)) {\n                log(\"ID \"+idHitDate+\" not found. Possibliy a duplicate.\");\n            }\n            assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the Map from the rank-sorted search\n            // every hit must appear once in both result sets --> remove it from the Map.\n            // At the end the Map must be empty!\n            resultMap.remove(idHitDate);\n        }\n        if(resultMap.size()==0) {\n            // log(\"All hits matched\");\n        } else {\n        log(\"Couldn't match \"+resultMap.size()+\" hits.\");\n        }\n        assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","sourceNew":null,"sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits (Searcher searcher, Sort sort)\n  throws IOException {\n      // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, 1000).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n        Map resultMap = new TreeMap();\n        // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten\n        for(int hitid=0;hitid<hitsByRank.length; ++hitid) {\n            resultMap.put(\n                    Integer.valueOf(hitsByRank[hitid].doc),  // Key:   Lucene Document ID\n                    Integer.valueOf(hitid));\t\t\t\t// Value: Hits-Objekt Index\n        }\n        \n        // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search (query, null, 1000, sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n        // besides the sorting both sets of hits must be identical\n        for(int hitid=0;hitid<resultSort.length; ++hitid) {\n            Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID from sorted search\n            if(!resultMap.containsKey(idHitDate)) {\n                log(\"ID \"+idHitDate+\" not found. Possibliy a duplicate.\");\n            }\n            assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the Map from the rank-sorted search\n            // every hit must appear once in both result sets --> remove it from the Map.\n            // At the end the Map must be empty!\n            resultMap.remove(idHitDate);\n        }\n        if(resultMap.size()==0) {\n            // log(\"All hits matched\");\n        } else {\n        log(\"Couldn't match \"+resultMap.size()+\" hits.\");\n        }\n        assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}