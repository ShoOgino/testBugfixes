{"path":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testNoMergePolicyFactoryConfig().mjava","commits":[{"id":"123a92224eeb71da2e73a3917082b9327a4fa598","date":1477461533,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testNoMergePolicyFactoryConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoMergePolicyFactoryConfig() throws Exception {\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    NoMergePolicy mergePolicy = assertAndCast(NoMergePolicy.class,\n        iwc.getMergePolicy());\n\n    assertCommitSomeNewDocs();\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 2);\n    deleteCore();\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(mergePolicy, iwc.getMergePolicy());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testNoMergePolicyFactoryConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoMergePolicyFactoryConfig() throws Exception {\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    NoMergePolicy mergePolicy = assertAndCast(NoMergePolicy.class,\n        iwc.getMergePolicy());\n\n    assertCommitSomeNewDocs();\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 2);\n    deleteCore();\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(mergePolicy, iwc.getMergePolicy());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testNoMergePolicyFactoryConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoMergePolicyFactoryConfig() throws Exception {\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    NoMergePolicy mergePolicy = assertAndCast(NoMergePolicy.class,\n        iwc.getMergePolicy());\n\n    assertCommitSomeNewDocs();\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 2);\n    deleteCore();\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(mergePolicy, iwc.getMergePolicy());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","date":1529965060,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testNoMergePolicyFactoryConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testNoMergePolicyFactoryConfig().mjava","sourceNew":"  public void testNoMergePolicyFactoryConfig() throws Exception {\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    NoMergePolicy mergePolicy = assertAndCast(NoMergePolicy.class,\n        iwc.getMergePolicy());\n\n    assertCommitSomeNewDocs();\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 2);\n    deleteCore();\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(mergePolicy, iwc.getMergePolicy());\n\n    UpdateHandler updater = h.getCore().getUpdateHandler();\n    SolrQueryRequest req = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = -1;\n    expectThrows(IllegalArgumentException.class, () -> {\n      updater.commit(cmtCmd);\n    });\n\n  }\n\n","sourceOld":"  public void testNoMergePolicyFactoryConfig() throws Exception {\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    NoMergePolicy mergePolicy = assertAndCast(NoMergePolicy.class,\n        iwc.getMergePolicy());\n\n    assertCommitSomeNewDocs();\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 2);\n    deleteCore();\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(mergePolicy, iwc.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testNoMergePolicyFactoryConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testNoMergePolicyFactoryConfig().mjava","sourceNew":"  public void testNoMergePolicyFactoryConfig() throws Exception {\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    NoMergePolicy mergePolicy = assertAndCast(NoMergePolicy.class,\n        iwc.getMergePolicy());\n\n    assertCommitSomeNewDocs();\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 2);\n    deleteCore();\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(mergePolicy, iwc.getMergePolicy());\n\n    UpdateHandler updater = h.getCore().getUpdateHandler();\n    SolrQueryRequest req = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = -1;\n    expectThrows(IllegalArgumentException.class, () -> {\n      updater.commit(cmtCmd);\n    });\n\n  }\n\n","sourceOld":"  public void testNoMergePolicyFactoryConfig() throws Exception {\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    NoMergePolicy mergePolicy = assertAndCast(NoMergePolicy.class,\n        iwc.getMergePolicy());\n\n    assertCommitSomeNewDocs();\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 2);\n    deleteCore();\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(mergePolicy, iwc.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testNoMergePolicyFactoryConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testNoMergePolicyFactoryConfig().mjava","sourceNew":"  public void testNoMergePolicyFactoryConfig() throws Exception {\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    NoMergePolicy mergePolicy = assertAndCast(NoMergePolicy.class,\n        iwc.getMergePolicy());\n\n    assertCommitSomeNewDocs();\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 2);\n    deleteCore();\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(mergePolicy, iwc.getMergePolicy());\n\n    UpdateHandler updater = h.getCore().getUpdateHandler();\n    SolrQueryRequest req = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = -1;\n    expectThrows(IllegalArgumentException.class, () -> {\n      updater.commit(cmtCmd);\n    });\n\n  }\n\n","sourceOld":"  public void testNoMergePolicyFactoryConfig() throws Exception {\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    NoMergePolicy mergePolicy = assertAndCast(NoMergePolicy.class,\n        iwc.getMergePolicy());\n\n    assertCommitSomeNewDocs();\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 2);\n    deleteCore();\n    initCore(\"solrconfig-nomergepolicyfactory.xml\",\"schema-minimal.xml\");\n    iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(mergePolicy, iwc.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b363b110592b02d7f488aff0dbe40a53d3ce81df","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"123a92224eeb71da2e73a3917082b9327a4fa598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","123a92224eeb71da2e73a3917082b9327a4fa598"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b363b110592b02d7f488aff0dbe40a53d3ce81df","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"123a92224eeb71da2e73a3917082b9327a4fa598":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["123a92224eeb71da2e73a3917082b9327a4fa598","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}