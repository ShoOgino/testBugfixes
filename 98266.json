{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedIntPointFieldsAtomicUpdates(String,String).mjava","commits":[{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedIntPointFieldsAtomicUpdates(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testMultiValuedIntPointFieldsAtomicUpdates(String field, String type) throws Exception {\n    assertU(adoc(sdoc(\"id\", \"1\", field, \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", 2))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", 1))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", ImmutableList.of(1, 2, 3)))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='3']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedIntPointFieldsAtomicUpdates(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testMultiValuedIntPointFieldsAtomicUpdates(String field, String type) throws Exception {\n    assertU(adoc(sdoc(\"id\", \"1\", field, \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", 2))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", 1))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", ImmutableList.of(1, 2, 3)))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='3']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedIntPointFieldsAtomicUpdates(String,String).mjava","sourceNew":null,"sourceOld":"  private void testMultiValuedIntPointFieldsAtomicUpdates(String field, String type) throws Exception {\n    assertU(adoc(sdoc(\"id\", \"1\", field, \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", 2))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", 1))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", ImmutableList.of(1, 2, 3)))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='3']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedIntPointFieldsAtomicUpdates(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testMultiValuedIntPointFieldsAtomicUpdates(String field, String type) throws Exception {\n    assertU(adoc(sdoc(\"id\", \"1\", field, \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", 2))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", 1))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", ImmutableList.of(1, 2, 3)))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='3']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedIntPointFieldsAtomicUpdates(String,String).mjava","sourceNew":null,"sourceOld":"  private void testMultiValuedIntPointFieldsAtomicUpdates(String field, String type) throws Exception {\n    assertU(adoc(sdoc(\"id\", \"1\", field, \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", 2))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", 1))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", ImmutableList.of(1, 2, 3)))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='3']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestMultiValuedPointFieldsAtomicUpdates(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedIntPointFieldsAtomicUpdates(String,String).mjava","sourceNew":"  private void doTestMultiValuedPointFieldsAtomicUpdates(String field, String type, String[] values) throws Exception {\n    assertEquals(3, values.length);\n    assertU(adoc(sdoc(\"id\", \"1\", field, String.valueOf(values[0]))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\" + values[0] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", values[1]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\" + values[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\" + values[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", values[0]))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\" + values[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", Arrays.asList(values)))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\" + values[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\" + values[1] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\" + values[2] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n    \n  }\n\n","sourceOld":"  private void testMultiValuedIntPointFieldsAtomicUpdates(String field, String type) throws Exception {\n    assertU(adoc(sdoc(\"id\", \"1\", field, \"1\")));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", 2))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", 1))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", ImmutableList.of(1, 2, 3)))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='1']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='2']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='3']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n    \n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744b111b17d15d490a648eb021bfa240e7f11556"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["897b06b1364bd1f658a8be7591e43f0851458e7f","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"744b111b17d15d490a648eb021bfa240e7f11556":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["aaf90fc29510e72665ac7934f34c3d1c25efad64","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}