{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","commits":[{"id":"bd5b0696fbde24daf807b2f98cffa838a7c0e159","date":1308394033,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm);\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm);\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edfbc64812ce67598712702d2e4c81bfefccdd57","date":1310457524,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","sourceNew":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)),\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm);\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","sourceNew":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())),\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)),\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkSplitting(Directory,Term,int,int).mjava","sourceNew":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())),\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())),\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    splitter.split();\n    \n    IndexReader ir1 = IndexReader.open(dir1);\n    IndexReader ir2 = IndexReader.open(dir2);\n    assertEquals(leftCount, ir1.numDocs());\n    assertEquals(rightCount, ir2.numDocs());\n    \n    checkContents(ir1, \"1\");\n    checkContents(ir2, \"2\");\n    \n    ir1.close();\n    ir2.close();\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bd5b0696fbde24daf807b2f98cffa838a7c0e159"],"edfbc64812ce67598712702d2e4c81bfefccdd57":["bd5b0696fbde24daf807b2f98cffa838a7c0e159"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["edfbc64812ce67598712702d2e4c81bfefccdd57"],"bd5b0696fbde24daf807b2f98cffa838a7c0e159":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"edfbc64812ce67598712702d2e4c81bfefccdd57":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","bd5b0696fbde24daf807b2f98cffa838a7c0e159"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"bd5b0696fbde24daf807b2f98cffa838a7c0e159":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","edfbc64812ce67598712702d2e4c81bfefccdd57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}