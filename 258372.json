{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_CURRENT,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              Lucene41PostingsWriter.POS_CODEC,\n                              Lucene41PostingsWriter.VERSION_CURRENT,\n                              Lucene41PostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                Lucene41PostingsWriter.PAY_CODEC,\n                                Lucene41PostingsWriter.VERSION_CURRENT,\n                                Lucene41PostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            BlockPostingsWriter.DOC_CODEC,\n                            BlockPostingsWriter.VERSION_CURRENT,\n                            BlockPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              BlockPostingsWriter.POS_CODEC,\n                              BlockPostingsWriter.VERSION_CURRENT,\n                              BlockPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                BlockPostingsWriter.PAY_CODEC,\n                                BlockPostingsWriter.VERSION_CURRENT,\n                                BlockPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e747824826d8d95d8816040f55cfa32233c79c7","date":1350142290,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_CURRENT,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              Lucene41PostingsWriter.POS_CODEC,\n                              Lucene41PostingsWriter.VERSION_CURRENT,\n                              Lucene41PostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                Lucene41PostingsWriter.PAY_CODEC,\n                                Lucene41PostingsWriter.VERSION_CURRENT,\n                                Lucene41PostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_CURRENT,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              Lucene41PostingsWriter.POS_CODEC,\n                              Lucene41PostingsWriter.VERSION_CURRENT,\n                              Lucene41PostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                Lucene41PostingsWriter.PAY_CODEC,\n                                Lucene41PostingsWriter.VERSION_CURRENT,\n                                Lucene41PostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_CURRENT,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              Lucene41PostingsWriter.POS_CODEC,\n                              Lucene41PostingsWriter.VERSION_CURRENT,\n                              Lucene41PostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                Lucene41PostingsWriter.PAY_CODEC,\n                                Lucene41PostingsWriter.VERSION_CURRENT,\n                                Lucene41PostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            BlockPostingsWriter.DOC_CODEC,\n                            BlockPostingsWriter.VERSION_CURRENT,\n                            BlockPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              BlockPostingsWriter.POS_CODEC,\n                              BlockPostingsWriter.VERSION_CURRENT,\n                              BlockPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                BlockPostingsWriter.PAY_CODEC,\n                                BlockPostingsWriter.VERSION_CURRENT,\n                                BlockPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_CURRENT,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              Lucene41PostingsWriter.POS_CODEC,\n                              Lucene41PostingsWriter.VERSION_CURRENT,\n                              Lucene41PostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                Lucene41PostingsWriter.PAY_CODEC,\n                                Lucene41PostingsWriter.VERSION_CURRENT,\n                                Lucene41PostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            BlockPostingsWriter.DOC_CODEC,\n                            BlockPostingsWriter.VERSION_CURRENT,\n                            BlockPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              BlockPostingsWriter.POS_CODEC,\n                              BlockPostingsWriter.VERSION_CURRENT,\n                              BlockPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                BlockPostingsWriter.PAY_CODEC,\n                                BlockPostingsWriter.VERSION_CURRENT,\n                                BlockPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3263230f04a1aa8d431d722fdfce583a9542c18","date":1377603209,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_START,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsWriter.POS_CODEC, version, version);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsWriter.PAY_CODEC, version, version);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_CURRENT,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              Lucene41PostingsWriter.POS_CODEC,\n                              Lucene41PostingsWriter.VERSION_CURRENT,\n                              Lucene41PostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                Lucene41PostingsWriter.PAY_CODEC,\n                                Lucene41PostingsWriter.VERSION_CURRENT,\n                                Lucene41PostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_START,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsWriter.POS_CODEC, version, version);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsWriter.PAY_CODEC, version, version);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_CURRENT,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              Lucene41PostingsWriter.POS_CODEC,\n                              Lucene41PostingsWriter.VERSION_CURRENT,\n                              Lucene41PostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                Lucene41PostingsWriter.PAY_CODEC,\n                                Lucene41PostingsWriter.VERSION_CURRENT,\n                                Lucene41PostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b612f3f700a1ca999f12198b7a33c65b4a96fd0","date":1406127397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_START,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n      \n      if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(docIn);\n      }\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsWriter.POS_CODEC, version, version);\n        \n        if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(posIn);\n        }\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsWriter.PAY_CODEC, version, version);\n          \n          if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n            // NOTE: data file is too costly to verify checksum against all the bytes on open,\n            // but for now we at least verify proper structure of the checksum footer: which looks\n            // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n            // such as file truncation.\n            CodecUtil.retrieveChecksum(payIn);\n          }\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_START,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsWriter.POS_CODEC, version, version);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsWriter.PAY_CODEC, version, version);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsFormat.DOC_CODEC,\n                            Lucene41PostingsFormat.VERSION_START,\n                            Lucene41PostingsFormat.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n      \n      if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(docIn);\n      }\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsFormat.POS_CODEC, version, version);\n        \n        if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(posIn);\n        }\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsFormat.PAY_CODEC, version, version);\n          \n          if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n            // NOTE: data file is too costly to verify checksum against all the bytes on open,\n            // but for now we at least verify proper structure of the checksum footer: which looks\n            // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n            // such as file truncation.\n            CodecUtil.retrieveChecksum(payIn);\n          }\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_START,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n      \n      if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(docIn);\n      }\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsWriter.POS_CODEC, version, version);\n        \n        if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(posIn);\n        }\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsWriter.PAY_CODEC, version, version);\n          \n          if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n            // NOTE: data file is too costly to verify checksum against all the bytes on open,\n            // but for now we at least verify proper structure of the checksum footer: which looks\n            // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n            // such as file truncation.\n            CodecUtil.retrieveChecksum(payIn);\n          }\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsFormat.DOC_CODEC,\n                            Lucene41PostingsFormat.VERSION_START,\n                            Lucene41PostingsFormat.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n      \n      if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(docIn);\n      }\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsFormat.POS_CODEC, version, version);\n        \n        if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(posIn);\n        }\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsFormat.PAY_CODEC, version, version);\n          \n          if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {\n            // NOTE: data file is too costly to verify checksum against all the bytes on open,\n            // but for now we at least verify proper structure of the checksum footer: which looks\n            // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n            // such as file truncation.\n            CodecUtil.retrieveChecksum(payIn);\n          }\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      version = CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_START,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n      \n      if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(docIn);\n      }\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn, Lucene41PostingsWriter.POS_CODEC, version, version);\n        \n        if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(posIn);\n        }\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn, Lucene41PostingsWriter.PAY_CODEC, version, version);\n          \n          if (version >= Lucene41PostingsWriter.VERSION_CHECKSUM) {\n            // NOTE: data file is too costly to verify checksum against all the bytes on open,\n            // but for now we at least verify proper structure of the checksum footer: which looks\n            // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n            // such as file truncation.\n            CodecUtil.retrieveChecksum(payIn);\n          }\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8e747824826d8d95d8816040f55cfa32233c79c7"],"99eb4a732d1a908f4636ace52928876136bf1896":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0","99eb4a732d1a908f4636ace52928876136bf1896"],"8e747824826d8d95d8816040f55cfa32233c79c7":["cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","e3263230f04a1aa8d431d722fdfce583a9542c18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","2f948dd442d23baa6cbb28daf77c8db78b351329","e3263230f04a1aa8d431d722fdfce583a9542c18"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["8e747824826d8d95d8816040f55cfa32233c79c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8e747824826d8d95d8816040f55cfa32233c79c7":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}