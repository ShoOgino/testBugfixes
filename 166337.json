{"path":"lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","sourceNew":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<CloneableObject,Object> c = new DoubleBarrelLRUCache<CloneableObject,Object>(1024);\n\n    CloneableObject[] objs = new CloneableObject[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new CloneableObject(new Object());\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","sourceOld":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<CloneableObject,Object> c = new DoubleBarrelLRUCache<CloneableObject,Object>(1024);\n\n    CloneableObject[] objs = new CloneableObject[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new CloneableObject(new Object());\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","sourceNew":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<CloneableObject,Object> c = new DoubleBarrelLRUCache<>(1024);\n\n    CloneableObject[] objs = new CloneableObject[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new CloneableObject(new Object());\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","sourceOld":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<CloneableObject,Object> c = new DoubleBarrelLRUCache<CloneableObject,Object>(1024);\n\n    CloneableObject[] objs = new CloneableObject[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new CloneableObject(new Object());\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","sourceNew":null,"sourceOld":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<CloneableObject,Object> c = new DoubleBarrelLRUCache<>(1024);\n\n    CloneableObject[] objs = new CloneableObject[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new CloneableObject(new Object());\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","sourceNew":null,"sourceOld":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<CloneableObject,Object> c = new DoubleBarrelLRUCache<>(1024);\n\n    CloneableObject[] objs = new CloneableObject[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new CloneableObject(new Object());\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}