{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testNumericFieldVaryingBPV().mjava","commits":[{"id":"fb9d1512598fc72005b830d5e2b88e61a0f4b374","date":1543843391,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testNumericFieldVaryingBPV().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Triggers varying bits per value codec representation for numeric.\n   */\n  public void testNumericFieldVaryingBPV() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    long generatedSum = 0;\n    for (int bpv = 2 ; bpv < 24 ; bpv+=3) {\n      for (int i = 0 ; i < 66000 ; i++) {\n        Document doc = new Document();\n        int max = 1 << (bpv - 1);\n        int value =  random().nextInt(max) | max;\n        generatedSum += value;\n        //System.out.println(\"--- \" + value);\n        doc.add(new NumericDocValuesField(\"foo\", value));\n        iw.addDocument(doc);\n      }\n    }\n    iw.flush();\n    iw.forceMerge(1, true);\n    iw.commit();\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n\n    // ok\n    NumericDocValues numDV = DocValues.getNumeric(r, \"foo\");\n\n    assertNotNull(numDV);\n    long sum = 0;\n    while (numDV.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      sum += numDV.longValue();\n    }\n    assertEquals(\"The sum of retrieved values should match the input\", generatedSum, sum);\n\n//    assertNotNull(DocValues.getSortedNumeric(r, \"foo\"));\n\n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e","date":1544534277,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testNumericFieldVaryingBPV().mjava","sourceNew":null,"sourceOld":"  /**\n   * Triggers varying bits per value codec representation for numeric.\n   */\n  public void testNumericFieldVaryingBPV() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    long generatedSum = 0;\n    for (int bpv = 2 ; bpv < 24 ; bpv+=3) {\n      for (int i = 0 ; i < 66000 ; i++) {\n        Document doc = new Document();\n        int max = 1 << (bpv - 1);\n        int value =  random().nextInt(max) | max;\n        generatedSum += value;\n        //System.out.println(\"--- \" + value);\n        doc.add(new NumericDocValuesField(\"foo\", value));\n        iw.addDocument(doc);\n      }\n    }\n    iw.flush();\n    iw.forceMerge(1, true);\n    iw.commit();\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n\n    // ok\n    NumericDocValues numDV = DocValues.getNumeric(r, \"foo\");\n\n    assertNotNull(numDV);\n    long sum = 0;\n    while (numDV.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      sum += numDV.longValue();\n    }\n    assertEquals(\"The sum of retrieved values should match the input\", generatedSum, sum);\n\n//    assertNotNull(DocValues.getSortedNumeric(r, \"foo\"));\n\n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testNumericFieldVaryingBPV().mjava","sourceNew":null,"sourceOld":"  /**\n   * Triggers varying bits per value codec representation for numeric.\n   */\n  public void testNumericFieldVaryingBPV() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    long generatedSum = 0;\n    for (int bpv = 2 ; bpv < 24 ; bpv+=3) {\n      for (int i = 0 ; i < 66000 ; i++) {\n        Document doc = new Document();\n        int max = 1 << (bpv - 1);\n        int value =  random().nextInt(max) | max;\n        generatedSum += value;\n        //System.out.println(\"--- \" + value);\n        doc.add(new NumericDocValuesField(\"foo\", value));\n        iw.addDocument(doc);\n      }\n    }\n    iw.flush();\n    iw.forceMerge(1, true);\n    iw.commit();\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n\n    // ok\n    NumericDocValues numDV = DocValues.getNumeric(r, \"foo\");\n\n    assertNotNull(numDV);\n    long sum = 0;\n    while (numDV.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      sum += numDV.longValue();\n    }\n    assertEquals(\"The sum of retrieved values should match the input\", generatedSum, sum);\n\n//    assertNotNull(DocValues.getSortedNumeric(r, \"foo\"));\n\n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["cfd70c9571310639a77f0123aea0db41077d9bb6","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}