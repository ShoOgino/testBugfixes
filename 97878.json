{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","commits":[{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Publish core state to overseer.\n   * @param cd\n   * @param state\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   * @param cd\n   * @param state\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a98541130dbb2dd570f39bd89ced65760cad80","date":1355032328,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02","date":1360357765,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"446d2d126e2d0a9c63a498d792c4072c820c1e95","date":1363304661,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    cd.getCloudDescriptor().lastPublished = state;\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.SHARD_RANGE_PROP, cd.getCloudDescriptor().getShardRange(),\n        ZkStateReader.SHARD_STATE_PROP, cd.getCloudDescriptor().getShardState(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660ba5d2f171f4cff12238ecf42746100549ce63","date":1373483187,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert cd.getCloudDescriptor().getCollectionName() != null && cd.getCloudDescriptor()\n        .getCollectionName().length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.SHARD_RANGE_PROP, cd.getCloudDescriptor().getShardRange(),\n        ZkStateReader.SHARD_STATE_PROP, cd.getCloudDescriptor().getShardState(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.SHARD_RANGE_PROP, cd.getCloudDescriptor().getShardRange(),\n        ZkStateReader.SHARD_STATE_PROP, cd.getCloudDescriptor().getShardState(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert cd.getCloudDescriptor().getCollectionName() != null && cd.getCloudDescriptor()\n        .getCollectionName().length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.SHARD_RANGE_PROP, cd.getCloudDescriptor().getShardRange(),\n        ZkStateReader.SHARD_STATE_PROP, cd.getCloudDescriptor().getShardState(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.SHARD_RANGE_PROP, cd.getCloudDescriptor().getShardRange(),\n        ZkStateReader.SHARD_STATE_PROP, cd.getCloudDescriptor().getShardState(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc841231667f1f315bae6799c068f9aad6543967","date":1381415189,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert cd.getCloudDescriptor().getCollectionName() != null && cd.getCloudDescriptor()\n        .getCollectionName().length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.SHARD_RANGE_PROP, cd.getCloudDescriptor().getShardRange(),\n        ZkStateReader.SHARD_STATE_PROP, cd.getCloudDescriptor().getShardState(),\n        ZkStateReader.SHARD_PARENT_PROP, cd.getCloudDescriptor().getShardParent(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert cd.getCloudDescriptor().getCollectionName() != null && cd.getCloudDescriptor()\n        .getCollectionName().length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.SHARD_RANGE_PROP, cd.getCloudDescriptor().getShardRange(),\n        ZkStateReader.SHARD_STATE_PROP, cd.getCloudDescriptor().getShardState(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e68ffa1d3fb1890f32fe313f88b57877cf76eb87","date":1388983068,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    publish(cd, state, true, false);\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert cd.getCloudDescriptor().getCollectionName() != null && cd.getCloudDescriptor()\n        .getCollectionName().length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.SHARD_RANGE_PROP, cd.getCloudDescriptor().getShardRange(),\n        ZkStateReader.SHARD_STATE_PROP, cd.getCloudDescriptor().getShardState(),\n        ZkStateReader.SHARD_PARENT_PROP, cd.getCloudDescriptor().getShardParent(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["cfc0e98049fd49ebd52a276b8cff7cefa8321b13"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfc0e98049fd49ebd52a276b8cff7cefa8321b13","date":1416824260,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":"  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    publish(cd, state, updateLastState, false);\n  }\n\n","sourceOld":"  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    publish(cd, state, true, false);\n  }\n\n","bugFix":["e68ffa1d3fb1890f32fe313f88b57877cf76eb87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean).mjava","sourceNew":null,"sourceOld":"  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {\n    publish(cd, state, updateLastState, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cfc0e98049fd49ebd52a276b8cff7cefa8321b13":["e68ffa1d3fb1890f32fe313f88b57877cf76eb87"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3","660ba5d2f171f4cff12238ecf42746100549ce63"],"407687e67faf6e1f02a211ca078d8e3eed631027":["1525b4dfbc0d413b8d7247da232009778e624836","f9a98541130dbb2dd570f39bd89ced65760cad80"],"e68ffa1d3fb1890f32fe313f88b57877cf76eb87":["bc841231667f1f315bae6799c068f9aad6543967"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["446d2d126e2d0a9c63a498d792c4072c820c1e95"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["cfc0e98049fd49ebd52a276b8cff7cefa8321b13"],"446d2d126e2d0a9c63a498d792c4072c820c1e95":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02":["f9a98541130dbb2dd570f39bd89ced65760cad80"],"a6378064655e76cd7b908b1cab4ce425b384b508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc841231667f1f315bae6799c068f9aad6543967":["660ba5d2f171f4cff12238ecf42746100549ce63"],"660ba5d2f171f4cff12238ecf42746100549ce63":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"f9a98541130dbb2dd570f39bd89ced65760cad80":["1525b4dfbc0d413b8d7247da232009778e624836"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2126b84bd093fa3d921582a109a0ee578c28126":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","1525b4dfbc0d413b8d7247da232009778e624836"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02"],"1525b4dfbc0d413b8d7247da232009778e624836":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a219f1dcad1700e84807666bdbd2b573e8de7021"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f2126b84bd093fa3d921582a109a0ee578c28126","1525b4dfbc0d413b8d7247da232009778e624836"],"cfc0e98049fd49ebd52a276b8cff7cefa8321b13":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"e68ffa1d3fb1890f32fe313f88b57877cf76eb87":["cfc0e98049fd49ebd52a276b8cff7cefa8321b13"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["37a0f60745e53927c4c876cfe5b5a58170f0646c","660ba5d2f171f4cff12238ecf42746100549ce63"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"446d2d126e2d0a9c63a498d792c4072c820c1e95":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"a6378064655e76cd7b908b1cab4ce425b384b508":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"bc841231667f1f315bae6799c068f9aad6543967":["e68ffa1d3fb1890f32fe313f88b57877cf76eb87"],"660ba5d2f171f4cff12238ecf42746100549ce63":["37a0f60745e53927c4c876cfe5b5a58170f0646c","bc841231667f1f315bae6799c068f9aad6543967"],"f9a98541130dbb2dd570f39bd89ced65760cad80":["407687e67faf6e1f02a211ca078d8e3eed631027","b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6378064655e76cd7b908b1cab4ce425b384b508"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["446d2d126e2d0a9c63a498d792c4072c820c1e95"],"1525b4dfbc0d413b8d7247da232009778e624836":["407687e67faf6e1f02a211ca078d8e3eed631027","f9a98541130dbb2dd570f39bd89ced65760cad80","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}