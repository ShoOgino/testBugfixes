{"path":"src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","commits":[{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"/dev/null","sourceNew":"  public InputStream openResource(String resource) {\n    InputStream is=null;\n    \n    try {\n      File f = new File(resource);\n      if (!f.isAbsolute()) {\n        // try $CWD/solrconf/\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else {\n        // try $CWD\n        f = new File(resource);\n        if (f.isFile() && f.canRead()) {\n          return new FileInputStream(f);\n        }\n      }\n      \n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["643cadd7b2e7141ffb5f3fe8078915e1cb01b3de","643cadd7b2e7141ffb5f3fe8078915e1cb01b3de","643cadd7b2e7141ffb5f3fe8078915e1cb01b3de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  public InputStream openResource(String resource) {\n    InputStream is=null;\n    \n    try {\n      File f = new File(resource);\n      if (!f.isAbsolute()) {\n        // try $CWD/conf/\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else {\n        // try $CWD\n        f = new File(resource);\n        if (f.isFile() && f.canRead()) {\n          return new FileInputStream(f);\n        }\n      }\n      \n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  public InputStream openResource(String resource) {\n    InputStream is=null;\n    \n    try {\n      File f = new File(resource);\n      if (!f.isAbsolute()) {\n        // try $CWD/solrconf/\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else {\n        // try $CWD\n        f = new File(resource);\n        if (f.isFile() && f.canRead()) {\n          return new FileInputStream(f);\n        }\n      }\n      \n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  public InputStream openResource(String resource) {\n    InputStream is=null;\n    \n    try {\n      File f = new File(resource);\n      if (!f.isAbsolute()) {\n        // try $CWD/conf/\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else {\n        // try $CWD\n        f = new File(resource);\n        if (f.isFile() && f.canRead()) {\n          return new FileInputStream(f);\n        }\n      }\n      \n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"048361614025800e582bfc7a7b0329dc6fd6a95e":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"048361614025800e582bfc7a7b0329dc6fd6a95e":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}