{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ClusterDataProvider).mjava","commits":[{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ClusterDataProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ClusterDataProvider cdp) {\n    // for backward compatibility\n    String autoAddReplicas = cdp.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, cdp);\n    ClusterState clusterState;\n    try {\n      clusterState = cdp.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    // for backward compatibility\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ClusterDataProvider).mjava","sourceNew":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    // for backward compatibility\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ClusterDataProvider cdp) {\n    // for backward compatibility\n    String autoAddReplicas = cdp.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, cdp);\n    ClusterState clusterState;\n    try {\n      clusterState = cdp.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b869898f50ca80263bac2e3ae0949f7700e5c977","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}