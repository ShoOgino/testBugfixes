{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}