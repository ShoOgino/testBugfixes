{"path":"src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","commits":[{"id":"80da508d266be0277931540f4d8f7905b54e7432","date":1178761952,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  public void testDynamicCopy() \n  {\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( SolrParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( SolrParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( SolrParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  public void testDynamicCopy() \n  {\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  public void testDynamicCopy() \n  {\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( SolrParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( SolrParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( SolrParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  public void testDynamicCopy() \n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  public void testDynamicCopy() \n  {\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  public void testDynamicCopy() \n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  public void testDynamicCopy() \n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["80da508d266be0277931540f4d8f7905b54e7432"],"6d6338c87060be5f66757a94945975f3bbd377a9":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6d6338c87060be5f66757a94945975f3bbd377a9"],"80da508d266be0277931540f4d8f7905b54e7432":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["6d6338c87060be5f66757a94945975f3bbd377a9"],"6d6338c87060be5f66757a94945975f3bbd377a9":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["80da508d266be0277931540f4d8f7905b54e7432"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"80da508d266be0277931540f4d8f7905b54e7432":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}