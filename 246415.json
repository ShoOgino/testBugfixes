{"path":"contrib/snowball/src/java/net/sf/snowball/ext/EnglishStemmer#r_Step_2().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/snowball/src/java/net/sf/snowball/ext/EnglishStemmer#r_Step_2().mjava","pathOld":"sandbox/contributions/snowball/src/java/net/sf/snowball/ext/EnglishStemmer#r_Step_2().mjava","sourceNew":"        private boolean r_Step_2() {\n            int among_var;\n            // (, line 88\n            // [, line 89\n            ket = cursor;\n            // substring, line 89\n            among_var = find_among_b(a_4, 24);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 89\n            bra = cursor;\n            // call R1, line 89\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 90\n                    // <-, line 90\n                    slice_from(\"tion\");\n                    break;\n                case 2:\n                    // (, line 91\n                    // <-, line 91\n                    slice_from(\"ence\");\n                    break;\n                case 3:\n                    // (, line 92\n                    // <-, line 92\n                    slice_from(\"ance\");\n                    break;\n                case 4:\n                    // (, line 93\n                    // <-, line 93\n                    slice_from(\"able\");\n                    break;\n                case 5:\n                    // (, line 94\n                    // <-, line 94\n                    slice_from(\"ent\");\n                    break;\n                case 6:\n                    // (, line 96\n                    // <-, line 96\n                    slice_from(\"ize\");\n                    break;\n                case 7:\n                    // (, line 98\n                    // <-, line 98\n                    slice_from(\"ate\");\n                    break;\n                case 8:\n                    // (, line 100\n                    // <-, line 100\n                    slice_from(\"al\");\n                    break;\n                case 9:\n                    // (, line 101\n                    // <-, line 101\n                    slice_from(\"ful\");\n                    break;\n                case 10:\n                    // (, line 103\n                    // <-, line 103\n                    slice_from(\"ous\");\n                    break;\n                case 11:\n                    // (, line 105\n                    // <-, line 105\n                    slice_from(\"ive\");\n                    break;\n                case 12:\n                    // (, line 107\n                    // <-, line 107\n                    slice_from(\"ble\");\n                    break;\n                case 13:\n                    // (, line 108\n                    // literal, line 108\n                    if (!(eq_s_b(1, \"l\")))\n                    {\n                        return false;\n                    }\n                    // <-, line 108\n                    slice_from(\"og\");\n                    break;\n                case 14:\n                    // (, line 109\n                    // <-, line 109\n                    slice_from(\"ful\");\n                    break;\n                case 15:\n                    // (, line 110\n                    // <-, line 110\n                    slice_from(\"less\");\n                    break;\n                case 16:\n                    // (, line 111\n                    if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                    {\n                        return false;\n                    }\n                    // delete, line 111\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","sourceOld":"        private boolean r_Step_2() {\n            int among_var;\n            // (, line 88\n            // [, line 89\n            ket = cursor;\n            // substring, line 89\n            among_var = find_among_b(a_4, 24);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 89\n            bra = cursor;\n            // call R1, line 89\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 90\n                    // <-, line 90\n                    slice_from(\"tion\");\n                    break;\n                case 2:\n                    // (, line 91\n                    // <-, line 91\n                    slice_from(\"ence\");\n                    break;\n                case 3:\n                    // (, line 92\n                    // <-, line 92\n                    slice_from(\"ance\");\n                    break;\n                case 4:\n                    // (, line 93\n                    // <-, line 93\n                    slice_from(\"able\");\n                    break;\n                case 5:\n                    // (, line 94\n                    // <-, line 94\n                    slice_from(\"ent\");\n                    break;\n                case 6:\n                    // (, line 96\n                    // <-, line 96\n                    slice_from(\"ize\");\n                    break;\n                case 7:\n                    // (, line 98\n                    // <-, line 98\n                    slice_from(\"ate\");\n                    break;\n                case 8:\n                    // (, line 100\n                    // <-, line 100\n                    slice_from(\"al\");\n                    break;\n                case 9:\n                    // (, line 101\n                    // <-, line 101\n                    slice_from(\"ful\");\n                    break;\n                case 10:\n                    // (, line 103\n                    // <-, line 103\n                    slice_from(\"ous\");\n                    break;\n                case 11:\n                    // (, line 105\n                    // <-, line 105\n                    slice_from(\"ive\");\n                    break;\n                case 12:\n                    // (, line 107\n                    // <-, line 107\n                    slice_from(\"ble\");\n                    break;\n                case 13:\n                    // (, line 108\n                    // literal, line 108\n                    if (!(eq_s_b(1, \"l\")))\n                    {\n                        return false;\n                    }\n                    // <-, line 108\n                    slice_from(\"og\");\n                    break;\n                case 14:\n                    // (, line 109\n                    // <-, line 109\n                    slice_from(\"ful\");\n                    break;\n                case 15:\n                    // (, line 110\n                    // <-, line 110\n                    slice_from(\"less\");\n                    break;\n                case 16:\n                    // (, line 111\n                    if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                    {\n                        return false;\n                    }\n                    // delete, line 111\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b62da6a75575f59a016a076b4753dc6e20c74b44","date":1219528967,"type":5,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/snowball/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","pathOld":"contrib/snowball/src/java/net/sf/snowball/ext/EnglishStemmer#r_Step_2().mjava","sourceNew":"        private boolean r_Step_2() {\n            int among_var;\n            // (, line 99\n            // [, line 100\n            ket = cursor;\n            // substring, line 100\n            among_var = find_among_b(a_5, 24);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 100\n            bra = cursor;\n            // call R1, line 100\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 101\n                    // <-, line 101\n                    slice_from(\"tion\");\n                    break;\n                case 2:\n                    // (, line 102\n                    // <-, line 102\n                    slice_from(\"ence\");\n                    break;\n                case 3:\n                    // (, line 103\n                    // <-, line 103\n                    slice_from(\"ance\");\n                    break;\n                case 4:\n                    // (, line 104\n                    // <-, line 104\n                    slice_from(\"able\");\n                    break;\n                case 5:\n                    // (, line 105\n                    // <-, line 105\n                    slice_from(\"ent\");\n                    break;\n                case 6:\n                    // (, line 107\n                    // <-, line 107\n                    slice_from(\"ize\");\n                    break;\n                case 7:\n                    // (, line 109\n                    // <-, line 109\n                    slice_from(\"ate\");\n                    break;\n                case 8:\n                    // (, line 111\n                    // <-, line 111\n                    slice_from(\"al\");\n                    break;\n                case 9:\n                    // (, line 112\n                    // <-, line 112\n                    slice_from(\"ful\");\n                    break;\n                case 10:\n                    // (, line 114\n                    // <-, line 114\n                    slice_from(\"ous\");\n                    break;\n                case 11:\n                    // (, line 116\n                    // <-, line 116\n                    slice_from(\"ive\");\n                    break;\n                case 12:\n                    // (, line 118\n                    // <-, line 118\n                    slice_from(\"ble\");\n                    break;\n                case 13:\n                    // (, line 119\n                    // literal, line 119\n                    if (!(eq_s_b(1, \"l\")))\n                    {\n                        return false;\n                    }\n                    // <-, line 119\n                    slice_from(\"og\");\n                    break;\n                case 14:\n                    // (, line 120\n                    // <-, line 120\n                    slice_from(\"ful\");\n                    break;\n                case 15:\n                    // (, line 121\n                    // <-, line 121\n                    slice_from(\"less\");\n                    break;\n                case 16:\n                    // (, line 122\n                    if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                    {\n                        return false;\n                    }\n                    // delete, line 122\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","sourceOld":"        private boolean r_Step_2() {\n            int among_var;\n            // (, line 88\n            // [, line 89\n            ket = cursor;\n            // substring, line 89\n            among_var = find_among_b(a_4, 24);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 89\n            bra = cursor;\n            // call R1, line 89\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 90\n                    // <-, line 90\n                    slice_from(\"tion\");\n                    break;\n                case 2:\n                    // (, line 91\n                    // <-, line 91\n                    slice_from(\"ence\");\n                    break;\n                case 3:\n                    // (, line 92\n                    // <-, line 92\n                    slice_from(\"ance\");\n                    break;\n                case 4:\n                    // (, line 93\n                    // <-, line 93\n                    slice_from(\"able\");\n                    break;\n                case 5:\n                    // (, line 94\n                    // <-, line 94\n                    slice_from(\"ent\");\n                    break;\n                case 6:\n                    // (, line 96\n                    // <-, line 96\n                    slice_from(\"ize\");\n                    break;\n                case 7:\n                    // (, line 98\n                    // <-, line 98\n                    slice_from(\"ate\");\n                    break;\n                case 8:\n                    // (, line 100\n                    // <-, line 100\n                    slice_from(\"al\");\n                    break;\n                case 9:\n                    // (, line 101\n                    // <-, line 101\n                    slice_from(\"ful\");\n                    break;\n                case 10:\n                    // (, line 103\n                    // <-, line 103\n                    slice_from(\"ous\");\n                    break;\n                case 11:\n                    // (, line 105\n                    // <-, line 105\n                    slice_from(\"ive\");\n                    break;\n                case 12:\n                    // (, line 107\n                    // <-, line 107\n                    slice_from(\"ble\");\n                    break;\n                case 13:\n                    // (, line 108\n                    // literal, line 108\n                    if (!(eq_s_b(1, \"l\")))\n                    {\n                        return false;\n                    }\n                    // <-, line 108\n                    slice_from(\"og\");\n                    break;\n                case 14:\n                    // (, line 109\n                    // <-, line 109\n                    slice_from(\"ful\");\n                    break;\n                case 15:\n                    // (, line 110\n                    // <-, line 110\n                    slice_from(\"less\");\n                    break;\n                case 16:\n                    // (, line 111\n                    if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                    {\n                        return false;\n                    }\n                    // delete, line 111\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b62da6a75575f59a016a076b4753dc6e20c74b44":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b62da6a75575f59a016a076b4753dc6e20c74b44"]},"commit2Childs":{"b62da6a75575f59a016a076b4753dc6e20c74b44":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["b62da6a75575f59a016a076b4753dc6e20c74b44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}