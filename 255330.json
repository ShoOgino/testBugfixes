{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/email/UAX29URLEmailTokenizerImpl#getNextToken().mjava","commits":[{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":1,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/email/UAX29URLEmailTokenizerImpl#getNextToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl#getNextToken().mjava","sourceNew":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = ZZ_LEXSTATE[zzLexicalState];\n\n      // set up zzAction for empty match case:\n      int zzAttributes = zzAttrL[zzState];\n      if ( (zzAttributes & 1) == 1 ) {\n        zzAction = zzState;\n      }\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL) {\n            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);\n            zzCurrentPosL += Character.charCount(zzInput);\n          }\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);\n              zzCurrentPosL += Character.charCount(zzInput);\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n        zzAtEOF = true;\n            switch (zzLexicalState) {\n            case YYINITIAL: {\n              return YYEOF;\n            }  // fall though\n            case 12893: break;\n            case AVOID_BAD_URL: {\n              return YYEOF;\n            }  // fall though\n            case 12894: break;\n            default:\n        return YYEOF;\n        }\n      }\n      else {\n        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n          case 1: \n            { /* Break so we don't hit fall-through warning: */ break; /* Not numeric, word, ideographic, hiragana, emoji or SE Asian -- ignore it. */\n            } \n            // fall through\n          case 16: break;\n          case 2: \n            { yybegin(YYINITIAL); return EMOJI_TYPE;\n            } \n            // fall through\n          case 17: break;\n          case 3: \n            { yybegin(YYINITIAL); return WORD_TYPE;\n            } \n            // fall through\n          case 18: break;\n          case 4: \n            { yybegin(YYINITIAL); return HANGUL_TYPE;\n            } \n            // fall through\n          case 19: break;\n          case 5: \n            { yybegin(YYINITIAL); return NUMERIC_TYPE;\n            } \n            // fall through\n          case 20: break;\n          case 6: \n            { yybegin(YYINITIAL); return KATAKANA_TYPE;\n            } \n            // fall through\n          case 21: break;\n          case 7: \n            { yybegin(YYINITIAL); return IDEOGRAPHIC_TYPE;\n            } \n            // fall through\n          case 22: break;\n          case 8: \n            { yybegin(YYINITIAL); return HIRAGANA_TYPE;\n            } \n            // fall through\n          case 23: break;\n          case 9: \n            { yybegin(YYINITIAL); return SOUTH_EAST_ASIAN_TYPE;\n            } \n            // fall through\n          case 24: break;\n          case 10: \n            { yybegin(YYINITIAL); return EMAIL_TYPE;\n            } \n            // fall through\n          case 25: break;\n          case 11: \n            { return URL_TYPE;\n            } \n            // fall through\n          case 26: break;\n          case 12: \n            // lookahead expression with fixed lookahead length\n            zzMarkedPos = Character.offsetByCodePoints\n                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);\n            { yybegin(YYINITIAL); return URL_TYPE;\n            } \n            // fall through\n          case 27: break;\n          case 13: \n            // lookahead expression with fixed lookahead length\n            zzMarkedPos = Character.offsetByCodePoints\n                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);\n            { yybegin(AVOID_BAD_URL); yypushback(yylength());\n            } \n            // fall through\n          case 28: break;\n          case 14: \n            { yybegin(YYINITIAL); return URL_TYPE;\n            } \n            // fall through\n          case 29: break;\n          case 15: \n            // lookahead expression with fixed base length\n            zzMarkedPos = Character.offsetByCodePoints\n                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);\n            { yybegin(YYINITIAL); return WORD_TYPE;\n            } \n            // fall through\n          case 30: break;\n          default:\n            zzScanError(ZZ_NO_MATCH);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = ZZ_LEXSTATE[zzLexicalState];\n\n      // set up zzAction for empty match case:\n      int zzAttributes = zzAttrL[zzState];\n      if ( (zzAttributes & 1) == 1 ) {\n        zzAction = zzState;\n      }\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL) {\n            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);\n            zzCurrentPosL += Character.charCount(zzInput);\n          }\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);\n              zzCurrentPosL += Character.charCount(zzInput);\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n        zzAtEOF = true;\n            switch (zzLexicalState) {\n            case YYINITIAL: {\n              return YYEOF;\n            }  // fall though\n            case 12893: break;\n            case AVOID_BAD_URL: {\n              return YYEOF;\n            }  // fall though\n            case 12894: break;\n            default:\n        return YYEOF;\n        }\n      }\n      else {\n        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n          case 1: \n            { /* Break so we don't hit fall-through warning: */ break; /* Not numeric, word, ideographic, hiragana, emoji or SE Asian -- ignore it. */\n            } \n            // fall through\n          case 16: break;\n          case 2: \n            { yybegin(YYINITIAL); return EMOJI_TYPE;\n            } \n            // fall through\n          case 17: break;\n          case 3: \n            { yybegin(YYINITIAL); return WORD_TYPE;\n            } \n            // fall through\n          case 18: break;\n          case 4: \n            { yybegin(YYINITIAL); return HANGUL_TYPE;\n            } \n            // fall through\n          case 19: break;\n          case 5: \n            { yybegin(YYINITIAL); return NUMERIC_TYPE;\n            } \n            // fall through\n          case 20: break;\n          case 6: \n            { yybegin(YYINITIAL); return KATAKANA_TYPE;\n            } \n            // fall through\n          case 21: break;\n          case 7: \n            { yybegin(YYINITIAL); return IDEOGRAPHIC_TYPE;\n            } \n            // fall through\n          case 22: break;\n          case 8: \n            { yybegin(YYINITIAL); return HIRAGANA_TYPE;\n            } \n            // fall through\n          case 23: break;\n          case 9: \n            { yybegin(YYINITIAL); return SOUTH_EAST_ASIAN_TYPE;\n            } \n            // fall through\n          case 24: break;\n          case 10: \n            { yybegin(YYINITIAL); return EMAIL_TYPE;\n            } \n            // fall through\n          case 25: break;\n          case 11: \n            { return URL_TYPE;\n            } \n            // fall through\n          case 26: break;\n          case 12: \n            // lookahead expression with fixed lookahead length\n            zzMarkedPos = Character.offsetByCodePoints\n                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);\n            { yybegin(YYINITIAL); return URL_TYPE;\n            } \n            // fall through\n          case 27: break;\n          case 13: \n            // lookahead expression with fixed lookahead length\n            zzMarkedPos = Character.offsetByCodePoints\n                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);\n            { yybegin(AVOID_BAD_URL); yypushback(yylength());\n            } \n            // fall through\n          case 28: break;\n          case 14: \n            { yybegin(YYINITIAL); return URL_TYPE;\n            } \n            // fall through\n          case 29: break;\n          case 15: \n            // lookahead expression with fixed base length\n            zzMarkedPos = Character.offsetByCodePoints\n                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);\n            { yybegin(YYINITIAL); return WORD_TYPE;\n            } \n            // fall through\n          case 30: break;\n          default:\n            zzScanError(ZZ_NO_MATCH);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"313c36388b6cae6118f75a1860ad0ba0af7e1344":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["313c36388b6cae6118f75a1860ad0ba0af7e1344"]},"commit2Childs":{"313c36388b6cae6118f75a1860ad0ba0af7e1344":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["313c36388b6cae6118f75a1860ad0ba0af7e1344"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}