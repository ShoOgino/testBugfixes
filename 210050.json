{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","commits":[{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","pathOld":"/dev/null","sourceNew":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertTrue(\"Integers should be returned\", tuple.getLong(\"i_sing\") == 11L);\n      assertTrue(\"MV should be returned for i_multi\", tuple.getLongs(\"i_multi\").get(0) == 12);\n      assertTrue(\"MV should be returned for i_multi\", tuple.getLongs(\"i_multi\").get(1) == 13);\n\n      assertTrue(\"longs should be returned\", tuple.getLong(\"l_sing\") == 14L);\n      assertTrue(\"MV should be returned for l_multi\", tuple.getLongs(\"l_multi\").get(0) == 15);\n      assertTrue(\"MV should be returned for l_multi\", tuple.getLongs(\"l_multi\").get(1) == 16);\n\n      assertTrue(\"floats should be returned\", tuple.getDouble(\"f_sing\") == 1.7);\n      assertTrue(\"MV should be returned for f_multi\", tuple.getDoubles(\"f_multi\").get(0) == 1.8);\n      assertTrue(\"MV should be returned for f_multi\", tuple.getDoubles(\"f_multi\").get(1) == 1.9);\n\n      assertTrue(\"doubles should be returned\", tuple.getDouble(\"d_sing\") == 1.2);\n      assertTrue(\"MV should be returned for d_multi\", tuple.getDoubles(\"d_multi\").get(0) == 1.21);\n      assertTrue(\"MV should be returned for d_multi\", tuple.getDoubles(\"d_multi\").get(1) == 1.22);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","pathOld":"/dev/null","sourceNew":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertTrue(\"Integers should be returned\", tuple.getLong(\"i_sing\") == 11L);\n      assertTrue(\"MV should be returned for i_multi\", tuple.getLongs(\"i_multi\").get(0) == 12);\n      assertTrue(\"MV should be returned for i_multi\", tuple.getLongs(\"i_multi\").get(1) == 13);\n\n      assertTrue(\"longs should be returned\", tuple.getLong(\"l_sing\") == 14L);\n      assertTrue(\"MV should be returned for l_multi\", tuple.getLongs(\"l_multi\").get(0) == 15);\n      assertTrue(\"MV should be returned for l_multi\", tuple.getLongs(\"l_multi\").get(1) == 16);\n\n      assertTrue(\"floats should be returned\", tuple.getDouble(\"f_sing\") == 1.7);\n      assertTrue(\"MV should be returned for f_multi\", tuple.getDoubles(\"f_multi\").get(0) == 1.8);\n      assertTrue(\"MV should be returned for f_multi\", tuple.getDoubles(\"f_multi\").get(1) == 1.9);\n\n      assertTrue(\"doubles should be returned\", tuple.getDouble(\"d_sing\") == 1.2);\n      assertTrue(\"MV should be returned for d_multi\", tuple.getDoubles(\"d_multi\").get(0) == 1.21);\n      assertTrue(\"MV should be returned for d_multi\", tuple.getDoubles(\"d_multi\").get(1) == 1.22);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58bb411852ed0249bf624e9fc223b4973776d357","date":1479107017,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","sourceNew":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14,tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\",15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","sourceOld":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertTrue(\"Integers should be returned\", tuple.getLong(\"i_sing\") == 11L);\n      assertTrue(\"MV should be returned for i_multi\", tuple.getLongs(\"i_multi\").get(0) == 12);\n      assertTrue(\"MV should be returned for i_multi\", tuple.getLongs(\"i_multi\").get(1) == 13);\n\n      assertTrue(\"longs should be returned\", tuple.getLong(\"l_sing\") == 14L);\n      assertTrue(\"MV should be returned for l_multi\", tuple.getLongs(\"l_multi\").get(0) == 15);\n      assertTrue(\"MV should be returned for l_multi\", tuple.getLongs(\"l_multi\").get(1) == 16);\n\n      assertTrue(\"floats should be returned\", tuple.getDouble(\"f_sing\") == 1.7);\n      assertTrue(\"MV should be returned for f_multi\", tuple.getDoubles(\"f_multi\").get(0) == 1.8);\n      assertTrue(\"MV should be returned for f_multi\", tuple.getDoubles(\"f_multi\").get(1) == 1.9);\n\n      assertTrue(\"doubles should be returned\", tuple.getDouble(\"d_sing\") == 1.2);\n      assertTrue(\"MV should be returned for d_multi\", tuple.getDoubles(\"d_multi\").get(0) == 1.21);\n      assertTrue(\"MV should be returned for d_multi\", tuple.getDoubles(\"d_multi\").get(1) == 1.22);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcd5c85eb915cc76364e331e44a9040a7638d7ca","date":1479107519,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","sourceNew":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","sourceOld":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14,tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\",15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","sourceNew":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","sourceOld":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertTrue(\"Integers should be returned\", tuple.getLong(\"i_sing\") == 11L);\n      assertTrue(\"MV should be returned for i_multi\", tuple.getLongs(\"i_multi\").get(0) == 12);\n      assertTrue(\"MV should be returned for i_multi\", tuple.getLongs(\"i_multi\").get(1) == 13);\n\n      assertTrue(\"longs should be returned\", tuple.getLong(\"l_sing\") == 14L);\n      assertTrue(\"MV should be returned for l_multi\", tuple.getLongs(\"l_multi\").get(0) == 15);\n      assertTrue(\"MV should be returned for l_multi\", tuple.getLongs(\"l_multi\").get(1) == 16);\n\n      assertTrue(\"floats should be returned\", tuple.getDouble(\"f_sing\") == 1.7);\n      assertTrue(\"MV should be returned for f_multi\", tuple.getDoubles(\"f_multi\").get(0) == 1.8);\n      assertTrue(\"MV should be returned for f_multi\", tuple.getDoubles(\"f_multi\").get(1) == 1.9);\n\n      assertTrue(\"doubles should be returned\", tuple.getDouble(\"d_sing\") == 1.2);\n      assertTrue(\"MV should be returned for d_multi\", tuple.getDoubles(\"d_multi\").get(0) == 1.21);\n      assertTrue(\"MV should be returned for d_multi\", tuple.getDoubles(\"d_multi\").get(1) == 1.22);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","sourceNew":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","sourceOld":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","sourceNew":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","sourceOld":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","sourceNew":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n\n      stream.setStreamContext(streamContext);\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","sourceNew":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n\n      stream.setStreamContext(streamContext);\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#tryWithQt(String).mjava","sourceNew":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\",\n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\",\n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n\n      stream.setStreamContext(streamContext);\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n\n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  // We should be getting the exact same thing back with both the export and select handlers, so test\n  private void tryWithQt(String which) throws IOException {\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \n        \"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi\", \n        \"sort\", \"i_sing asc\");\n    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n\n      stream.setStreamContext(streamContext);\n      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's\n\n      assertEquals(\"Integers should be returned\", 11, tuple.getLong(\"i_sing\").longValue());\n      assertEquals(\"MV should be returned for i_multi\", 12, tuple.getLongs(\"i_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for i_multi\", 13, tuple.getLongs(\"i_multi\").get(1).longValue());\n\n      assertEquals(\"longs should be returned\", 14, tuple.getLong(\"l_sing\").longValue());\n      assertEquals(\"MV should be returned for l_multi\", 15, tuple.getLongs(\"l_multi\").get(0).longValue());\n      assertEquals(\"MV should be returned for l_multi\", 16, tuple.getLongs(\"l_multi\").get(1).longValue());\n\n      assertEquals(\"floats should be returned\", 1.7, tuple.getDouble(\"f_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.8, tuple.getDoubles(\"f_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for f_multi\", 1.9, tuple.getDoubles(\"f_multi\").get(1).doubleValue(), 0.001);\n\n      assertEquals(\"doubles should be returned\", 1.2, tuple.getDouble(\"d_sing\").doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.21, tuple.getDoubles(\"d_multi\").get(0).doubleValue(), 0.001);\n      assertEquals(\"MV should be returned for d_multi\", 1.22, tuple.getDoubles(\"d_multi\").get(1).doubleValue(), 0.001);\n\n      assertTrue(\"Strings should be returned\", tuple.getString(\"s_sing\").equals(\"single\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(0).equals(\"sm1\"));\n      assertTrue(\"MV should be returned for s_multi\", tuple.getStrings(\"s_multi\").get(1).equals(\"sm2\"));\n\n      assertTrue(\"Dates should be returned as Strings\", tuple.getString(\"dt_sing\").equals(\"1980-01-02T11:11:33.890Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(0).equals(\"1981-03-04T01:02:03.780Z\"));\n      assertTrue(\"MV dates should be returned as Strings for dt_multi\", tuple.getStrings(\"dt_multi\").get(1).equals(\"1981-05-24T04:05:06.990Z\"));\n\n      // Also test native type conversion\n      Date dt = new Date(Instant.parse(\"1980-01-02T11:11:33.890Z\").toEpochMilli());\n      assertTrue(\"Dates should be returned as Dates\", tuple.getDate(\"dt_sing\").equals(dt));\n      dt = new Date(Instant.parse(\"1981-03-04T01:02:03.780Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates for dt_multi\", tuple.getDates(\"dt_multi\").get(0).equals(dt));\n      dt = new Date(Instant.parse(\"1981-05-24T04:05:06.990Z\").toEpochMilli());\n      assertTrue(\"MV dates should be returned as Dates  for dt_multi\", tuple.getDates(\"dt_multi\").get(1).equals(dt));\n      \n      assertTrue(\"Booleans should be returned\", tuple.getBool(\"b_sing\"));\n      assertFalse(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(0));\n      assertTrue(\"MV boolean should be returned for b_multi\", tuple.getBools(\"b_multi\").get(1));\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"dcd5c85eb915cc76364e331e44a9040a7638d7ca":["58bb411852ed0249bf624e9fc223b4973776d357"],"c8243e301531f97de264740d6afa71de6781dd64":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dcd5c85eb915cc76364e331e44a9040a7638d7ca"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["dcd5c85eb915cc76364e331e44a9040a7638d7ca"],"58bb411852ed0249bf624e9fc223b4973776d357":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70d9c44f68e848648da304352cf7c045c33148f4"],"70d9c44f68e848648da304352cf7c045c33148f4":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"dcd5c85eb915cc76364e331e44a9040a7638d7ca":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["58bb411852ed0249bf624e9fc223b4973776d357","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["70d9c44f68e848648da304352cf7c045c33148f4"],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"58bb411852ed0249bf624e9fc223b4973776d357":["dcd5c85eb915cc76364e331e44a9040a7638d7ca"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8243e301531f97de264740d6afa71de6781dd64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"70d9c44f68e848648da304352cf7c045c33148f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}