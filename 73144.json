{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","sourceNew":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","sourceNew":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","sourceNew":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9499b09dd7d06d975f31e59a9b00653a86f9cad2","date":1343325589,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","sourceNew":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link #reloadLuceneSPI()}\n   * before using this ResourceLoader.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","sourceNew":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link #reloadLuceneSPI()}\n   * before using this ResourceLoader.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","sourceNew":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link #reloadLuceneSPI()}\n   * before using this ResourceLoader.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","sourceNew":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link #reloadLuceneSPI()}\n   * before using this ResourceLoader.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              @Override\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link #reloadLuceneSPI()}\n   * before using this ResourceLoader.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","sourceNew":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link #reloadLuceneSPI()}\n   * before using this ResourceLoader.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              @Override\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link #reloadLuceneSPI()}\n   * before using this ResourceLoader.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5268b3b46fa91a88e4d8fdd00f16f42577e6da11","date":1368012863,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds the specific file/dir specified to the ClassLoader used by this\n   * ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link #reloadLuceneSPI()}\n   * before using this ResourceLoader.\n   *\n   * @param path A jar file (or directory of classes) to be added to the classpath,\n   *             will be resolved relative the instance dir.\n   */\n  void addToClassLoader(final String path) {\n    final File file = FileUtils.resolvePath(new File(getInstanceDir()), path);\n    if (file.canRead()) {\n      this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),\n                                            new FileFilter() {\n                                              @Override\n                                              public boolean accept(File pathname) {\n                                                return pathname.equals(file);\n                                              }\n                                            });\n    } else {\n      log.error(\"Can't find (or read) file to add to classloader: \" + file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["9499b09dd7d06d975f31e59a9b00653a86f9cad2","7530de27b87b961b51f01bd1299b7004d46e8823"],"5268b3b46fa91a88e4d8fdd00f16f42577e6da11":["7530de27b87b961b51f01bd1299b7004d46e8823"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c26f00b574427b55127e869b935845554afde1fa","9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"9499b09dd7d06d975f31e59a9b00653a86f9cad2":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c26f00b574427b55127e869b935845554afde1fa","9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5268b3b46fa91a88e4d8fdd00f16f42577e6da11"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"5268b3b46fa91a88e4d8fdd00f16f42577e6da11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"9499b09dd7d06d975f31e59a9b00653a86f9cad2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["aba371508186796cc6151d8223a5b4e16d02e26e","9499b09dd7d06d975f31e59a9b00653a86f9cad2","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","5268b3b46fa91a88e4d8fdd00f16f42577e6da11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}