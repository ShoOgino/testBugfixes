{"path":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,byte[]).mjava","commits":[{"id":"b4d01dd8bb594fcd007a358009375967f9333d0a","date":1425496373,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, byte[] data) {\n\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), ByteBuffer.wrap(data));\n        log.info(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        log.info(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82d485dfb2d8c31baefb7ef96b64021a1ffa170","date":1425903839,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,byte[]).mjava","sourceNew":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.info(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.info(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, byte[] data) {\n\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), ByteBuffer.wrap(data));\n        log.info(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        log.info(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["b4d01dd8bb594fcd007a358009375967f9333d0a"],"b4d01dd8bb594fcd007a358009375967f9333d0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"]},"commit2Childs":{"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4d01dd8bb594fcd007a358009375967f9333d0a":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4d01dd8bb594fcd007a358009375967f9333d0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}