{"path":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","pathOld":"/dev/null","sourceNew":"  public SpanWeight(SpanQuery query, Searcher searcher) {\n    this.searcher = searcher;\n    this.query = query;\n    this.terms = query.getTerms();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, Searcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    this.terms = query.getTerms();\n\n    idf = this.query.getSimilarity(searcher).idf(terms, searcher);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, Searcher searcher) {\n    this.searcher = searcher;\n    this.query = query;\n    this.terms = query.getTerms();\n  }\n\n","bugFix":null,"bugIntro":["f8da75c64a26663199511eef8db650621ed89107"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8ffcb189c2837199f985ea0374daf7bb94e20cd","date":1143665447,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, Searcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    terms=new HashSet();\n    query.extractTerms(terms);\n\n    idf = this.query.getSimilarity(searcher).idf(terms, searcher);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, Searcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    this.terms = query.getTerms();\n\n    idf = this.query.getSimilarity(searcher).idf(terms, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8da75c64a26663199511eef8db650621ed89107","date":1251204606,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, Searcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    terms=new HashSet();\n    query.extractTerms(terms);\n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, Searcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    terms=new HashSet();\n    query.extractTerms(terms);\n\n    idf = this.query.getSimilarity(searcher).idf(terms, searcher);\n  }\n\n","bugFix":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, Searcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, Searcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    terms=new HashSet();\n    query.extractTerms(terms);\n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, Searcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, Searcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"402061809f3a4629ea0c449e33e9f94a9772f3c3":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"ef82ff03e4016c705811b2658e81471a645c0e49":["f8da75c64a26663199511eef8db650621ed89107"],"f8da75c64a26663199511eef8db650621ed89107":["d8ffcb189c2837199f985ea0374daf7bb94e20cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8ffcb189c2837199f985ea0374daf7bb94e20cd":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"402061809f3a4629ea0c449e33e9f94a9772f3c3":["d8ffcb189c2837199f985ea0374daf7bb94e20cd"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f8da75c64a26663199511eef8db650621ed89107":["ef82ff03e4016c705811b2658e81471a645c0e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"d8ffcb189c2837199f985ea0374daf7bb94e20cd":["f8da75c64a26663199511eef8db650621ed89107"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}