{"path":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 1, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new DocValuesField(\"dv\", 2, DocValues.Type.VAR_INTS));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ff79ec5acd6ad7b57378052a20e3cf8a975493f","date":1336830542,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testDocValues().mjava","sourceNew":null,"sourceOld":"  public void testDocValues() throws IOException {\n    assumeFalse(\"preflex does not support docvalues\", Codec.getDefault().getName().equals(\"Lucene3x\"));\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ff79ec5acd6ad7b57378052a20e3cf8a975493f":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ff79ec5acd6ad7b57378052a20e3cf8a975493f"]},"commit2Childs":{"3ff79ec5acd6ad7b57378052a20e3cf8a975493f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["3ff79ec5acd6ad7b57378052a20e3cf8a975493f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}