{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","commits":[{"id":"a00c801e9678a87ab9d8f373daa9d1955a4c4cee","date":1514982555,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","pathOld":"/dev/null","sourceNew":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl, startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events\", ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops, ops >= 40);\n    return delta;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"278895e10265b1174eef1ab0be0cbeba446484a4","date":1515420497,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","sourceNew":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire\n    boolean await = triggerFiredLatch.await(10 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","sourceOld":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl, startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events\", ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops, ops >= 40);\n    return delta;\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","pathOld":"/dev/null","sourceNew":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire\n    boolean await = triggerFiredLatch.await(10 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","sourceNew":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire\n    boolean await = triggerFiredLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","sourceOld":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire\n    boolean await = triggerFiredLatch.await(10 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1294fc81133ad1c53ea75edf471f5bea39621e68","date":1528194755,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","sourceNew":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger3',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire at least once\n    boolean await = triggerFinishedLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitFor * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(waitFor * 10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","sourceOld":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire\n    boolean await = triggerFiredLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","sourceNew":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger3',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire at least once\n    boolean await = triggerFinishedLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitFor * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(waitFor * 10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","sourceOld":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire\n    boolean await = triggerFiredLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","sourceNew":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger3',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire at least once\n    boolean await = triggerFinishedLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitFor * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(waitFor * 10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","sourceOld":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire\n    boolean await = triggerFiredLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","sourceNew":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger3',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'failures',\" +\n        \"'trigger' : 'node_lost_trigger3',\" +\n        \"'stage' : ['FAILED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10, false, true)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire and complete at least once\n    boolean await = triggerFinishedLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    // we can expect some failures when target node in MOVEREPLICA has been killed\n    // between when the event processing started and the actual moment of MOVEREPLICA execution\n    // wait until started == (finished + failed)\n    TimeOut timeOut = new TimeOut(20 * waitFor * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      log.debug(\"started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get() +\n          \", failed=\" + listenerEvents.size());\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() > triggerFinishedCount.get() + listenerEvents.size()) {\n        fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get() +\n            \", failed=\" + listenerEvents.size());\n      }\n    }\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    if (listenerEvents.isEmpty()) {\n      // no failed movements - verify collection shape\n      log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10, false, true)) + \" ms\");\n    } else {\n      cluster.getTimeSource().sleep(NUM_NODES * 100);\n    }\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(waitFor * 10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    long expectedMinOps = 40;\n    if (!listenerEvents.isEmpty()) {\n      expectedMinOps = 20;\n    }\n    assertTrue(\"unexpected number (\" + expectedMinOps + \") of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= expectedMinOps);\n    return delta;\n  }\n\n","sourceOld":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger3',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire at least once\n    boolean await = triggerFinishedLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitFor * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(waitFor * 10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= 40);\n    return delta;\n  }\n\n","bugFix":["278895e10265b1174eef1ab0be0cbeba446484a4","9c6c0dad4932399aec99b4818086cb1772773916","1294fc81133ad1c53ea75edf471f5bea39621e68"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#doTestNodeLost(int,long,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#doTestNodeLost(int,long,int).mjava","sourceNew":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger3',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'failures',\" +\n        \"'trigger' : 'node_lost_trigger3',\" +\n        \"'stage' : ['FAILED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10, false, true)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire and complete at least once\n    boolean await = triggerFinishedLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    // we can expect some failures when target node in MOVEREPLICA has been killed\n    // between when the event processing started and the actual moment of MOVEREPLICA execution\n    // wait until started == (finished + failed)\n    TimeOut timeOut = new TimeOut(20 * waitFor * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      log.debug(\"started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get() +\n          \", failed=\" + listenerEvents.size());\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() > triggerFinishedCount.get() + listenerEvents.size()) {\n        fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get() +\n            \", failed=\" + listenerEvents.size());\n      }\n    }\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    if (listenerEvents.isEmpty()) {\n      // no failed movements - verify collection shape\n      log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10, false, true)) + \" ms\");\n    } else {\n      cluster.getTimeSource().sleep(NUM_NODES * 100);\n    }\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(waitFor * 10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    long expectedMinOps = 40;\n    if (!listenerEvents.isEmpty()) {\n      expectedMinOps = 20;\n    }\n    assertTrue(\"unexpected number (\" + expectedMinOps + \") of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= expectedMinOps);\n    return delta;\n  }\n\n","sourceOld":"  private long doTestNodeLost(int waitFor, long killDelay, int minIgnored) throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger3',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitFor + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'failures',\" +\n        \"'trigger' : 'node_lost_trigger3',\" +\n        \"'stage' : ['FAILED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10, false, true)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(killDelay);\n    }\n    // wait for the trigger to fire and complete at least once\n    boolean await = triggerFinishedLatch.await(20 * waitFor * 1000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire within timeout, \" +\n        \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n        await);\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n          startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    // we can expect some failures when target node in MOVEREPLICA has been killed\n    // between when the event processing started and the actual moment of MOVEREPLICA execution\n    // wait until started == (finished + failed)\n    TimeOut timeOut = new TimeOut(20 * waitFor * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      log.debug(\"started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get() +\n          \", failed=\" + listenerEvents.size());\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() > triggerFinishedCount.get() + listenerEvents.size()) {\n        fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get() +\n            \", failed=\" + listenerEvents.size());\n      }\n    }\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"should be at least \" + minIgnored + \" IGNORED events, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ignored >= minIgnored);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops? \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    if (listenerEvents.isEmpty()) {\n      // no failed movements - verify collection shape\n      log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(NUM_NODES / 5, NUM_NODES / 10, false, true)) + \" ms\");\n    } else {\n      cluster.getTimeSource().sleep(NUM_NODES * 100);\n    }\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(waitFor * 10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger3\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes, \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    delta = TimeUnit.NANOSECONDS.toMillis(delta);\n    log.info(\"#### System stabilized after \" + delta + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    long expectedMinOps = 40;\n    if (!listenerEvents.isEmpty()) {\n      expectedMinOps = 20;\n    }\n    assertTrue(\"unexpected number (\" + expectedMinOps + \") of MOVEREPLICA ops: \" + ops + \", \" +\n            \"waitFor=\" + waitFor + \", killDelay=\" + killDelay + \", minIgnored=\" + minIgnored,\n            ops >= expectedMinOps);\n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["1294fc81133ad1c53ea75edf471f5bea39621e68"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"9c6c0dad4932399aec99b4818086cb1772773916":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","278895e10265b1174eef1ab0be0cbeba446484a4"],"278895e10265b1174eef1ab0be0cbeba446484a4":["a00c801e9678a87ab9d8f373daa9d1955a4c4cee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["9c6c0dad4932399aec99b4818086cb1772773916","1294fc81133ad1c53ea75edf471f5bea39621e68"],"1294fc81133ad1c53ea75edf471f5bea39621e68":["9c6c0dad4932399aec99b4818086cb1772773916"],"f592209545c71895260367152601e9200399776d":["9c6c0dad4932399aec99b4818086cb1772773916","1294fc81133ad1c53ea75edf471f5bea39621e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a00c801e9678a87ab9d8f373daa9d1955a4c4cee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c6c0dad4932399aec99b4818086cb1772773916":["b70042a8a492f7054d480ccdd2be9796510d4327","1294fc81133ad1c53ea75edf471f5bea39621e68","f592209545c71895260367152601e9200399776d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["9c6c0dad4932399aec99b4818086cb1772773916"],"278895e10265b1174eef1ab0be0cbeba446484a4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a00c801e9678a87ab9d8f373daa9d1955a4c4cee"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"1294fc81133ad1c53ea75edf471f5bea39621e68":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"a00c801e9678a87ab9d8f373daa9d1955a4c4cee":["278895e10265b1174eef1ab0be0cbeba446484a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}