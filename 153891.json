{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","commits":[{"id":"762c80e29fe0c3bb83aabe2e64af6379273cec7b","date":1484347562,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","date":1499084229,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":5,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","sourceNew":null,"sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"30c8e5574b55d57947e989443dfde611646530ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","cc018b79379c67835b40b1259cd3dc931df60944"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["30c8e5574b55d57947e989443dfde611646530ee"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","cc018b79379c67835b40b1259cd3dc931df60944","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","507e7decdf00981d09a74632ea30299a4ce6ba72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","507e7decdf00981d09a74632ea30299a4ce6ba72"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["cc018b79379c67835b40b1259cd3dc931df60944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}