{"path":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","pathOld":"/dev/null","sourceNew":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath + \" ...\");\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dbf14a58688f4f8d0fa6375733fbe8cfed9aac43"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"106069d345c14ee5c76f0ea76397b02a656f883c","date":1411998064,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","sourceNew":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath + \" ...\");\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this, -1);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","sourceOld":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath + \" ...\");\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["dbf14a58688f4f8d0fa6375733fbe8cfed9aac43"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1596015c8bad249c0b9a52182de1d47e1d56fdde","date":1412350121,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","sourceNew":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this, -1);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","sourceOld":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath + \" ...\");\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this, -1);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","sourceNew":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this, -1);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","sourceOld":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath + \" ...\");\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","date":1460654262,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","sourceNew":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n\n          if (ZkIndexSchemaReader.this.isRemoved) {\n            return; // the core for this reader has already been removed, don't process this event\n          }\n\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this, -1);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","sourceOld":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this, -1);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["dbf14a58688f4f8d0fa6375733fbe8cfed9aac43"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbf14a58688f4f8d0fa6375733fbe8cfed9aac43","date":1498572460,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","sourceNew":"  /**\n   * Creates a schema watcher and returns it for controlling purposes.\n   * \n   * @return the registered {@linkplain SchemaWatcher}.\n   */\n  public SchemaWatcher createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    SchemaWatcher watcher = new SchemaWatcher(this);\n    try {\n      zkClient.exists(managedSchemaPath, watcher, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n    \n    return watcher;\n  }\n\n","sourceOld":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n\n          if (ZkIndexSchemaReader.this.isRemoved) {\n            return; // the core for this reader has already been removed, don't process this event\n          }\n\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this, -1);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","bugFix":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","106069d345c14ee5c76f0ea76397b02a656f883c","08970e5b8411182a29412c177eff67ec1110095b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","sourceNew":"  /**\n   * Creates a schema watcher and returns it for controlling purposes.\n   * \n   * @return the registered {@linkplain SchemaWatcher}.\n   */\n  public SchemaWatcher createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    SchemaWatcher watcher = new SchemaWatcher(this);\n    try {\n      zkClient.exists(managedSchemaPath, watcher, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n    \n    return watcher;\n  }\n\n","sourceOld":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n\n          if (ZkIndexSchemaReader.this.isRemoved) {\n            return; // the core for this reader has already been removed, don't process this event\n          }\n\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this, -1);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","sourceNew":"  /**\n   * Creates a schema watcher and returns it for controlling purposes.\n   * \n   * @return the registered {@linkplain SchemaWatcher}.\n   */\n  public SchemaWatcher createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    SchemaWatcher watcher = new SchemaWatcher(this);\n    try {\n      zkClient.exists(managedSchemaPath, watcher, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n    \n    return watcher;\n  }\n\n","sourceOld":"  public void createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    try {\n      zkClient.exists(managedSchemaPath, new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n\n          if (ZkIndexSchemaReader.this.isRemoved) {\n            return; // the core for this reader has already been removed, don't process this event\n          }\n\n          // session events are not change events, and do not remove the watcher\n          if (Event.EventType.None.equals(event.getType())) {\n            return;\n          }\n          log.info(\"A schema change: {}, has occurred - updating schema from ZooKeeper ...\", event);\n          try {\n            updateSchema(this, -1);\n          } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.warn(\"\", e);\n          }\n        }\n      }, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#createSchemaWatcher().mjava","sourceNew":"  /**\n   * Creates a schema watcher and returns it for controlling purposes.\n   * \n   * @return the registered {@linkplain SchemaWatcher}.\n   */\n  public SchemaWatcher createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at {}\", managedSchemaPath);\n\n    SchemaWatcher watcher = new SchemaWatcher(this);\n    try {\n      zkClient.exists(managedSchemaPath, watcher, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n    \n    return watcher;\n  }\n\n","sourceOld":"  /**\n   * Creates a schema watcher and returns it for controlling purposes.\n   * \n   * @return the registered {@linkplain SchemaWatcher}.\n   */\n  public SchemaWatcher createSchemaWatcher() {\n    log.info(\"Creating ZooKeeper watch for the managed schema at \" + managedSchemaPath);\n\n    SchemaWatcher watcher = new SchemaWatcher(this);\n    try {\n      zkClient.exists(managedSchemaPath, watcher, true);\n    } catch (KeeperException e) {\n      final String msg = \"Error creating ZooKeeper watch for the managed schema\";\n      log.error(msg, e);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n    \n    return watcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1596015c8bad249c0b9a52182de1d47e1d56fdde":["106069d345c14ee5c76f0ea76397b02a656f883c"],"dbf14a58688f4f8d0fa6375733fbe8cfed9aac43":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["08970e5b8411182a29412c177eff67ec1110095b","1596015c8bad249c0b9a52182de1d47e1d56fdde"],"106069d345c14ee5c76f0ea76397b02a656f883c":["08970e5b8411182a29412c177eff67ec1110095b"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["1596015c8bad249c0b9a52182de1d47e1d56fdde"],"28288370235ed02234a64753cdbf0c6ec096304a":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","dbf14a58688f4f8d0fa6375733fbe8cfed9aac43"],"98f11c416d30e556e0004a9a84960702d12d35b1":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","dbf14a58688f4f8d0fa6375733fbe8cfed9aac43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["28288370235ed02234a64753cdbf0c6ec096304a"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1596015c8bad249c0b9a52182de1d47e1d56fdde":["d9a47902d6207303f5ed3e7aaca62ca33433af66","29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"dbf14a58688f4f8d0fa6375733fbe8cfed9aac43":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"106069d345c14ee5c76f0ea76397b02a656f883c":["1596015c8bad249c0b9a52182de1d47e1d56fdde"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["dbf14a58688f4f8d0fa6375733fbe8cfed9aac43","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["9df8125ba9193a2e2e285ed92157810b1952a244"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"08970e5b8411182a29412c177eff67ec1110095b":["d9a47902d6207303f5ed3e7aaca62ca33433af66","106069d345c14ee5c76f0ea76397b02a656f883c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}