{"path":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#assertConsistentReplicas(Slice).mjava","commits":[{"id":"138bba875d696cd48f61b681050026222022e937","date":1473262610,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#assertConsistentReplicas(Slice).mjava","pathOld":"/dev/null","sourceNew":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#assertConsistentReplicas(Slice).mjava","pathOld":"/dev/null","sourceNew":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#assertConsistentReplicas(Slice).mjava","pathOld":"/dev/null","sourceNew":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#assertConsistentReplicas(Slice).mjava","pathOld":"/dev/null","sourceNew":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#assertConsistentReplicas(Slice).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#assertConsistentReplicas(Slice).mjava","sourceNew":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#assertConsistentReplicas(Slice).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#assertConsistentReplicas(Slice).mjava","sourceNew":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"138bba875d696cd48f61b681050026222022e937":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","138bba875d696cd48f61b681050026222022e937"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"138bba875d696cd48f61b681050026222022e937":["89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["138bba875d696cd48f61b681050026222022e937","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}