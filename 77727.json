{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#HdfsFileWriter(FileSystem,Path).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#HdfsFileWriter(FileSystem,Path).mjava","pathOld":"/dev/null","sourceNew":"  public HdfsFileWriter(FileSystem fileSystem, Path path) throws IOException {\n    LOG.debug(\"Creating writer on {}\", path);\n    this.path = path;\n    \n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    outputStream = fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), fsDefaults.getReplication(), fsDefaults\n        .getBlockSize(), null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#HdfsFileWriter(FileSystem,Path).mjava","pathOld":"/dev/null","sourceNew":"  public HdfsFileWriter(FileSystem fileSystem, Path path) throws IOException {\n    LOG.debug(\"Creating writer on {}\", path);\n    this.path = path;\n    \n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    outputStream = fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), fsDefaults.getReplication(), fsDefaults\n        .getBlockSize(), null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce1e2aee8b16573bc0d091471e4660d140b5823","date":1400533696,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#HdfsFileWriter(FileSystem,Path).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#HdfsFileWriter(FileSystem,Path).mjava","sourceNew":"  public HdfsFileWriter(FileSystem fileSystem, Path path) throws IOException {\n    super(getOutputStream(fileSystem, path), BUFFER_SIZE);\n  }\n\n","sourceOld":"  public HdfsFileWriter(FileSystem fileSystem, Path path) throws IOException {\n    LOG.debug(\"Creating writer on {}\", path);\n    this.path = path;\n    \n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    outputStream = fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), fsDefaults.getReplication(), fsDefaults\n        .getBlockSize(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#HdfsFileWriter(FileSystem,Path).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#HdfsFileWriter(FileSystem,Path).mjava","sourceNew":"  public HdfsFileWriter(FileSystem fileSystem, Path path) throws IOException {\n    super(getOutputStream(fileSystem, path), BUFFER_SIZE);\n  }\n\n","sourceOld":"  public HdfsFileWriter(FileSystem fileSystem, Path path) throws IOException {\n    LOG.debug(\"Creating writer on {}\", path);\n    this.path = path;\n    \n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    outputStream = fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), fsDefaults.getReplication(), fsDefaults\n        .getBlockSize(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8833cc981e4be2dcfe8c6b5ca2781c59e1124a60","date":1417468898,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#HdfsFileWriter(FileSystem,Path).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#HdfsFileWriter(FileSystem,Path).mjava","sourceNew":"  public HdfsFileWriter(FileSystem fileSystem, Path path) throws IOException {\n    super(\"fileSystem=\" + fileSystem + \" path=\" + path, getOutputStream(fileSystem, path), BUFFER_SIZE);\n  }\n\n","sourceOld":"  public HdfsFileWriter(FileSystem fileSystem, Path path) throws IOException {\n    super(getOutputStream(fileSystem, path), BUFFER_SIZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#HdfsFileWriter(FileSystem,Path).mjava","sourceNew":null,"sourceOld":"  public HdfsFileWriter(FileSystem fileSystem, Path path) throws IOException {\n    super(\"fileSystem=\" + fileSystem + \" path=\" + path, getOutputStream(fileSystem, path), BUFFER_SIZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8833cc981e4be2dcfe8c6b5ca2781c59e1124a60":["bce1e2aee8b16573bc0d091471e4660d140b5823"],"b7605579001505896d48b07160075a5c8b8e128e":["849494cf2f3a96af5c8c84995108ddd8456fcd04","bce1e2aee8b16573bc0d091471e4660d140b5823"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8833cc981e4be2dcfe8c6b5ca2781c59e1124a60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["8833cc981e4be2dcfe8c6b5ca2781c59e1124a60","b7605579001505896d48b07160075a5c8b8e128e"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["bce1e2aee8b16573bc0d091471e4660d140b5823","37a0f60745e53927c4c876cfe5b5a58170f0646c","b7605579001505896d48b07160075a5c8b8e128e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"8833cc981e4be2dcfe8c6b5ca2781c59e1124a60":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"b7605579001505896d48b07160075a5c8b8e128e":[],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}