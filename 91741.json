{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9fddef147e9702c85a51239935df11e5338bfbf","date":1337590651,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      Thread ct = Thread.currentThread();\n      ClassLoader prev = ct.getContextClassLoader();\n      try {\n        ct.setContextClassLoader(core.getResourceLoader().getClassLoader());\n        return clustersToNamedList(controller.process(attributes,\n                clusteringAlgorithmClass).getClusters(), sreq.getParams());\n      } finally {\n        ct.setContextClassLoader(prev);\n      }\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":["a5684446f7742dfb07c42296decc5e4d6515a0fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      Thread ct = Thread.currentThread();\n      ClassLoader prev = ct.getContextClassLoader();\n      try {\n        ct.setContextClassLoader(core.getResourceLoader().getClassLoader());\n        return clustersToNamedList(controller.process(attributes,\n                clusteringAlgorithmClass).getClusters(), sreq.getParams());\n      } finally {\n        ct.setContextClassLoader(prev);\n      }\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2f15ce56e25538825682a41ccb854c1d82e0e95","date":1378972163,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n  \n      // Pass the fields on which clustering runs.\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n  \n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n  \n      // Perform clustering and convert to an output structure of clusters.\n      //\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      Thread ct = Thread.currentThread();\n      ClassLoader prev = ct.getContextClassLoader();\n      try {\n        ct.setContextClassLoader(core.getResourceLoader().getClassLoader());\n        return clustersToNamedList(controller.process(attributes,\n                clusteringAlgorithmClass).getClusters(), sreq.getParams());\n      } finally {\n        ct.setContextClassLoader(prev);\n      }\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      Thread ct = Thread.currentThread();\n      ClassLoader prev = ct.getContextClassLoader();\n      try {\n        ct.setContextClassLoader(core.getResourceLoader().getClassLoader());\n        return clustersToNamedList(controller.process(attributes,\n                clusteringAlgorithmClass).getClusters(), sreq.getParams());\n      } finally {\n        ct.setContextClassLoader(prev);\n      }\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n  \n      // Pass the fields on which clustering runs.\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n  \n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n  \n      // Perform clustering and convert to an output structure of clusters.\n      //\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      Thread ct = Thread.currentThread();\n      ClassLoader prev = ct.getContextClassLoader();\n      try {\n        ct.setContextClassLoader(core.getResourceLoader().getClassLoader());\n        return clustersToNamedList(controller.process(attributes,\n                clusteringAlgorithmClass).getClusters(), sreq.getParams());\n      } finally {\n        ct.setContextClassLoader(prev);\n      }\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n  \n      // Pass the fields on which clustering runs.\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n  \n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n  \n      // Perform clustering and convert to an output structure of clusters.\n      //\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      Thread ct = Thread.currentThread();\n      ClassLoader prev = ct.getContextClassLoader();\n      try {\n        ct.setContextClassLoader(core.getResourceLoader().getClassLoader());\n        return clustersToNamedList(controller.process(attributes,\n                clusteringAlgorithmClass).getClusters(), sreq.getParams());\n      } finally {\n        ct.setContextClassLoader(prev);\n      }\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a2748831fb25b0e9d5a4c315047bf877c887460","date":1498155650,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n  \n      // Pass the fields on which clustering runs.\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n  \n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n  \n      // Perform clustering and convert to an output structure of clusters.\n      //\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      return withContextClassLoader(core.getResourceLoader().getClassLoader(),\n          () -> clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams()));\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n  \n      // Pass the fields on which clustering runs.\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n  \n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n  \n      // Perform clustering and convert to an output structure of clusters.\n      //\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      Thread ct = Thread.currentThread();\n      ClassLoader prev = ct.getContextClassLoader();\n      try {\n        ct.setContextClassLoader(core.getResourceLoader().getClassLoader());\n        return clustersToNamedList(controller.process(attributes,\n                clusteringAlgorithmClass).getClusters(), sreq.getParams());\n      } finally {\n        ct.setContextClassLoader(prev);\n      }\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n  \n      // Pass the fields on which clustering runs.\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n  \n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n  \n      // Perform clustering and convert to an output structure of clusters.\n      //\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      return withContextClassLoader(core.getResourceLoader().getClassLoader(),\n          () -> clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams()));\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n  \n      // Pass the fields on which clustering runs.\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n  \n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n  \n      // Perform clustering and convert to an output structure of clusters.\n      //\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      Thread ct = Thread.currentThread();\n      ClassLoader prev = ct.getContextClassLoader();\n      try {\n        ct.setContextClassLoader(core.getResourceLoader().getClassLoader());\n        return clustersToNamedList(controller.process(attributes,\n                clusteringAlgorithmClass).getClusters(), sreq.getParams());\n      } finally {\n        ct.setContextClassLoader(prev);\n      }\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n  \n      // Pass the fields on which clustering runs.\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n  \n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n  \n      // Perform clustering and convert to an output structure of clusters.\n      //\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      return withContextClassLoader(core.getResourceLoader().getClassLoader(),\n          () -> clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams()));\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n  \n      // Pass the fields on which clustering runs.\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n  \n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n  \n      // Perform clustering and convert to an output structure of clusters.\n      //\n      // Carrot2 uses current thread's context class loader to get\n      // certain classes (e.g. custom tokenizer/stemmer) at runtime.\n      // To make sure classes from contrib JARs are available,\n      // we swap the context class loader for the time of clustering.\n      Thread ct = Thread.currentThread();\n      ClassLoader prev = ct.getContextClassLoader();\n      try {\n        ct.setContextClassLoader(core.getResourceLoader().getClassLoader());\n        return clustersToNamedList(controller.process(attributes,\n                clusteringAlgorithmClass).getClusters(), sreq.getParams());\n      } finally {\n        ct.setContextClassLoader(prev);\n      }\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c2f15ce56e25538825682a41ccb854c1d82e0e95"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c2f15ce56e25538825682a41ccb854c1d82e0e95":["f9fddef147e9702c85a51239935df11e5338bfbf"],"f9fddef147e9702c85a51239935df11e5338bfbf":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5a2748831fb25b0e9d5a4c315047bf877c887460"],"28288370235ed02234a64753cdbf0c6ec096304a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5a2748831fb25b0e9d5a4c315047bf877c887460"],"ef0d8a69209261514c5739c770bba706c2308450":["c26f00b574427b55127e869b935845554afde1fa","f9fddef147e9702c85a51239935df11e5338bfbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5a2748831fb25b0e9d5a4c315047bf877c887460","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c2f15ce56e25538825682a41ccb854c1d82e0e95":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f9fddef147e9702c85a51239935df11e5338bfbf":["c2f15ce56e25538825682a41ccb854c1d82e0e95","ef0d8a69209261514c5739c770bba706c2308450"],"c26f00b574427b55127e869b935845554afde1fa":["f9fddef147e9702c85a51239935df11e5338bfbf","ef0d8a69209261514c5739c770bba706c2308450"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}