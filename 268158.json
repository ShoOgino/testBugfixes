{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","commits":[{"id":"a0e7f034148bf1a0b59356cdec1f02d862a0b642","date":1424531537,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n    return new TwoPhaseDocIdSetIterator() {\n      @Override\n      public DocIdSetIterator approximation() {\n        return new DocIdSetIterator() {\n          @Override\n          public int docID() {\n            return SloppyPhraseScorer.this.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(max.doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            assert target > docID();\n            if (!advanceMin(target)) {\n              return NO_MORE_DOCS;\n            }\n            while (min.doc < max.doc) {\n              if (!advanceMin(max.doc)) {\n                return NO_MORE_DOCS;\n              }\n            }\n            return max.doc;\n          }\n\n          @Override\n          public long cost() {\n            return SloppyPhraseScorer.this.cost();\n          }\n        };\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54562c0e8e43530c289ddd16a9d75bc1901fd7b0","date":1424714129,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n    return new TwoPhaseDocIdSetIterator() {\n      @Override\n      public DocIdSetIterator approximation() {\n        return conjunction;\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n    return new TwoPhaseDocIdSetIterator() {\n      @Override\n      public DocIdSetIterator approximation() {\n        return new DocIdSetIterator() {\n          @Override\n          public int docID() {\n            return SloppyPhraseScorer.this.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(max.doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            assert target > docID();\n            if (!advanceMin(target)) {\n              return NO_MORE_DOCS;\n            }\n            while (min.doc < max.doc) {\n              if (!advanceMin(max.doc)) {\n                return NO_MORE_DOCS;\n              }\n            }\n            return max.doc;\n          }\n\n          @Override\n          public long cost() {\n            return SloppyPhraseScorer.this.cost();\n          }\n        };\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return new TwoPhaseIterator() {\n      @Override\n      public DocIdSetIterator approximation() {\n        return conjunction;\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n    return new TwoPhaseDocIdSetIterator() {\n      @Override\n      public DocIdSetIterator approximation() {\n        return conjunction;\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6b1be5d2b36d6a30913778ef61374103d55e33","date":1427303640,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return new TwoPhaseIterator(conjunction) {\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return new TwoPhaseIterator() {\n      @Override\n      public DocIdSetIterator approximation() {\n        return conjunction;\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return new TwoPhaseIterator(conjunction) {\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n    return new TwoPhaseDocIdSetIterator() {\n      @Override\n      public DocIdSetIterator approximation() {\n        return conjunction;\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return new TwoPhaseIterator(conjunction) {\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n\n      @Override\n      public String toString() {\n        return \"SloppyPhraseScorer@asTwoPhaseIterator(\" + SloppyPhraseScorer.this + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return new TwoPhaseIterator(conjunction) {\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    return new TwoPhaseIterator(conjunction) {\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n\n      @Override\n      public String toString() {\n        return \"SloppyPhraseScorer@asTwoPhaseIterator(\" + SloppyPhraseScorer.this + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return new TwoPhaseIterator(conjunction) {\n      @Override\n      public boolean matches() throws IOException {\n        sloppyFreq = phraseFreq(); // check for phrase\n        return sloppyFreq != 0F;\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n\n      @Override\n      public String toString() {\n        return \"SloppyPhraseScorer@asTwoPhaseIterator(\" + SloppyPhraseScorer.this + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["a3d6eb0072094d94624002318ba2d4c840946833"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["54562c0e8e43530c289ddd16a9d75bc1901fd7b0","7a6b1be5d2b36d6a30913778ef61374103d55e33"],"54562c0e8e43530c289ddd16a9d75bc1901fd7b0":["a0e7f034148bf1a0b59356cdec1f02d862a0b642"],"a0e7f034148bf1a0b59356cdec1f02d862a0b642":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d6eb0072094d94624002318ba2d4c840946833":["54562c0e8e43530c289ddd16a9d75bc1901fd7b0"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["d277693481ea6007c1d83cd503d0859bb3b64d20","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"54562c0e8e43530c289ddd16a9d75bc1901fd7b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3d6eb0072094d94624002318ba2d4c840946833"],"a0e7f034148bf1a0b59356cdec1f02d862a0b642":["54562c0e8e43530c289ddd16a9d75bc1901fd7b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0e7f034148bf1a0b59356cdec1f02d862a0b642"],"a3d6eb0072094d94624002318ba2d4c840946833":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}