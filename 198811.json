{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#addPosition(int,BytesRef,int,int).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastEndOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastEndOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastEndOffset = endOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == blockSize) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaLBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthLBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaLBuffer, payOut);\n        writeBlock(offsetLengthLBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f81e20fb7784c464473faba4f1fdd4f775e8ee87","date":1343937502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == blockSize) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaLBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthLBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaLBuffer, payOut);\n        writeBlock(offsetLengthLBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastEndOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastEndOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastEndOffset = endOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == blockSize) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaLBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthLBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaLBuffer, payOut);\n        writeBlock(offsetLengthLBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n//    if (DEBUG) {\n//      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n//    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      ForUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        ForUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        ForUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        ForUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == blockSize) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaLBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthLBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaLBuffer, payOut);\n        writeBlock(offsetLengthLBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf88b0fdab72e7a3389fdd9a68ae252142c41511","date":1344435322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n//    if (DEBUG) {\n//      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n//    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n//    if (DEBUG) {\n//      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n//    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      ForUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        ForUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        ForUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        ForUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":null,"sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n//    if (DEBUG) {\n//      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n//    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}