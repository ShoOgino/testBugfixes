{"path":"backwards/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"/dev/null","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}