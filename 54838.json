{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String,boolean).mjava","commits":[{"id":"08e881a61d5dffc3a403f2892fb747aca86bab0c","date":1479199723,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private SolrCore getCoreByCollection(String collectionName, boolean isPreferLeader) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    if (isPreferLeader) {\n      List<Replica> leaderReplicas = collection.getLeaderReplicas(cores.getZkController().getNodeName());\n      SolrCore core = randomlyGetSolrCore(liveNodes, leaderReplicas);\n      if (core != null) return core;\n    }\n\n    List<Replica> replicas = collection.getReplicas(cores.getZkController().getNodeName());\n    return randomlyGetSolrCore(liveNodes, replicas);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21019aa828c8c9b0153877543a8b3f200bf2ca19","date":1479224450,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private SolrCore getCoreByCollection(String collectionName, boolean isPreferLeader) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    if (isPreferLeader) {\n      List<Replica> leaderReplicas = collection.getLeaderReplicas(cores.getZkController().getNodeName());\n      SolrCore core = randomlyGetSolrCore(liveNodes, leaderReplicas);\n      if (core != null) return core;\n    }\n\n    List<Replica> replicas = collection.getReplicas(cores.getZkController().getNodeName());\n    return randomlyGetSolrCore(liveNodes, replicas);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String,boolean).mjava","sourceNew":"  protected SolrCore getCoreByCollection(String collectionName, boolean isPreferLeader) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    if (isPreferLeader) {\n      List<Replica> leaderReplicas = collection.getLeaderReplicas(cores.getZkController().getNodeName());\n      SolrCore core = randomlyGetSolrCore(liveNodes, leaderReplicas);\n      if (core != null) return core;\n    }\n\n    List<Replica> replicas = collection.getReplicas(cores.getZkController().getNodeName());\n    return randomlyGetSolrCore(liveNodes, replicas);\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(String collectionName, boolean isPreferLeader) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    if (isPreferLeader) {\n      List<Replica> leaderReplicas = collection.getLeaderReplicas(cores.getZkController().getNodeName());\n      SolrCore core = randomlyGetSolrCore(liveNodes, leaderReplicas);\n      if (core != null) return core;\n    }\n\n    List<Replica> replicas = collection.getReplicas(cores.getZkController().getNodeName());\n    return randomlyGetSolrCore(liveNodes, replicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String,boolean).mjava","sourceNew":"  protected SolrCore getCoreByCollection(String collectionName, boolean isPreferLeader) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    if (isPreferLeader) {\n      List<Replica> leaderReplicas = collection.getLeaderReplicas(cores.getZkController().getNodeName());\n      SolrCore core = randomlyGetSolrCore(liveNodes, leaderReplicas);\n      if (core != null) return core;\n    }\n\n    List<Replica> replicas = collection.getReplicas(cores.getZkController().getNodeName());\n    return randomlyGetSolrCore(liveNodes, replicas);\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(String collectionName, boolean isPreferLeader) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    if (isPreferLeader) {\n      List<Replica> leaderReplicas = collection.getLeaderReplicas(cores.getZkController().getNodeName());\n      SolrCore core = randomlyGetSolrCore(liveNodes, leaderReplicas);\n      if (core != null) return core;\n    }\n\n    List<Replica> replicas = collection.getReplicas(cores.getZkController().getNodeName());\n    return randomlyGetSolrCore(liveNodes, replicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413","date":1519539873,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String,boolean).mjava","sourceNew":"  protected SolrCore getCoreByCollection(String collectionName, boolean isPreferLeader) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName, true);\n    if (collection == null) {\n      return null;\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    if (isPreferLeader) {\n      List<Replica> leaderReplicas = collection.getLeaderReplicas(cores.getZkController().getNodeName());\n      SolrCore core = randomlyGetSolrCore(liveNodes, leaderReplicas);\n      if (core != null) return core;\n    }\n\n    List<Replica> replicas = collection.getReplicas(cores.getZkController().getNodeName());\n    return randomlyGetSolrCore(liveNodes, replicas);\n  }\n\n","sourceOld":"  protected SolrCore getCoreByCollection(String collectionName, boolean isPreferLeader) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    if (isPreferLeader) {\n      List<Replica> leaderReplicas = collection.getLeaderReplicas(cores.getZkController().getNodeName());\n      SolrCore core = randomlyGetSolrCore(liveNodes, leaderReplicas);\n      if (core != null) return core;\n    }\n\n    List<Replica> replicas = collection.getReplicas(cores.getZkController().getNodeName());\n    return randomlyGetSolrCore(liveNodes, replicas);\n  }\n\n","bugFix":["08e881a61d5dffc3a403f2892fb747aca86bab0c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08e881a61d5dffc3a403f2892fb747aca86bab0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08e881a61d5dffc3a403f2892fb747aca86bab0c"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["08e881a61d5dffc3a403f2892fb747aca86bab0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["21019aa828c8c9b0153877543a8b3f200bf2ca19","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413"]},"commit2Childs":{"08e881a61d5dffc3a403f2892fb747aca86bab0c":["21019aa828c8c9b0153877543a8b3f200bf2ca19","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08e881a61d5dffc3a403f2892fb747aca86bab0c","21019aa828c8c9b0153877543a8b3f200bf2ca19"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}